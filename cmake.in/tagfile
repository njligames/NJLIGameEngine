<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>btPrint.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/bullet/</path>
    <filename>bt_print_8h</filename>
    <member kind="variable">
      <type>const btVector3</type>
      <name>btVector3Zero</name>
      <anchorfile>bt_print_8h.html</anchorfile>
      <anchor>a3de89e5dacc9afea6e4cf7bc2445df2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>btVector2.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/bullet/</path>
    <filename>bt_vector2_8h</filename>
    <class kind="class">btVector2</class>
    <class kind="struct">btVector2FloatData</class>
    <class kind="struct">btVector2DoubleData</class>
    <member kind="define">
      <type>#define</type>
      <name>btVector2Data</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a3dad7bbfe1455991d0d73a8de2c4ce9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btVector2DataName</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a36437b0af0d2f1abb6ca92d5673e3992</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator+</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>af6989b4fe48afd2de4454b45b57c9574</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator-</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>aba066a908040d3e2924d9370656e0606</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator*</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a9ee4eefbf6401ebb84e52fec256da2d7</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator-</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>ac425bd14ba9de4f4e7569769cffaa314</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator*</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a3131f5e4210f9d0b8a9c02d5b65355a3</anchor>
      <arglist>(const btScalar &amp;s, const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator*</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a472c00597899de4511f569bccaf8ed3d</anchor>
      <arglist>(const btVector2 &amp;v, const btScalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator/</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>ad12b6bb113f38fbeebfeab0a303c7ab0</anchor>
      <arglist>(const btVector2 &amp;v, const btScalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE bool</type>
      <name>operator==</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>acaf4e8d54a898bec90f42f0fdcb1336e</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE bool</type>
      <name>operator!=</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>aafa329d7a684cda5b1fa5020535ea50e</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>dot</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>af12dd3320caf8613204378c580f18266</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance2</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>abe71773fb21aca4751a4784d7c1a56b6</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a2efa3ceeb4084aca7754ff742262af97</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator+</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>af6989b4fe48afd2de4454b45b57c9574</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator-</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>aba066a908040d3e2924d9370656e0606</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator*</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a9ee4eefbf6401ebb84e52fec256da2d7</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator-</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>ac425bd14ba9de4f4e7569769cffaa314</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator*</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a3131f5e4210f9d0b8a9c02d5b65355a3</anchor>
      <arglist>(const btScalar &amp;s, const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator*</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a472c00597899de4511f569bccaf8ed3d</anchor>
      <arglist>(const btVector2 &amp;v, const btScalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>operator/</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>ad12b6bb113f38fbeebfeab0a303c7ab0</anchor>
      <arglist>(const btVector2 &amp;v, const btScalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE bool</type>
      <name>operator==</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>acaf4e8d54a898bec90f42f0fdcb1336e</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE bool</type>
      <name>operator!=</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>aafa329d7a684cda5b1fa5020535ea50e</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>dot</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>af12dd3320caf8613204378c580f18266</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance2</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>abe71773fb21aca4751a4784d7c1a56b6</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance</name>
      <anchorfile>bt_vector2_8h.html</anchorfile>
      <anchor>a2efa3ceeb4084aca7754ff742262af97</anchor>
      <arglist>(const btVector2 &amp;v1, const btVector2 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lualoadexts.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/</path>
    <filename>lualoadexts_8h</filename>
    <includes id="lauxlib_8h" name="lauxlib.h" local="yes" imported="no">lauxlib.h</includes>
    <member kind="function">
      <type>void</type>
      <name>luax_loadexts</name>
      <anchorfile>lualoadexts_8h.html</anchorfile>
      <anchor>a91d51be69e2fe54e7d6bc5f03eeb7487</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>auxiliar.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>auxiliar_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="lauxlib_8h" name="lauxlib.h" local="yes" imported="no">lauxlib.h</includes>
    <includes id="compat_8h" name="compat.h" local="yes" imported="no">compat.h</includes>
    <member kind="function">
      <type>int</type>
      <name>auxiliar_open</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a4008892016de52cc5de8168fac1589f2</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auxiliar_newclass</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a7d332755741419285bb744bec6e26628</anchor>
      <arglist>(lua_State *L, const char *classname, luaL_Reg *func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auxiliar_add2group</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a4c8ad6ce95f76f0604d1b91f088c8fe3</anchor>
      <arglist>(lua_State *L, const char *classname, const char *group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>auxiliar_setclass</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a03ea04adfe4fa48b73d069d9d74f8e9b</anchor>
      <arglist>(lua_State *L, const char *classname, int objidx)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>auxiliar_checkclass</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a23e388d53705dcb9894b46e4dc62300b</anchor>
      <arglist>(lua_State *L, const char *classname, int objidx)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>auxiliar_checkgroup</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a4c4c35f983e22822ed9f5d51dc13ee0f</anchor>
      <arglist>(lua_State *L, const char *groupname, int objidx)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>auxiliar_getclassudata</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a956a23884ad0d1f01c748d1f5451bf60</anchor>
      <arglist>(lua_State *L, const char *groupname, int objidx)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>auxiliar_getgroupudata</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>ad6d1001a838fca9fbb24ad6a032351d9</anchor>
      <arglist>(lua_State *L, const char *groupname, int objidx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>auxiliar_checkboolean</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>a778a1618e33136507a5f8d13bb17cb93</anchor>
      <arglist>(lua_State *L, int objidx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>auxiliar_tostring</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>ad539f100a7e61edf3e59f58b0e872c3e</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>auxiliar_typeerror</name>
      <anchorfile>auxiliar_8h.html</anchorfile>
      <anchor>ab2f8baf3a2b691163d2f164784f8dab4</anchor>
      <arglist>(lua_State *L, int narg, const char *tname)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>buffer.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>buffer_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="io_8h" name="io.h" local="yes" imported="no">io.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <class kind="struct">t_buffer_</class>
    <member kind="define">
      <type>#define</type>
      <name>BUF_SIZE</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a6821bafc3c88dfb2e433a095df9940c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct t_buffer_</type>
      <name>t_buffer</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a480d55c4717df930ce4bb3bdce15d178</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_buffer *</type>
      <name>p_buffer</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a68c0f7fbed826e53a20a5125f1a38f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>buffer_open</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a8d4565e0cba8a16a17a41d181985618d</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buffer_init</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a20a712c94503ebb7057fe1d40505524c</anchor>
      <arglist>(p_buffer buf, p_io io, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>buffer_meth_send</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a2c36b4568522670df3c1dbbb8410930d</anchor>
      <arglist>(lua_State *L, p_buffer buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>buffer_meth_receive</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>ac4aab8caec1bffa8c53c9d5e4aac9842</anchor>
      <arglist>(lua_State *L, p_buffer buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>buffer_meth_getstats</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a714504dce9d547211fd5f1ae7b3e7d9d</anchor>
      <arglist>(lua_State *L, p_buffer buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>buffer_meth_setstats</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>a3bf80be0ff15e04a4b32b3938a36b8ae</anchor>
      <arglist>(lua_State *L, p_buffer buf)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>buffer_isempty</name>
      <anchorfile>buffer_8h.html</anchorfile>
      <anchor>ac48929a8ba61b3810b01e3e427ab649b</anchor>
      <arglist>(p_buffer buf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>compat.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>compat_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="lauxlib_8h" name="lauxlib.h" local="yes" imported="no">lauxlib.h</includes>
  </compound>
  <compound kind="file">
    <name>except.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>except_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="function">
      <type>int</type>
      <name>except_open</name>
      <anchorfile>except_8h.html</anchorfile>
      <anchor>a2b808b103db2c3bf0bdb8606ad4ca70c</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inet.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>inet_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="socket_8h" name="socket.h" local="yes" imported="no">socket.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <member kind="function">
      <type>int</type>
      <name>inet_open</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a52224889c00d693cdb9b827489d54d62</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>inet_trycreate</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>af02c73975639308fd360103e880f6263</anchor>
      <arglist>(p_socket ps, int family, int type, int protocol)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>inet_tryconnect</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a87317778ee91a82ff62f12b2f4b1c99c</anchor>
      <arglist>(p_socket ps, int *family, const char *address, const char *serv, p_timeout tm, struct addrinfo *connecthints)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>inet_trybind</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>aee9e8f59e78a8f5d2f5c952d87c4367f</anchor>
      <arglist>(p_socket ps, int *family, const char *address, const char *serv, struct addrinfo *bindhints)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>inet_trydisconnect</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a05e7e812a8c17f20f3d361beb112e052</anchor>
      <arglist>(p_socket ps, int family, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>inet_tryaccept</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>aeff221decb0039d9ce4ad84434357ed1</anchor>
      <arglist>(p_socket server, int family, p_socket client, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inet_meth_getpeername</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a9e73005e2177f6a94d7fc0f5f234ddb8</anchor>
      <arglist>(lua_State *L, p_socket ps, int family)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inet_meth_getsockname</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a5ce1673c652574f617aae535953d94ae</anchor>
      <arglist>(lua_State *L, p_socket ps, int family)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inet_optfamily</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a0c144bfa3270c1f22717d59c3037147b</anchor>
      <arglist>(lua_State *L, int narg, const char *def)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>inet_optsocktype</name>
      <anchorfile>inet_8h.html</anchorfile>
      <anchor>a85613a054563a6778e41df249e6401ff</anchor>
      <arglist>(lua_State *L, int narg, const char *def)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>io_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <class kind="struct">t_io_</class>
    <member kind="typedef">
      <type>const char *(*</type>
      <name>p_error</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a0f1ffd0c3645ce51637f7bcb2a25f9d9</anchor>
      <arglist>)(void *ctx, int err)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>p_send</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a92b34371f559bb395ad68266e4f11958</anchor>
      <arglist>)(void *ctx, const char *data, size_t count, size_t *sent, p_timeout tm)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>p_recv</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>ae79219d07faf603c44b1f65c973cd9e5</anchor>
      <arglist>)(void *ctx, char *data, size_t count, size_t *got, p_timeout tm)</arglist>
    </member>
    <member kind="typedef">
      <type>struct t_io_</type>
      <name>t_io</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>ab607a7b5d17beb8128b90d0a4bd3b33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_io *</type>
      <name>p_io</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>ad13f6d82d2a098ae255d1632ad58d17b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_DONE</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba921f4299d46687837964ee18046b5db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_TIMEOUT</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55ba26d3f600deefcc1940e70cde0a363fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_CLOSED</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bad75354ea25b1b344ec95ec971d3b0c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IO_UNKNOWN</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a06fc87d81c62e9abb8790b6e5713c55bafdb02b106a752a312d496234e82cfb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>io_init</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>a4cf4a50ad35a1fccd49d9212f6d3104f</anchor>
      <arglist>(p_io io, p_send send, p_recv recv, p_error error, void *ctx)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>io_strerror</name>
      <anchorfile>io_8h.html</anchorfile>
      <anchor>aaddce415a1160952e568956eca8030e8</anchor>
      <arglist>(int err)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>luasocket.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>luasocket_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LUASOCKET_VERSION</name>
      <anchorfile>luasocket_8h.html</anchorfile>
      <anchor>aa7e00b74f9863aa9f2cc23b02619c765</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUASOCKET_COPYRIGHT</name>
      <anchorfile>luasocket_8h.html</anchorfile>
      <anchor>a24db914050339b7af9e58dcd39b76c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUASOCKET_API</name>
      <anchorfile>luasocket_8h.html</anchorfile>
      <anchor>ac38b8c901c7a6723df2def65cf3cd38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUASOCKET_API int</type>
      <name>luaopen_socket_core</name>
      <anchorfile>luasocket_8h.html</anchorfile>
      <anchor>ab55f52ed6449248382d5aeff1089cb53</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mime.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>mime_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>MIME_VERSION</name>
      <anchorfile>mime_8h.html</anchorfile>
      <anchor>a33dbe4b1dcede11c9dacc79826164685</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIME_COPYRIGHT</name>
      <anchorfile>mime_8h.html</anchorfile>
      <anchor>ab09ece87846035e75820575757f97b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIME_AUTHORS</name>
      <anchorfile>mime_8h.html</anchorfile>
      <anchor>a7f1e20ba75cae04fff81b5bec07a2a6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIME_API</name>
      <anchorfile>mime_8h.html</anchorfile>
      <anchor>af36c4965cd523c07f89ad7a8c18edb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MIME_API int</type>
      <name>luaopen_mime_core</name>
      <anchorfile>mime_8h.html</anchorfile>
      <anchor>aee1fed71dcf081b01e194f20e91fa2e2</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>options.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>options_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="socket_8h" name="socket.h" local="yes" imported="no">socket.h</includes>
    <class kind="struct">t_opt</class>
    <member kind="typedef">
      <type>struct t_opt</type>
      <name>t_opt</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a7092408423cb3823397aee49cb9713ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_opt *</type>
      <name>p_opt</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a21afd8c5dc78a5536d9900112fd1d2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_dontroute</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a5ab32a43f5b00b1ead45260dd62b86a1</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_broadcast</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a1d55edcccefce0f9a5425434d894b259</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_tcp_nodelay</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>adbacd3b01cef755c833f3b67563cacdd</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_keepalive</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a9d61a38869cf072e20d452fd95bca33f</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_linger</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>af51263bd667ef43a930e61548bf7df4e</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_reuseaddr</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a9566c8d69c0f6c29e82d768c64823c72</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_reuseport</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>af1b31f21ad6952c6b7494d3064284e60</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip_multicast_if</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a64254c2614bffe6cacba62a74d6a0d63</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip_multicast_ttl</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a0eda17b0d382aa6e14245dc6d47022e4</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip_multicast_loop</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a839fbe913772d36d0032427ad4b9cddb</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip_add_membership</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a67011ceb4c4f228abd5136d5ced0fc08</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip_drop_membersip</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a357621a6d40e4eb7d468f7c4ea8ce414</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip6_unicast_hops</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a80cf9620c820201038e2d6c66960fac2</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip6_multicast_hops</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>ae11eed47e9ff756aa181654ac1110544</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip6_multicast_loop</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>aa67c7064f284aee428df2457eced5cc1</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip6_add_membership</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>ae515fa886056cb6ed0ba8786fdb1532c</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip6_drop_membersip</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a5d3ee0805dc8752fafed44772ba20bff</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_set_ip6_v6only</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>ab9368d700b2c2fbc35fe2f5b7de22eb3</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_dontroute</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a15ec9333cfa66ad45e30e8bd3dac3671</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_broadcast</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a1f48192e3bffbcad97d13a95ec1887e5</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_reuseaddr</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a8ae1f1b433ceeab78da78d96aade2ec0</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_reuseport</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a7e691409c54bd2ec5df788af5a1429b2</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_tcp_nodelay</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a66b559597405a5d66fd5d65f5eba901a</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_keepalive</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>ab5e98e4dde6e2c7f9ab4a26ed9fa301d</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_linger</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a7b9230de0e195d1828bbac64f5ce5ec0</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_ip_multicast_loop</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a959de031f0e8a4420fb9e1cc0b611864</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_ip_multicast_if</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>ac40ee564eb40d12e2423b7775b035a50</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_error</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a2cff1123febd90d3e737ad59c5773ba8</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_ip6_multicast_loop</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a6c061f4af43b3ae01271d8f383470f88</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_ip6_multicast_hops</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>aee3c473612d43442817e977d21ebefa6</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_ip6_unicast_hops</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a4004ea5844e4c95f0e2427c66d81b455</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_get_ip6_v6only</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a20a9b87c9792000048554802891318f9</anchor>
      <arglist>(lua_State *L, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_meth_setoption</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a7b992bd2f40cfa81785031061581e13c</anchor>
      <arglist>(lua_State *L, p_opt opt, p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opt_meth_getoption</name>
      <anchorfile>options_8h.html</anchorfile>
      <anchor>a464847248b6ac2683ff34ca507007729</anchor>
      <arglist>(lua_State *L, p_opt opt, p_socket ps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pierror.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>pierror_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>PIE_HOST_NOT_FOUND</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a7b5f3c502e81e8aaea56928c5ae0b9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_ADDRINUSE</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>ad42f376dc64d3e517b4bfa7cc1190f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_ISCONN</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>ae7046e63bfedce3e5a8c94aad1d73f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_ACCESS</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a14d9458bb679456115fb751950c4c491</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_CONNREFUSED</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>accb36485ee80ef3825a3e2438b61f081</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_CONNABORTED</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>ad22cec86b83bab3e3c22a8eddc604b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_CONNRESET</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>af8020ba17a1bca4ec9788c2bb76daa50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_TIMEDOUT</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>af2eb0b66a1ef5c90c7f590f32b41b81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_AGAIN</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a58801fa8d2ae0451d4f148910b39d029</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_BADFLAGS</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a46225569e41e0317f65a4df0fcab3768</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_BADHINTS</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>aa6c0f37d86b941bcd55b0182abd6c689</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_FAIL</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>ae2227273382341eb30fe01a45575e3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_FAMILY</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>ac010ea50b334dc17627b9a6cea5e0203</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_MEMORY</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a8907e79ffbb30cccf4e8fbda494a1b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_NONAME</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a9985ca78f2e771ec1d9aeb927fad7ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_OVERFLOW</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a6a6d807357aa4fa51933ec025862b9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_PROTOCOL</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a0d0beed089ae284f44fc62f901ac9591</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_SERVICE</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a73cc09758ae11586432918b97d5dc38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PIE_SOCKTYPE</name>
      <anchorfile>pierror_8h.html</anchorfile>
      <anchor>a679c1b339622d20b29a0e20147c23ae6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>select.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>select_8h</filename>
    <member kind="function">
      <type>int</type>
      <name>select_open</name>
      <anchorfile>select_8h.html</anchorfile>
      <anchor>a93b28556529f50cc2bb519330b0ba4c7</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>socket.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>socket_8h</filename>
    <includes id="io_8h" name="io.h" local="yes" imported="no">io.h</includes>
    <includes id="usocket_8h" name="usocket.h" local="yes" imported="no">usocket.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <member kind="typedef">
      <type>struct sockaddr</type>
      <name>SA</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a1d992e140e70ec004f7faee5d0015bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_open</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a00fff2b9f3e5933310db7d33be52543c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_close</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a195a593e391fb6e577ac8e066bb4c3bf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket_destroy</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a0c7797c9eaa3ea15d51192da46ee3ea0</anchor>
      <arglist>(p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket_shutdown</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a1d7ae305b5a76d2d1ac0a359c6c810ac</anchor>
      <arglist>(p_socket ps, int how)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_sendto</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>aff45f56bf5964cff0536ce6f1596548d</anchor>
      <arglist>(p_socket ps, const char *data, size_t count, size_t *sent, SA *addr, socklen_t addr_len, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_recvfrom</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>ad5f8c5ac6a05f1e8fb2ce741d3b1439f</anchor>
      <arglist>(p_socket ps, char *data, size_t count, size_t *got, SA *addr, socklen_t *addr_len, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket_setnonblocking</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a7dfdfeaec6faff1a70097dd8af061ca0</anchor>
      <arglist>(p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>socket_setblocking</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a88a48094684c297e621e33c94bdc85de</anchor>
      <arglist>(p_socket ps)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_waitfd</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a2147bf2e1f2540a9d364ed63c7418ea8</anchor>
      <arglist>(p_socket ps, int sw, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_select</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>ad22b9f6dca824b6d08f6b8660a7c6b8d</anchor>
      <arglist>(t_socket n, fd_set *rfds, fd_set *wfds, fd_set *efds, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_connect</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a1d3d4f1b557ec569dc9fc76bfd99f45d</anchor>
      <arglist>(p_socket ps, SA *addr, socklen_t addr_len, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_create</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a2d808f22b7499b1435a73370d1e0bfed</anchor>
      <arglist>(p_socket ps, int domain, int type, int protocol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_bind</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>ae3bf85ec4eba765c4630d618b74f7c67</anchor>
      <arglist>(p_socket ps, SA *addr, socklen_t addr_len)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_listen</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>aa9b3ec4639debf29cb747df7608b761c</anchor>
      <arglist>(p_socket ps, int backlog)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_accept</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a0fa4763c874381628509dba8b7b1c013</anchor>
      <arglist>(p_socket ps, p_socket pa, SA *addr, socklen_t *addr_len, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>socket_hoststrerror</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a4bd741dc1d4d151748e254751eeaa6a0</anchor>
      <arglist>(int err)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>socket_gaistrerror</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a97cba702eb68287dd3df5ba091f925c6</anchor>
      <arglist>(int err)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>socket_strerror</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a781f44f07a38fe6352d50f42e5fea9e4</anchor>
      <arglist>(int err)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_send</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a37995b2817994a9e13fbb5a8e500f1ca</anchor>
      <arglist>(p_socket ps, const char *data, size_t count, size_t *sent, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_recv</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a9b4a03cf9ea81f48ef8df83427bd004b</anchor>
      <arglist>(p_socket ps, char *data, size_t count, size_t *got, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_write</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a528cc5e46a6d0d64b6d4bc37badfee5b</anchor>
      <arglist>(p_socket ps, const char *data, size_t count, size_t *sent, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_read</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>a533f212618213586a9d4004126a26159</anchor>
      <arglist>(p_socket ps, char *data, size_t count, size_t *got, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>socket_ioerror</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>aad628319ec6c8fa3051e418e5978f8cd</anchor>
      <arglist>(p_socket ps, int err)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_gethostbyaddr</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>aaece0a4b8b27d028c47ad68fc23fdcfd</anchor>
      <arglist>(const char *addr, socklen_t len, struct hostent **hp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>socket_gethostbyname</name>
      <anchorfile>socket_8h.html</anchorfile>
      <anchor>ad9e93d4294cef97b73485d52b7863136</anchor>
      <arglist>(const char *addr, struct hostent **hp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tcp.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>tcp_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="buffer_8h" name="buffer.h" local="yes" imported="no">buffer.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <includes id="socket_8h" name="socket.h" local="yes" imported="no">socket.h</includes>
    <class kind="struct">t_tcp_</class>
    <member kind="typedef">
      <type>struct t_tcp_</type>
      <name>t_tcp</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>aedd4c16aca0360e8309dccbff6fe14d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_tcp *</type>
      <name>p_tcp</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a071dad646fe1a4b3be27faf2fa2c5c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tcp_open</name>
      <anchorfile>tcp_8h.html</anchorfile>
      <anchor>a2655a64a9b103e9618f0301175c7f1f3</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timeout.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>timeout_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <class kind="struct">t_timeout_</class>
    <member kind="define">
      <type>#define</type>
      <name>timeout_iszero</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a34ce14ffb08bb0efcdad61e2d54a50e5</anchor>
      <arglist>(tm)</arglist>
    </member>
    <member kind="typedef">
      <type>struct t_timeout_</type>
      <name>t_timeout</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>ad7dbcd91a57e38e298485ec050b405c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_timeout *</type>
      <name>p_timeout</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>ae9b9d34c5f4d429759d8bcf000a431b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timeout_open</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>ad93db48676bc8aaf2bee293f0c4f1ae7</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>timeout_init</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a95d07394c7f761eeaf57878440525f02</anchor>
      <arglist>(p_timeout tm, double block, double total)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeout_get</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>af99169108fe8c4e02a8bb14848f00f31</anchor>
      <arglist>(p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeout_getretry</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a9a8ce77df0131e607e9b475b2f07e943</anchor>
      <arglist>(p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>p_timeout</type>
      <name>timeout_markstart</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>af01caee257cffbdab6a340c1cf8d338e</anchor>
      <arglist>(p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeout_getstart</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a5cd5abf38662fb97ae72d8e60c99dcac</anchor>
      <arglist>(p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeout_gettime</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a981801cf28ac5b07cdc9805352b615dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timeout_meth_settimeout</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a75dc26585c9f2a4a684a45835e9adc2d</anchor>
      <arglist>(lua_State *L, p_timeout tm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>timeout_meth_gettimeout</name>
      <anchorfile>timeout_8h.html</anchorfile>
      <anchor>a96b72c1c474bf90ad88535f2c3434a50</anchor>
      <arglist>(lua_State *L, p_timeout tm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>udp.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>udp_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <includes id="socket_8h" name="socket.h" local="yes" imported="no">socket.h</includes>
    <class kind="struct">t_udp_</class>
    <member kind="define">
      <type>#define</type>
      <name>UDP_DATAGRAMSIZE</name>
      <anchorfile>udp_8h.html</anchorfile>
      <anchor>a064244b65ef7a35877fc7dc63011136e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct t_udp_</type>
      <name>t_udp</name>
      <anchorfile>udp_8h.html</anchorfile>
      <anchor>a6bfc6bc59889bb711b5dd2ee4d0ed5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_udp *</type>
      <name>p_udp</name>
      <anchorfile>udp_8h.html</anchorfile>
      <anchor>a6863ee8730df3afb146747046b4eac63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>udp_open</name>
      <anchorfile>udp_8h.html</anchorfile>
      <anchor>a8004a49fc80dc9dc79e395086725e000</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unix.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>unix_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="buffer_8h" name="buffer.h" local="yes" imported="no">buffer.h</includes>
    <includes id="timeout_8h" name="timeout.h" local="yes" imported="no">timeout.h</includes>
    <includes id="socket_8h" name="socket.h" local="yes" imported="no">socket.h</includes>
    <class kind="struct">t_unix_</class>
    <member kind="define">
      <type>#define</type>
      <name>UNIX_API</name>
      <anchorfile>unix_8h.html</anchorfile>
      <anchor>a8419b27f87f21a7a1a58f7aeb1205403</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct t_unix_</type>
      <name>t_unix</name>
      <anchorfile>unix_8h.html</anchorfile>
      <anchor>a46be49ebdd7ea7a0cab82fc96139e93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_unix *</type>
      <name>p_unix</name>
      <anchorfile>unix_8h.html</anchorfile>
      <anchor>a7a30631185bbff165e02b53c1dcc44b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>UNIX_API int</type>
      <name>luaopen_socket_unix</name>
      <anchorfile>unix_8h.html</anchorfile>
      <anchor>a9cab8e2dbfdeaa8bdb0909c2e36a5c5d</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unixdgram.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>unixdgram_8h</filename>
    <includes id="unix_8h" name="unix.h" local="yes" imported="no">unix.h</includes>
    <member kind="function">
      <type>int</type>
      <name>unixdgram_open</name>
      <anchorfile>unixdgram_8h.html</anchorfile>
      <anchor>ade5b2d161fb0cd9a0647546a3b54d547</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unixstream.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>unixstream_8h</filename>
    <includes id="unix_8h" name="unix.h" local="yes" imported="no">unix.h</includes>
    <member kind="function">
      <type>int</type>
      <name>unixstream_open</name>
      <anchorfile>unixstream_8h.html</anchorfile>
      <anchor>a9a96e90db57b09fc7a2cc6990ecd368e</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>usocket.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>usocket_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>SO_REUSEPORT</name>
      <anchorfile>usocket_8h.html</anchorfile>
      <anchor>a36151618368affd148255e77785e365e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SOCKET_INVALID</name>
      <anchorfile>usocket_8h.html</anchorfile>
      <anchor>ac11b2099b487b0cec6b6afe194ec5dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>t_socket</name>
      <anchorfile>usocket_8h.html</anchorfile>
      <anchor>a3a5c9c6e94e7c0d53da206ce360ea0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_socket *</type>
      <name>p_socket</name>
      <anchorfile>usocket_8h.html</anchorfile>
      <anchor>ac79d32220fd66aa74599b1f52716c789</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sockaddr_storage</type>
      <name>t_sockaddr_storage</name>
      <anchorfile>usocket_8h.html</anchorfile>
      <anchor>ac1ce8b441119bacb21a7c11afc453abc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wsocket.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/luasocket/</path>
    <filename>wsocket_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>IPV6_V6ONLY</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>a48fb8bf5da186346125c2750265b0c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SOCKET_INVALID</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>ac11b2099b487b0cec6b6afe194ec5dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SO_REUSEPORT</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>a36151618368affd148255e77785e365e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AI_NUMERICSERV</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>a8739abe7bcb9470bcdb021e869b2a76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>socklen_t</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>a6b82106923cc13b3a9734520ecc29514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SOCKADDR_STORAGE</type>
      <name>t_sockaddr_storage</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>a00db17c758778bd3f9e4beae3bcb99b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SOCKET</type>
      <name>t_socket</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>a08ca507744b6fb143bcedf08d7a58683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>t_socket *</type>
      <name>p_socket</name>
      <anchorfile>wsocket_8h.html</anchorfile>
      <anchor>ac79d32220fd66aa74599b1f52716c789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>luasocketscripts.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/exts/</path>
    <filename>luasocketscripts_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>socket</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>aa8318fbee111c5bde5952c63e894c962</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>a7ee5b4099589086da738019b5ba43ba3</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_url</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>ab6832edd15be689328ab4eb10914ad7e</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_tp</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>a0a2d7ce39a31dca3804158e5d15d3224</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_smtp</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>a6e58076eb955441708b7dbee41d8a329</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_mime</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>a1e4c5291026f97b67dc1c2557adf1967</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_ltn12</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>a33ba68e3a9ea12f4073fbf41bfb8cd24</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_http</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>ac4707bba66724843d647b6c28622894f</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>socket int</type>
      <name>luaopen_socket_ftp</name>
      <anchorfile>luasocketscripts_8h.html</anchorfile>
      <anchor>a5a49239498a98c9de53b73fed9122111</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lapi.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lapi_8h</filename>
    <includes id="llimits_8h" name="llimits.h" local="yes" imported="no">llimits.h</includes>
    <includes id="lstate_8h" name="lstate.h" local="yes" imported="no">lstate.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>api_incr_top</name>
      <anchorfile>lapi_8h.html</anchorfile>
      <anchor>afe4a5994dd3704ec53de77f9fd121915</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>adjustresults</name>
      <anchorfile>lapi_8h.html</anchorfile>
      <anchor>afd1f4a36958642707b7598a48c507599</anchor>
      <arglist>(L, nres)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>api_checknelems</name>
      <anchorfile>lapi_8h.html</anchorfile>
      <anchor>a9785915283c3f0a0ec90f1b6be32b2c2</anchor>
      <arglist>(L, n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lauxlib.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lauxlib_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="struct">luaL_Reg</class>
    <class kind="struct">luaL_Buffer</class>
    <class kind="struct">luaL_Stream</class>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ERRFILE</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ab8d4418d33cd59728435db95ac2caf5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAL_NUMSIZES</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ae6c79b83e1d493d4ab680e74e5a85a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_checkversion</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aa538485cd28f143fabea2325b9ecd477</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_NOREF</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a3bfb758f2ac7c9ecb758e1aeaaa82d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_REFNIL</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a004a6b76c047f3b94890a08dbdcbbee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_loadfile</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a023c745560d0ed613efb6eada57a3c13</anchor>
      <arglist>(L, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_newlibtable</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ad575a4fd1f53fa454b5d9745fedecdc4</anchor>
      <arglist>(L, l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_newlib</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a5088ff720ec66200d83eb78467b77239</anchor>
      <arglist>(L, l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_argcheck</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a48ce6cd86a7448e97f258097a7abc44d</anchor>
      <arglist>(L, cond, arg, extramsg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_checkstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ad9917d22c79651fdd73d42c146b5056f</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_optstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a732bc5882c4a5da46b236649ab6db47b</anchor>
      <arglist>(L, n, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_typename</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a2bee94954917c5bccb05d6578f3c675b</anchor>
      <arglist>(L, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_dofile</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aa49a7a47a683d6e7868ede50ceb826be</anchor>
      <arglist>(L, fn)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_dostring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a1a0639bfde6b1e2f6181af45b0137cf5</anchor>
      <arglist>(L, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_getmetatable</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a201407aa41ff74577c67308372a130d9</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_opt</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aca033280b0176012ef290131876f706e</anchor>
      <arglist>(L, f, n, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_loadbuffer</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ae210c8b2a9a27ee62b2e846e93ae876f</anchor>
      <arglist>(L, s, sz, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_addchar</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a63935c5b4cf5d45930c875f6cc5e1432</anchor>
      <arglist>(B, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_addsize</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a7c0adb7401e0be1a843946cee0556684</anchor>
      <arglist>(B, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaL_prepbuffer</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>acc49fd35fabb25016f7de3256eb9bc6c</anchor>
      <arglist>(B)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_FILEHANDLE</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a36f3babeb54bee1ebba63fe4fa94189a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_writestring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a575f50815c13a7a99b8ed1ac03fe714a</anchor>
      <arglist>(s, l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_writeline</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aa4791d9826315ea2d1c716f852026246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_writestringerror</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a0706f68a79575584d365d033d613707b</anchor>
      <arglist>(s, p)</arglist>
    </member>
    <member kind="typedef">
      <type>struct luaL_Reg</type>
      <name>luaL_Reg</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a48bebf7b56d108021c1ae29549c912f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct luaL_Buffer</type>
      <name>luaL_Buffer</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a5f2195b3845806aa4bd9117b11b4d91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct luaL_Stream</type>
      <name>luaL_Stream</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a8eb55fb2289b0452171a5955885dfc19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_checkversion_</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ab42194a5a9cd8a6f6ee9123ef1807e52</anchor>
      <arglist>(lua_State *L, lua_Number ver, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_getmetafield</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aed3f129411ba1ec14f813d650f16384d</anchor>
      <arglist>(lua_State *L, int obj, const char *e)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_callmeta</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>af26aec8cce4a3f4448c60f402d78f17d</anchor>
      <arglist>(lua_State *L, int obj, const char *e)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API const char *()</type>
      <name>luaL_tolstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aef6da057d1e26ed6449b92177f1f2f5a</anchor>
      <arglist>(lua_State *L, int idx, size_t *len)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_argerror</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ad0599591343ae7836d46e685b16e69de</anchor>
      <arglist>(lua_State *L, int arg, const char *extramsg)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API const char *()</type>
      <name>luaL_checklstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aba7169b56524dab1c9f67f71b0417d86</anchor>
      <arglist>(lua_State *L, int arg, size_t *l)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API const char *()</type>
      <name>luaL_optlstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a3340783871347b1c95cf4ede72d5c67b</anchor>
      <arglist>(lua_State *L, int arg, const char *def, size_t *l)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API lua_Number()</type>
      <name>luaL_checknumber</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ac0919af2e419b4b9e86d6ddb355cec65</anchor>
      <arglist>(lua_State *L, int arg)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API lua_Number()</type>
      <name>luaL_optnumber</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aa26a2aaafd22fe5c02c84eb9a7098fd8</anchor>
      <arglist>(lua_State *L, int arg, lua_Number def)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API lua_Integer()</type>
      <name>luaL_checkinteger</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a4fab48acb62fbf5344ff26e482afaab2</anchor>
      <arglist>(lua_State *L, int arg)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API lua_Integer()</type>
      <name>luaL_optinteger</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aeb7f0d9ff0b8244215c2a5950a168bb8</anchor>
      <arglist>(lua_State *L, int arg, lua_Integer def)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_checkstack</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a724f5a5aeee97c0b40948c8bca91341c</anchor>
      <arglist>(lua_State *L, int sz, const char *msg)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_checktype</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ae9c9f80f66ca2ff9567e4db4d1d704e3</anchor>
      <arglist>(lua_State *L, int arg, int t)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_checkany</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a21ba19f50ce2a499224d2710f6fa7728</anchor>
      <arglist>(lua_State *L, int arg)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_newmetatable</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a0e9e032108e7aedc05836b0c1d72a0fa</anchor>
      <arglist>(lua_State *L, const char *tname)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_setmetatable</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a4ef6497609d8cb52f8f4dc0ec489bb7a</anchor>
      <arglist>(lua_State *L, const char *tname)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void *()</type>
      <name>luaL_testudata</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ab40f618f7e65d9af23e01f3924c3d6c8</anchor>
      <arglist>(lua_State *L, int ud, const char *tname)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void *()</type>
      <name>luaL_checkudata</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aed8d8e4f3b95c6bcac246ec9895027b1</anchor>
      <arglist>(lua_State *L, int ud, const char *tname)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_where</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a269122a77674ca63c9193c2a30b4729e</anchor>
      <arglist>(lua_State *L, int lvl)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_error</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a994f73d7985c30672469a260d9e86ae6</anchor>
      <arglist>(lua_State *L, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_checkoption</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ae4a7f494cc400b09f5cbccfc3f8187c5</anchor>
      <arglist>(lua_State *L, int arg, const char *def, const char *const lst[])</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_fileresult</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ab94b3cb77f5a0ae622ae4ba5f99af4c7</anchor>
      <arglist>(lua_State *L, int stat, const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_execresult</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a2e009e523534f5ad087e7834e711b781</anchor>
      <arglist>(lua_State *L, int stat)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_ref</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a2b69e67252d95df410818251f4b2d8e5</anchor>
      <arglist>(lua_State *L, int t)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_unref</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a6200030ecae784852045161274501e0e</anchor>
      <arglist>(lua_State *L, int t, int ref)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_loadfilex</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a8c38c6dcf9db7e110e525b46742bacf8</anchor>
      <arglist>(lua_State *L, const char *filename, const char *mode)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_loadbufferx</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a3ab1955dd9322cf03e2d3626ebfae669</anchor>
      <arglist>(lua_State *L, const char *buff, size_t sz, const char *name, const char *mode)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_loadstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ac88130d6214ff6b3e2f1781f327807eb</anchor>
      <arglist>(lua_State *L, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API lua_State *()</type>
      <name>luaL_newstate</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a7d8712fcede90ae93d5a9a7b409c586e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API lua_Integer()</type>
      <name>luaL_len</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ac9d38b77e425247b630afdb212401a05</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API const char *()</type>
      <name>luaL_gsub</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a46672be75da57e1a464c5c6d80f19064</anchor>
      <arglist>(lua_State *L, const char *s, const char *p, const char *r)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_setfuncs</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a8750009b9bbc508e4c3818ebd15b4e14</anchor>
      <arglist>(lua_State *L, const luaL_Reg *l, int nup)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API int()</type>
      <name>luaL_getsubtable</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a2605da7ef3a12d7e9cfa85939245f941</anchor>
      <arglist>(lua_State *L, int idx, const char *fname)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_traceback</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a664cc293d6c7a7dc67857fe95583a10e</anchor>
      <arglist>(lua_State *L, lua_State *L1, const char *msg, int level)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_requiref</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>af6e3e3ca0a445a50f34cfc26f89c7d61</anchor>
      <arglist>(lua_State *L, const char *modname, lua_CFunction openf, int glb)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_buffinit</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aab6af54c782855fee2bef84eb41bdc00</anchor>
      <arglist>(lua_State *L, luaL_Buffer *B)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API char *()</type>
      <name>luaL_prepbuffsize</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a0fb6d10de24960ceed452061b47c2c06</anchor>
      <arglist>(luaL_Buffer *B, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_addlstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>a06fceedb3abb1272566ca22c96e34b95</anchor>
      <arglist>(luaL_Buffer *B, const char *s, size_t l)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_addstring</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ad9c038f6e108e216011aca1801f84f44</anchor>
      <arglist>(luaL_Buffer *B, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_addvalue</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aeeb03d69681da0ec0e952b582ce3841c</anchor>
      <arglist>(luaL_Buffer *B)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_pushresult</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>aac5dfab9ba0ced4f5ae3b22aa35faffe</anchor>
      <arglist>(luaL_Buffer *B)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_pushresultsize</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ac12082513e8da6bfd5b834e840789682</anchor>
      <arglist>(luaL_Buffer *B, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API char *()</type>
      <name>luaL_buffinitsize</name>
      <anchorfile>lauxlib_8h.html</anchorfile>
      <anchor>ab8f18fe563cab9ea411ae84d2c1c2518</anchor>
      <arglist>(lua_State *L, luaL_Buffer *B, size_t sz)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lcode.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lcode_8h</filename>
    <includes id="llex_8h" name="llex.h" local="yes" imported="no">llex.h</includes>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lopcodes_8h" name="lopcodes.h" local="yes" imported="no">lopcodes.h</includes>
    <includes id="lparser_8h" name="lparser.h" local="yes" imported="no">lparser.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>NO_JUMP</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ac12a06b93b62373c9e664c7a06e838b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getcode</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ab52d1f85154445df5f16de82bb87a80d</anchor>
      <arglist>(fs, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaK_codeAsBx</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a75f8e7e30672b36d325ef829dc188ca6</anchor>
      <arglist>(fs, o, A, sBx)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaK_setmultret</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a525c933202c545dff0b84a9d5325ff49</anchor>
      <arglist>(fs, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaK_jumpto</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a08e8dcbeff76a91cea9bdca0bec9c24f</anchor>
      <arglist>(fs, t)</arglist>
    </member>
    <member kind="typedef">
      <type>enum BinOpr</type>
      <name>BinOpr</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a9d4cde4bf0d71a644ce62f6c1df5a43d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum UnOpr</type>
      <name>UnOpr</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a29d0381a285f48a6bbd4d6b48fafad06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BinOpr</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_ADD</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a6a040b1b3b8cc217942b40bdcfd89a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_SUB</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a9af57e8c20b32a5bae4e7d5b94015a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_MUL</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a3b374e6db04a6e4645e113fc82c873e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_MOD</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83abc6e1524cbf3d8a2b2a6689d5c40bc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_POW</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83af06a2e29452e38eb8ed02812a1aa1083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_DIV</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83aa0b20b22c1a53d0fb294bd15993fd4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_IDIV</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83ac91ab547f0844521654b0e8924085d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_BAND</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a83d1f111c407b2a4ce3ecdf5fc588e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_BOR</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83aee42d0b535e2a8f6686dde348f113210</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_BXOR</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83aba9d6ec8db62deeab8b731a973023156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_SHL</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83aea58586b669bfc9483fa17069e7f3602</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_SHR</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a53468a69eae492aec03a799f02754411</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_CONCAT</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a5f601beb91f937ddb7a1835f93016fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_EQ</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a1c53aacbc69d7058b240be92b134a7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_LT</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a15e3bd67027d90471048ea39abfd32fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_LE</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a96f2a6272233d80a19b4f4482cf121a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_NE</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a1f56f30f2368c0f93c9aeeea7e72ac55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_GT</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a3c68b5b6ad04299cc50ef1c4611441b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_GE</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a5a35f1c08acd1e14156d32e04d8b9806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_AND</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a3dbbb7b8ec103877916a8a4c4671a3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_OR</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83ae104a7612eb80ee5d9ff5715a938a2c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_NOBINOPR</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ae9a305c1104efedfc54af8d08b942c83a1b1f5234efa3ff41b9898c76c8ee6f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnOpr</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a36fd1054d39d6fc3373303522a7ef534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_MINUS</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a36fd1054d39d6fc3373303522a7ef534ad7aef0de1fbf580a7d03635a3e4058f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_BNOT</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a36fd1054d39d6fc3373303522a7ef534a692243c52fe8a114bce557d05a198c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_NOT</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a36fd1054d39d6fc3373303522a7ef534a238495588717191ca92bb9f8a5c80b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_LEN</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a36fd1054d39d6fc3373303522a7ef534a09eeed48a27b90460bab6d8ba33e620e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPR_NOUNOPR</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a36fd1054d39d6fc3373303522a7ef534ae72bf1249ed8649f7ed837b537ed928d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_codeABx</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a0fd979cf2c00469768bb12f5440e5c0f</anchor>
      <arglist>(FuncState *fs, OpCode o, int A, unsigned int Bx)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_codeABC</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>af82eccc0188988321677989109f14a7f</anchor>
      <arglist>(FuncState *fs, OpCode o, int A, int B, int C)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_codek</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>abe506d25eee2075eaf304fc7e8c331d3</anchor>
      <arglist>(FuncState *fs, int reg, int k)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_fixline</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a87c903709e739068e361dd59788a486f</anchor>
      <arglist>(FuncState *fs, int line)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_nil</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a0b4caf213c4d4697d63ad22fedda0d1f</anchor>
      <arglist>(FuncState *fs, int from, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_reserveregs</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>abd5365c0b65143b55552bff3a9e6d681</anchor>
      <arglist>(FuncState *fs, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_checkstack</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ade83373047ab7254868bfd06bb8089b5</anchor>
      <arglist>(FuncState *fs, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_stringK</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a50f2df3faaeae1b08794bdefbec7220e</anchor>
      <arglist>(FuncState *fs, TString *s)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_intK</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a8a98d8c6725db6848ae2a172f22341df</anchor>
      <arglist>(FuncState *fs, lua_Integer n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_dischargevars</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a4722275409ea90ad0cfc56723b8f21bb</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_exp2anyreg</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a219ca12ddb52437285a46bddfc4feeb8</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_exp2anyregup</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a2d79e7835a757a0bace8b3f01eba161b</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_exp2nextreg</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a61926f09ebafc501840e6cac1bebb16d</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_exp2val</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>abbb8eb20146165d70bbda57068685f1e</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_exp2RK</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a28ef529fcd27c07fb222181894abdf7e</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_self</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>aeaf22c625b86a7b63ec83cf8b6036815</anchor>
      <arglist>(FuncState *fs, expdesc *e, expdesc *key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_indexed</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>aef9f69dd75331c1ad4ad55329fe5a1d9</anchor>
      <arglist>(FuncState *fs, expdesc *t, expdesc *k)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_goiftrue</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>afff58a79c5fb3e56811bcf9a4315bfda</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_goiffalse</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a8f1abd44cd0ec08b43ad809b9db04840</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_storevar</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a84aa56cf92c9d61e65101d54c6300b96</anchor>
      <arglist>(FuncState *fs, expdesc *var, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_setreturns</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>acae0354c40f684d990fd3aa73bbcd770</anchor>
      <arglist>(FuncState *fs, expdesc *e, int nresults)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_setoneret</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a890dbdb46581586862dbcf56b077f97f</anchor>
      <arglist>(FuncState *fs, expdesc *e)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_jump</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a67cd7ce15260791b3348dfe0af04a444</anchor>
      <arglist>(FuncState *fs)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_ret</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>aa7c34b815a59b7ed4b5d585825cad475</anchor>
      <arglist>(FuncState *fs, int first, int nret)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_patchlist</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a8efbcf17cf978cc2bac3e08f755677bd</anchor>
      <arglist>(FuncState *fs, int list, int target)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_patchtohere</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a46bd7bbdf259cca73b0b0b833880df51</anchor>
      <arglist>(FuncState *fs, int list)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_patchclose</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a098f956b01843a7e0b5dde81e765896e</anchor>
      <arglist>(FuncState *fs, int list, int level)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_concat</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a0abd5e7a52c17bcf3ffe02ebaa771ff2</anchor>
      <arglist>(FuncState *fs, int *l1, int l2)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaK_getlabel</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>aab3ec26384fa706960da17c9a3ed5057</anchor>
      <arglist>(FuncState *fs)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_prefix</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a108f48cde9af08a87347aa6380a4a015</anchor>
      <arglist>(FuncState *fs, UnOpr op, expdesc *v, int line)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_infix</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>ad66fe8cd73e03e0d604d8c9572011ee7</anchor>
      <arglist>(FuncState *fs, BinOpr op, expdesc *v)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_posfix</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a2a87516e72f08e1b692331de96a6d8d6</anchor>
      <arglist>(FuncState *fs, BinOpr op, expdesc *v1, expdesc *v2, int line)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaK_setlist</name>
      <anchorfile>lcode_8h.html</anchorfile>
      <anchor>a88808415ff9297023fb19b4e84a19033</anchor>
      <arglist>(FuncState *fs, int base, int nelems, int tostore)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lctype.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lctype_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LUA_USE_CTYPE</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a7d15b705d59378d3c5ab7a722473bf8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lislalpha</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a7132e9f6daf30b344b74f51d64eadf7d</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lislalnum</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a9c0dc6a934853b8ab5e7d65a3ca8abcd</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lisdigit</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>aee1d27a5eac398ec2c9c8b80281041e6</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lisspace</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a768801f115261ae5ad51fdf6e54904e2</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lisprint</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a68562616d451f440d5c8e4e3d345c573</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lisxdigit</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a72e55b66d80325fb20cbc098d3448996</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ltolower</name>
      <anchorfile>lctype_8h.html</anchorfile>
      <anchor>a951ea98d03894d36dd2efed11ec9d973</anchor>
      <arglist>(c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ldebug.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>ldebug_8h</filename>
    <includes id="lstate_8h" name="lstate.h" local="yes" imported="no">lstate.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>pcRel</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a90cad524ed41d15bada161ecd74037ad</anchor>
      <arglist>(pc, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getfuncline</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a3d20620ca5045ff5303868fb2f7f5d7d</anchor>
      <arglist>(f, pc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>resethookcount</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>ac42e5618900e7522d70474fcfbddab58</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_typeerror</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a375161dd1513420561f20f0b4c7b7e66</anchor>
      <arglist>(lua_State *L, const TValue *o, const char *opname)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_concaterror</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>af54afa3e0397d5d99cb1b47bf0314b34</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_opinterror</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a2cd0d4056a77c01bf1bc52a2054570d1</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2, const char *msg)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_tointerror</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a74cd5eddc3de05ee203215f97aeacdfa</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_ordererror</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a7ae9c3f6343c93b4a8bb80e68706a6a3</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_runerror</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>a6f27f64630215e18a11be9ba21d3c4bf</anchor>
      <arglist>(lua_State *L, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const char *</type>
      <name>luaG_addinfo</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>af411ad9b6b5018b481308c6ca6895411</anchor>
      <arglist>(lua_State *L, const char *msg, TString *src, int line)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaG_errormsg</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>acd5ef9f67a8e9d08f6540636fdbeafe6</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaG_traceexec</name>
      <anchorfile>ldebug_8h.html</anchorfile>
      <anchor>ada504a1d1fda25490ea8d42fb2094303</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ldo.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>ldo_8h</filename>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lstate_8h" name="lstate.h" local="yes" imported="no">lstate.h</includes>
    <includes id="lzio_8h" name="lzio.h" local="yes" imported="no">lzio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>luaD_checkstackaux</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>acb25d187c7a97397acc30a95b20d80af</anchor>
      <arglist>(L, n, pre, pos)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaD_checkstack</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>ab1500a6449b9cdf335e3c7ce23aa85d7</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>savestack</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a3534573bbeec89c6dbdb3eae5a54f9b9</anchor>
      <arglist>(L, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>restorestack</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a3fbde7f289e6bf661575e9b802da9e78</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>Pfunc</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a078cb45ebb3f039a69795174f45d204c</anchor>
      <arglist>)(lua_State *L, void *ud)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaD_protectedparser</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a5dffa85d966f14d3f3464db580f5b3fa</anchor>
      <arglist>(lua_State *L, ZIO *z, const char *name, const char *mode)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_hook</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a2117f4e556d862f2a711c2182d80770e</anchor>
      <arglist>(lua_State *L, int event, int line)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaD_precall</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>af2326bf8464de1e4ce3c5f7aef2ed5d4</anchor>
      <arglist>(lua_State *L, StkId func, int nresults)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_call</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a4797364de1dd297aac52f9c10565523f</anchor>
      <arglist>(lua_State *L, StkId func, int nResults)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_callnoyield</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a5315637506edcbdd30e9271e75416ae1</anchor>
      <arglist>(lua_State *L, StkId func, int nResults)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaD_pcall</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>ad1087faa52e2bb98c00806ea1ac198a6</anchor>
      <arglist>(lua_State *L, Pfunc func, void *u, ptrdiff_t oldtop, ptrdiff_t ef)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaD_poscall</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a9535108eb40deb7df6ed33d0fd2b67fb</anchor>
      <arglist>(lua_State *L, CallInfo *ci, StkId firstResult, int nres)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_reallocstack</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a288c8536559791569d9ed49b16c6e99a</anchor>
      <arglist>(lua_State *L, int newsize)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_growstack</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>ab83418a7edbfafe87886f156aa6a9988</anchor>
      <arglist>(lua_State *L, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_shrinkstack</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a14e1a8d3ba0e5f6d55decb8b48826750</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaD_inctop</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>add74ee2069a98380598ae06b509db9a6</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaD_throw</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a3bfc211173876f40cde6808e408cd305</anchor>
      <arglist>(lua_State *L, int errcode)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaD_rawrunprotected</name>
      <anchorfile>ldo_8h.html</anchorfile>
      <anchor>a73f5a10f0554f95bde20c7b9ace4397a</anchor>
      <arglist>(lua_State *L, Pfunc f, void *ud)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lfunc.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lfunc_8h</filename>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <class kind="struct">UpVal</class>
    <member kind="define">
      <type>#define</type>
      <name>sizeCclosure</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>ae0283669f47da8432046d0a24c1db93e</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sizeLclosure</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>ab5551e284145e5258a8032a97806cfe1</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isintwups</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a3e7e5157cf6e329e4a5609e70b65101f</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXUPVAL</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>ac5b64a112a390053ec98913b67b3f112</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>upisopen</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a26a8ecd7d58d326f7f6f20bc8bc8bb55</anchor>
      <arglist>(up)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC Proto *</type>
      <name>luaF_newproto</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a3afa5dbaef50a7e84627e779d27c5720</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC CClosure *</type>
      <name>luaF_newCclosure</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a1d98273a1bf67ae4d99f4bda0b5444d7</anchor>
      <arglist>(lua_State *L, int nelems)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC LClosure *</type>
      <name>luaF_newLclosure</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>ae31a1e65fd393df7964d573016a0495e</anchor>
      <arglist>(lua_State *L, int nelems)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaF_initupvals</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a7f4b654cb9bf35af338f3ae1b287bc39</anchor>
      <arglist>(lua_State *L, LClosure *cl)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC UpVal *</type>
      <name>luaF_findupval</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>ab4901d5786cbea213d8e200500999a76</anchor>
      <arglist>(lua_State *L, StkId level)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaF_close</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a059f8cf02f13f391fa02ad85d9057f8f</anchor>
      <arglist>(lua_State *L, StkId level)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaF_freeproto</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a0cc4051310ee836ef266607da3a58499</anchor>
      <arglist>(lua_State *L, Proto *f)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const char *</type>
      <name>luaF_getlocalname</name>
      <anchorfile>lfunc_8h.html</anchorfile>
      <anchor>a397e1a43935e0aebf20ae6e12d52befd</anchor>
      <arglist>(const Proto *func, int local_number, int pc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lgc.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lgc_8h</filename>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lstate_8h" name="lstate.h" local="yes" imported="no">lstate.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>GCSTEPSIZE</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>aeb6367d26a4bde87314453841fc5b80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSpropagate</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a2ed301793747f3a2d0a7fc7d64d482fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSatomic</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a7c7806ab609fa3c19ed9c2b688e10730</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSswpallgc</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>aac9b5b472434aa8d38a89b46b6b29196</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSswpfinobj</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a9d28766c63918e69c9ea3853a3e6c4c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSswptobefnz</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a152f379e712cbc7f0bfa2c6a3e15166d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSswpend</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a4e40597ebd731cafa743cd9a8e0db709</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCScallfin</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a84094ff0ba3d8c7d4f84984e74f7705a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GCSpause</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ab546d91106ec5cfdba254de13e5b5c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>issweepphase</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a860db734bc919435aba75c30e4fe261b</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>keepinvariant</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a40b40242e96f45f8d04dcf4feb1475ae</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>resetbits</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a486033531260010debe876a076dd2a41</anchor>
      <arglist>(x, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setbits</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ada181faae5c9af4ed7392057c5dcbbae</anchor>
      <arglist>(x, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testbits</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a7612bc83b764b507e12e08417a053854</anchor>
      <arglist>(x, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitmask</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>af25866c39979dd1f72110cbd3a1a427d</anchor>
      <arglist>(b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bit2mask</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a39293d5e5fbd7bb9a24556b3e2f15d43</anchor>
      <arglist>(b1, b2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_setbit</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>aad559b25ee580ea2894c540dc817e41f</anchor>
      <arglist>(x, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>resetbit</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>aca0beb244185329a1b8f0e695ef47748</anchor>
      <arglist>(x, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testbit</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a25c19ff3161e2a2395ba69fdef49915f</anchor>
      <arglist>(x, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WHITE0BIT</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a4b3ebb4bccaf9a33e772a2f4515519e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WHITE1BIT</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a7de7885f3d09155a2c530154ec045d72</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BLACKBIT</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>acd17af3c46cb360dc67cad2b33b6a26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FINALIZEDBIT</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a92211ad01420ac616819ba8f61ca7365</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WHITEBITS</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a0acb34c1b3d1234f11ee9fdc34df3f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>iswhite</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a4c0ce78d476460d2e54914301f4a4bf7</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isblack</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ac1e4847ad9a91e4cea36520dc9078365</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isgray</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ad417e22072630b33cf74a3055b27d8d7</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tofinalize</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a6d17f226d57a796f7741f457400cf8bd</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>otherwhite</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a486df16493498577d4081a8c231154f0</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isdeadm</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a0540e865b6cd21e83104cf427c968c86</anchor>
      <arglist>(ow, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isdead</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>acc409eb45f598d23d8388fc9e96189ea</anchor>
      <arglist>(g, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>changewhite</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a28e94f77147fd242f514b98a1b251486</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gray2black</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ae909eb4aa4c23c6ee7757210c183634d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_white</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>afaa8a52c4097cf3a5eacd88db94092da</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_condGC</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a52f302b0dac5467152f322c8fe1c1a3e</anchor>
      <arglist>(L, pre, pos)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_checkGC</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ad013db5004ccc5fbe8a6450caa1f1ad9</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_barrier</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a21660a316c42bc1aad10f115e2261bca</anchor>
      <arglist>(L, p, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_barrierback</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a60903f232a1c51d22de556ea4c144f3a</anchor>
      <arglist>(L, p, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_objbarrier</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a90ac4f3c7085a418025edcc7215e8983</anchor>
      <arglist>(L, p, o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaC_upvalbarrier</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>af7327eccc00feb888bd273c9ee1099db</anchor>
      <arglist>(L, uv)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_fix</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a242d4a66c025c294ec2c1ec4fe75e804</anchor>
      <arglist>(lua_State *L, GCObject *o)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_freeallobjects</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a9aa52a500c9cc2076edb1707e6d8a045</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_step</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a6c71cc4b9e503c0e96c0c4ffcff93900</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_runtilstate</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a1da32357417ce5766ed5e3ada033c32f</anchor>
      <arglist>(lua_State *L, int statesmask)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_fullgc</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>aa0b753c3ed80e1eed0379ec58592c404</anchor>
      <arglist>(lua_State *L, int isemergency)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC GCObject *</type>
      <name>luaC_newobj</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a08e480a0ddf25233346594d9bbd719e9</anchor>
      <arglist>(lua_State *L, int tt, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_barrier_</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ac5106ee2a18cde8bc3bd92e5891ad8e5</anchor>
      <arglist>(lua_State *L, GCObject *o, GCObject *v)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_barrierback_</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ac6b2876343984d29007bf0846e9d394f</anchor>
      <arglist>(lua_State *L, Table *o)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_upvalbarrier_</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a965782b42193428375219f8a96af51f4</anchor>
      <arglist>(lua_State *L, UpVal *uv)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_checkfinalizer</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>a15870c09448216ce5c4e1ff63d39e0a9</anchor>
      <arglist>(lua_State *L, GCObject *o, Table *mt)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaC_upvdeccount</name>
      <anchorfile>lgc_8h.html</anchorfile>
      <anchor>ad1939fe5b4613dd58247989ec85cf519</anchor>
      <arglist>(lua_State *L, UpVal *uv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>llex.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>llex_8h</filename>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lzio_8h" name="lzio.h" local="yes" imported="no">lzio.h</includes>
    <class kind="union">SemInfo</class>
    <class kind="struct">Token</class>
    <class kind="struct">LexState</class>
    <member kind="define">
      <type>#define</type>
      <name>FIRST_RESERVED</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a6bc8e20ff15b7aa178aceea51e691e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ENV</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>af868e4c2b4c8551dad769502e7c3ec32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_RESERVED</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a24f40ac0891b0d584c0e432b2c6e1c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Token</type>
      <name>Token</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a256b3e584abf7bd4a98491b286b38077</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct LexState</type>
      <name>LexState</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a786074f6f8bc65ada3cb5643fd559fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RESERVED</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_AND</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04adbea546e357b70d29f631824a4f9cfed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_BREAK</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a37065a9cb3cc1cc8a17537dc1ee5e0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_DO</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a2fbaee0c1e87c30a1809ff22893fe2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_ELSE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a3f50a3a010dc1ba1401d460900575b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_ELSEIF</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04af85f1d50bab033c17f7341b5e71f4d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_END</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a541ef482a7317bd2a54032f165d90db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_FALSE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a065bdf8569f3a1ab4130f7e1ff2203ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_FOR</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a7dcf533a644fc9cb697137a8a9b54f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_FUNCTION</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04aafc8fa070d8d0bb9569b875cbc6b1a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_GOTO</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04af41cf088c658a62b2381424416171445</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_IF</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a601b374145c8554a0dc2d1663cbdfeb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_IN</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a88b8f5e56057cb0d4e633046b2b9e66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_LOCAL</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a5d6f51dd7b248ee46da5de8e33f34992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_NIL</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a905f67bd8b8ac9b5e0236aa5dec2e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_NOT</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a985342409492de2e599c6202e9180ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_OR</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04ab4578d7ddbacda8286ad2205d3d917e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_REPEAT</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a9f9929bcc6f4a87310869eaf9efed4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_RETURN</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04aba4fafc284c6c6aa99340efdba0b76e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_THEN</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a757e31c13acf13af22615dca8c1b7c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_TRUE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a67fdd8ec6c80ac2163c8d3e7d0ac50c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_UNTIL</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04ab7232de731ef17fbc644b370c783719c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_WHILE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a592e99387742b5748aa5e341c99dffd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_IDIV</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a7f7c69f2e524e3ab183318cf52575ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_CONCAT</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a8367a7a9a88e9ea3cef16ab15887a278</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_DOTS</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a500efed658259c56ef30938c20c3b6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_EQ</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04ae9b97178246db483138ab3d18039bfb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_GE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a39306a802115256cf2099f6c724a95b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_LE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04ace38c3f7b08d6ffe00acdd0706ba35de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_NE</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a6897243f49a32e90ca094af33c16374b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_SHL</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04afe39400ab62457e9a823aa8521d0610b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_SHR</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04ad15c43ae39b99d8f834419ec74183185</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_DBCOLON</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a3a767e0c4ce0407785d87a1a56980de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_EOS</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a9fcd34e2e50a0afb82f0dae65836187b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_FLT</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a81df881e62ebf1fe93b4820b7b54984d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_INT</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a9f48ed12541fab691e25e3ca9e38ac9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_NAME</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a84e5aed35515b2881005d88dccaf0c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TK_STRING</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ae5bd761f37716726f95e4be16a08ac04a2f748d118b4a20e2b1dc12538ccd9876</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaX_init</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a5f7573e2f03006437bd01422a0e390df</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaX_setinput</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>aac9c3f80c74f7d861348e74f5fda1452</anchor>
      <arglist>(lua_State *L, LexState *ls, ZIO *z, TString *source, int firstchar)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC TString *</type>
      <name>luaX_newstring</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>aa6e79179f823cf156f61899a09239ca6</anchor>
      <arglist>(LexState *ls, const char *str, size_t l)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaX_next</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a626896648b5c598666b1e051fd70a568</anchor>
      <arglist>(LexState *ls)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaX_lookahead</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>ad024d435463fc54e7e592d9bb8a7b26b</anchor>
      <arglist>(LexState *ls)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaX_syntaxerror</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a189ff2bb7bd23c89531fdad321fccd02</anchor>
      <arglist>(LexState *ls, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const char *</type>
      <name>luaX_token2str</name>
      <anchorfile>llex_8h.html</anchorfile>
      <anchor>a3e3a9d8e2c65ba5fc79b156c342fdb25</anchor>
      <arglist>(LexState *ls, int token)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>llimits.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>llimits_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <class kind="union">L_Umaxalign</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SIZET</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aa927c7bf177c162feda3483e1e972b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_SIZE</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a0592dba56693fad79136250c11e5a7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_LUMEM</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a5e67dd5554c315bda4b54cd5ed0e846e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_LMEM</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a99e52005f8b99ce8e36df841b281078e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aaa1ac5caef84256eaeb39594e58e096f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>point2uint</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ad861f24ac9e8c32f78455aab3d2e7b51</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_assert</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a5978f5fda715bd80e845df1e16ad7780</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>check_exp</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>afac1404af62451f8653440ecb6e773fc</anchor>
      <arglist>(c, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_longassert</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a825f22ba1e16fd60e3aae8fe8efc1c4d</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_apicheck</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a5e99efda77b5660d36828d61d92b5cdf</anchor>
      <arglist>(l, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>api_check</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ad7a42e1cc11f94e1f06ed80814fcb606</anchor>
      <arglist>(l, e, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a86d500a34c624c2cae56bc25a31b12f3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>af17d62ec9e237a7644de6b9b34a48a34</anchor>
      <arglist>(t, exp)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast_void</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a52a5166d7dc0590b63a9331cfc0f4564</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast_byte</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a596f5b6e992f53a5a4e5732083448dd4</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast_num</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ac92cecb12c5aba1164877e81e76e2cb6</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast_int</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a37a9e2c4b53433d34bad0f12a1500c08</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast_uchar</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aa0c49a2b32329cc39df5ccafd1f720e0</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_castS2U</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a5871309e671ba9f938fcb1e0d3bcbeca</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_castU2S</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a873fa1b216f8caed046edbcebd4c1bc8</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_noret</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a9f743fcc9a5278cb9ee10355f09f7302</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_MAXCCALLS</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a0787aa9ccb00f5d9b11ad4f7174e4bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_MAXSHORTLEN</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a54fe4797308d6b24bf84fa0129a155bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MINSTRTABSIZE</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a91604f8876fd042d7b1cdbade17927e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRCACHE_N</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aa8382779dd8eeb2dea3deb97dec0ed1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STRCACHE_M</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a3e028bcc45ab536a37bb6860caf3d2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MINBUFFER</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aa0320f75a72bf131ae24d39111ac9938</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_lock</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aa68a48b9104aeadf4842c25c12a9b8c9</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_unlock</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a1781f2a7d9161848a246d475a9171875</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_threadyield</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a7bf655fe36dca3227f9e7e04226d3e6a</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_userstateopen</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a05bbfa34e58a82e39cc19701e5359881</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_userstateclose</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ae269d75893fce50868b37c32214648e5</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_userstatethread</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a533eae4cf709fa76f3974823354e4067</anchor>
      <arglist>(L, L1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_userstatefree</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a7c5595955dfef0964d1286b3f29e2aad</anchor>
      <arglist>(L, L1)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_userstateresume</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>af110e056a602175437e5cda45dd7db5e</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_userstateyield</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ade427932b2d70d9f0b04c4d6a2af177a</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numidiv</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a9ca37a98a6032ab21dcfd63d42e66f89</anchor>
      <arglist>(L, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numdiv</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a2a095b8d523b51332eb223df531367d2</anchor>
      <arglist>(L, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_nummod</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ac6e6bfca420c761a89eee023103c34f4</anchor>
      <arglist>(L, a, b, m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numpow</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a4a3b06f2c7239f8dcbd101ca20cc507a</anchor>
      <arglist>(L, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numadd</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>af3eb5d1884e4512d2701bbc97bb82e81</anchor>
      <arglist>(L, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numsub</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a93e733c7e860d7fb838b6af414405662</anchor>
      <arglist>(L, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_nummul</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a1cbcef9e269f0ac1a5f34898a7c4ae36</anchor>
      <arglist>(L, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numunm</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a84c57a852cdc4b46c678cb3fab715846</anchor>
      <arglist>(L, a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numeq</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ae06bbbe345c8bb028e233120466d387d</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numlt</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ae035faaeb068720ee8540210870ee5c9</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numle</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>af803655e8c9be7ba1f3f3fb0c4f730d7</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luai_numisnan</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a5ec99a344dba64c30c3ddc6eed8e2e51</anchor>
      <arglist>(a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>condmovestack</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a51890ff33a337eee53fc73934fa7ba89</anchor>
      <arglist>(L, pre, pos)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>condchangemem</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ac9968fbda6cf783c96a635cd891931f8</anchor>
      <arglist>(L, pre, pos)</arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>lu_mem</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>aac8c50ca0aa51c80523376da77c2c4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>l_mem</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a24fc195087e262c99a4cf0f9b346a684</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>lu_byte</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ae1fe9ac10d9803bd1d7bdf30b18bad68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LUAI_UACNUMBER</type>
      <name>l_uacNumber</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>a792eefbf119f914b73400c314411c3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LUAI_UACINT</type>
      <name>l_uacInt</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>ac8d5f795aedd7e084ef2dab7b5d81bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>Instruction</name>
      <anchorfile>llimits_8h.html</anchorfile>
      <anchor>af6c47c68c1e6b0387c915031e0e681e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lmem.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lmem_8h</filename>
    <includes id="llimits_8h" name="llimits.h" local="yes" imported="no">llimits.h</includes>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>luaM_reallocv</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a59142036ad6560a542668fbb8f74d7d2</anchor>
      <arglist>(L, b, on, n, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_reallocvchar</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a5904278d180acc29faf199e1d76f3e85</anchor>
      <arglist>(L, b, on, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_freemem</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a159fd0a4f45c4aa195990526f9d0bf01</anchor>
      <arglist>(L, b, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_free</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>ad927ceb6a17a9e89a00b83dcc4482988</anchor>
      <arglist>(L, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_freearray</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a574612879aa6814c76b8b57c41e4af5a</anchor>
      <arglist>(L, b, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_malloc</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>af0bc033b36a0fce019d9e9676614d420</anchor>
      <arglist>(L, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_new</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>ae72bd363be924fa9a67be67de0802ad7</anchor>
      <arglist>(L, t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_newvector</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a715cc368a85506c7a104cda58f270f3e</anchor>
      <arglist>(L, n, t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_newobject</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a0ce640c4b032a327440e3820365d7167</anchor>
      <arglist>(L, tag, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_growvector</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a38823c4cdf0d53b73e1e3015affb06f9</anchor>
      <arglist>(L, v, nelems, size, t, limit, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaM_reallocvector</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>ab1174e625ed7a62e5f8ba33a7e1c1917</anchor>
      <arglist>(L, v, oldn, n, t)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC l_noret</type>
      <name>luaM_toobig</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a23b8703b7b50e1c5dd37d41569a09a9a</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void *</type>
      <name>luaM_realloc_</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>ae7dc8a57fc5dbca825653a88a356a72d</anchor>
      <arglist>(lua_State *L, void *block, size_t oldsize, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void *</type>
      <name>luaM_growaux_</name>
      <anchorfile>lmem_8h.html</anchorfile>
      <anchor>a9adb7e11025b0b91454ae7949bc8d370</anchor>
      <arglist>(lua_State *L, void *block, int *size, size_t size_elem, int limit, const char *what)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lobject.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lobject_8h</filename>
    <includes id="llimits_8h" name="llimits.h" local="yes" imported="no">llimits.h</includes>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <class kind="struct">GCObject</class>
    <class kind="union">Value</class>
    <class kind="struct">lua_TValue</class>
    <class kind="struct">TString</class>
    <class kind="union">UTString</class>
    <class kind="struct">Udata</class>
    <class kind="union">UUdata</class>
    <class kind="struct">Upvaldesc</class>
    <class kind="struct">LocVar</class>
    <class kind="struct">Proto</class>
    <class kind="struct">CClosure</class>
    <class kind="struct">LClosure</class>
    <class kind="union">Closure</class>
    <class kind="union">TKey</class>
    <class kind="struct">Node</class>
    <class kind="struct">Table</class>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TPROTO</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aa2a683d9e42dac5846eefa108297cbf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TDEADKEY</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8626e895a2b49a9b945c96281d854fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TOTALTAGS</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a3cfbab2b06f3be07ce2db9e300723fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TLCL</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a15d83ee20070d7eb78404f33e5cf7b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TLCF</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ad54c3666e4c6fad6c46b3cc4d2b1ec62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TCCL</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>acf88f2fd6b8cb298975483583f9bd004</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TSHRSTR</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a05b3f524bbf2f1a7446009e6536fce15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TLNGSTR</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a603cc7453f26d8d5aec48bb5f10f96f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TNUMFLT</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>af9a67f8fd350ab79a3e3df20920f4f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TNUMINT</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a172ee6a03a4f4298cd82703d094b4e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BIT_ISCOLLECTABLE</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6301e5933254618c0434a55a500b2282</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ctb</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a4a1902cdda7b02eb01135585230c38f0</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CommonHeader</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a5ee24faa024428a3c176895fe9925031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TValuefields</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a33c298ced3df4f041dd86a19a6c0dae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NILCONSTANT</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ae2c44cfb065c891fb7ee9acefe6fef29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>val_</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aa57d3f96227213dee2530ccf9c0bd055</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>rttype</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>af92727e335b9b2cfcbf0313cc26ae913</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>novariant</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8c468888c3ac097182800359509465b8</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttype</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>acd205ab396b96fba48e1f758c17a2cf3</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttnov</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a3aebd1d7f6e4b8c3209d1ea32bf152f7</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>checktag</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>af8389211babbb622ff1ac83021f2fd76</anchor>
      <arglist>(o, t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>checktype</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a591e9cc1db9d9f210702bdbf2ba10d02</anchor>
      <arglist>(o, t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisnumber</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a7a1392f89b1f29ed3b1afa37a22d0be2</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisfloat</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ac1338b5ac67cadf27489f5ae7e939c29</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisinteger</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>abade243295a9140f7b86838fbb049054</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisnil</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8630c13eaefbeaba1aa0933cab6e0238</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisboolean</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a44a87a5873bd05973d6e3a4747175c06</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttislightuserdata</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6440445277dce2e73af1e043f9884d7a</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisstring</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a9bdf057a0de8da2ffae3ac35662dd255</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisshrstring</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6513e161c7e8cc7276a9677d50a99b76</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttislngstring</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a70613f10396708b6099f5e96fd9f668f</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttistable</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ac5338f5fe3885d1ee65412e00a44384e</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisfunction</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a48587dcb78721d149d3184d0768f4950</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisclosure</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a3254d5797537bb83d10a5b48dc6b4377</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisCclosure</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a9510da9838a8f17b4eef364549a4c7a8</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisLclosure</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6f8bada57bc9f224609af800d399693f</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttislcf</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8d43f35dfc5fcd0ee49a6206d63bec18</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisfulluserdata</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a2b0d95af67f53d9fe2bdde605f9cd957</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisthread</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a5ae8a42aa33c44ef3c98fcda8b7ab4c5</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttisdeadkey</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6c5df2acbc30dc18b497d7789b1da560</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ivalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>af1a59636db050b842a791cd19086d925</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fltvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a7d7d6b08f40350c9e7364e9cb984d744</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>nvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a690ab618235691bb5a82610f07dd8684</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gcvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a05cdf6070135f10ad37e1048a730b634</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>pvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a16c0267c035b3e4edda082e25069e8cf</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tsvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8661397faed512ccc9c70a4661f1a83d</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>uvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a1c49f55d93297e833141fb62903af3ad</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>clvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a4b49383d348897fe282c0d51354d8bc9</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>clLvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>afb9e65b01574a1135c582cf28883062e</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>clCvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a2c2d10bdd241446b4c9e1b68268159bc</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a27d0b4b700445d8c82ddc634c0252d10</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a336a6ce5e8340e6de133ec249cf47ebf</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>acabf05e821337a6de6a4a6632045032b</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>thvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a516f32427f1c43ee187ce4c0db042959</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>deadvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a92ae7ec96c59bcbd617e86fc642a3e17</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_isfalse</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a188e1a95c8c6d547a13431a6e1edd5b3</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>iscollectable</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aaabdb414706e6a904461e39967557185</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>righttt</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a08f554017b8314e2dfc0dfd05b1d8167</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>checkliveness</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aeec8842aa72396b2719685ad7e131f37</anchor>
      <arglist>(L, obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>settt_</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a60983604f73f556a06f84026b29ed840</anchor>
      <arglist>(o, t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setfltvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ae357382324a8220a3cf77607752de887</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>chgfltvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>afb905ab8008c82b24755df25012408f2</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setivalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>af9dd109ba186841ab26efb2d62baf4f6</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>chgivalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ad7adb5b383285a385eb64b01de30966e</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setnilvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ad9034def7bbc1965ec3d714d84620b07</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setfvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a449f6c91562897c555ff32b360a6042f</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setpvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a0784c90d154ccf7c643b56a00c62412a</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setbvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a22e86755164a1bc172b40f344d7ce70e</anchor>
      <arglist>(obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setgcovalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a977fe2a01691b55cdd5eabefb4114434</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setsvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a251a2d3bada66aaed6249a89a0afe5f0</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setuvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ab358ecf44046d8def185fed182944fc1</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setthvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a9c2bad449e8e998bb9d937642923a225</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setclLvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ac1765c700e6c8eaa1e36b397cc5439f7</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setclCvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a57d9fee6a3a8d1eb4b36c95cf76ab09d</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sethvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ab9379699ac579d54410e3542f061bbad</anchor>
      <arglist>(L, obj, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setdeadvalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a333399890a6ec94b8e4a5353238605d1</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setobj</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>acf2af15f3d5cceca8e8870f96634bc2d</anchor>
      <arglist>(L, obj1, obj2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setobjs2s</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6d30d7fa36e78e0bfb56ba38d9e89ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setobj2s</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a1c51b9462c606f1f97242fae6b1220d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setsvalue2s</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a2defbd1005c5aebb5807517ddea80f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sethvalue2s</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a4479130032f48df241c14cd67cab2233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setptvalue2s</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6ba6ddfab9227bac75e8092efc70a73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setobjt2t</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a0b6916971c4766bf58d942bf7a426c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setobj2n</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ad6d8d3d900cff1b02c3b269eabccccf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setsvalue2n</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aa7a9ab918b0322fa100f3f7af16d2375</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setobj2t</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aff7fdbcb91ea9ab1780728880a405eeb</anchor>
      <arglist>(L, o1, o2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getstr</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>acb05d3ab238923581a9c629b8e11a6ac</anchor>
      <arglist>(ts)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>svalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ac2c9eedf3ff2c3042445b3b534f161e1</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tsslen</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a3a62185cfa9345aedfc3a581dfdbb4f3</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>vslen</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a9753d5f343806e0cb16293f53143098c</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getudatamem</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a2caa96489ffdf9759e50fda47d69f605</anchor>
      <arglist>(u)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setuservalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ac5095525f427fe9a570c70b294d0ae64</anchor>
      <arglist>(L, u, o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getuservalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a1e3c3d35e7864ce2dd7c439fd971a78f</anchor>
      <arglist>(L, u, o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ClosureHeader</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aa6994808abcc30f100e21e34b84d3ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isLfunction</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6e8ea4626fad5e23912d4e26d0b09200</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getproto</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a36095400a8ca3ad1e6120f507b421331</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setnodekey</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a5e420ec7998db4c08de62df1a8d61abc</anchor>
      <arglist>(L, key, obj)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lmod</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a528d710ddad324002e3cb47992740b6a</anchor>
      <arglist>(s, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>twoto</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>aa341ef742b199e1c29a19d2c490ad74e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sizenode</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a2fbf715e78eaa889ed0fb9d4514e736a</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaO_nilobject</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a7b3b558006786b9088568ae50483603a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UTF8BUFFSZ</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ae0741e99030a23e3c24b0eb828fbbe4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct GCObject</type>
      <name>GCObject</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a695cc6eaef4f2d539a5fe6e3582a2847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union Value</type>
      <name>Value</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a9696edf3a81c3c7961b8136cbf030d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct lua_TValue</type>
      <name>TValue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a697442a0cb831a0128967f561c00e15e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TValue *</type>
      <name>StkId</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8ae6e3aac34ea1643f095db7dcfd705d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct TString</type>
      <name>TString</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a5aabe5b690f4230a745c5ed836fe2b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union UTString</type>
      <name>UTString</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a26ed76204dfe7fb970584255d80af493</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Udata</type>
      <name>Udata</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ab6428f84386288548f1dfa6825929f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union UUdata</type>
      <name>UUdata</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a3143d8317b6226d4b521b12bf54734cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Upvaldesc</type>
      <name>Upvaldesc</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a48d68df57359da55af51d9def6fc2375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct LocVar</type>
      <name>LocVar</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ae41d182692031a66003a57e5ce5a63d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Proto</type>
      <name>Proto</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a5c003e879b46635fec5239495ecbd1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct UpVal</type>
      <name>UpVal</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a420f4f4eeb467ce750d00e5d3a21c109</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct CClosure</type>
      <name>CClosure</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a1cc4e9df9a96f0909fb156762d099e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct LClosure</type>
      <name>LClosure</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a78e752870baff8fc9a5b7950cde80461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union Closure</type>
      <name>Closure</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a065a0d25e348bbcf303ba0ac14009f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union TKey</type>
      <name>TKey</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8e991179dd1fcde49c7741aa7122b061</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Node</type>
      <name>Node</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a0466fc5f1bc9e6de776e48149b19c471</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Table</type>
      <name>Table</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8fb788ba2ec7c31733b0576adaa57c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaO_int2fb</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>af3a85826e580463cabdbd4047cbeb109</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaO_fb2int</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a726db3025306090a87a3199c85feedb4</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaO_utf8esc</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a6376bff8a65affbbeb7dba84a34d3a87</anchor>
      <arglist>(char *buff, unsigned long x)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaO_ceillog2</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ae17e893f7b1221fd82d37a51bcc5ad3c</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaO_arith</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a00fa395f057580ca2a3eb3894b5282e4</anchor>
      <arglist>(lua_State *L, int op, const TValue *p1, const TValue *p2, TValue *res)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC size_t</type>
      <name>luaO_str2num</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>ab56d8211e48dc3c70c3fa21d92d009af</anchor>
      <arglist>(const char *s, TValue *o)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaO_hexavalue</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a621e15ee90edbdb71f1161b92617fcb9</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaO_tostring</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a59378d55bf2d90c04cbd5ad97d24e1ef</anchor>
      <arglist>(lua_State *L, StkId obj)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const char *</type>
      <name>luaO_pushvfstring</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a0d323372aa00f179e1c070d305f879f3</anchor>
      <arglist>(lua_State *L, const char *fmt, va_list argp)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const char *</type>
      <name>luaO_pushfstring</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a8622279ff260ff226d9663c85ca467dd</anchor>
      <arglist>(lua_State *L, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaO_chunkid</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a2926e9273ad7206b3855e94f82fa862f</anchor>
      <arglist>(char *out, const char *source, size_t len)</arglist>
    </member>
    <member kind="variable">
      <type>LUAI_DDEC const TValue</type>
      <name>luaO_nilobject_</name>
      <anchorfile>lobject_8h.html</anchorfile>
      <anchor>a9d882994a87eb20ba2cd877c8128865d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lopcodes.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lopcodes_8h</filename>
    <includes id="llimits_8h" name="llimits.h" local="yes" imported="no">llimits.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_C</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a5f42703bf77b09689626ca8cf3fc5fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_B</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ac8795820709810bf0baf1660341cacc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_Bx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a4b81cf762841df8820b6077b66c0c619</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_A</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a205e8f662c5b2496cb7d9e7aa37cda90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_Ax</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a52d077faf8699f2d66aef36bf4e6c751</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIZE_OP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a4c1d995d13200130d713c6dc5e223c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POS_OP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a86559e8fac93f9aa28733fc4dd96af51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POS_A</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a9a088c55af7f419a19a3228fd5048ef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POS_C</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ab67ab8adf1f91e2c7e2b30b5345d214d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POS_B</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ac71a05d32f83f3f83b05fa95bad8c953</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POS_Bx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a3626b235301aa4d50a1eddfb650ddd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>POS_Ax</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a1df1ba0f129f8e4691da2c5e6d1ecc39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXARG_Bx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>aebbf650de6e9cbec539bfabcb9ae50c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXARG_sBx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a076bbd704fe8773693851f82d82206a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXARG_Ax</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a742a1bed832225c3800b3f73eb8b20ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXARG_A</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ab3c4feecc8cd0add12e881e26bbb3b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXARG_B</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ae5132046fa2196de46214613a36235b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXARG_C</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a15a7daf14e4640990519e4e7f627900f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MASK1</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>aedd5e7a7ce381d9be03d198dce7db53f</anchor>
      <arglist>(n, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MASK0</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ac38be540eada841367170e3764e93748</anchor>
      <arglist>(n, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_OPCODE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>aaa146179c3677b790c5681dcd82f0acc</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SET_OPCODE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a9ae2b84a40beacf053969ff426aae06f</anchor>
      <arglist>(i, o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getarg</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a34176ea971e0563a800c45073da2d09a</anchor>
      <arglist>(i, pos, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setarg</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>afb6645a4d916d7dab36ba5f6f658bb8a</anchor>
      <arglist>(i, v, pos, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETARG_A</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a1d504abc1e2246548f89977210dce0b9</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETARG_A</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a01900876b9281238c6dbb4d7bc59ca66</anchor>
      <arglist>(i, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETARG_B</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a7a343159ef7669a438c2097b839b2b13</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETARG_B</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a52ddcdcbd367c4557cc83c38e3e1723f</anchor>
      <arglist>(i, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETARG_C</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>af96cb84f2685fda7f36d3d099dba6a44</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETARG_C</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a085f9af93bc2386ddb0b9fb53d5ff0b8</anchor>
      <arglist>(i, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETARG_Bx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>acf8d228275fd2789dcf5f019bbabc019</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETARG_Bx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a0c476ba8d647ec398f25bb6374a0c088</anchor>
      <arglist>(i, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETARG_Ax</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>acfd578bba038b6682b924cf48012d80a</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETARG_Ax</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>afeb0c89bdd47db50d0ba6b78bc894681</anchor>
      <arglist>(i, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GETARG_sBx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a1f61a823709ac7847e481290a596c480</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SETARG_sBx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ad28b4bc013c6ddae165ac998ebe321c7</anchor>
      <arglist>(i, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CREATE_ABC</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a847467d29d9430a3a869e99952350b2d</anchor>
      <arglist>(o, a, b, c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CREATE_ABx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a46bb00b89420c78407eb45a3bc98b50d</anchor>
      <arglist>(o, a, bc)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CREATE_Ax</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ae08e838d4e7f9c8ed9b23a6a52d1b819</anchor>
      <arglist>(o, a)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BITRK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ab8d4f5d2db10dd5b3c15e0081596e41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ISK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a143ea69a87f0463de7a856da4dd612e2</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INDEXK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ab5017051e99e0a98e021863757bb2228</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAXINDEXRK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a37cd6e85943ea87c9b99ef1ea6bcdb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>RKASK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a16493800cf7e5cbdc549add83484a750</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NO_REG</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a6552ce4b3bba3b1a820dc0adaf85974a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_OPCODES</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a1fb469ba81540d3314cfbe37c675ba20</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getOpMode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>afb3fdd221fb95fdd1c254f7ab479739e</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getBMode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>af4588c163e23efaa97976d30c94d89b4</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getCMode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>aa2535ccc1080a3705abfc0b1061b281e</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testAMode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>aaae51a1c7e304923c51509b7cd644f29</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>testTMode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a6750851f9d04ae7f9612146b07f88c97</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LFIELDS_PER_FLUSH</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a0888e2bcb54f6e603f09208763aadfe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpMode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a56752d1aeb4bd4940e632396072d68af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iABC</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a56752d1aeb4bd4940e632396072d68afa5032b5bab05a3312f6236ad8a6053cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iABx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a56752d1aeb4bd4940e632396072d68afae162f330f7a1e7581cdbbb4af60dc8ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iAsBx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a56752d1aeb4bd4940e632396072d68afa5db94456d16691b254a6b2fc7b473e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>iAx</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a56752d1aeb4bd4940e632396072d68afa453db051897b5faf2716653c2aa5a2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpCode</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_MOVE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7addf83bbc02b6a88d325135c880d12184</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LOADK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ab34a8eaf6d32d3c41810653d9eb99c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LOADKX</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ae95580de7b3877b66fdf87366b8e5887</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LOADBOOL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7af5f66d1583580293a60f96a26770e5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LOADNIL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a5c399a98a26c923cdae3971b5e5b6432</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_GETUPVAL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ab48573533495922f053a7d1c9b0d00b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_GETTABUP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7acba90301f3ac979a3edd23f74182367b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_GETTABLE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ab1ec2a36c59db7612249cc31e382fdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SETTABUP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ac486cd83792b58a638e37cb249d54a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SETUPVAL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a47df60373847890b47b447c870aea678</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SETTABLE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a34315d7408f31b006bf41c9e9c2d736e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_NEWTABLE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7af4ae9eb9a3c88596112a1d99d0c66280</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SELF</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a64bea18253f9e73c4c5fcfa6b0d5abd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_ADD</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a96186829480e5b34b1373288e956b1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SUB</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a6c224b456bd394d4d8bad0631ca8e2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_MUL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7aa0e08a6f94350f03d29e4a55d543ba2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_MOD</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a39c596fc7eae450b7218bd97126e37c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_POW</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a35127684be890cfd81d556dc84d5f9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_DIV</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a719aeab2140dd5f575d1559b95bf74e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_IDIV</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ac813f8b860222d35f2d02410a84f53b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_BAND</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a6410f6c403b6cd759180c8b8be874cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_BOR</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a2f4bd7bbcff0799872d56d31e258599b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_BXOR</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7afd5cb32a2593241c564d2cdce914021b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SHL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a845012132d1f5f2d1cd125326476c25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SHR</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a789f5e2846cb039c0273aff134011fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_UNM</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ae3fd0932f8be8e5e810d731fd60ab8ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_BNOT</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ada36dd48f6870a79b5998262341c57d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_NOT</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a36a6b73cc4823f54891a013e2cc760d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LEN</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a55406931f4958f887e6d966d154a1931</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_CONCAT</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a28a7da14b1413b441cf2a5d433b43a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_JMP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7afd679fab86e6a91d22c91734e287639b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_EQ</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a1634898deb6e4d1bcb15416034c641c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LT</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a7d5ed006824d331041dad8486e52df50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_LE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7acef6e71b662db063ff532d89500bb0c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_TEST</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a8952e66300f2660060e38c67ccd21c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_TESTSET</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a39b4077a15fb8fffc166f5045dddacee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_CALL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a098bbeea13096667b102f7fd90cbe38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_TAILCALL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7aff2c07ebfd82aa22cc247e9855a16069</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_RETURN</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ad436c18b194473f5ec64c28b774e41b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_FORLOOP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7aa01470a2fc70a3f2dbd20c7c8f270802</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_FORPREP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a5277c6eb2b1ab790c4942fdccd749e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_TFORCALL</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a899602d2c96443e08eec9e477071aa22</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_TFORLOOP</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a7dabccd7671c8ff374cb4502a6edb9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_SETLIST</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a01618d8295953fd4ab2ef721b2051718</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_CLOSURE</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a407a76cd8c503b0f4dc14603687a77a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_VARARG</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7a1856103c50818d72aaa506821a4ef004</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OP_EXTRAARG</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>abeb7dfb0e9e2b3114e240a405d046ea7ae7a29a9b5e1490453da04cba95b39bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OpArgMask</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a74ef10b1841536b2ae065f2371fb9436</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpArgN</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a74ef10b1841536b2ae065f2371fb9436a62f4c828039f757e4eb8ec28754e27ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpArgU</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a74ef10b1841536b2ae065f2371fb9436a590dbd8a54a83dc0480430b12e9e792d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpArgR</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a74ef10b1841536b2ae065f2371fb9436a1704c8739c8e44d4a28d98cf4dc1cd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OpArgK</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a74ef10b1841536b2ae065f2371fb9436ad365ba9de2ad41c5962f29b1edbf3fd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LUAI_DDEC const lu_byte</type>
      <name>luaP_opmodes</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>a4db2b7826fc1923c98df7edbe8828be6</anchor>
      <arglist>[NUM_OPCODES]</arglist>
    </member>
    <member kind="variable">
      <type>LUAI_DDEC const char *const</type>
      <name>luaP_opnames</name>
      <anchorfile>lopcodes_8h.html</anchorfile>
      <anchor>ae10cd77813f45aae4f7ea2fe3fed8edd</anchor>
      <arglist>[NUM_OPCODES+1]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lparser.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lparser_8h</filename>
    <includes id="llimits_8h" name="llimits.h" local="yes" imported="no">llimits.h</includes>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lzio_8h" name="lzio.h" local="yes" imported="no">lzio.h</includes>
    <class kind="struct">expdesc</class>
    <class kind="struct">Vardesc</class>
    <class kind="struct">Labeldesc</class>
    <class kind="struct">Labellist</class>
    <class kind="struct">Dyndata</class>
    <class kind="struct">FuncState</class>
    <member kind="define">
      <type>#define</type>
      <name>vkisvar</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a51778fbd65fc02656cb2731b5e9c7d06</anchor>
      <arglist>(k)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>vkisinreg</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a0649904afa66040fd45090657c74204e</anchor>
      <arglist>(k)</arglist>
    </member>
    <member kind="typedef">
      <type>struct expdesc</type>
      <name>expdesc</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a0d294d66f89c15ce0f2c42405c35d778</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Vardesc</type>
      <name>Vardesc</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>ab9b7a21e8ff3d01e6cbf690339242d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Labeldesc</type>
      <name>Labeldesc</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a064cd4c16d3a6c5ddba90a06d37c5437</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Labellist</type>
      <name>Labellist</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>ae6a2cd24338e8603e160ed6a838da533</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Dyndata</type>
      <name>Dyndata</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a0c1dcc385d4cc8c52da00e683467ad00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct FuncState</type>
      <name>FuncState</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a061014a13d16f201e08b90d4d38b1a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>expkind</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VVOID</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4eae4dbae7b833ca72c63360ec7be904fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VNIL</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea47eb055b6420db339de283cef27ad5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VTRUE</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea1228eca4fdc8e7643d18155507942482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VFALSE</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea21820bf1e2c58882ffeb34849972ecaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VK</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4eaf926040fb3c22e9456f27b78e4ad19d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VKFLT</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea425f6de3ad910f1c4c56cbf16711a967</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VKINT</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea4d24e28198fe684b7237e57bd8a0070f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VNONRELOC</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4eaa7be620e4921ca3142b792f4bb0a98be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VLOCAL</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ead8fc7331fa6e500f522f9f3334f14567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VUPVAL</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea8ebb62b5889a955b7e4dd1c5b169b38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VINDEXED</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4eab1cb541b6c8f3a5f03b17184a2facc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VJMP</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ead1066918edd602fb0577c9f58ced173c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VRELOCABLE</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4eac30b9bfe6117f51f4d133e9a7ff3c50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VCALL</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4eae61a8c04cfeabd756694cd13774e47b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VVARARG</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>aecced501a9387ab3e6e50a9834615d4ea3f5f58de0fa9e69449d4e2362ddbfaa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC LClosure *</type>
      <name>luaY_parser</name>
      <anchorfile>lparser_8h.html</anchorfile>
      <anchor>a71163cae919941bd5b31805e92de2e9b</anchor>
      <arglist>(lua_State *L, ZIO *z, Mbuffer *buff, Dyndata *dyd, const char *name, int firstchar)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lprefix.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lprefix_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>_XOPEN_SOURCE</name>
      <anchorfile>lprefix_8h.html</anchorfile>
      <anchor>a78c99ffd76a7bb3c8c74db76207e9ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_LARGEFILE_SOURCE</name>
      <anchorfile>lprefix_8h.html</anchorfile>
      <anchor>a0cdbd4d0545340d33dfe595811475ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_FILE_OFFSET_BITS</name>
      <anchorfile>lprefix_8h.html</anchorfile>
      <anchor>a44d01ba0a136b8e27ad362f5a823d14e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lstate.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lstate_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="ltm_8h" name="ltm.h" local="yes" imported="no">ltm.h</includes>
    <includes id="lzio_8h" name="lzio.h" local="yes" imported="no">lzio.h</includes>
    <class kind="struct">stringtable</class>
    <class kind="struct">CallInfo</class>
    <class kind="struct">global_State</class>
    <class kind="struct">lua_State</class>
    <class kind="union">GCUnion</class>
    <member kind="define">
      <type>#define</type>
      <name>EXTRA_STACK</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a9e690b8e4047af306d2dd1f78a9094d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BASIC_STACK_SIZE</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a8f869ebbbd09a2c657864e11e3d88453</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KGC_NORMAL</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>ab916ef6404135dc03cd307affde5964b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>KGC_EMERGENCY</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a5a53ab574f9820c35d38b420454d7338</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_OAH</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>aa79d6ca436cdf0651af29bf3a10e8615</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_LUA</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>af57b1143ff43d932a9d15604eb108ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_HOOKED</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a800d75f1a5d7a4a9b2fc810cdeedffb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_FRESH</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a904429a93589ded1b35375edb7668d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_YPCALL</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a4b2deea0fb7c8f4b21151e5f105de6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_TAIL</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a0b8ca2af9b603d2807b3377f97038e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_HOOKYIELD</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a2ee8b2631d186257649cce9f39e17aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CIST_LEQ</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>ab5a4348fb25f953e9981ad1e5597cf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isLua</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a489eab424b094f54dd7f6b35e2cf68a2</anchor>
      <arglist>(ci)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>setoah</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a77033f2cdcc8950b8961e2a413c9117b</anchor>
      <arglist>(st, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>getoah</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a565f5990436c4b7db223e9d33e8a5f57</anchor>
      <arglist>(st)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>G</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a103db2de6edf3420c6c6c9a282562406</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cast_u</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a34b04e38154abb464adc00abd6760e37</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2ts</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>af6c16f3aa27ad97ea1bcaa31e05e0b06</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2u</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a55e9a228ad0d3a82ee9cfc353002fd8a</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2lcl</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>adaac0379079b200986d6ae72b65aefaf</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2ccl</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a1dcf2ea170c68fe70adb5af7ae04c71e</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2cl</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a003658bade3405a30fe2cf7fee2f7e10</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2t</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a4f233ba369144fad9fd5fc6c513da1ac</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2p</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a8792af5dd4539a71f6ed8ddb31d079c3</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gco2th</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a52c467e11bd40cad5ca78372f7f67b4d</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>obj2gco</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a254ca29aba03e47440082d4591a9734e</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gettotalbytes</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a27490dbb57469f3fa83a73d4b7a79df2</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="typedef">
      <type>struct stringtable</type>
      <name>stringtable</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>abad8ca0b0e2cc5c7c930f6c0c34a31a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct CallInfo</type>
      <name>CallInfo</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>acfb44aee03601859381d3114e0503b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct global_State</type>
      <name>global_State</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>ab26aa001dc34a1fd8f2d4ca20e1667c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaE_setdebt</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>af1b915fc323a9a154d892b1c16b8cc6c</anchor>
      <arglist>(global_State *g, l_mem debt)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaE_freethread</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a0882226c718293b23af460f7e2faeef0</anchor>
      <arglist>(lua_State *L, lua_State *L1)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC CallInfo *</type>
      <name>luaE_extendCI</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>aad92caaae77beaadf1d10954133eb53e</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaE_freeCI</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>afd548baa613a5be59f9724df0b3c179c</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaE_shrinkCI</name>
      <anchorfile>lstate_8h.html</anchorfile>
      <anchor>a5f4d20913889e46b69f0a54b10a9a545</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lstring.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lstring_8h</filename>
    <includes id="lgc_8h" name="lgc.h" local="yes" imported="no">lgc.h</includes>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lstate_8h" name="lstate.h" local="yes" imported="no">lstate.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>sizelstring</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a160d701eba216310b09be7447f47794d</anchor>
      <arglist>(l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sizeludata</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>af550b1929a14abb749b87c0c940b5f41</anchor>
      <arglist>(l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>sizeudata</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a6f33920ba30f126225528b62bf50c673</anchor>
      <arglist>(u)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaS_newliteral</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a1cd2754b136ed096325a76c6d16a82f5</anchor>
      <arglist>(L, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>isreserved</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a7b490cd8212260e1cf975f59a16fb745</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>eqshrstr</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>add3806315bf73de7d3138c019ed7c0ce</anchor>
      <arglist>(a, b)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC unsigned int</type>
      <name>luaS_hash</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a23cbca1bd5855804bd1834660110fb51</anchor>
      <arglist>(const char *str, size_t l, unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC unsigned int</type>
      <name>luaS_hashlongstr</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>aaa383bdce27b05699fb1bc432220abbf</anchor>
      <arglist>(TString *ts)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaS_eqlngstr</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a11b7f1ae66d3102d667159acefc3d643</anchor>
      <arglist>(TString *a, TString *b)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaS_resize</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a44d549eb0ace165927a896f37330e2cd</anchor>
      <arglist>(lua_State *L, int newsize)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaS_clearcache</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>adf6ce45154f1aabbdec670cef4d9a955</anchor>
      <arglist>(global_State *g)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaS_init</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a83805363ffda500e327df43007dc0208</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaS_remove</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a187dea46b6f3964a1eb7446627ef3fdc</anchor>
      <arglist>(lua_State *L, TString *ts)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC Udata *</type>
      <name>luaS_newudata</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a44ab01a4d7ca4e827d2d9cc0707aa672</anchor>
      <arglist>(lua_State *L, size_t s)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC TString *</type>
      <name>luaS_newlstr</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a248e72694b9116b07b2e7f4a9a3a5331</anchor>
      <arglist>(lua_State *L, const char *str, size_t l)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC TString *</type>
      <name>luaS_new</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>a6929da8cfde3e74a0d51a6467909ef9d</anchor>
      <arglist>(lua_State *L, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC TString *</type>
      <name>luaS_createlngstrobj</name>
      <anchorfile>lstring_8h.html</anchorfile>
      <anchor>ab2f7b029336ac9813aa287a840e2453f</anchor>
      <arglist>(lua_State *L, size_t l)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ltable.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>ltable_8h</filename>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>gnode</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a644cfa3b6d4be1782e818a8340b5f78b</anchor>
      <arglist>(t, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gval</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>acbbecd9bd8fbb72a17f6e2f5acf7113d</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnext</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>aac0e00b2296e00cfc818b74f1aff4f8b</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gkey</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>ad8f233e3b7156cd470d0ac21d7b54c11</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>wgkey</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a7ae1abecac0894a6335e89f66fa972b6</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>invalidateTMcache</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a69534d37fbaf464430636bf437108530</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>keyfromval</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a1f503b89efef04617729e94f0a5b5798</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const TValue *</type>
      <name>luaH_getint</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a9334b69708639205cd6692e5d72b1b37</anchor>
      <arglist>(Table *t, lua_Integer key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaH_setint</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>ac62838e269732b63812012592c454462</anchor>
      <arglist>(lua_State *L, Table *t, lua_Integer key, TValue *value)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const TValue *</type>
      <name>luaH_getshortstr</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>afaf2c4ded84b66a01946bec42e992e9c</anchor>
      <arglist>(Table *t, TString *key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const TValue *</type>
      <name>luaH_getstr</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>aa15b03691edbc1f540a568518753f2d0</anchor>
      <arglist>(Table *t, TString *key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const TValue *</type>
      <name>luaH_get</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>ad2db74e05e39b56bde8e580759ac2144</anchor>
      <arglist>(Table *t, const TValue *key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC TValue *</type>
      <name>luaH_newkey</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a61547e63b2d74aa68da53a7fd235e77e</anchor>
      <arglist>(lua_State *L, Table *t, const TValue *key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC TValue *</type>
      <name>luaH_set</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>aad12092dcea6ae55728aadeeb0210d91</anchor>
      <arglist>(lua_State *L, Table *t, const TValue *key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC Table *</type>
      <name>luaH_new</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a6c2bd58b13986496a52f597b005a0016</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaH_resize</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>ae5c4f9153b2f7118209c50711409b4d4</anchor>
      <arglist>(lua_State *L, Table *t, unsigned int nasize, unsigned int nhsize)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaH_resizearray</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a5a11320761545d5a718dd0dd57ae1d7e</anchor>
      <arglist>(lua_State *L, Table *t, unsigned int nasize)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaH_free</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>aa2e2ed92ac2178bb87aa3a178c0a83bb</anchor>
      <arglist>(lua_State *L, Table *t)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaH_next</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a55be2c48e6e2c113dabda3819f5301e7</anchor>
      <arglist>(lua_State *L, Table *t, StkId key)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaH_getn</name>
      <anchorfile>ltable_8h.html</anchorfile>
      <anchor>a636100933829e22c6430704be0f27021</anchor>
      <arglist>(Table *t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ltm.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>ltm_8h</filename>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>gfasttm</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>ab067446141992fa1bfa2f1ca720197fc</anchor>
      <arglist>(g, et, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fasttm</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a0a29ed88450f8f92330a6a411a9c8134</anchor>
      <arglist>(l, et, e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ttypename</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a7e8b7062137f42da8f8478d7e48004b3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>objtypename</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a3351c792ce6b24b95aa4adafed336cdf</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TMS</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_INDEX</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a9adb5d2c8bad970dff73ee1b9df1242e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_NEWINDEX</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a256e00a44fb438064c2eb7a8b7df206d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_GC</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a01e1b0be5e2785471e19db3665960536</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_MODE</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a5cd07c76b9aff7450d8052363ff2db4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_LEN</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1aadbac1e8e363dc76eb94aac5c8e7a7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_EQ</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1aa0074eac874e7e19d5e7c0c8a22ea592</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_ADD</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1ab9351e0ba5143d069dfb4dea793676b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_SUB</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1aae0e4c65a5c4797c1dbb82609504f0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_MUL</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a6291d50fca67ff97d7092975c2ab2dc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_MOD</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1afbd50be6cf5042cdf520fb50627081ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_POW</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1aa4846ab09831f6b351671be81cef3e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_DIV</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1aa5bfa1609bcf15e4105b991a7975ac03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_IDIV</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a23a0c8647ff6e501d7430900a08f343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BAND</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a31cb5bcae367d5cfec150a489c6472b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BOR</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a8f1f4fdbc05573cd376bf9704c31d494</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BXOR</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a7c95694d2607b50b86ef8cf1a4f2eb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_SHL</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1ac0c09418341a5d115650a2cb4a6724a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_SHR</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a893cb9ea636210f2e65dbf0bf784121b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_UNM</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a9ba35e1d71b4d8aca322d84a070528dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_BNOT</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a695b7da29958a1275089c619b5139091</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_LT</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1afa8fa71435d77125e294751a6ec36dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_LE</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1acb92c94037b451f214223a4c57eccbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_CONCAT</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1aef8c5f56efb01cf7a514270559237343</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_CALL</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1abdcb5cf63c297351b7dbd68b16b0c22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TM_N</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a69e345ae253d250b61a03f1d6871c8d1a0d06a30ffbc1d1f7e21a96f52da3ef56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const TValue *</type>
      <name>luaT_gettm</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a161791309c5c4c2011be595a751d0252</anchor>
      <arglist>(Table *events, TMS event, TString *ename)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC const TValue *</type>
      <name>luaT_gettmbyobj</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a838fb2244ed83c7e793d45b6bd06ac73</anchor>
      <arglist>(lua_State *L, const TValue *o, TMS event)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaT_init</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>adadf25053747df0beeec91a8836b2dfc</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaT_callTM</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a2d29ad84f74a0d1b498d3a26e6cb6537</anchor>
      <arglist>(lua_State *L, const TValue *f, const TValue *p1, const TValue *p2, TValue *p3, int hasres)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaT_callbinTM</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a6de2b3f5bf0afa1b9e4e8783113f4cab</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2, StkId res, TMS event)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaT_trybinTM</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a52f9c211746126a08117801bd7e2d826</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2, StkId res, TMS event)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaT_callorderTM</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a42fa775919957ebfb826d96c80e65f92</anchor>
      <arglist>(lua_State *L, const TValue *p1, const TValue *p2, TMS event)</arglist>
    </member>
    <member kind="variable">
      <type>LUAI_DDEC const char *const</type>
      <name>luaT_typenames_</name>
      <anchorfile>ltm_8h.html</anchorfile>
      <anchor>a42f4c342f551b4b5c2bd7d91a246d846</anchor>
      <arglist>[LUA_TOTALTAGS]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lua.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lua_8h</filename>
    <includes id="luaconf_8h" name="luaconf.h" local="yes" imported="no">luaconf.h</includes>
    <class kind="struct">lua_Debug</class>
    <member kind="define">
      <type>#define</type>
      <name>LUA_VERSION_MAJOR</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a63a596b6a839201a9461aefb2b5297c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_VERSION_MINOR</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6650b301b9f1e26623859bd07a6952c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_VERSION_NUM</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a4c575ef5fb9bad1872613a9d832486a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_VERSION_RELEASE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a5443a01f69acbb1eee51f4e9795410c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_VERSION</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3818e6f6538c9f42e9522c74334df03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_RELEASE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>abeb7a5ea7080e8ef597181124801f759</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NJLI_VERSION</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a5035a2755ead74602c44b7a9c4834e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NJLI_RELEASE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af4a89bd59d91b409c19fa82fdf10510e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NJLI_COPYRIGHT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af0f28dd6020cadf6fdb622c9fdacd18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_COPYRIGHT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a5126fa04dbeee0b9118c769beadcd62d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_AUTHORS</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab6ff0964a416a9a7c1e90337c965f102</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_SIGNATURE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af21c9fa681dc005c17a7b288882cae1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MULTRET</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ace3545adc11664c2f2b152fbe8b6283c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_REGISTRYINDEX</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3524c2bbc8fcf847dc083246b62945dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_upvalueindex</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac3aa6665c25070f282c9827ec919fe6a</anchor>
      <arglist>(i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OK</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab969ff78cb1b63efa2bba3bdfa6fff5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_YIELD</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab69f4bd0c0693d4c8fcfc0ebaeb2806b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ERRRUN</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af4bd6d4de5f10de738f81d007982abed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ERRSYNTAX</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a779d4c0fc1c9da41b7d983646267e11f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ERRMEM</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac28ced8d63f58b5164a298d7d254f658</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ERRGCMM</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af5c08bcf31240a1a5cd9754c6039d00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ERRERR</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a295ea44b6036e266b06e5de0f8ff24e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TNONE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a39c27eef097c704eee3536906dea5380</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TNIL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ae38a6fb8c687b8bfab211b7675a695ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TBOOLEAN</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a611808ed12d4c2aee2a9e298a9d9a9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TLIGHTUSERDATA</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aa030c2d649070173902c8094d8e0e2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TNUMBER</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a7f62ecb240cb38da9c8a53b41fe21ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TSTRING</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a57de20d87bb5131a3159f2bd52e3fab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TTABLE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a31620fd8da5b655b7879e16a116ec31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TFUNCTION</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>adaa7fa6e2561c1bc428ba8d265171494</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TUSERDATA</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a84fd4c52cea4073671a4cd0eb7026dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TTHREAD</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a028a8d8aae9580c465aabcd0c11334d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_NUMTAGS</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>abf59b4e3180540d3ee3b10da19d02ee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MINSTACK</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ad0180b89de8a4425cb2a1a3e3f793aa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_RIDX_MAINTHREAD</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aafaecd92640c28ca5bc0169bfcdd2f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_RIDX_GLOBALS</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a08ad697e382a0042a439bc9748fa2d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_RIDX_LAST</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a559a3977ef268b67c8b84ff44af58130</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPADD</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>acfd183382ff4ae12fc5f987e969f9e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPSUB</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a4f3cb6128bd199ff110a205f9807be29</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPMUL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a62ad68cacfd4a6add7757e7c9515389f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPMOD</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a92ae2587e93cb450c82ce23682e4a222</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPPOW</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ad9cff37d2d620494406c11d285c166a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPDIV</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aec6bf4df427174d6e5f1eb67fa2a39b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPIDIV</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af47e0652301e786beec5c429ae6ac5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPBAND</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a77e346c2c567a526f648076bebe49784</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPBOR</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a1209ad5d9fd73655cb81d30a9e10762e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPBXOR</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0891e610cda9a66b8e914ff8646da47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPSHL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a08b0a2e07d6449b3424453f32283319c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPSHR</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2544bce8f2417ba242131c8dc466f454</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPUNM</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ae976b4a61ff4d4b3bb8cd85cdcceda10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPBNOT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a57e9cb582d0a570cd482936771be1ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPEQ</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac03b3a20eb47ae78f0ba9de673dbbc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPLT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0386da34771797273cad6b7a4b2ce53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OPLE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a110fe48591b6c46a89fdb0028a461717</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_call</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a89cbf40f871b6fae2dd2df814c7ac1ba</anchor>
      <arglist>(L, n, r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_pcall</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a589d7e3fd4c388d64056c88bf4672431</anchor>
      <arglist>(L, n, r, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_yield</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a19e4e5528fbd5bf4c31e5ff6604e5a38</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCSTOP</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a7080a7110a1b37afc6ea2f706e944bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCRESTART</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a73701e5990022e938e90828a2c8291a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCCOLLECT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a59b8b65be08a10442ea2ae41289f5073</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCCOUNT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3f8f1ebdffa4dbfe2dd89c2fd86bd7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCCOUNTB</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a99f1685cd6789e0b9bbd2a4c080fbaed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCSTEP</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9e7f3eaf2e269c3422aea3fd7c8973ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCSETPAUSE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a28342bd4f96a077c7447489073dfa376</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCSETSTEPMUL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af07b3449c8e3ffdd62649443f32e1931</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_GCISRUNNING</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a5bdb85acea7589c5b21ea88dcb4d6179</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_getextraspace</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab1c3cbd392803fa526251bea4867dee1</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_tonumber</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3237a0507d51d772dadd4c560a75af17</anchor>
      <arglist>(L, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_tointeger</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a1365e48377a3b567e9d88423b2a6345c</anchor>
      <arglist>(L, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_pop</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>abb8eae2164badeafdb037bc1e03cc822</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_newtable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aa59db6b784aa1ec954599a44168c7761</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_register</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ae1162e4a80396145544aa03312c60d8c</anchor>
      <arglist>(L, n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_pushcfunction</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2e4fbbe97182bf90004379202202f2b9</anchor>
      <arglist>(L, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_isfunction</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a7537af276c81906c144f29cd25b93315</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_istable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a161af51893c5f79dacc1c382416a5f27</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_islightuserdata</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a46c0d924f3492bbe10007a74e00b43aa</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_isnil</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a86d737d7002e7e94023765397c6eef20</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_isboolean</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af4f579ead7d5ea837d8d708186033502</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_isthread</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0c346eeb2eee1d2e9b9920fb9b9d7fc9</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_isnone</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ad054300429f1094d3692313abc733ddf</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_isnoneornil</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af51702bb75a31bb4a279953ee386d533</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_pushliteral</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a47854189a679002ed743ebbcb30b1b26</anchor>
      <arglist>(L, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_pushglobaltable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>abf88c897458bd9848010301cb46ade18</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_tostring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac813fc3bc1886ba17c363d5b4c6e7ef1</anchor>
      <arglist>(L, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_insert</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a1ba55afa0e7f756a4599e86cf46d92e0</anchor>
      <arglist>(L, idx)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_remove</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a7664dec8f7220c706b7e71ad3227cc78</anchor>
      <arglist>(L, idx)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_replace</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a09daca42852c6356e4b415c46eba5955</anchor>
      <arglist>(L, idx)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_HOOKCALL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab7cc83a523db06d92466167ebc3a65f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_HOOKRET</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a86f6d196d7c800de07bafe9603881485</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_HOOKLINE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af2e15cf6167fde2aab753f2a8228de06</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_HOOKCOUNT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6c7cb905c4d6a2d21e6261b6ccec7298</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_HOOKTAILCALL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a88e40511ed11dc891fec34612a496327</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MASKCALL</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3b3ff95f914cf6ff4d46c87e8a648489</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MASKRET</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af0345e20a0268525a82cd71ab3ecb5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MASKLINE</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a671bc8ae0eddd679411c7f2401a594cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MASKCOUNT</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a29927bc26e642df4f842e0235d290c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct lua_State</type>
      <name>lua_State</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a28186297f2e9f2de0652504633de8fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LUA_NUMBER</type>
      <name>lua_Number</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af0a6ed3b852d680769cfc410a0672172</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LUA_INTEGER</type>
      <name>lua_Integer</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a362144baa0cfb14dc38fd21438053d73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LUA_UNSIGNED</type>
      <name>lua_Unsigned</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2357bdcd9af1aaef0a6895a9c3b7eccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LUA_KCONTEXT</type>
      <name>lua_KContext</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0c565e13b66764da08aa2c68fe4365f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>lua_CFunction</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a878b7e392e78661a374cf1c3073029b9</anchor>
      <arglist>)(lua_State *L)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>lua_KFunction</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a4bfd58d9192edfdcb7238de00bd0202c</anchor>
      <arglist>)(lua_State *L, int status, lua_KContext ctx)</arglist>
    </member>
    <member kind="typedef">
      <type>const char *(*</type>
      <name>lua_Reader</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a4081d57135fee907807ba5070d528fdf</anchor>
      <arglist>)(lua_State *L, void *ud, size_t *sz)</arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>lua_Writer</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a855729196d7066b2da21178284868a8d</anchor>
      <arglist>)(lua_State *L, const void *p, size_t sz, void *ud)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>lua_Alloc</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2fee348bffcc82b15c626b27f66a748b</anchor>
      <arglist>)(void *ud, void *ptr, size_t osize, size_t nsize)</arglist>
    </member>
    <member kind="typedef">
      <type>struct lua_Debug</type>
      <name>lua_Debug</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a13a607c625e9cb25bf453b41323857f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>lua_Hook</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aa00de66eff087aef1fdd44f5b3bb9a0b</anchor>
      <arglist>)(lua_State *L, lua_Debug *ar)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_State *()</type>
      <name>lua_newstate</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af722e4ac7fc0eba5920f59f0162c1b97</anchor>
      <arglist>(lua_Alloc f, void *ud)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_close</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>afe030a97e84f24dfab3afb598faa2fff</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_State *()</type>
      <name>lua_newthread</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6a7867e39b589ae581e2ed837cbc6ea4</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_CFunction()</type>
      <name>lua_atpanic</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a21ccd6b330c56c62fc3d0f15dd59f7a7</anchor>
      <arglist>(lua_State *L, lua_CFunction panicf)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const lua_Number *()</type>
      <name>lua_version</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3f447e349a419d213a7ce25786fd41a9</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_absindex</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0b801f6cd9f8420053c0bb053a38cc9a</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_gettop</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac5d7d4db9186b87ab018916e8826f008</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_settop</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6cb9c62b9d85b1ad2a04d72bcb733816</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushvalue</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a95e1c0a61aff11059655e6d246bcace7</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_rotate</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af42436f02336933ec56d0db874b4d97b</anchor>
      <arglist>(lua_State *L, int idx, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_copy</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a7ca1468a179ad07411a0caf7d7dba9f4</anchor>
      <arglist>(lua_State *L, int fromidx, int toidx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_checkstack</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3da4830349a139e15b4c08ced6739f0a</anchor>
      <arglist>(lua_State *L, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_xmove</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a389cf4bf773f353508a28293143d403e</anchor>
      <arglist>(lua_State *from, lua_State *to, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_isnumber</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2b5321e5370d82564c138e9dd8ffc9a5</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_isstring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a70f6031d538713cb3b6093adbc658909</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_iscfunction</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6b2ce32286576a8e36fe4629662cb536</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_isinteger</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af8f87f4e8a57a2168837c00c1ea4a41d</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_isuserdata</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af4cc013f4e4e84fc89bab292bd410981</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_type</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aa988ba5b97ff838ccb92babd63063273</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_typename</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a963a421b920cd7ce229f82091eab18a9</anchor>
      <arglist>(lua_State *L, int tp)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_Number()</type>
      <name>lua_tonumberx</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a5da44cbd6acc89833d4941bf044989c3</anchor>
      <arglist>(lua_State *L, int idx, int *isnum)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_Integer()</type>
      <name>lua_tointegerx</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a46cfc259a847998dfaf2db69e3f4f9f8</anchor>
      <arglist>(lua_State *L, int idx, int *isnum)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_toboolean</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0f530f104aeaddeeb63b27dc18b42d27</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_tolstring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aabf845b1c7ffc0462988b67ba83955cf</anchor>
      <arglist>(lua_State *L, int idx, size_t *len)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API size_t()</type>
      <name>lua_rawlen</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a828562832e88d7c7b950c252adff79e9</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_CFunction()</type>
      <name>lua_tocfunction</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a8c9a532a84b03d90b0a103c007f871b8</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void *()</type>
      <name>lua_touserdata</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3b3106346d9739a64d48be4e30368dec</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_State *()</type>
      <name>lua_tothread</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a8ad0bb2b578f5b6e84511431260a5818</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const void *()</type>
      <name>lua_topointer</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ae00a730cd408773f7a4122fccfbbb91a</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_arith</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab0a8e0d4a119fa51c2785e25d5b5aa08</anchor>
      <arglist>(lua_State *L, int op)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_rawequal</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2cd7fef8e86adabbfec04ddb15aeebda</anchor>
      <arglist>(lua_State *L, int idx1, int idx2)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_compare</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a603a5975f5a19c1824e6af53c1326b5c</anchor>
      <arglist>(lua_State *L, int idx1, int idx2, int op)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushnil</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a8bd9c4137a90833221f48dd16659c9e4</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushnumber</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a77807056ba032d64b2def2b57dc53d53</anchor>
      <arglist>(lua_State *L, lua_Number n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushinteger</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aea46fa9bf358947f5c0a1bf266b26154</anchor>
      <arglist>(lua_State *L, lua_Integer n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_pushlstring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a48a8d31a66ddacf1ea049b980cf09ab2</anchor>
      <arglist>(lua_State *L, const char *s, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_pushstring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a341ab0333f0da3035bb3a1266b3bb41e</anchor>
      <arglist>(lua_State *L, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_pushvfstring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a13fb1100c2e3942aa6c69baaf7e3f7cd</anchor>
      <arglist>(lua_State *L, const char *fmt, va_list argp)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_pushfstring</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af4a7bd8fa65e507e36aff61af8db117d</anchor>
      <arglist>(lua_State *L, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushcclosure</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a89f758ed8996c5f405cb7dfb41f78337</anchor>
      <arglist>(lua_State *L, lua_CFunction fn, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushboolean</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9d7bacf1769dcf7cff7ba7271041e61c</anchor>
      <arglist>(lua_State *L, int b)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_pushlightuserdata</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9d6c960026cbee9ffb95a9d1753675e2</anchor>
      <arglist>(lua_State *L, void *p)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_pushthread</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a118bd9effa8d54ddcbe37bd5cb70a4b6</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_getglobal</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aed0bba8f94a9dc573ac77becd0f0c5e9</anchor>
      <arglist>(lua_State *L, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_gettable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aaf6927ff4c73814c84d8ffca44d2fda6</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_getfield</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aa97386935b690dd478abd7c6fb89bef8</anchor>
      <arglist>(lua_State *L, int idx, const char *k)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_geti</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aa61540e05598186dd6afb26e0f37716c</anchor>
      <arglist>(lua_State *L, int idx, lua_Integer n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_rawget</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ae8f0d7f0543fcfe008d5ab1bab1fcd21</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_rawgeti</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a4cb16fd79ac268b68742136d6db8d288</anchor>
      <arglist>(lua_State *L, int idx, lua_Integer n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_rawgetp</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a8aaccfd5ff3c7acbbd8a48f325a0b779</anchor>
      <arglist>(lua_State *L, int idx, const void *p)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_createtable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a022ddaeee46ccb89860c78480e54db05</anchor>
      <arglist>(lua_State *L, int narr, int nrec)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void *()</type>
      <name>lua_newuserdata</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0ed440a42dac5e7faaf51163b274c43c</anchor>
      <arglist>(lua_State *L, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_getmetatable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a15b983a1c2fd3c7ab7810c4aa0096567</anchor>
      <arglist>(lua_State *L, int objindex)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_getuservalue</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6b9ae2fc86242f72689b16b5b7168c09</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_setglobal</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a8da855aa334f38b822cbaceda0d633be</anchor>
      <arglist>(lua_State *L, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_settable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aeda173d104e3a566ccaac89a1f64a5eb</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_setfield</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9580a15c141cbe4bf2a63fea625c3878</anchor>
      <arglist>(lua_State *L, int idx, const char *k)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_seti</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a12ba17fc94b8cf0122aa367170688453</anchor>
      <arglist>(lua_State *L, int idx, lua_Integer n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_rawset</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3db5cd3ce7ae703c39d54495be44aafc</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_rawseti</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a5e58b5585938f5b4eac93d8dc2c3348c</anchor>
      <arglist>(lua_State *L, int idx, lua_Integer n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_rawsetp</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab919ec94612961d8ca6eebaddd43c5f6</anchor>
      <arglist>(lua_State *L, int idx, const void *p)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_setmetatable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a0b834b6a9cd96b141385df14bd0272a4</anchor>
      <arglist>(lua_State *L, int objindex)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_setuservalue</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a372a23882edb574ec705953e4994c2a5</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_callk</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aeebb647cb91c051b1955fac1207de386</anchor>
      <arglist>(lua_State *L, int nargs, int nresults, lua_KContext ctx, lua_KFunction k)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_pcallk</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab03ab465d4ca870dc66e228b8dfd3f06</anchor>
      <arglist>(lua_State *L, int nargs, int nresults, int errfunc, lua_KContext ctx, lua_KFunction k)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_load</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a3f4c1ed5e0bd437dc527d62c5768b463</anchor>
      <arglist>(lua_State *L, lua_Reader reader, void *dt, const char *chunkname, const char *mode)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_dump</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9ddf288a81529204406f6d88eaa4486d</anchor>
      <arglist>(lua_State *L, lua_Writer writer, void *data, int strip)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_yieldk</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af2786755dac30d9e89f9a02948a84def</anchor>
      <arglist>(lua_State *L, int nresults, lua_KContext ctx, lua_KFunction k)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_resume</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a434479f022eda738b99000aad5ddd929</anchor>
      <arglist>(lua_State *L, lua_State *from, int narg)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_status</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af5cd8db0ed930193f1bf67c583666f91</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_isyieldable</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab93620938b5c1b2ea729923d888404a9</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_gc</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6bac487d3f900b21271e8c591bd801cd</anchor>
      <arglist>(lua_State *L, int what, int data)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_error</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aae6c05ddea7bd110a3e84595ef92e601</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_next</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2a62b957ab95d9b542bf7d02794181e6</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_concat</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a4eba0457df5bafff4d44071d1d8080b6</anchor>
      <arglist>(lua_State *L, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_len</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac7ade66f92b5e325c42371926f879818</anchor>
      <arglist>(lua_State *L, int idx)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API size_t()</type>
      <name>lua_stringtonumber</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af4d885e44232f561cfc508a71e144f8f</anchor>
      <arglist>(lua_State *L, const char *s)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_Alloc()</type>
      <name>lua_getallocf</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ab5b8729206c208fbb794c9c2840b0812</anchor>
      <arglist>(lua_State *L, void **ud)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_setallocf</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9d88848772cf14b58792115fedf4cd3c</anchor>
      <arglist>(lua_State *L, lua_Alloc f, void *ud)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_getstack</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a8b921d13d8b79983b19e1a7964219bc6</anchor>
      <arglist>(lua_State *L, int level, lua_Debug *ar)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_getinfo</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a9cf23593facaabc7fb42e4d232a507d7</anchor>
      <arglist>(lua_State *L, const char *what, lua_Debug *ar)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_getlocal</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>afab4c753a151dd222a3de6ca5daf4ce2</anchor>
      <arglist>(lua_State *L, const lua_Debug *ar, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_setlocal</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a009cbda7b68bd7047677d280db4ea064</anchor>
      <arglist>(lua_State *L, const lua_Debug *ar, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_getupvalue</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>af30136978fa4de5e7fa8a434b8ca8611</anchor>
      <arglist>(lua_State *L, int funcindex, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API const char *()</type>
      <name>lua_setupvalue</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a6a2640dd28d1b773dcf36f1c8112835e</anchor>
      <arglist>(lua_State *L, int funcindex, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void *()</type>
      <name>lua_upvalueid</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>ac0df7bf2b2de17979cb3e2d96dc78bcb</anchor>
      <arglist>(lua_State *L, int fidx, int n)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_upvaluejoin</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a62aee315ee713d18eefced3cedade7ae</anchor>
      <arglist>(lua_State *L, int fidx1, int n1, int fidx2, int n2)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API void()</type>
      <name>lua_sethook</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>aed21cb21ee0b784d2b0aff1f7b3806c1</anchor>
      <arglist>(lua_State *L, lua_Hook func, int mask, int count)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API lua_Hook()</type>
      <name>lua_gethook</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a2bd2c84200d910a5eb375b24ec4b34b6</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_gethookmask</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>adb80071bb21edac0ca5bd9608b78c8b4</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUA_API int()</type>
      <name>lua_gethookcount</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>a7c56ea7a2c0c7320c26abe013ebd9bf3</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>lua_ident</name>
      <anchorfile>lua_8h.html</anchorfile>
      <anchor>acbf4dc2e5f80547c7f54f41a179258b2</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>luaconf.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>luaconf_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_BITSINT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a0c7b3a9267393f2bb8d5fe80a0c1988a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INT_INT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a5461d3c4dc325bf5fcf098a3f03863c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INT_LONG</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>ab1f6c4b114cfd661371c87276e44da78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INT_LONGLONG</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a2f18aa3c06d6b4b001c02347e68014c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_FLOAT_FLOAT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a12fe69eaae577fc72deec2a0ecd00e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_FLOAT_DOUBLE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a5231cde35be0cc5880683225b8b82d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_FLOAT_LONGDOUBLE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>aba2804d23f0e9cc5ff8bd1052b764114</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INT_TYPE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a824d3b6b74c7366b0938085f22dd7e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_FLOAT_TYPE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>af2869411745f915b895705306bee32b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_VDIR</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a5b5da3c6dbd6545245caa7e23243340d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_ROOT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a910ba17d2686e3a014e5f8464334fa24</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_LDIR</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a3c00e6041f7f276f3c8e8125c7d28cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_CDIR</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a6cb5bc40fe287c1223c0b461372ac080</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_PATH_DEFAULT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>ade5464817bc6ac4c929ac914191c6a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_CPATH_DEFAULT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a45f20f03a0802b0d90d75639a339b406</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_DIRSEP</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a2e611ade620cc30a6f0c306ae39d27d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_API</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>af88575eb79fdd88b1cce4533ab5cbe69</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUALIB_API</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a373d5a572c4c65a5f35a6e4ee9293c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAMOD_API</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a8e877216dd2f0cf9a68255b494f82f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_FUNC</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a3f43b35a70c93f2cfde1db42a5a24f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_DDEC</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a53ca75c7929ee4cb575c73cf76dd37af</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_DDEF</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>affa3a74c87c69373c262fdbdc7f97837</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_floor</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a89e74d547b8879cf8d10c3e956c283b9</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_number2str</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a2981eb06b0460773fb1c1a21c93c8d8d</anchor>
      <arglist>(s, sz, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_numbertointeger</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a4b0d24a7a90003778668e2d01831bb88</anchor>
      <arglist>(n, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_NUMBER</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a459532244178d9e61e65aaf40fb42de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_mathlim</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a481ffe9969a0e45b61885e6ccfec8ed7</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_UACNUMBER</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>ae3594e990592ab0bf7243dad64c76d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_NUMBER_FRMLEN</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a673aa80d0742c8b420ddd05844432d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_NUMBER_FMT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a8d91a1bf1619825be5a0275c36f20216</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_mathop</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a919f548d82dc9a0681dd0ba8996d986d</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_str2number</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a4b751913c0b1598d6de4acb99ae48f5a</anchor>
      <arglist>(s, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_INTEGER_FMT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a0147f0a7d04c83b70f691a7549c1e3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_integer2str</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a6bd94665fb1db85f2bb6aed3fa1cb455</anchor>
      <arglist>(s, sz, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_UACINT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a7a9d650ef5ea12d81160db595fe9f177</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_UNSIGNED</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>aebcf6bf84bcfb38b3004d9ff0b937c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>l_sprintf</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a66e2cc299fcf55c169a67b5b3781a955</anchor>
      <arglist>(s, sz, f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_strx2number</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a4b53a01f7ac167204d227cb6e8d8c1e2</anchor>
      <arglist>(s, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_number2strx</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>aac67fd4fc4890ea6ee5a623abfae127a</anchor>
      <arglist>(L, b, sz, f, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_KCONTEXT</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>aa0ee03595b0ac0cf402754071af956de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_getlocaledecpoint</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a20bcdecbc9221570e70455f767061698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAI_MAXSTACK</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>ad7b065ae58f10bfa5800866b84de5f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_EXTRASPACE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>ae25668dff58d6257a4fc5b01c1e5820b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_IDSIZE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a49c31c00aa2852af25a2c43046a21aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAL_BUFFERSIZE</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>af360ad37a770dfdc29291a99c398f42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_QL</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>afa035bf534f18141e29c98e3a222074c</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_QS</name>
      <anchorfile>luaconf_8h.html</anchorfile>
      <anchor>a036be0033b6a9a18e657d5cad9d501aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lualib.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lualib_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LUA_COLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a8548d3b29e4dffa749a4ca4288bec7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_TABLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>aa9da6ee4401c3ea9591a60ae5514a4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_IOLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a54fc1c91f79390071a7b7fc341c9aac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_OSLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>ac89a67224db2eecc20aded867531e26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_STRLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>aa973f7834b4cbf409e5a2752d91cf2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_UTF8LIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>abc11555bcb492e59444d8774bd8970d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_MATHLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a18b55f45d0662ae9c460e4607913bbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_DBLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a4c656e7d665aa72e62976adc701795f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_LOADLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a875eb4d5f4d22b844254330b45f02b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_NJLILIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>acd2f8ccc9d48f5ba63ffcf486be6d7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_BULLETLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a412981723e71c8accf3189b2dbe06b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_BITLIBNAME</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a240c66aede41c8efa33c00066709c992</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_assert</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>abea1f576564ec516f6efe8c014bdef2d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_base</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a1aebe7162861d1f3fe9c0d6d269031d4</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_coroutine</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a8cfa0568db31dd931c31414bf20f26b6</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_table</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a3010f48526cfc95537c1192011374eb3</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_io</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a686b841d953f3113ddc7538d69debce7</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_os</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a17174b03309597e0644e9f1d6ab830f1</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_string</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a3cc052c1be81497507ee76524482eaec</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_utf8</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>af63b59938ae7be8ad222033217b99775</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_math</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>ad9a992586e14f1dd04f4983b8740605a</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_debug</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a6fde14068d6456a15b45173face90304</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_package</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a05e0befc0439f926b6152129ab4f8dea</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_njli</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a37dc27dc17b6c9f2e8a6174b837bc115</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_bullet</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a5a3a1c0640f9b94fe0b460234c721f45</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAMOD_API int()</type>
      <name>luaopen_bit</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a3d619aae55cd84e77b3b7e4bfa7b4012</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUALIB_API void()</type>
      <name>luaL_openlibs</name>
      <anchorfile>lualib_8h.html</anchorfile>
      <anchor>a3744dadc460fb2a20df474eef4d4253d</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lundump.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lundump_8h</filename>
    <includes id="llimits_8h" name="llimits.h" local="yes" imported="no">llimits.h</includes>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="lzio_8h" name="lzio.h" local="yes" imported="no">lzio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LUAC_DATA</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>ad6f33b546a90e78ddb67428b712b48ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAC_INT</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>af8b5bd7f864ed14aef7a9e7405ce6aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAC_NUM</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>a83a08bb2d400b526bb4a2f449523dd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MYINT</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>a8b5a7241ca8624862545e5fdfb94cf3b</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAC_VERSION</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>aaef225d352d4ab1461adc02e4fa027cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUAC_FORMAT</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>a1898203259aab6e1d60737b1e95c2adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC LClosure *</type>
      <name>luaU_undump</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>ae777344c08970a8fc2de3624c4067dde</anchor>
      <arglist>(lua_State *L, ZIO *Z, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaU_dump</name>
      <anchorfile>lundump_8h.html</anchorfile>
      <anchor>a2b9d33dfd898f6284de183d168556786</anchor>
      <arglist>(lua_State *L, const Proto *f, lua_Writer w, void *data, int strip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lvm.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lvm_8h</filename>
    <includes id="ldo_8h" name="ldo.h" local="yes" imported="no">ldo.h</includes>
    <includes id="lobject_8h" name="lobject.h" local="yes" imported="no">lobject.h</includes>
    <includes id="ltm_8h" name="ltm.h" local="yes" imported="no">ltm.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>cvt2str</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aa6af30bdcb0dce1826c81061cec16d81</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cvt2num</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a19856e050e5fb27e8c0babf15cf1a1fa</anchor>
      <arglist>(o)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_FLOORN2I</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a8fad4fb73165b35bb6e1b9718040703e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tonumber</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>af9edcc5da8ea1ac07ffdf79fbe5bb95c</anchor>
      <arglist>(o, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>tointeger</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aa0972161c02de57dbe993112eb5c5583</anchor>
      <arglist>(o, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>intop</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a6c054eb9ce53c1b282e7ff0088895a37</anchor>
      <arglist>(op, v1, v2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaV_rawequalobj</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aedbcec0d2a0e951710844d11dfa59a07</anchor>
      <arglist>(t1, t2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaV_fastget</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a963493be49136f1100f5989b770814ba</anchor>
      <arglist>(L, t, k, aux, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaV_gettable</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>abb2616613b8c0572b9b2085c96eff677</anchor>
      <arglist>(L, t, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaV_fastset</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a2c5c7df3fb4858268e1cb4ff6ef8cf48</anchor>
      <arglist>(L, t, k, slot, f, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaV_settable</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>ae6743eb78778265fe45078b9399960e4</anchor>
      <arglist>(L, t, k, v)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaV_equalobj</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a2f779d315adf5ac6a26c88409b58eeec</anchor>
      <arglist>(lua_State *L, const TValue *t1, const TValue *t2)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaV_lessthan</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a1245a563d674251ea03c7abbd1a2ca8c</anchor>
      <arglist>(lua_State *L, const TValue *l, const TValue *r)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaV_lessequal</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aa151c39c80af19e2ea6d309e7993973c</anchor>
      <arglist>(lua_State *L, const TValue *l, const TValue *r)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaV_tonumber_</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a8dde84947fb2b5ec169813216235a4ba</anchor>
      <arglist>(const TValue *obj, lua_Number *n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaV_tointeger</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aac950c9ce343d56969893821c717c27c</anchor>
      <arglist>(const TValue *obj, lua_Integer *p, int mode)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaV_finishget</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>ace9acb10e32e463083d02c6aaa812f57</anchor>
      <arglist>(lua_State *L, const TValue *t, TValue *key, StkId val, const TValue *tm)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaV_finishset</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a3d3a0762316cf81d9fd2eb19edc458f7</anchor>
      <arglist>(lua_State *L, const TValue *t, TValue *key, StkId val, const TValue *oldval)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaV_finishOp</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a5db3e64b3cc2f63c3b10b27f7ecd1d03</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaV_execute</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>ae93565adc36c6e2157dbbd875433ede1</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaV_concat</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aee84bfc563cb4bdd21a013218a289aa7</anchor>
      <arglist>(lua_State *L, int total)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC lua_Integer</type>
      <name>luaV_div</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a1cf23e7b8db2dc02842c208bcd95c053</anchor>
      <arglist>(lua_State *L, lua_Integer x, lua_Integer y)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC lua_Integer</type>
      <name>luaV_mod</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a8c64b8dbe11cb5be7617feb17c279ced</anchor>
      <arglist>(lua_State *L, lua_Integer x, lua_Integer y)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC lua_Integer</type>
      <name>luaV_shiftl</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>aa785f0ac32664e47c2d3689d75edc5e8</anchor>
      <arglist>(lua_Integer x, lua_Integer y)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaV_objlen</name>
      <anchorfile>lvm_8h.html</anchorfile>
      <anchor>a414b4b487239935324f2f16e1e7715db</anchor>
      <arglist>(lua_State *L, StkId ra, const TValue *rb)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lzio.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/lua/src/</path>
    <filename>lzio_8h</filename>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <includes id="lmem_8h" name="lmem.h" local="yes" imported="no">lmem.h</includes>
    <class kind="struct">Mbuffer</class>
    <class kind="struct">Zio</class>
    <member kind="define">
      <type>#define</type>
      <name>EOZ</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a8341bdc72db5a2f045e18440f9523008</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>zgetc</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>aecca8ea1e6dc0c97b458f77c0e3491de</anchor>
      <arglist>(z)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_initbuffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a22367cbe48563efa737ffee3f2774ae2</anchor>
      <arglist>(L, buff)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_buffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>aa51f632cb0519368a65ada80b71ea1e3</anchor>
      <arglist>(buff)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_sizebuffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a072ede62ba384b9d5fdedbb80eaf3ee1</anchor>
      <arglist>(buff)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_bufflen</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a26c3aeb9ce93f8559b0a596cf7bb1031</anchor>
      <arglist>(buff)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_buffremove</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>ab9e4cabf75529d0c2f5a809f49a25281</anchor>
      <arglist>(buff, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_resetbuffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a53c928283083a162c79e0152048affe2</anchor>
      <arglist>(buff)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_resizebuffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>ab158420acf019b3a45e8ae6e65b51fdb</anchor>
      <arglist>(L, buff, size)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>luaZ_freebuffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a549577e88246e83e4578cabd2ea030ca</anchor>
      <arglist>(L, buff)</arglist>
    </member>
    <member kind="typedef">
      <type>struct Zio</type>
      <name>ZIO</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a3a6756c936bdfffa304b1d808ce7dc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct Mbuffer</type>
      <name>Mbuffer</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>aee8c6d073751ebb3729a5c9ae1efc56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC void</type>
      <name>luaZ_init</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a182323feac5ab7363dbf654d87f057d5</anchor>
      <arglist>(lua_State *L, ZIO *z, lua_Reader reader, void *data)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC size_t</type>
      <name>luaZ_read</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a1f10428fa224047cec9e9b1756a0b733</anchor>
      <arglist>(ZIO *z, void *b, size_t n)</arglist>
    </member>
    <member kind="function">
      <type>LUAI_FUNC int</type>
      <name>luaZ_fill</name>
      <anchorfile>lzio_8h.html</anchorfile>
      <anchor>a407faec289b7559f210ac784e11a59bb</anchor>
      <arglist>(ZIO *z)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractActionable.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_actionable_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractActionable</class>
    <class kind="struct">njli::AbstractActionable::ActionableAction</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractClock.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_clock_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractClock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractDecorator.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_decorator_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractDecorator</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractFactoryObject.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_factory_object_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractFactoryObject</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractObject.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_object_8h</filename>
    <includes id="_abstract_decorator_8h" name="AbstractDecorator.h" local="yes" imported="no">AbstractDecorator.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractObject</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractState.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractState</class>
    <class kind="class">njli::Telegram</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>_abstract_state_8h.html</anchorfile>
      <anchor>a070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractStateMachine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_state_machine_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <class kind="class">njli::AbstractStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractTransform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_abstract_transform_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractTransform</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Action.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_action_8h</filename>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Action</class>
    <class kind="struct">njli::Action::Sequence</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_abstract_builder_8h</filename>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ActionBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_action_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ActionBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CameraBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_camera_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::CameraBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ClockBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_clock_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ClockBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionResponseBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_collision_response_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::CollisionResponseBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>FontBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_font_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::FontBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ButtonHUDBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_button_h_u_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ButtonHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CheckboxHUDBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_checkbox_h_u_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::CheckboxHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DropdownHUDBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_dropdown_h_u_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::DropdownHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LabelHUDBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_label_h_u_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::LabelHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_material_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::MaterialBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialPropertyBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_material_property_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::MaterialPropertyBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ShaderProgramBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_shader_program_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ShaderProgramBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SliderHUDBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_slider_h_u_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SliderHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Sprite2DBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_sprite2_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::Sprite2DBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>TextboxHUDBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/graphics/</path>
    <filename>_textbox_h_u_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::TextboxHUDBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ImageBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_image_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ImageBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>JsonJLIBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_json_j_l_i_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::JsonJLIBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LevelOfDetailBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_level_of_detail_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::LevelOfDetailBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LightBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_light_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::LightBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_node_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::NodeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeStateBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_node_state_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::NodeStateBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeStateMachineBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_node_state_machine_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::NodeStateMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleEmitterBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_particle_emitter_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ParticleEmitterBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyGhostBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/body/</path>
    <filename>_physics_body_ghost_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsBodyGhostBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyRigidBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/body/</path>
    <filename>_physics_body_rigid_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsBodyRigidBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodySoftBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/body/</path>
    <filename>_physics_body_soft_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsBodySoftBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintConeTwistBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_cone_twist_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintConeTwistBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintFixedBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_fixed_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintFixedBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_generic6_dof_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6DofBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofSpringBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_generic6_dof_spring_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpringBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintHingeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_hinge_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintHingeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintPointToPointBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_point_to_point_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintPointToPointBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintSliderBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/constraint/</path>
    <filename>_physics_constraint_slider_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraintSliderBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsCloseContactBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/</path>
    <filename>_physics_close_contact_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsCloseContactBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsContactBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/</path>
    <filename>_physics_contact_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsContactBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsFieldBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/</path>
    <filename>_physics_field_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsFieldBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsRayContactBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/</path>
    <filename>_physics_ray_contact_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsRayContactBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsWorldBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/</path>
    <filename>_physics_world_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsWorldBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox2DBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_box2_d_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsShapeBox2DBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBoxBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_box_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PhysicsShapeBoxBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBvhTriangleMeshBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_bvh_triangle_mesh_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeBvhTriangleMeshBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCapsuleBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_capsule_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeCapsuleBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_cone_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeConeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexHullBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_convex_hull_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeConvexHullBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexTriangleMeshBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_convex_triangle_mesh_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeConvexTriangleMeshBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCylinderBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_cylinder_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeCylinderBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeHeightfieldTerrainBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_heightfield_terrain_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrainBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeMultiSphereBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_multi_sphere_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeMultiSphereBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeSphereBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_sphere_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeSphereBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeStaticPlaneBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/physics/shape/</path>
    <filename>_physics_shape_static_plane_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsShapeStaticPlaneBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PlaneBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_plane_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::PlaneBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_scene_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SceneBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneStateBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_scene_state_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SceneStateBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneStateMachineBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_scene_state_machine_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SceneStateMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SkinnerBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_skinner_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SkinnerBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SoundBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/sound/</path>
    <filename>_sound_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SoundBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SpriteFrameAtlasBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_sprite_frame_atlas_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::SpriteFrameAtlasBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorAlignmentBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_alignment_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorAlignmentBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorArriveBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_arrive_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorArriveBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorCohesionBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_cohesion_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorCohesionBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorEvadeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_evade_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorEvadeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorFleeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_flee_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorFleeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorFollowPathBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_follow_path_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorFollowPathBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorHideBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_hide_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorHideBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorInterposeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_interpose_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorInterposeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorObstacleAvoidanceBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_obstacle_avoidance_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorObstacleAvoidanceBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorOffsetPursuitBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_offset_pursuit_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorOffsetPursuitBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorPursuitBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_pursuit_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorPursuitBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorSeekBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_seek_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorSeekBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorSeparationBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_separation_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorSeparationBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorWallAvoidanceBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_wall_avoidance_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorWallAvoidanceBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorWanderBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/behavior/</path>
    <filename>_steering_behavior_wander_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorWanderBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachineBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/</path>
    <filename>_steering_behavior_machine_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachineDitheredBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/</path>
    <filename>_steering_behavior_machine_dithered_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorMachineDitheredBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachinePrioritizedBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/</path>
    <filename>_steering_behavior_machine_prioritized_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorMachinePrioritizedBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachineWeightedBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/steering/</path>
    <filename>_steering_behavior_machine_weighted_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorMachineWeightedBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>StopWatchBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_stop_watch_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::StopWatchBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ThreadBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_thread_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::ThreadBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>TimerBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_timer_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::TimerBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldStateBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_world_state_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::WorldStateBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldStateMachineBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_world_state_machine_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::WorldStateMachineBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>XmlBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/builders/</path>
    <filename>_xml_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::XmlBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_camera_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Camera</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Clock.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_clock_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Clock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CollisionResponse.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_collision_response_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::CollisionResponse</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CubeBuilder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_cube_builder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::CubeBuilder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Font.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_font_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Font</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>GameClock.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_game_clock_8h</filename>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <class kind="class">njli::GameClock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NJLIGameEngineConfig.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/generated/</path>
    <filename>_n_j_l_i_game_engine_config_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>NJLIGameEngine_VERSION_MAJOR</name>
      <anchorfile>_n_j_l_i_game_engine_config_8h.html</anchorfile>
      <anchor>a90a7149ee8d93d85cfc2880b4292918a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NJLIGameEngine_VERSION_MINOR</name>
      <anchorfile>_n_j_l_i_game_engine_config_8h.html</anchorfile>
      <anchor>a7e530e1df9671d0dbdf343a0a9620ecf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>swig_runtime.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/generated/swig/lua/</path>
    <filename>swig__runtime_8h</filename>
    <includes id="lauxlib_8h" name="lauxlib.h" local="yes" imported="no">lauxlib.h</includes>
    <includes id="lua_8h" name="lua.h" local="yes" imported="no">lua.h</includes>
    <class kind="struct">swig_type_info</class>
    <class kind="struct">swig_cast_info</class>
    <class kind="struct">swig_module_info</class>
    <class kind="struct">swig_lua_var_info</class>
    <class kind="struct">swig_lua_const_info</class>
    <class kind="struct">swig_lua_attribute</class>
    <class kind="struct">swig_lua_namespace</class>
    <class kind="struct">swig_lua_class</class>
    <class kind="struct">swig_lua_userdata</class>
    <class kind="struct">swig_lua_rawdata</class>
    <member kind="define">
      <type>#define</type>
      <name>SWIGTEMPLATEDISAMBIGUATOR</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a7e84031693895e512662f5b390c6d0e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGINLINE</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a6d0a7c65b3712775e92c8bdb7acdd0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGUNUSED</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a6ee41cd160d397aa76668bf4db65e2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGUNUSEDPARM</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a6a54164d0685c632e7540c5ad32a453a</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGINTERN</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a8f2319f775e5b9d5906c9ef25d9b819a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGINTERNINLINE</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>afc5b08bb3c3cd2e3fb2e34b775346153</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGEXPORT</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aea3c8b056dcc8c1ab93f6b825cd1371b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGSTDCALL</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>adcd6410456ea7a76147d3ad95b9bcb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_UnknownError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a45817cd389e6f40d0ffb004ff0678031</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_IOError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9fcdfcd79ad6f30120990223ea16879a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_RuntimeError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a34d3d1c1310427d00140bf1cc8de3ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_IndexError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af1ed73e454bdee28cc19369784f56eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_TypeError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a2685345a18f9d5fe8a390ec8500cb916</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_DivisionByZero</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ae4cc0f5599402526dd5c2fdb80d87517</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_OverflowError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ae9c11d011d8390489595f718d7565a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_SyntaxError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a1c4e29c043d3220cedca539360e07148</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_ValueError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4c1b15a2401d60351d98df9327886280</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_SystemError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ae4a7b4ce78e031cbf5227bea38d81221</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_AttributeError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a5c83bd4d8f39d6eed1df7d3444caa2e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_MemoryError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ae1cd9de0a75c6d814815a9de66a4a46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_NullReferenceError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa11fe417abd4c5a02d31cc1a51dee007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_RUNTIME_VERSION</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4895907de5539551925ab5c03ea05d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_TYPE_TABLE_NAME</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ac619a84edecccb5e00c1b4a3180b8c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGRUNTIME</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a42cd9c1d67d803040a3e78515945afcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIGRUNTIMEINLINE</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>affa7aa2bcce5bea24a20e5b184ae0533</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_BUFFER_SIZE</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a26324fcd1baceab72680dfec078da440</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_POINTER_DISOWN</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa56139a289829795ed651d533826b65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_CAST_NEW_MEMORY</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ac8216459bfd45cbd2be36175ef6f1ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_POINTER_OWN</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a1a125b0e9c551bb9cdeb21b8e5be5b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_OK</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af9ecbac56d4c5cd6104ae8f6bb82e9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_ERROR</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>acfa11a770d66f9ca6ba170b173c56c94</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_IsOK</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aea8ef410fde907633cb76d9d18131fa1</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_ArgError</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a95bab7504841595502bac5ed195becc1</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_CASTRANKLIMIT</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a2f15c36f8b66185937b8232640be62e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_NEWOBJMASK</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a0021b435c31c3ab285b5a6f4547719e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_TMPOBJMASK</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a399dafc6302bd9b309041d5570ae94c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_BADOBJ</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a8268a243a8a840396db70f745c23c37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_OLDOBJ</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4afcf490ff5b4abbca27ca23d9af288e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_NEWOBJ</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab00ef4fde02a6d8d9653ea9edb28d3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_TMPOBJ</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab1fe70ae34b39b709eb4cfb084862236</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_AddNewMask</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af7ac7e424b623712f70e9b6640a54853</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_DelNewMask</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab3ead1d5cb36e1d79daf0bb4732957be</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_IsNewObj</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a5246ae38052e6fa0e3cca2026cdda153</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_AddTmpMask</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af8527f0123949ec90e05d0fb156c11e3</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_DelTmpMask</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ac08b44ea4ae9f73b19d915969f301a5d</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_IsTmpObj</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa8f2563a536468b40dc33843d4bb7efe</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_AddCast</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4f6f5e0444e44e48aef51f6620438a5f</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_CheckState</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a1faed8ca17e98c961611bc35fde708a9</anchor>
      <arglist>(r)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_TARGET</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a84d911ffa9c41b3a66cc7e7d3645671f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_FLAVOR_LUA</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a6e2b880437634cb73e882be20de53d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_FLAVOR_ELUA</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a00a6f75261552001dd1ac741f712d82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_FLAVOR_ELUAC</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a351d33087485b24840afe357df576385</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CONSTTAB_INT</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a81533fe9e3e23fc8a0caad2a15ddc953</anchor>
      <arglist>(B, C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CONSTTAB_FLOAT</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a86474eb3525b32c80966dde2330e9596</anchor>
      <arglist>(B, C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CONSTTAB_STRING</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9bcdad1f49921f12301ceb55b31f7f48</anchor>
      <arglist>(B, C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CONSTTAB_CHAR</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af21b898b6e053c8bb73855969e0888b0</anchor>
      <arglist>(B, C)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CONSTTAB_POINTER</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab5c3df1096e1d0596e6401e9aaf91f4b</anchor>
      <arglist>(B, C, D)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CONSTTAB_BINARY</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a38564dfb0235d7ba0f543836919b6dac</anchor>
      <arglist>(B, S, C, D)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_rawlen</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a0a129d773aae7e71b7c30370cd3c3dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_pushglobaltable</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>abf88c897458bd9848010301cb46ade18</anchor>
      <arglist>(L)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_absindex</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9c4332806d14eef7167aac79d101b5ff</anchor>
      <arglist>(L, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_rawsetp</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a703a7b5ef04cbe6e627f04bcdcebc153</anchor>
      <arglist>(L, index, ptr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>lua_rawgetp</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>afda1448f711f5b5351c3fa779e487724</anchor>
      <arglist>(L, index, ptr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_INT</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ae486ba0f8ccf6c87507633344d3f6a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_FLOAT</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9c4ea7e25de05f5a501e7163fd480b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_STRING</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af6a25edb9ad2ab838e1b1fa3e4450121</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_POINTER</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a2f4d58f9ce413585253063575c033082</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_BINARY</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af2062cfc3a6907d38c2587cdab77ae38</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_LUA_CHAR</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a50c58df5c9bd1cea902021a7f7fc9896</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_NewPointerObj</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a8eb06167550295873af166db6a49cf36</anchor>
      <arglist>(L, ptr, type, owner)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_ConvertPtr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a3a4e5f587d3994722b0628b2cc96ed42</anchor>
      <arglist>(L, idx, ptr, type, flags)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_MustGetPtr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a59f926cc14b21f2e478ac27541df0162</anchor>
      <arglist>(L, idx, type, flags, argnum, fnname)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_ConvertMember</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a019c90e4471fdd37ef65653afe55fb5c</anchor>
      <arglist>(L, idx, ptr, sz, ty)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_NewMemberObj</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a20c6437f49ae257857683ba0e7b2100f</anchor>
      <arglist>(L, ptr, sz, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_GetModule</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab97db3bbfc9e3a73de01e1ee95fa0bb5</anchor>
      <arglist>(clientdata)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_SetModule</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a673a7dcc5c15f5cffa7072785a6c7972</anchor>
      <arglist>(clientdata, pointer)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_MODULE_CLIENTDATA_TYPE</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a50d0a80dccc1d34749f07c82d6a04169</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_contract_assert</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aca11636b220cff70dac286c268c95ee6</anchor>
      <arglist>(expr, msg)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_fail</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ababf56889b69e7a569556eb38cd4f157</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_fail_arg</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a41cf11e6c8c4513cbca00772e8aef9fd</anchor>
      <arglist>(func_name, argnum, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_fail_ptr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a2075b3c34e15bf3feb67887a633ccddf</anchor>
      <arglist>(func_name, argnum, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_check_num_args</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a7e3daad25f96879be557754a9e2ed6b4</anchor>
      <arglist>(func_name, a, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_Lua_get_table</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a45e06ea798b759df9853467b13abcdfc</anchor>
      <arglist>(L, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_Lua_add_function</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4e0088e1d53848f80738e5a49f1c0cf3</anchor>
      <arglist>(L, n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_Lua_add_boolean</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>afd5580acc2cb0c0eeaf0644bac06f99e</anchor>
      <arglist>(L, n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_isptrtype</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ac24315f20782462ad057bf1c8309a616</anchor>
      <arglist>(L, I)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SWIG_DOSTRING_FAIL</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a054a85a15c821ad190018e106214a1ac</anchor>
      <arglist>(S)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>swig_converter_func</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9a51597c7c2041da303a65468011f59b</anchor>
      <arglist>)(void *, int *)</arglist>
    </member>
    <member kind="typedef">
      <type>struct swig_type_info *(*</type>
      <name>swig_dycast_func</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aee981c41d733723d60337a77630106af</anchor>
      <arglist>)(void **)</arglist>
    </member>
    <member kind="typedef">
      <type>struct swig_type_info</type>
      <name>swig_type_info</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a838fee418372997705a565cd6ecd3b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct swig_cast_info</type>
      <name>swig_cast_info</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9a04e6e78de723759e5450cd29429d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct swig_module_info</type>
      <name>swig_module_info</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>acf7d83901372902dd5cf59a611dfb320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>luaL_Reg</type>
      <name>swig_lua_method</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a89958881f4c9d723a197b20ac42f6946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct swig_lua_namespace</type>
      <name>swig_lua_namespace</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa881a157e50736ba2ad83a4f6faad472</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct swig_lua_class</type>
      <name>swig_lua_class</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a6923d1145cdb4f743ce8082c79172b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>swig_lua_base_iterator_func</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>acb5ead7109df678f22b2ec7d2203ce62</anchor>
      <arglist>)(lua_State *, swig_type_info *, int, int *ret)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_TypeNameComp</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a2f69ad4207037cb391a2b2d5915fcba2</anchor>
      <arglist>(const char *f1, const char *l1, const char *f2, const char *l2)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_TypeCmp</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a73131c439c907ed987c34da85b95a597</anchor>
      <arglist>(const char *nb, const char *tb)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_TypeEquiv</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a23ecf039d651082ffc7582c4f50af780</anchor>
      <arglist>(const char *nb, const char *tb)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME swig_cast_info *</type>
      <name>SWIG_TypeCheck</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>abd0cb78a9663e41312c8f14ab6715f04</anchor>
      <arglist>(const char *c, swig_type_info *ty)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME swig_cast_info *</type>
      <name>SWIG_TypeCheckStruct</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a898a1dfcdf96d53a2c7fd90e8500b36e</anchor>
      <arglist>(swig_type_info *from, swig_type_info *ty)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIMEINLINE void *</type>
      <name>SWIG_TypeCast</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a334486cb1e8f569c949a0384cbdb2a16</anchor>
      <arglist>(swig_cast_info *ty, void *ptr, int *newmemory)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME swig_type_info *</type>
      <name>SWIG_TypeDynamicCast</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>add8cb1a47628b36915ffa37d61452b1e</anchor>
      <arglist>(swig_type_info *ty, void **ptr)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIMEINLINE const char *</type>
      <name>SWIG_TypeName</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a68560e0bf641c9691704d6d05bac4358</anchor>
      <arglist>(const swig_type_info *ty)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME const char *</type>
      <name>SWIG_TypePrettyName</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a3f38ea686cb3f85bf6a15b08416f2684</anchor>
      <arglist>(const swig_type_info *type)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_TypeClientData</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4b0a40223812f7d43bc2f0c2342fe2f7</anchor>
      <arglist>(swig_type_info *ti, void *clientdata)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_TypeNewClientData</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a710082a7ea6978d654bad712dbebc0ee</anchor>
      <arglist>(swig_type_info *ti, void *clientdata)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME swig_type_info *</type>
      <name>SWIG_MangledTypeQueryModule</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ac63ad9b58a96793188f944c92ff40ec6</anchor>
      <arglist>(swig_module_info *start, swig_module_info *end, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME swig_type_info *</type>
      <name>SWIG_TypeQueryModule</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a5b6a2719f95288678fa55ade4493b175</anchor>
      <arglist>(swig_module_info *start, swig_module_info *end, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME char *</type>
      <name>SWIG_PackData</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a02c2ac3db8ce87dd62813334e66c9a3a</anchor>
      <arglist>(char *c, void *ptr, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME const char *</type>
      <name>SWIG_UnpackData</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a80e9e66f66413297452de92c69cdf9d7</anchor>
      <arglist>(const char *c, void *ptr, size_t sz)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME char *</type>
      <name>SWIG_PackVoidPtr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a10c5572eb6206df7c95c8a2fcde90911</anchor>
      <arglist>(char *buff, void *ptr, const char *name, size_t bsz)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME const char *</type>
      <name>SWIG_UnpackVoidPtr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ae3e13f3464cb74f7e5d9f7a50a6855c0</anchor>
      <arglist>(const char *c, void **ptr, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME char *</type>
      <name>SWIG_PackDataName</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af903e6809a1fb2ba06deff49795c6e65</anchor>
      <arglist>(char *buff, void *ptr, size_t sz, const char *name, size_t bsz)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME const char *</type>
      <name>SWIG_UnpackDataName</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a99540d89d9ffca957892cf22af3e49dd</anchor>
      <arglist>(const char *c, void *ptr, size_t sz, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_Lua_pusherrstring</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a17d5e7cfbab0914882ec82e36d22381e</anchor>
      <arglist>(lua_State *L, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_Lua_pushferrstring</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ad4708a823127d389179291ebcace732d</anchor>
      <arglist>(lua_State *L, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME swig_module_info *</type>
      <name>SWIG_Lua_GetModule</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa7e1ff7a89ff12ee84b36802220fae51</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_Lua_SetModule</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a127abd2d6d37e5b1e86d2421c751492e</anchor>
      <arglist>(lua_State *L, swig_module_info *module)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_set_immutable</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a98115a70232aa660ee341e0ea4353485</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_namespace_get</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a82a3c5d46b7bdaa57cc1106ff5a89663</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_namespace_set</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa56ce48dad661ece0586e2b0477d04d6</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_InstallConstants</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af6d78a7441d3788ad73c978698a0cc1e</anchor>
      <arglist>(lua_State *L, swig_lua_const_info constants[])</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_add_variable</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a7d4fb4ca1944b99a7ac54467d8a11866</anchor>
      <arglist>(lua_State *L, const char *name, lua_CFunction getFn, lua_CFunction setFn)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_class_register</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a96a75364a5f20fd525bb603440f698d3</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_add_namespace_details</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a9ee5ba0a0bf072010a447d4b2f98d545</anchor>
      <arglist>(lua_State *L, swig_lua_namespace *ns)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_add_namespace_classes</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a1eaf1788c7d2da312e1ebd9f251017f1</anchor>
      <arglist>(lua_State *L, swig_lua_namespace *ns)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_namespace_register</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a85ebfe3fdce248c83e2e3620dc6f330e</anchor>
      <arglist>(lua_State *L, swig_lua_namespace *ns, int reg)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_get_class_metatable</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>af93e8f0a3beec1aefa768abb89fe7485</anchor>
      <arglist>(lua_State *L, const char *cname)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_iterate_bases</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a355fae01cf3c5ae6e3ce7e947a3116ae</anchor>
      <arglist>(lua_State *L, swig_type_info *SWIGUNUSED swig_type, int first_arg, swig_lua_base_iterator_func func, int *const ret)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_do_get_item</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a4d600ac112b2281f2b7b77355eed2fba</anchor>
      <arglist>(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_do_get</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a194016b571a78a06fd25c82e95325a02</anchor>
      <arglist>(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_get</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a85b5ba6bf2bdbe0d21a3611f3b5f8df3</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_do_set</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab2fdf092684471f1833cdac0ee86c9e4</anchor>
      <arglist>(lua_State *L, swig_type_info *type, int first_arg, int *ret)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_set</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab75aeed852fd5b630a45dd2312ced041</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_destruct</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aba87e0d4ef2c7e61e81b4f685eef7b7b</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_tostring</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aeabb40f074f78d6ff46831b93e4750e1</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_class_disown</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa6dab0ada88ba05ba8067207c79efbd8</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_Lua_class_equal</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a0063e5175fc7c3ee38480307c0d857f5</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_populate_inheritable_metamethods</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a5a21c7c1eaf4626aa084fd8a3110498e</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_create_class_registry</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ace2a621c1ad2f0c94f5bbf96cff871a2</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_get_class_registry</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a882b457b337f778c6925c77b59cbae79</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_get_inheritable_metamethods</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a787cb072f40cbd1801240c0c84226cb0</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_init_base_class</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ac765a0526209ac87f7e209669ce959d0</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_add_class_static_details</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a893afdb43641c6f2a334bc28b2bc5d90</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_add_class_user_metamethods</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a21c9d5d2b378d7fdd5aada2924df05ba</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_add_class_instance_details</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>afbf47dea1fc0e472f8599c32b6b1ea29</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_Lua_resolve_metamethod</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a19b76c2a9ea81187953f48fbfbf5d4ac</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_do_resolve_metamethod</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a147dffa5775be5d916031e37e068d187</anchor>
      <arglist>(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx, int skip_check)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_add_class_user_metamethod</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a57ec001b1cd68ba7e26ded840d06363d</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss, const int metatable_index)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_class_register_static</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a2451693ac83d6d677ab826b113491760</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_class_register_instance</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>aa8ec77fb7e1350b87d183a7708f5bdae</anchor>
      <arglist>(lua_State *L, swig_lua_class *clss)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN void</type>
      <name>SWIG_Lua_AddMetatable</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a8f7e025e07d705726404f14e59195797</anchor>
      <arglist>(lua_State *L, swig_type_info *type)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_Lua_NewPointerObj</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a96c4cba9e0940983c98de6a9d6f339c8</anchor>
      <arglist>(lua_State *L, void *ptr, swig_type_info *type, int own)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_Lua_ConvertPtr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a0d0394796468d0001b1d3d358a19891f</anchor>
      <arglist>(lua_State *L, int index, void **ptr, swig_type_info *type, int flags)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void *</type>
      <name>SWIG_Lua_MustGetPtr</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a8ed84d67fe041f17069ed2e28e23d1e4</anchor>
      <arglist>(lua_State *L, int index, swig_type_info *type, int flags, int argnum, const char *func_name)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME void</type>
      <name>SWIG_Lua_NewPackedObj</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>ab98924e8e52ff8f34ace1515120ccda6</anchor>
      <arglist>(lua_State *L, void *ptr, size_t size, swig_type_info *type)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_Lua_ConvertPacked</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a34313b58896afa8f8a27f1d0bfd2b7c4</anchor>
      <arglist>(lua_State *L, int index, void *ptr, size_t size, swig_type_info *type)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME const char *</type>
      <name>SWIG_Lua_typename</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a3ebd284134ee5f4877fe86f646aebde6</anchor>
      <arglist>(lua_State *L, int tp)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIME int</type>
      <name>SWIG_Lua_type</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a85bb429fb2e29e3681bbda49ce8c34c1</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function">
      <type>SWIGINTERN int</type>
      <name>SWIG_Lua_dostring</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a3af0c40da7cc32dc9af81d722828ad63</anchor>
      <arglist>(lua_State *L, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIMEINLINE swig_type_info *</type>
      <name>SWIG_TypeQuery</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a7dd78b07dde208ce1a05f97f1b6d2501</anchor>
      <arglist>(SWIG_MODULE_CLIENTDATA_TYPE clientdata, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SWIGRUNTIMEINLINE swig_type_info *</type>
      <name>SWIG_MangledTypeQuery</name>
      <anchorfile>swig__runtime_8h.html</anchorfile>
      <anchor>a810714d8aa076f5821d7af57872b38cf</anchor>
      <arglist>(SWIG_MODULE_CLIENTDATA_TYPE clientdata, const char *name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AbstractFrameBufferObject.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_abstract_frame_buffer_object_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::AbstractFrameBufferObject</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>AbstractRender.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_abstract_render_8h</filename>
    <member kind="function">
      <type>void</type>
      <name>initGL</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a12791d9e49a2fd3306290a226864aba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderGL</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a0e7927d50044aa5a11db1bbc76848ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGLInfo</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a4661b118e43dbc7591bf560466979886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLBackgroundColor</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>ad2baa397c2c8e6ac43f648b961b4a4ac</anchor>
      <arglist>(float red, float green, float blue, float alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGLViewSize</name>
      <anchorfile>_abstract_render_8h.html</anchorfile>
      <anchor>a00ae278b2285b2394deb312d4d2d215d</anchor>
      <arglist>(int x, int y, int width, int height)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ButtonHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_button_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::ButtonHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>CheckboxHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_checkbox_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::CheckboxHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Cube.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_cube_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <class kind="class">njli::Cube</class>
    <class kind="struct">njli::Cube::CubeVerts</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DropdownHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_dropdown_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::DropdownHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Geometry.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_geometry_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <class kind="class">njli::Geometry</class>
    <class kind="struct">njli::Geometry::TexturedColoredVertex</class>
    <class kind="struct">njli::Geometry::TexturedNormaledColoredVertex</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NUMBER_OF_MESHES</name>
      <anchorfile>_geometry_8h.html</anchorfile>
      <anchor>a32926a2aa4b4f89492e39e960367a9af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImGuizmo.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_im_guizmo_8h</filename>
    <namespace>ImGuizmo</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OPERATION</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSLATE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1a87d39725b76eb0cdd7d8803632faba68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROTATE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1a002a0a905af7f2fd542df7d6e34c1d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1a17ec357fe247a9aa2d1f368353690fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MODE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a555eafa3970d08a1afb7b47bce89d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a555eafa3970d08a1afb7b47bce89d05aaf0baed0c04cc42cc097e385019888fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORLD</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a555eafa3970d08a1afb7b47bce89d05aa0db6bcb67dbf7b93b609e4d142320421</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginFrame</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a2dfada1eb84fda54a892be444caf0588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOver</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a258cf4380b3da155f7eb721542b50f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUsing</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>ac9bdd0b810d82ed4fa06e0dd2d1f3cc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Enable</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a849497d6fd8adb2569adfa18c2841d77</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DecomposeMatrixToComponents</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a8cc3ef9e0b149b8276fe69817360ee25</anchor>
      <arglist>(const float *matrix, float *translation, float *rotation, float *scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RecomposeMatrixFromComponents</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a70bc9423194e2ab58e351ea881126b17</anchor>
      <arglist>(const float *translation, const float *rotation, const float *scale, float *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawCube</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>acc60c99158253466671e9aac426f52f2</anchor>
      <arglist>(const float *view, const float *projection, float *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Manipulate</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a6b1cb04f6a6cacb5029c1163848a510e</anchor>
      <arglist>(const float *view, const float *projection, OPERATION operation, MODE mode, float *matrix, float *deltaMatrix=0, float *snap=0, float *localBounds=NULL, float *boundsSnap=NULL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LabelHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_label_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::LabelHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>LevelOfDetail.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_level_of_detail_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::LevelOfDetail</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Light.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_light_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Light</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Material.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_material_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Material</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>MaterialProperty.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_material_property_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <class kind="class">njli::MaterialProperty</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ParticleEmitter.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_particle_emitter_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::ParticleEmitter</class>
    <class kind="struct">njli::ParticleEmitter::Particle</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Plane.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_plane_8h</filename>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <class kind="class">njli::Plane</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ShaderProgram.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_shader_program_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::ShaderProgram</class>
    <namespace>njli</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>GLInfoFunction</name>
      <anchorfile>_shader_program_8h.html</anchorfile>
      <anchor>a50070b167d585b9e4ba6faa4e3063cc7</anchor>
      <arglist>)(u32 program, s32 pname, s32 *params)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>GLLogFunction</name>
      <anchorfile>_shader_program_8h.html</anchorfile>
      <anchor>a946b6792efe50de240df436a3d028764</anchor>
      <arglist>)(u32 program, s32 bufsize, s32 *length, s8 *infolog)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Skinner.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_skinner_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Skinner</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SliderHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_slider_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::SliderHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Sprite2D.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_sprite2_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <class kind="class">njli::Sprite2D</class>
    <class kind="class">njli::Sprite2D::SpriteQuad</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SpriteFrameAtlas.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_sprite_frame_atlas_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Rect</class>
    <class kind="class">njli::SpriteFrameAtlas</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>TextboxHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_textbox_h_u_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <class kind="class">njli::TextboxHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldDebugDrawer.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_world_debug_drawer_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::WorldDebugDrawer</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldHUD.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/graphics/</path>
    <filename>_world_h_u_d_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="struct">njli::JLIPaint</class>
    <class kind="struct">njli::JLIGlyphPosition</class>
    <class kind="struct">njli::JLITextRow</class>
    <class kind="class">njli::WorldHUD</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Image.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_image_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <class kind="class">njli::Image</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>JLIEngine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_j_l_i_engine_8h</filename>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_decorator_8h" name="AbstractDecorator.h" local="yes" imported="no">AbstractDecorator.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_frame_buffer_object_8h" name="AbstractFrameBufferObject.h" local="yes" imported="no">AbstractFrameBufferObject.h</includes>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <includes id="_geometry_8h" name="Geometry.h" local="yes" imported="no">Geometry.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <includes id="_world_8h" name="World.h" local="yes" imported="no">World.h</includes>
    <includes id="_world_factory_8h" name="WorldFactory.h" local="yes" imported="no">WorldFactory.h</includes>
    <includes id="_world_lua_virtual_machine_8h" name="WorldLuaVirtualMachine.h" local="yes" imported="no">WorldLuaVirtualMachine.h</includes>
    <includes id="_world_clock_8h" name="WorldClock.h" local="yes" imported="no">WorldClock.h</includes>
    <includes id="_world_debug_drawer_8h" name="WorldDebugDrawer.h" local="yes" imported="no">WorldDebugDrawer.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_world_socket_8h" name="WorldSocket.h" local="yes" imported="no">WorldSocket.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_action_builder_8h" name="ActionBuilder.h" local="yes" imported="no">ActionBuilder.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_camera_builder_8h" name="CameraBuilder.h" local="yes" imported="no">CameraBuilder.h</includes>
    <includes id="_clock_8h" name="Clock.h" local="yes" imported="no">Clock.h</includes>
    <includes id="_clock_builder_8h" name="ClockBuilder.h" local="yes" imported="no">ClockBuilder.h</includes>
    <includes id="_collision_response_8h" name="CollisionResponse.h" local="yes" imported="no">CollisionResponse.h</includes>
    <includes id="_collision_response_builder_8h" name="CollisionResponseBuilder.h" local="yes" imported="no">CollisionResponseBuilder.h</includes>
    <includes id="_cube_8h" name="Cube.h" local="yes" imported="no">Cube.h</includes>
    <includes id="_cube_builder_8h" name="CubeBuilder.h" local="yes" imported="no">CubeBuilder.h</includes>
    <includes id="_font_8h" name="Font.h" local="yes" imported="no">Font.h</includes>
    <includes id="_font_builder_8h" name="FontBuilder.h" local="yes" imported="no">FontBuilder.h</includes>
    <includes id="_image_8h" name="Image.h" local="yes" imported="no">Image.h</includes>
    <includes id="_image_builder_8h" name="ImageBuilder.h" local="yes" imported="no">ImageBuilder.h</includes>
    <includes id="_json_j_l_i_8h" name="JsonJLI.h" local="yes" imported="no">JsonJLI.h</includes>
    <includes id="_json_j_l_i_builder_8h" name="JsonJLIBuilder.h" local="yes" imported="no">JsonJLIBuilder.h</includes>
    <includes id="_level_of_detail_8h" name="LevelOfDetail.h" local="yes" imported="no">LevelOfDetail.h</includes>
    <includes id="_level_of_detail_builder_8h" name="LevelOfDetailBuilder.h" local="yes" imported="no">LevelOfDetailBuilder.h</includes>
    <includes id="_light_8h" name="Light.h" local="yes" imported="no">Light.h</includes>
    <includes id="_light_builder_8h" name="LightBuilder.h" local="yes" imported="no">LightBuilder.h</includes>
    <includes id="_material_8h" name="Material.h" local="yes" imported="no">Material.h</includes>
    <includes id="_material_builder_8h" name="MaterialBuilder.h" local="yes" imported="no">MaterialBuilder.h</includes>
    <includes id="_material_property_8h" name="MaterialProperty.h" local="yes" imported="no">MaterialProperty.h</includes>
    <includes id="_material_property_builder_8h" name="MaterialPropertyBuilder.h" local="yes" imported="no">MaterialPropertyBuilder.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_node_builder_8h" name="NodeBuilder.h" local="yes" imported="no">NodeBuilder.h</includes>
    <includes id="_node_state_8h" name="NodeState.h" local="yes" imported="no">NodeState.h</includes>
    <includes id="_node_state_builder_8h" name="NodeStateBuilder.h" local="yes" imported="no">NodeStateBuilder.h</includes>
    <includes id="_node_state_machine_8h" name="NodeStateMachine.h" local="yes" imported="no">NodeStateMachine.h</includes>
    <includes id="_node_state_machine_builder_8h" name="NodeStateMachineBuilder.h" local="yes" imported="no">NodeStateMachineBuilder.h</includes>
    <includes id="_particle_emitter_8h" name="ParticleEmitter.h" local="yes" imported="no">ParticleEmitter.h</includes>
    <includes id="_particle_emitter_builder_8h" name="ParticleEmitterBuilder.h" local="yes" imported="no">ParticleEmitterBuilder.h</includes>
    <includes id="_physics_body_ghost_8h" name="PhysicsBodyGhost.h" local="yes" imported="no">PhysicsBodyGhost.h</includes>
    <includes id="_physics_body_ghost_builder_8h" name="PhysicsBodyGhostBuilder.h" local="yes" imported="no">PhysicsBodyGhostBuilder.h</includes>
    <includes id="_physics_body_rigid_8h" name="PhysicsBodyRigid.h" local="yes" imported="no">PhysicsBodyRigid.h</includes>
    <includes id="_physics_body_rigid_builder_8h" name="PhysicsBodyRigidBuilder.h" local="yes" imported="no">PhysicsBodyRigidBuilder.h</includes>
    <includes id="_physics_body_soft_8h" name="PhysicsBodySoft.h" local="yes" imported="no">PhysicsBodySoft.h</includes>
    <includes id="_physics_body_soft_builder_8h" name="PhysicsBodySoftBuilder.h" local="yes" imported="no">PhysicsBodySoftBuilder.h</includes>
    <includes id="_physics_close_contact_8h" name="PhysicsCloseContact.h" local="yes" imported="no">PhysicsCloseContact.h</includes>
    <includes id="_physics_close_contact_builder_8h" name="PhysicsCloseContactBuilder.h" local="yes" imported="no">PhysicsCloseContactBuilder.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <includes id="_physics_constraint_builder_8h" name="PhysicsConstraintBuilder.h" local="yes" imported="no">PhysicsConstraintBuilder.h</includes>
    <includes id="_physics_constraint_hinge_8h" name="PhysicsConstraintHinge.h" local="yes" imported="no">PhysicsConstraintHinge.h</includes>
    <includes id="_physics_constraint_hinge_builder_8h" name="PhysicsConstraintHingeBuilder.h" local="yes" imported="no">PhysicsConstraintHingeBuilder.h</includes>
    <includes id="_physics_constraint_point_to_point_8h" name="PhysicsConstraintPointToPoint.h" local="yes" imported="no">PhysicsConstraintPointToPoint.h</includes>
    <includes id="_physics_constraint_point_to_point_builder_8h" name="PhysicsConstraintPointToPointBuilder.h" local="yes" imported="no">PhysicsConstraintPointToPointBuilder.h</includes>
    <includes id="_physics_constraint_cone_twist_8h" name="PhysicsConstraintConeTwist.h" local="yes" imported="no">PhysicsConstraintConeTwist.h</includes>
    <includes id="_physics_constraint_cone_twist_builder_8h" name="PhysicsConstraintConeTwistBuilder.h" local="yes" imported="no">PhysicsConstraintConeTwistBuilder.h</includes>
    <includes id="_physics_constraint_fixed_8h" name="PhysicsConstraintFixed.h" local="yes" imported="no">PhysicsConstraintFixed.h</includes>
    <includes id="_physics_constraint_fixed_builder_8h" name="PhysicsConstraintFixedBuilder.h" local="yes" imported="no">PhysicsConstraintFixedBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <includes id="_physics_constraint_generic6_dof_builder_8h" name="PhysicsConstraintGeneric6DofBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofBuilder.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_8h" name="PhysicsConstraintGeneric6DofSpring.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpring.h</includes>
    <includes id="_physics_constraint_generic6_dof_spring_builder_8h" name="PhysicsConstraintGeneric6DofSpringBuilder.h" local="yes" imported="no">PhysicsConstraintGeneric6DofSpringBuilder.h</includes>
    <includes id="_physics_constraint_slider_8h" name="PhysicsConstraintSlider.h" local="yes" imported="no">PhysicsConstraintSlider.h</includes>
    <includes id="_physics_constraint_slider_builder_8h" name="PhysicsConstraintSliderBuilder.h" local="yes" imported="no">PhysicsConstraintSliderBuilder.h</includes>
    <includes id="_physics_contact_8h" name="PhysicsContact.h" local="yes" imported="no">PhysicsContact.h</includes>
    <includes id="_physics_contact_builder_8h" name="PhysicsContactBuilder.h" local="yes" imported="no">PhysicsContactBuilder.h</includes>
    <includes id="_physics_field_8h" name="PhysicsField.h" local="yes" imported="no">PhysicsField.h</includes>
    <includes id="_physics_field_builder_8h" name="PhysicsFieldBuilder.h" local="yes" imported="no">PhysicsFieldBuilder.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <includes id="_physics_ray_contact_builder_8h" name="PhysicsRayContactBuilder.h" local="yes" imported="no">PhysicsRayContactBuilder.h</includes>
    <includes id="_physics_shape_box_8h" name="PhysicsShapeBox.h" local="yes" imported="no">PhysicsShapeBox.h</includes>
    <includes id="_physics_shape_box2_d_8h" name="PhysicsShapeBox2D.h" local="yes" imported="no">PhysicsShapeBox2D.h</includes>
    <includes id="_physics_shape_box2_d_builder_8h" name="PhysicsShapeBox2DBuilder.h" local="yes" imported="no">PhysicsShapeBox2DBuilder.h</includes>
    <includes id="_physics_shape_box_builder_8h" name="PhysicsShapeBoxBuilder.h" local="yes" imported="no">PhysicsShapeBoxBuilder.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_8h" name="PhysicsShapeBvhTriangleMesh.h" local="yes" imported="no">PhysicsShapeBvhTriangleMesh.h</includes>
    <includes id="_physics_shape_bvh_triangle_mesh_builder_8h" name="PhysicsShapeBvhTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeBvhTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_capsule_8h" name="PhysicsShapeCapsule.h" local="yes" imported="no">PhysicsShapeCapsule.h</includes>
    <includes id="_physics_shape_capsule_builder_8h" name="PhysicsShapeCapsuleBuilder.h" local="yes" imported="no">PhysicsShapeCapsuleBuilder.h</includes>
    <includes id="_physics_shape_cone_8h" name="PhysicsShapeCone.h" local="yes" imported="no">PhysicsShapeCone.h</includes>
    <includes id="_physics_shape_cone_builder_8h" name="PhysicsShapeConeBuilder.h" local="yes" imported="no">PhysicsShapeConeBuilder.h</includes>
    <includes id="_physics_shape_convex_hull_8h" name="PhysicsShapeConvexHull.h" local="yes" imported="no">PhysicsShapeConvexHull.h</includes>
    <includes id="_physics_shape_convex_hull_builder_8h" name="PhysicsShapeConvexHullBuilder.h" local="yes" imported="no">PhysicsShapeConvexHullBuilder.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_8h" name="PhysicsShapeConvexTriangleMesh.h" local="yes" imported="no">PhysicsShapeConvexTriangleMesh.h</includes>
    <includes id="_physics_shape_convex_triangle_mesh_builder_8h" name="PhysicsShapeConvexTriangleMeshBuilder.h" local="yes" imported="no">PhysicsShapeConvexTriangleMeshBuilder.h</includes>
    <includes id="_physics_shape_cylinder_8h" name="PhysicsShapeCylinder.h" local="yes" imported="no">PhysicsShapeCylinder.h</includes>
    <includes id="_physics_shape_cylinder_builder_8h" name="PhysicsShapeCylinderBuilder.h" local="yes" imported="no">PhysicsShapeCylinderBuilder.h</includes>
    <includes id="_physics_shape_heightfield_terrain_8h" name="PhysicsShapeHeightfieldTerrain.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrain.h</includes>
    <includes id="_physics_shape_heightfield_terrain_builder_8h" name="PhysicsShapeHeightfieldTerrainBuilder.h" local="yes" imported="no">PhysicsShapeHeightfieldTerrainBuilder.h</includes>
    <includes id="_physics_shape_multi_sphere_8h" name="PhysicsShapeMultiSphere.h" local="yes" imported="no">PhysicsShapeMultiSphere.h</includes>
    <includes id="_physics_shape_multi_sphere_builder_8h" name="PhysicsShapeMultiSphereBuilder.h" local="yes" imported="no">PhysicsShapeMultiSphereBuilder.h</includes>
    <includes id="_physics_shape_sphere_8h" name="PhysicsShapeSphere.h" local="yes" imported="no">PhysicsShapeSphere.h</includes>
    <includes id="_physics_shape_sphere_builder_8h" name="PhysicsShapeSphereBuilder.h" local="yes" imported="no">PhysicsShapeSphereBuilder.h</includes>
    <includes id="_physics_shape_static_plane_8h" name="PhysicsShapeStaticPlane.h" local="yes" imported="no">PhysicsShapeStaticPlane.h</includes>
    <includes id="_physics_shape_static_plane_builder_8h" name="PhysicsShapeStaticPlaneBuilder.h" local="yes" imported="no">PhysicsShapeStaticPlaneBuilder.h</includes>
    <includes id="_physics_world_8h" name="PhysicsWorld.h" local="yes" imported="no">PhysicsWorld.h</includes>
    <includes id="_physics_world_builder_8h" name="PhysicsWorldBuilder.h" local="yes" imported="no">PhysicsWorldBuilder.h</includes>
    <includes id="_plane_8h" name="Plane.h" local="yes" imported="no">Plane.h</includes>
    <includes id="_plane_builder_8h" name="PlaneBuilder.h" local="yes" imported="no">PlaneBuilder.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_scene_builder_8h" name="SceneBuilder.h" local="yes" imported="no">SceneBuilder.h</includes>
    <includes id="_scene_state_8h" name="SceneState.h" local="yes" imported="no">SceneState.h</includes>
    <includes id="_scene_state_builder_8h" name="SceneStateBuilder.h" local="yes" imported="no">SceneStateBuilder.h</includes>
    <includes id="_scene_state_machine_8h" name="SceneStateMachine.h" local="yes" imported="no">SceneStateMachine.h</includes>
    <includes id="_scene_state_machine_builder_8h" name="SceneStateMachineBuilder.h" local="yes" imported="no">SceneStateMachineBuilder.h</includes>
    <includes id="_shader_program_8h" name="ShaderProgram.h" local="yes" imported="no">ShaderProgram.h</includes>
    <includes id="_shader_program_builder_8h" name="ShaderProgramBuilder.h" local="yes" imported="no">ShaderProgramBuilder.h</includes>
    <includes id="_skinner_8h" name="Skinner.h" local="yes" imported="no">Skinner.h</includes>
    <includes id="_skinner_builder_8h" name="SkinnerBuilder.h" local="yes" imported="no">SkinnerBuilder.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <includes id="_sound_builder_8h" name="SoundBuilder.h" local="yes" imported="no">SoundBuilder.h</includes>
    <includes id="_sprite2_d_8h" name="Sprite2D.h" local="yes" imported="no">Sprite2D.h</includes>
    <includes id="_sprite2_d_builder_8h" name="Sprite2DBuilder.h" local="yes" imported="no">Sprite2DBuilder.h</includes>
    <includes id="_sprite_frame_atlas_8h" name="SpriteFrameAtlas.h" local="yes" imported="no">SpriteFrameAtlas.h</includes>
    <includes id="_sprite_frame_atlas_builder_8h" name="SpriteFrameAtlasBuilder.h" local="yes" imported="no">SpriteFrameAtlasBuilder.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <includes id="_steering_behavior_alignment_8h" name="SteeringBehaviorAlignment.h" local="yes" imported="no">SteeringBehaviorAlignment.h</includes>
    <includes id="_steering_behavior_alignment_builder_8h" name="SteeringBehaviorAlignmentBuilder.h" local="yes" imported="no">SteeringBehaviorAlignmentBuilder.h</includes>
    <includes id="_steering_behavior_arrive_8h" name="SteeringBehaviorArrive.h" local="yes" imported="no">SteeringBehaviorArrive.h</includes>
    <includes id="_steering_behavior_arrive_builder_8h" name="SteeringBehaviorArriveBuilder.h" local="yes" imported="no">SteeringBehaviorArriveBuilder.h</includes>
    <includes id="_steering_behavior_builder_8h" name="SteeringBehaviorBuilder.h" local="yes" imported="no">SteeringBehaviorBuilder.h</includes>
    <includes id="_steering_behavior_cohesion_8h" name="SteeringBehaviorCohesion.h" local="yes" imported="no">SteeringBehaviorCohesion.h</includes>
    <includes id="_steering_behavior_cohesion_builder_8h" name="SteeringBehaviorCohesionBuilder.h" local="yes" imported="no">SteeringBehaviorCohesionBuilder.h</includes>
    <includes id="_steering_behavior_evade_8h" name="SteeringBehaviorEvade.h" local="yes" imported="no">SteeringBehaviorEvade.h</includes>
    <includes id="_steering_behavior_evade_builder_8h" name="SteeringBehaviorEvadeBuilder.h" local="yes" imported="no">SteeringBehaviorEvadeBuilder.h</includes>
    <includes id="_steering_behavior_flee_8h" name="SteeringBehaviorFlee.h" local="yes" imported="no">SteeringBehaviorFlee.h</includes>
    <includes id="_steering_behavior_flee_builder_8h" name="SteeringBehaviorFleeBuilder.h" local="yes" imported="no">SteeringBehaviorFleeBuilder.h</includes>
    <includes id="_steering_behavior_follow_path_8h" name="SteeringBehaviorFollowPath.h" local="yes" imported="no">SteeringBehaviorFollowPath.h</includes>
    <includes id="_steering_behavior_follow_path_builder_8h" name="SteeringBehaviorFollowPathBuilder.h" local="yes" imported="no">SteeringBehaviorFollowPathBuilder.h</includes>
    <includes id="_steering_behavior_hide_8h" name="SteeringBehaviorHide.h" local="yes" imported="no">SteeringBehaviorHide.h</includes>
    <includes id="_steering_behavior_hide_builder_8h" name="SteeringBehaviorHideBuilder.h" local="yes" imported="no">SteeringBehaviorHideBuilder.h</includes>
    <includes id="_steering_behavior_interpose_8h" name="SteeringBehaviorInterpose.h" local="yes" imported="no">SteeringBehaviorInterpose.h</includes>
    <includes id="_steering_behavior_interpose_builder_8h" name="SteeringBehaviorInterposeBuilder.h" local="yes" imported="no">SteeringBehaviorInterposeBuilder.h</includes>
    <includes id="_steering_behavior_machine_8h" name="SteeringBehaviorMachine.h" local="yes" imported="no">SteeringBehaviorMachine.h</includes>
    <includes id="_steering_behavior_machine_builder_8h" name="SteeringBehaviorMachineBuilder.h" local="yes" imported="no">SteeringBehaviorMachineBuilder.h</includes>
    <includes id="_steering_behavior_machine_dithered_8h" name="SteeringBehaviorMachineDithered.h" local="yes" imported="no">SteeringBehaviorMachineDithered.h</includes>
    <includes id="_steering_behavior_machine_dithered_builder_8h" name="SteeringBehaviorMachineDitheredBuilder.h" local="yes" imported="no">SteeringBehaviorMachineDitheredBuilder.h</includes>
    <includes id="_steering_behavior_machine_prioritized_8h" name="SteeringBehaviorMachinePrioritized.h" local="yes" imported="no">SteeringBehaviorMachinePrioritized.h</includes>
    <includes id="_steering_behavior_machine_prioritized_builder_8h" name="SteeringBehaviorMachinePrioritizedBuilder.h" local="yes" imported="no">SteeringBehaviorMachinePrioritizedBuilder.h</includes>
    <includes id="_steering_behavior_machine_weighted_8h" name="SteeringBehaviorMachineWeighted.h" local="yes" imported="no">SteeringBehaviorMachineWeighted.h</includes>
    <includes id="_steering_behavior_machine_weighted_builder_8h" name="SteeringBehaviorMachineWeightedBuilder.h" local="yes" imported="no">SteeringBehaviorMachineWeightedBuilder.h</includes>
    <includes id="_steering_behavior_obstacle_avoidance_8h" name="SteeringBehaviorObstacleAvoidance.h" local="yes" imported="no">SteeringBehaviorObstacleAvoidance.h</includes>
    <includes id="_steering_behavior_obstacle_avoidance_builder_8h" name="SteeringBehaviorObstacleAvoidanceBuilder.h" local="yes" imported="no">SteeringBehaviorObstacleAvoidanceBuilder.h</includes>
    <includes id="_steering_behavior_offset_pursuit_8h" name="SteeringBehaviorOffsetPursuit.h" local="yes" imported="no">SteeringBehaviorOffsetPursuit.h</includes>
    <includes id="_steering_behavior_offset_pursuit_builder_8h" name="SteeringBehaviorOffsetPursuitBuilder.h" local="yes" imported="no">SteeringBehaviorOffsetPursuitBuilder.h</includes>
    <includes id="_steering_behavior_pursuit_8h" name="SteeringBehaviorPursuit.h" local="yes" imported="no">SteeringBehaviorPursuit.h</includes>
    <includes id="_steering_behavior_pursuit_builder_8h" name="SteeringBehaviorPursuitBuilder.h" local="yes" imported="no">SteeringBehaviorPursuitBuilder.h</includes>
    <includes id="_steering_behavior_seek_8h" name="SteeringBehaviorSeek.h" local="yes" imported="no">SteeringBehaviorSeek.h</includes>
    <includes id="_steering_behavior_seek_builder_8h" name="SteeringBehaviorSeekBuilder.h" local="yes" imported="no">SteeringBehaviorSeekBuilder.h</includes>
    <includes id="_steering_behavior_separation_8h" name="SteeringBehaviorSeparation.h" local="yes" imported="no">SteeringBehaviorSeparation.h</includes>
    <includes id="_steering_behavior_separation_builder_8h" name="SteeringBehaviorSeparationBuilder.h" local="yes" imported="no">SteeringBehaviorSeparationBuilder.h</includes>
    <includes id="_steering_behavior_wall_avoidance_8h" name="SteeringBehaviorWallAvoidance.h" local="yes" imported="no">SteeringBehaviorWallAvoidance.h</includes>
    <includes id="_steering_behavior_wall_avoidance_builder_8h" name="SteeringBehaviorWallAvoidanceBuilder.h" local="yes" imported="no">SteeringBehaviorWallAvoidanceBuilder.h</includes>
    <includes id="_steering_behavior_wander_8h" name="SteeringBehaviorWander.h" local="yes" imported="no">SteeringBehaviorWander.h</includes>
    <includes id="_steering_behavior_wander_builder_8h" name="SteeringBehaviorWanderBuilder.h" local="yes" imported="no">SteeringBehaviorWanderBuilder.h</includes>
    <includes id="_stop_watch_8h" name="StopWatch.h" local="yes" imported="no">StopWatch.h</includes>
    <includes id="_stop_watch_builder_8h" name="StopWatchBuilder.h" local="yes" imported="no">StopWatchBuilder.h</includes>
    <includes id="_thread_8h" name="Thread.h" local="yes" imported="no">Thread.h</includes>
    <includes id="_thread_builder_8h" name="ThreadBuilder.h" local="yes" imported="no">ThreadBuilder.h</includes>
    <includes id="_timer_8h" name="Timer.h" local="yes" imported="no">Timer.h</includes>
    <includes id="_timer_builder_8h" name="TimerBuilder.h" local="yes" imported="no">TimerBuilder.h</includes>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_world_state_builder_8h" name="WorldStateBuilder.h" local="yes" imported="no">WorldStateBuilder.h</includes>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <includes id="_world_state_machine_builder_8h" name="WorldStateMachineBuilder.h" local="yes" imported="no">WorldStateMachineBuilder.h</includes>
    <includes id="_xml_8h" name="Xml.h" local="yes" imported="no">Xml.h</includes>
    <includes id="_xml_builder_8h" name="XmlBuilder.h" local="yes" imported="no">XmlBuilder.h</includes>
  </compound>
  <compound kind="file">
    <name>JLIFactoryTypes.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_j_l_i_factory_types_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <namespace>njli</namespace>
    <member kind="enumeration">
      <type></type>
      <name>njliImageType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba8ff0450751411797422b34c8359ab88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_JPEG</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0baa663b1e8f053ef637e5fbab26f3d62ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PNG</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba1bce22b2205898667daf43a32d4dcc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_BMP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba6c077185b17a5ad1bb4b521162306c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_GIF</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba369c6c877fedaeac85b1fd0e7c86eca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PSD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba44567b6e9384a453ce67c6185f23b8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PIC</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0bad40e11586edea130d1763cb3cb5a2cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_HDR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0baf7370a388c8d303d6acfdfcf184f4b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_TGA</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0bab549f4c12f970bff516a48d261358db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PVR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0bafb27762a5d22577b3112f0a91707abf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba23a54cca0a7ae8917159f1e7649e4020</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliActionTimingMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824ba0cdba41a676d719a944fdc44d3e62899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824baa92e26f10321c835d6ea436a5fa0264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_EASEIN</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824ba08be3eb3f43ae177aa8fd4b34e2407ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_EASEOUT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824bacce80ae1388691ac76b7dc4949c9f51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_EASEINEASEOUT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824ba6676cf1fcd9e34bd15ba1964f4272bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824badb523c2202cc055b57f6d532b99ddfa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDSolidity</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168aeb5dc4f5a237799007ff5bdd20f67bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_SOLID</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168acdbd067f1e3199418e7885a29809b615</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_HOLE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168a34496e0246306fde58f04dfdb06e4b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168ac14fdd6428c153de3bc72c7d87cac7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDAlign</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa02251518523afeae7e2518357c9ed740</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_LEFT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aabca0f32318ac2d51572301aec394e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_CENTER</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa7d908bb153a34beba1f7bee78c0eb816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_RIGHT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aac282d13f684acc7548a5ab1cb20dd320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_TOP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa1c5d6081bfdda06807fee808bdc2db74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_MIDDLE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa7d73746235b128ed755b9dfcfac6a656</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_BOTTOM</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa7b572a046852b7b767e7835ec7a790f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_BASELINE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa733d6c4140a16ec2ece918ffede38d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aae3dfe44a943f8d1a42832e991d81f0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDWinding</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456a06a1267bcbee6a7d982be897f3f3deca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_CCW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456a1853c6b1a27c59cf3203ad13555929d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_CW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456a87eb938f9a0d3e093c23b40739b2a689</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456ad6d17a18f249cc31829f0d0ed78a7c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDImageFlags</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a3d832b917bcf971e6af7fc247315f3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_GENERATE_MIPMAPS</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14ab8ac62fa7584d10bb808169208ee3414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_REPEATX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a52bcf7a4cf76ac843f7767be374febfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_REPEATY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a36d0da535a374881276f12c35219419a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_FLIPY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a1d6a4cb89637785d117a25bc46ed4236</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_PREMULTIPLIED</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a5c5b0641a587235772732d12a3199c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a1d866118aee61252ba1f3508cad3c6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDLineCap</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da5ef9ad168f47092744d6d57081bd0e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_BUTT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30dad49dbfbb891cd63ba78b52da305a3cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_ROUND</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da1e4712382b16f7b35cba94e5e7bc6350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_SQUARE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da1fcafdc1feeb8b65e2184c2eddd3e0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_BEVEL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da43a1475f8a9f7f2f313c4319af6b1c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_MITER</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da57226e560ec12b6c1be0260f6b0413be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da8d7d7f71e1e08b9d03be703f74408cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureCubeSides</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda3bea084621e0484ccc91c8b3d4f1cbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NEGATIVE_X</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda34f1245eaa63bff16c9f6ada016740d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NEGATIVE_Y</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda16d69c236577d4b031e1510bd23d60b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NEGATIVE_Z</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9ddadaa75d2aa4c00ca10f3e3577882be1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_POSITIVE_X</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9ddac262fc24049942a6ca96d879772af572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_POSITIVE_Y</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9ddab6624025aed4665069454c5330256cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_POSITIVE_Z</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda09208eee0557dce797c555e8162c4f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda9a4b5db0e6256704f1419ad72f2836b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fbab5e739e2d62a00c06335ad4eb96bd7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_2D</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fba1fc3a248edc8a6093efb9ed946de3915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_CUBEMAP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fba244d1d6419307868899f3607854a6a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fbacab660ca2ecd47a3ad29fb4b2285aa7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMinificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bacab1e637b05fcb08d5e58eae389fc2ec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca0e5f9c0de2d17ebab337536717a866ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bacabcef37117765fdc950d66b500660e7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NEAREST_MIPMAP_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca735e4154e8e5c3b7b6ed4fce8415dfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NEAREST_MIPMAP_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca54fe6ca3122ab5e3bbb4a9304c50d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_LINEAR_MIPMAP_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca0a51cd436376fc2d072017822a1588ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_LINEAR_MIPMAP_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca39d8ea38f0a6031c6aee61dbfef742b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca839e6bf7ffee928b16c3aa23e5634441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMagnificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a9bbe31a40306010625d26211f98dbfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a644ebd1fbf4af394c0cbdb13530f2c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a04d90ce3c66bf6b57b9cddeba4e70653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a4165ad4c110f6ae5c1b66999c225eb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureWrapType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62a296f0d1e443927d32fb4a27b46c8beca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_REPEAT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62ab58ae1597dfeae81513738000bae9d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_CLAMP_TO_EDGE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62a9c3a6d8a352dd0e3e03f5f696104c433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_MIRRORED_REPEAT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62ab31ed901512b1f9b718e4e8f61f0645f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62a1afaa558d0a910feeca532a934f8f2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliShaderType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbda359cca691366bd9b00991c1ba19dbbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_VERTEX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbda2b0d4740bfc8bf1f47d35fbede6cc6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_FRAGMENT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbda446314814389da25bab90e8855a6d3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbdacb23a15dc0db4135eafa2ae034658564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliFileType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106addcfb55aa16f2679fc7f33255e300d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_XML</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a08c56908bba0862d4aaa2a41f8e3e181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_JSON</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a1304d2a37e7bc9bdbaa82c4da90dedc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_LUA</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106af77f57b3b98c8d64e9314b10ca860858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_ZIP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a2881cacf18969fe8b4283e7f3d3bf303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_PARTICLE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a72c8b342c078506a133751a7cdb83c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_SOUND_WAV</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a32c3ebe3a14c79fc617c710843ebd857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_IMAGE_PNG</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a5a3690a9a85ada0c5ae89bbd779c523a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_IMAGE_TGA</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106acbb84d2c588f4cd07dd330a01689effe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_SHADER_VERTEX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a93b7f63dc05cd6b4c909308689c142c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_SHADER_FRAGMENT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a8fc389ed5916535109817251145c3711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106ace7c895ebca9587626e22e57914c9f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliPhysicsType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83da0e2cec62028cea9b741b85f27c16cbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_Static</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83da5a2d85916f9bc2ccd65950cec856e9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_Dynamic</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83dadb14b0bcd262551a09de40aed7cc9ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_Kinematic</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83da7752eb033d5277c2716329a0ba25c9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83daa31c43643127eda16677fad48c2048a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTransparencyMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9a65e84f8b6e3a2868dffdc1363ab4c610</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_AlphaOne</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9a7c5b36a42714d149bb6f16f3be80fd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_RGBZero</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9af60d1604dbcb6086de7de3508bab15eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9a38811a33f05351ead6c53b1c66bc0cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliCullMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8a0ed241aa52ddf23fe7df9a6e601075da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_Front</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8a1468fb816881c98261f8b3b96a256cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_Back</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8a45096d6a80396c7d05b5c8a0dbb62084</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8ad400392e1eebc023e18b265a8a534d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliBitCategories</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a15709fea205003b1b4a1371e200d5106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_1</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a1da809e831d98cad963fe1ccc7370c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_2</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a762f93d4e8df59d32c9bd980b6ea0533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_3</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5a6923d8fc8e63480f08a026010d11eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_4</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a8b59e2da539d514a74989e1b72604f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_5</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a2d73340d456dbb8e4b5f3bdbeec0e237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_6</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a707bae927c434ae4fb87de77e9d69736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_7</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974ada9456d5fffcf4bbea867668c96fd4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_8</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974addf70f3367b7d2093837ff379b56398d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_9</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a347a26e81e47a261cbecbb3556d4a305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_10</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974ad5d8f1b552eb1a5d446a37faf80fead6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_11</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a4fd041d3c5ae95d02352aa877767a27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_12</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a19674e0101e1235442ed901fe031b157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_13</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aba9d16c9a5df181e2dbb835cc34a8e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_14</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a2d7ecda189782b6933487816a2ea44bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_15</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a175e6ca922a1e6afca6c33fec1155590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_16</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a72b5df5dbeb5615eaa4adbe5e7fed49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_17</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aef9cd723f3fdeae9a2c6e77c4e199b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_18</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a28469478d5918d029fcbe01a5a2990b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_19</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a82dafd9a1de879d0394866293a10974f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_20</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aa637214a69fb2cc01445b70b7c694a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_21</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974ac2f8ef0a3cefe88e4309896138685f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_22</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a56adffc605eaa40acfa770dcb64ffff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_23</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a27ca11b4078a686a3f2ac0c784a974b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_24</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a16d8757a3ba4644d33982a1dd068a754</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_25</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aa2575f4ef85bdb59a07170493011dbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_26</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974acbb07dc454f52be708ece7bdf448ae81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_27</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aa1b71b6679656132b47f5e488010cec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_28</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a8fb1200221f4a16560a198778eb0de24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_29</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a9220767239da4e6f3f280c42fb5b011e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_30</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a9f28f3fe3e89e50f1eaebe49c8365209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_31</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aff51240e9dc87aa802eaaad8ea14f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_ALL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5346e1c0c35ccc30a90bc2d15c531591</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_DefaultFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a53b33337014e199f56e752574f36981e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_StaticFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5fc6148cb03f12dc376273ffa516163d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_KinematicFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974abe2b526b04665757528464a85a0484ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_DebrisFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a9927ed54cec6c01b1adc76547240a391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_SensorTrigger</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a95f7a2b44182a986ab43990e62ce56db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_CharacterFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5dd354e999e7363281a2b6e10d591845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_AllFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a0fba80cad161dda96de5cbda9091cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliObjectEnumType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_None</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a897e3c9cbacf6a503528adb0ad512687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_World</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aaf9ee384b16306d1c78feadbc2a67b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldFacebook</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa062e8c7c2f0adac770d82ca09a0e8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldFactory</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a155fe1dc231c0d5477adb939916a0752</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldLuaVirtualMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4d50f8c946191bd8bb69363a62e0c970</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldPythonVirtualMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aeeadc4f5bf71c8aef4c494aaecddee74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldResourceLoader</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2da5eb7bbda95f42bb4e971e8aca84cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldSocket</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a962226bcbb2b3811e46ed9bc89d9fb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a51c975667c78cbdf8f1cb6af1af7c57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldInput</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a16afc580db51ec596613657ae610892d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldClock</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a63d5840200ab10516fd6d7584da2700f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldSound</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aec82ab14a72ccb6cde7dff9d48fb7d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldDebugDrawer</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae351a75c61f9709ce5b879e43d4078ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_DeviceTouch</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0e472f28e4e4c659c2dcf6a8aac9714d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Geometry</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab0e14bf6ac78cbc5f936f1deff92254e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShape</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a17dd33005b333e06232098ec8139457e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Action</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444affacb5d8e686c41f6b9593da93c2fb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ActionBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac27f63190721e8e50ea957ef50d5feb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ButtonHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a62110b03da1994b0e37ca24dd2b03f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ButtonHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a24f3abae4380331c9e4fc0e6dd98d990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Camera</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a584b5378242583bfb37a7dc963809cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CameraBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1bf94aa0f345c5e503277edd7e9a3639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CheckboxHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aeea430e40ffbf6287e6f45b92283f5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CheckboxHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a30766bd9b3a037c8cdf8b8ee28f19b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Clock</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a767c5c9686befe91336f8f4f6f29e260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ClockBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a485adc2590e096485b63286c788a8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CollisionResponse</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af8ce52738a5eaa88f7a9d117c0f540b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CollisionResponseBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aca96e33eb2a43c80baafa6b3eda76e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Cube</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444adbf14f548d0deb2a84a8a1b3d09bd154</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CubeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af701d97c06bbbed74b71cf411a0603a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_DropdownHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a3968716659c91fd4e987e9457e406438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_DropdownHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab9cc17fc8fcfbe7309f0406fe69a94b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Font</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7c098ff563bd0f745a222f1c38d52156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_FontBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5e35bb12a3036c88f6296758787c0b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Image</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a09495040dd94be9914a21e6c6d4e9a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ImageBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acf74028d2f297bab038e3ef5fd78c546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_JsonJLI</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af7bfdf2cd0273bc42d0dd68f7a5ccdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_JsonJLIBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acc4baa24fbb55b5e43aa181b847ba262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LabelHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9a4c53a9a498a581983b05d487d9fa3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LabelHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1b744496170b08bd5e21cf8ad09fa9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Light</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad7db3595f7272df0b4f9d01f2eec308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LightBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6f47081705420a4e91ee86ffd5748f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LevelOfDetail</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aeb75dbe890906fbc20ba22a490daf8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LevelOfDetailBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a082cb0381e2ba760f1bc22ccc09689af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Material</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6ac84b76c50d1269976e3a7ef341e8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_MaterialBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7f7180f9dddec568a8f8ef8595058909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_MaterialProperty</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2d9e3b74b508d63b45116354d4777d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_MaterialPropertyBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab6c9abc4ed5a32ac46c04ada21f10139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Node</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a078b58bdb2d20fe4a3fe7203a2aa25a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a143ed7af74b73ee3a4aff4ce7d166276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeState</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad1e8b653ae3a0a8d8feb2a705bcdcd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeStateBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab4a7ce463eaf980a613fe2df777ff6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeStateMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a29c7365c2c16e80d2ed7ee4f6668e15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeStateMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aee798bb81ac3b1aa118b4bc89cca4e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ParticleEmitter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0aab6d0a92dc47d92d453bd0d48528d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ParticleEmitterBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9fda2cd33ae3e2e41f358cbb5358dfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBody</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae65052637b1299f88373298becce64bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyGhost</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7de12a8fc85326d6d9412989ea52c296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyGhostBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a611365dccd0786c1006e55e2f5046761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyRigid</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab485691f93126ae256b6e88acc6268c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyRigidBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a57c1c38bbc964e3244e5c47b395a236d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodySoft</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a31f3cdb937056c1927866bb5a6565908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodySoftBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa8f4b51caa8046885e018fd729a8b162</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraint</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a510ff85c220ba48c3f227ebd30a2078d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad2fbdb1df3083f3c582567cece92f511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintHinge</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac3c75cd492cc1fba614e2851c332220d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintHingeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5f8cc7969ddb7de442685466342f3d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintPointToPoint</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0e67e880dd423e76642d36f2fd40f1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acb7dd3eef2f916bdb7ab153e4dc6ec56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintSlider</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6a7c70e1372b79d9b3105fcfce52f033</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintSliderBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444abc9ee150387b351148f450dea351512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintConeTwist</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a40e44c4e7b4d13076b643e569a63a350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a62739a7a2007006ba1fde0db9bcd73e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintFixed</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9789d2b072ff7710d51fbf9406163975</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintFixedBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6d8f591805f54af681b74dee6c1c846b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6Dof</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5149a83507667667e84b113e78529cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8ab3c130238d63bc31105dccd1375acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8c3f25125ebf6314314fbb0923163e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac0d10efd09a2d1e269af9c8c3b522db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsContact</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a3c7e2ca128207d9f821ae47b8ace8b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsContactBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7dcb3257dd1a77063e3ef9c2e15bb1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsCloseContact</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a226b64ff870ea637c0316c09f416b249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsCloseContactBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2b0c8c9c2632a668cdc459457dcc2104</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsField</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2752ef6e53e1bcfa8704c2e3f7815c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsFieldBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad97d52663b698eca329ade99182c03ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsRayContact</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9ff87602d405d1b18c20d2bc6645b639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsRayContactBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7625048d00ed70e09e02d98eb7950696</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBox</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a928a72d79828f59158b0c8ec166ee001</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBoxBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac0cd2f461992f268a3652aed53ff1330</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBox2D</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae68612d60428ec8a104053d57754d9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBox2DBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6a592fcc3b7ce43cdcd37ce1d72640fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeSphere</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9b5fdd65d1ec1734fce1c64fa0c2dc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeSphereBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9d41ced00c77b02bb257530b59a1b2fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCylinder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a178007e15296eccc25b9602c1f2a9f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCylinderBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444add2c79d085ed5776077871b8bc280204</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCapsule</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aff48184530376f3723f7f09301608f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCapsuleBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6da38428a49ecdcdff1c71fe7d2ccebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCone</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a91c37fbbf9083c53a2a8354b9e70ebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a20e3698a8a88dd00bd8a1fb3efd62f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeMultiSphere</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444abd3f8753d211741594da6e64d38b433f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2eb0f869b0f71a386302f903fb965fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexHull</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab77b0553c701df22963e8e69f169f742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexHullBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aabf3a6ad363f0b347a569f0c709b0556</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a618d3de353555744920b05b8eb806125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab9cc9c112f7a53d0d31fc366fd340ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a46fbd4ecdb7613c10a9d279a57f79638</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9566922f6aed87f8897da75430f07460</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa4746c51c849b53ec9dcbe461b76e138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a49bbc14897f0615b33c0ce6cbc864dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeStaticPlane</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a69bd909ded4e0e4171d034ddebe0cf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4c7f5cc3ead65995d70da08aab7e9029</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsWorld</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa2a35b548ed9b3b2dff2f5ab33f949ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsWorldBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa0a216e28a5de7dabccee732eccb99d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Plane</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a73b5b10a77c6e746f173f03b66c05452</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PlaneBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a965748a48832125428d946a1b0201bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Scene</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6dc36dba9d483c432ccbc88d5b7ee7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afb5f240d9d7c0767765244294dac3962</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneState</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a32e34fa3e3639cdda2e64680d5def9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneStateBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a648a878cfdc412de15bcd0116921ed0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneStateMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9d8eeb6715ea8e032f567fff981b3021</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneStateMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a780d05309d85588de675847a1a8818c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ShaderProgram</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afc5c1e38c907b27cd79b8a154aa1f021</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ShaderProgramBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4cddb91744b04635478da2fc4e8f5059</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Skinner</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa836a2cbedd8f5fbcb94cda58d4472d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SkinnerBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8de53302fea09b281262471e64b67820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SliderHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af64e688481302082f6f47dbc35a3fe76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SliderHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ace531648ee82cafd2a91ffcf493f9bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Sound</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afa72f4ef2201548791e65b9b29144b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SoundBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae872062926d4d51fc2625741619ab25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Sprite2D</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1c45612513be6377931cb97d659ec8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Sprite2DBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab2651c8d5f919ce0a7056a3549f070c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SpriteFrameAtlas</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0a15fb116280a1dfea4e3b214df1a48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SpriteFrameAtlasBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a70ca4c5b691e286c318b68ff54457f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehavior</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afb988c15c8acfa41ed67870d385f92d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444adc585b2deaac7f48656b5979d77d88c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorAlignment</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af6d51f3796c8cf559ba2eb1f5fd9ef91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorAlignmentBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afddfa8e2cdb983f1df414fc562eda404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorArrive</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acd54ff18795b7270f44dfa963f2955ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorArriveBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5fba043af3f36aabdae637978dc08cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorCohesion</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6298862ed617f9410c0bfe57b76dce5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorCohesionBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9ba2a788fe8f0fcbe22e372e58fb3e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorEvade</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4afde8f4cb4c4089bb47a4824fdfdd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorEvadeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0017bece3b05aaca5de3a0178d4c183a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFlee</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad8f55b1005e041f03a207f3681934f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFleeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a38dbdf18105275cdc40705d292043cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFollowPath</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a962c0bb9b5505d9b35ea4e0a2787b8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFollowPathBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a466c76db47db8b5c31a0072e355d46ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorHide</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8c33b85812fff3133ea671c7ed10db94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorHideBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a570ae3260203dd9c759c46ccdaebe1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorInterpose</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aff0e49c53b9391645f902c423f286665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorInterposeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af61186785348e8a45b867976b5427ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a817bec1230cf61d85cde086e80971d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aff0448d58179523ec1b7b7c1542ce8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineDithered</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac77dededa73b417607c942ec991ce045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineDitheredBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad1cb2a434e28d6aacaed539768cfea58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachinePrioritized</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9276f434de93792934f0d7af6fa41597</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachinePrioritizedBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a68d4c35aa5b0285b647cfe17dd8cba4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineWeighted</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae4d04019caa0d5dc392200c1e78ce8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineWeightedBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aee26265d84971c058fc5ec438ce925d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0d10857a9faf274e5f399d970cffab54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorObstacleAvoidanceBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8db2ac2e3bf1b4b54e8eef5ec82bb31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorOffsetPursuit</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8f02954dcc21dfbdac47ad78d3fde3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorOffsetPursuitBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad7d8d479d51b4382207ab5d998aa3cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorPursuit</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a367d51e7c5cf64bc1d4c933291d7b38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorPursuitBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5714a07f3cc466b9f07fdb194d885d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeek</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a715c36c3ae37b11295f735a932ffd577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeekBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1a9041dbd8559ce4c692394596594002</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeparation</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a181868273499396a4865002154f6dde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeparationBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a910745b128673320d7bb577b48bda724</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWallAvoidance</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae2b3447851b7ac75116251170282dbc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWallAvoidanceBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8ec8e7414459952bb93962003e257328</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWander</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad509ed837897d1936482eed231b4380f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWanderBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a388556f711c9388292a53cf5cedba35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_StopWatch</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac0fa0a9dbb9d90ae8dc50821c7a3de13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_StopWatchBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2e8e7d5d98c53a5f9f66f8685d3f4df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_TextboxHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0383038e50246903540ca9e04d416302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_TextboxHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0675c3573f15fab7335f67aed34c4e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Thread</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa7d7f13f89da44fa96bf4664a0dc43a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ThreadBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aedd31df53cf0a5a3e8ed438d10902927</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Timer</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac1dc8091d10d7ba28a1ea747c687f16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_TimerBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a06fbb602895b7f1669b0a67aa93218b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldState</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444adbd175560c2bf0cbbfa4efade7b67150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldStateBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a78136c2e89e2b894b844f5b794fb97a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldStateMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7d26d655b0e253886193da06295bb3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldStateMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a392ad80c75641027d0d84a646180194b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Xml</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a08c8ffe863dd89d0a164a2a2f4d2da59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_XmlBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a785d967f7b8dd63c33284300e1711ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NumberOfTypes</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a38ea00cb8212b1d00a88582f123b439f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const u32</type>
      <name>njliRenderCategoryValues</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a65d693b7c5879aee9e181234f22b7b2a</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JsonJLI.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_json_j_l_i_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::JsonJLI</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Node.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_node_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_actionable_8h" name="AbstractActionable.h" local="yes" imported="no">AbstractActionable.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <class kind="class">njli::Node</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeState.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_node_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <class kind="class">njli::NodeState</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>NodeStateMachine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_node_state_machine_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <class kind="class">njli::NodeStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBody.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/body/</path>
    <filename>_physics_body_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::PhysicsBody</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyGhost.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/body/</path>
    <filename>_physics_body_ghost_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <class kind="class">njli::PhysicsBodyGhost</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodyRigid.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/body/</path>
    <filename>_physics_body_rigid_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <class kind="class">njli::PhysicsBodyRigid</class>
    <class kind="class">njli::PhysicsBodyRigid::ForceAndPosition</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsBodySoft.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/body/</path>
    <filename>_physics_body_soft_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_physics_body_8h" name="PhysicsBody.h" local="yes" imported="no">PhysicsBody.h</includes>
    <class kind="class">njli::PhysicsBodySoft</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraint.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::PhysicsConstraint</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintConeTwist.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_cone_twist_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintConeTwist</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintFixed.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_fixed_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintFixed</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6Dof.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_generic6_dof_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6Dof</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintGeneric6DofSpring.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_generic6_dof_spring_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_generic6_dof_8h" name="PhysicsConstraintGeneric6Dof.h" local="yes" imported="no">PhysicsConstraintGeneric6Dof.h</includes>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpring</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintHinge.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_hinge_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintHinge</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintPointToPoint.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_point_to_point_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintPointToPoint</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsConstraintSlider.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/constraint/</path>
    <filename>_physics_constraint_slider_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_constraint_8h" name="PhysicsConstraint.h" local="yes" imported="no">PhysicsConstraint.h</includes>
    <class kind="class">njli::PhysicsConstraintSlider</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsCloseContact.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/</path>
    <filename>_physics_close_contact_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsCloseContact</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsContact.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/</path>
    <filename>_physics_contact_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsContact</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsField.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/</path>
    <filename>_physics_field_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsField</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsRayContact.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/</path>
    <filename>_physics_ray_contact_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsRayContact</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsWorld.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/</path>
    <filename>_physics_world_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::PhysicsWorld</class>
    <class kind="class">njli::PhysicsWorld::CustomFilterCallback</class>
    <namespace>njli</namespace>
    <member kind="typedef">
      <type>void(*</type>
      <name>ghostCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a1fa129854a8e7752403465871495fc68</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPreTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a198074fecee1ecd3469a9eb42d3b1672</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPostTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a805528e68206342abc780b53e418030d</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PhysicsShape.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::PhysicsShape</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_box_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeBox</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBox2D.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_box2_d_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeBox2D</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeBvhTriangleMesh.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_bvh_triangle_mesh_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeBvhTriangleMesh</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCapsule.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_capsule_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeCapsule</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCone.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_cone_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeCone</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexHull.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_convex_hull_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeConvexHull</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeConvexTriangleMesh.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_convex_triangle_mesh_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeConvexTriangleMesh</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeCylinder.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_cylinder_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeCylinder</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeHeightfieldTerrain.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_heightfield_terrain_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrain</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeMultiSphere.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_multi_sphere_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeMultiSphere</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeSphere.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_sphere_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeSphere</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>PhysicsShapeStaticPlane.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/physics/shape/</path>
    <filename>_physics_shape_static_plane_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_physics_shape_8h" name="PhysicsShape.h" local="yes" imported="no">PhysicsShape.h</includes>
    <class kind="class">njli::PhysicsShapeStaticPlane</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/android/</path>
    <filename>android_2_graphics_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/appletv/</path>
    <filename>appletv_2_graphics_platform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>USE_FMOD</name>
      <anchorfile>appletv_2_graphics_platform_8h.html</anchorfile>
      <anchor>a9123ffe1fe724cba8b1d43c5251fddbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/applewatchos/</path>
    <filename>applewatchos_2_graphics_platform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>NANOVG_GLES2_IMPLEMENTATION</name>
      <anchorfile>applewatchos_2_graphics_platform_8h.html</anchorfile>
      <anchor>a2abe99f80e5d2620d94bfa2361288796</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__IOS__</name>
      <anchorfile>applewatchos_2_graphics_platform_8h.html</anchorfile>
      <anchor>ac796fa02543f801da4346ac42d552c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_FMOD</name>
      <anchorfile>applewatchos_2_graphics_platform_8h.html</anchorfile>
      <anchor>a9123ffe1fe724cba8b1d43c5251fddbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/emscripten/</path>
    <filename>emscripten_2_graphics_platform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>USE_OPENAL</name>
      <anchorfile>emscripten_2_graphics_platform_8h.html</anchorfile>
      <anchor>ab6f5bb003660e0883454603afb5f5e06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/ios/</path>
    <filename>ios_2_graphics_platform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>USE_FMOD</name>
      <anchorfile>ios_2_graphics_platform_8h.html</anchorfile>
      <anchor>a9123ffe1fe724cba8b1d43c5251fddbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/linux/</path>
    <filename>linux_2_graphics_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>GraphicsPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/macOS/</path>
    <filename>mac_o_s_2_graphics_platform_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>USE_FMOD</name>
      <anchorfile>mac_o_s_2_graphics_platform_8h.html</anchorfile>
      <anchor>a9123ffe1fe724cba8b1d43c5251fddbc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/android/</path>
    <filename>android_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/appletv/</path>
    <filename>appletv_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/applewatchos/</path>
    <filename>applewatchos_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/emscripten/</path>
    <filename>emscripten_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/ios/</path>
    <filename>ios_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/linux/</path>
    <filename>linux_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/macOS/</path>
    <filename>mac_o_s_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>SoundPlatform.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/windows/</path>
    <filename>windows_2_sound_platform_8h</filename>
  </compound>
  <compound kind="file">
    <name>ColorUtil.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_color_util_8h</filename>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::ColorUtil</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RLUM</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>a463792f2fa66c99a8329aae43be4c7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GLUM</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>a0faedcf9d84cbca5ee944af29148f6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BLUM</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>af5ec63b487cb34b43575bb5bf7589513</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_R</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>a0e82449b80c647bc55a73418ea52ec86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_G</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>a7b64ecaea2b294f8f43f1872abee598f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_B</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>a64f7c4af2b52d3d7076c2996f5980988</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OFFSET_A</name>
      <anchorfile>_color_util_8h.html</anchorfile>
      <anchor>a836382d562cebe850ee94ad5ee2c1c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DeviceInputTime.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_device_input_time_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <class kind="class">njli::DeviceInputTime</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DeviceKey.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_device_key_8h</filename>
    <includes id="_device_input_time_8h" name="DeviceInputTime.h" local="yes" imported="no">DeviceInputTime.h</includes>
    <includes id="_game_8h" name="Game.h" local="yes" imported="no">Game.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <class kind="class">njli::DeviceKey</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DeviceMouse.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_device_mouse_8h</filename>
    <includes id="_device_input_time_8h" name="DeviceInputTime.h" local="yes" imported="no">DeviceInputTime.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <class kind="class">njli::DeviceMouse</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DeviceTouch.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_device_touch_8h</filename>
    <includes id="_device_input_time_8h" name="DeviceInputTime.h" local="yes" imported="no">DeviceInputTime.h</includes>
    <includes id="_game_8h" name="Game.h" local="yes" imported="no">Game.h</includes>
    <includes id="bt_vector2_8h" name="btVector2.h" local="yes" imported="no">btVector2.h</includes>
    <class kind="class">njli::DeviceTouch</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>DeviceUtil.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_device_util_8h</filename>
    <class kind="class">DeviceUtil</class>
  </compound>
  <compound kind="file">
    <name>Engine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_engine_8h</filename>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>NJLIGameEngine_VERSION_MAJOR</name>
      <anchorfile>_engine_8h.html</anchorfile>
      <anchor>a90a7149ee8d93d85cfc2880b4292918a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NJLIGameEngine_VERSION_MINOR</name>
      <anchorfile>_engine_8h.html</anchorfile>
      <anchor>a7e530e1df9671d0dbdf343a0a9620ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NJLIGameEngine_VERSION_RELEASE</name>
      <anchorfile>_engine_8h.html</anchorfile>
      <anchor>a33646c1b30c8c9f65c230fa1a9b27259</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run_main</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a763b51626ae6d3f240198aa15876fbf1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>File.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_file_8h</filename>
    <includes id="_macros_8h" name="Macros.h" local="yes" imported="no">Macros.h</includes>
    <member kind="function">
      <type>const char *</type>
      <name>RESOURCE_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>aeb4481fefba5b1fcb8b464abab3e34f5</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ASSET_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>ab68660eca41a4916fad216c721a81321</anchor>
      <arglist>(const char *file) SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>BUNDLE_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>aeb4597d299e978ba946166bf233d838c</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DOCUMENT_PATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a2ada1cc4ebdd1e6cc286660ebddefc03</anchor>
      <arglist>(const char *file) SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>DOCUMENT_BASEPATH</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a77f67e0b2c49a0d324312ab9d3593489</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleepThread</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>afecdbc1c9e303fc703fbd58810d7032a</anchor>
      <arglist>(float milliseconds) SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupFileSystem</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a188625fbdc32cb9e1361fc3702a193a5</anchor>
      <arglist>() SIMPLE_FUNCTION</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRunningPath</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>ad3c350eea7e404325fea6e9453f5baee</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScriptDir</name>
      <anchorfile>_file_8h.html</anchorfile>
      <anchor>a1cec7a7eada03af54f0d83495aa87c36</anchor>
      <arglist>(const char *path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Game.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_game_8h</filename>
    <class kind="class">njli::NJLIGameEngine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>JLIAssetUtil.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_j_l_i_asset_util_8h</filename>
  </compound>
  <compound kind="file">
    <name>Localization.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_localization_8h</filename>
    <member kind="function">
      <type>std::string</type>
      <name>LOCALIZED_TEXT</name>
      <anchorfile>_localization_8h.html</anchorfile>
      <anchor>aeb85579ddfef01a6c26898daf39805e4</anchor>
      <arglist>(const char *key, const char *default_value, const char *comment=&quot;no comment&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>LOCALIZED_LANGUAGE</name>
      <anchorfile>_localization_8h.html</anchorfile>
      <anchor>a2931ce269f8db41515d8dd8747ab7589</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Log.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_log_8h</filename>
    <includes id="_macros_8h" name="Macros.h" local="yes" imported="no">Macros.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>LOGGING_ON</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a44d8ca8ecfccda385a2802f51e3dd234</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LUA_WRAPPER_LOGGING</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad03084521a78f069edda4960ef078e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FMOD_LOGGING_ON</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad49afa178ec4521d7021b7b0702d5db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>njli_luawrite</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a4ae434427436c69e2d65f41208958ce0</anchor>
      <arglist>(c, l)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SCRIPT_ERROR</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>af14a46f6f51a3142c39994ac6354b57f</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CRASH</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>adc22d45f643dc817497df90cc02bf701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_V</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>af0f5b5dd163750aef913cc0858b5d3f0</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_D</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aee53a8a2621ddb7d1bbc9b0ca5a982d0</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_W</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a18b5ceb19695891ea4079d1385809bb6</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_PRINT_E</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a027235ba85c1a6314d8f8a32c05f6175</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SDL_assertCheck</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad5ee87790648f8d2f260fab5fcb164b1</anchor>
      <arglist>(condition, fmt, args...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SDL_assertPrint</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>abc93d4c7479c9cfe34fd99c5d47d42ad</anchor>
      <arglist>(condition, fmt, args...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ASSERT_PRINT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a6477a35a45a62b17c166482051cc7a15</anchor>
      <arglist>(condition, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_WARN_PRINT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a804c0845ab7de9fddac03e9a7dadc2ee</anchor>
      <arglist>(condition, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_V</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a20f686a106ec929a8c06764aecbf37cc</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_D</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a1a4e0672ab0b08c6d9b8d17c59ba4b37</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_W</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ad55d2448f9da3e6491c66d9772d6501f</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_E</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ade6de648bbfe0c4046b4a0e81c9739dc</anchor>
      <arglist>(tag, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_WARN_LOG</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a51f117f04e2c130220124132f82b8233</anchor>
      <arglist>(condition, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_PRINT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a5bb3457330d5d35e5043b837f97b8d25</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_PRINTF</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aa97e8dc28005a1241103bef65128944b</anchor>
      <arglist>(fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_VERBOSE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aec9547293d27900202e316167a193d90</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_DEBUG</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a6eb965ee9f9ddacf359c1904315ba724</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_WARN</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aa19c9adfd1dfdf4e09026d910c9cb76c</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ERROR</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a947c8bc8a191ae93d6297fac9aba37ee</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_V</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a215cf9ab11255457243b82024f4c1e03</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_D</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ac2edd874468b62d0c794d830c73617c5</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_W</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a65c172d2e2cb9e25ee4670e6d226fe95</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_LOG_WRITE_E</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a94131c832d840abf36600bd7c935446c</anchor>
      <arglist>(tag, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_ASSERT_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a3c23ab1e103703b3517528ad68fd06cc</anchor>
      <arglist>(condition, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_WARN_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ae1b3c7ce535c2483510bb98c1176d5e7</anchor>
      <arglist>(condition, text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_GL_ERROR_PRINT</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a8c242b4461ea505703d8384a309d4000</anchor>
      <arglist>(op, fmt,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEBUG_GL_ERROR_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>afd7c1a8acb51b1311cccca3f54cedb82</anchor>
      <arglist>(op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btVector2_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a6e9a44965497365b718f668007b2fea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btVector3_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aa8cb4d33b38de9781f60d8388cf2d602</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btVector4_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a4294e447357545539394c6e0d4d66279</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btManifold_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a2286da5fafe4334325f4023429546fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btQuaternion_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a99109c3dbdb13448f1d74077ea50add9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btMatrix3x3_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>abc56f223195427220eac4d21d39a9e01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>btTransform_BASE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a5d705a0226b0149f9b25309b7ac2527b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_debug_log_v</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a78efe282a34305e3723a7161fb785f06</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void</type>
      <name>_debug_log_d</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a66226250d9741ce1e2bb3da485c15ccc</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void</type>
      <name>_debug_log_w</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>acafecbb68ba49a5d0cde797c14f22812</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void void</type>
      <name>_debug_log_e</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>ae657b1ed7534487c51976789e2d2c0c2</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void void void</type>
      <name>_script_error</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a9a2b9ceca7bf08dd77eb272ade7d0084</anchor>
      <arglist>(const char *tag, const char *text,...) PRINTF(2</arglist>
    </member>
    <member kind="function">
      <type>void void void void void void</type>
      <name>_script_crash</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a9c36de417a4ccc86e249d89ea07d8f8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>LUA_WRITE</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>aec62af3b7029d530f8a2a3a92b6f6364</anchor>
      <arglist>(const char *c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_debug_log_stderr</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a64ad63c6a78800487a7bf7a3036b1bd9</anchor>
      <arglist>(const char *tag, const char *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>njliSleep</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>abb8935393618ec31c12666227a970bfa</anchor>
      <arglist>(unsigned int _ms)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>string_format</name>
      <anchorfile>_log_8h.html</anchorfile>
      <anchor>a6a92ead199a6daa32718d5d8be44db07</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Macros.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_macros_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>DEPRECATED</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>ac1e8a42306d8e67cb94ca31c3956ee78</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMPLE_FUNCTION</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>a0f68dce17328f16e8d55c5ec43f844b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>addf5ec070e9499d36b7f2009ce736076</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PACKED</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>a36d525cf4d116b2fe4ecc00222b256f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PRINTF</name>
      <anchorfile>_macros_8h.html</anchorfile>
      <anchor>a18e350d34314d6cfc3570ef1d2b545f5</anchor>
      <arglist>(formatpos, argpos)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NJLIInterface.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_n_j_l_i_interface_8h</filename>
    <member kind="typedef">
      <type>std::map&lt; int, SDL_Joystick * &gt;</type>
      <name>JoystickMap</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a2642a79c3f661b171d671a8faca552c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int, SDL_Joystick * &gt;</type>
      <name>JoystickPair</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a49256682c3474ea60e1aa3e4f3726f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleUpdate</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a1e60f47d0b131d5990bdc98dc8279399</anchor>
      <arglist>(double timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleRender</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a3ca283031b2c6db0f81d6b8f1ab6594c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleLowMemory</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>abd21b292252c420cad4abda6d86d1193</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleQuit</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>aef46a1be5f0e91410087bb21528d3636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandlePause</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a9ab4654023d305ec7788d1f6bd166f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleResume</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a490e2957f6cb5c01bcc873b219c13964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleDropFile</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a24c9633bdc46d5b8b64456e75fbe5aa6</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleResize</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a8bf04c69e1bc1c3c08f30aa579cc1d73</anchor>
      <arglist>(int width, int height, int sdlFormat, float refreshRate)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NJLI_HandlePadDown</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a33bb6576261605e9bab826bb21a7aa9a</anchor>
      <arglist>(int device_id, int keycode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NJLI_HandlePadUp</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a54e28fcf9d572c82e5d57129f319f43c</anchor>
      <arglist>(int device_id, int keycode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleJoy</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a105d45d4a14e2526ceeb66b1a0b60304</anchor>
      <arglist>(int device_id, int axis, float value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleHat</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>ac8af65c5e0fb2ac87b2f4c5b0271586f</anchor>
      <arglist>(int device_id, int hat_id, int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleKeyDown</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a68c675ef4b67a621a9b07956a87f164c</anchor>
      <arglist>(const std::string &amp;keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleKeyUp</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>aae7e9403cfa5ccc5fd54012350fd153d</anchor>
      <arglist>(const std::string &amp;keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleKeyboardFocusLost</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>af76d7bc62254b701c7266713652b1578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleKeyboardFinish</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>ad3d8b0648b78539ef5da05c66816fdde</anchor>
      <arglist>(const unsigned char *state, int numStates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleMouse</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a0df118b26b35f2f4cad823df47ea4ad8</anchor>
      <arglist>(int button, int eventType, float x, float y, int clicks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleTouch</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>aa68746871cc5e2195dbdb38623df5cf4</anchor>
      <arglist>(int touchDevId, int pointerFingerId, int eventType, float x, float y, float dx, float dy, float pressure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleFinishTouches</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a504780d2532764bd8eca76da693862ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleAccel</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a4a4ec35ea6565fbaf47ffeeeac329ff9</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleSurfaceChanged</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a5caa8b96a2484e22eaf17f6400254327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleSurfaceDestroyed</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a9e9547b19cfb4c6c39453d90a155b4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NJLI_HandleAddJoystick</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>ab89b70450a79c24a789431c13987f663</anchor>
      <arglist>(int device_id, const char *name, int is_accelerometer, int nbuttons, int naxes, int nhats, int nballs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>NJLI_HandleRemoveJoystick</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a8967eda0ee6571bc64d28407cb31ca83</anchor>
      <arglist>(int device_id)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>NJLI_HandleGetHint</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a521c282a3e54e5d174c07226c29c73e2</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleCommitText</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a3288c38f85384c3b1d9b4d6ff1fc65d3</anchor>
      <arglist>(const char *text, int newCursorPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>NJLI_HandleSetComposingText</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a825a21d7571cf6c98f65eea33346753d</anchor>
      <arglist>(const char *text, int newCursorPosition)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SDL_Joystick * &gt;</type>
      <name>gGameJoysticks</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>ad44d313c047589b11b13ed2b86b8c4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JoystickMap</type>
      <name>gGameJoystickMap</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>adb79376dd8a0fe575d83acde08cb1047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SDL_Window *</type>
      <name>gWindow</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a222f53a6a442d8f716dffd665e83528a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SDL_Renderer *</type>
      <name>gRenderer</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a4735638969a524c4ac90a88f23c59a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SDL_GLContext</type>
      <name>gGlContext</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a18634b79b95e521c65f8446597af3fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SDL_DisplayMode</type>
      <name>gDisplayMode</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>aeea34e2cdf8071c7dcd944e5f40141e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SDL_MouseMotionEvent</type>
      <name>gLastEvent</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a0d2385cca83f2f3e3972567646e933c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gDone</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a01e593ea28db3fae0f4b904a097f392a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gXOffset</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a617d46c48dd05c5f04f249d74b27474e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gYOffset</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a8832dca79836bee1ed31c0c1943f70eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gNumTouches</name>
      <anchorfile>_n_j_l_i_interface_8h.html</anchorfile>
      <anchor>a869dc264b051e5660082d1a9782c7d12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Util.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_util_8h</filename>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="struct">rgb</class>
    <class kind="struct">hsv</class>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>PI</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a598a3330b3c21701223ee0ca14316eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BUFFER_SIZE</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a6b20d41d6252e9871430c242cb1a56e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>s8</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a2ff401e087cf786c38a6812723e94473</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>u8</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>aed742c436da53c1080638ce6ef7d13de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>s16</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a2e9bf6983da73775aa86158c825bf777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>u16</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a9e6c91d77e24643b888dbd1a1a590054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>s32</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>aa62c75d314a0d1f37f79c4b73b2292e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>u32</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a10e94b422ef0c20dcdec20d31a1f5049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed long long</type>
      <name>s64</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a4258bfb2c3a440d06c4aaa3c2b450dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long long</type>
      <name>u64</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>ad758b7a5c3f18ed79d2fcd23d9f16357</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>f32</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a5f6906312a689f27d70e9d086649d3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>f64</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a94dab5770726ccbef8c7d026cfbdf8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>IsOn</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>ae88bd4b701da0facce543b4b1cf2913e</anchor>
      <arglist>(const s32 value, const s32 bit)</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>On</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a86d8a45efa3de86d9cbd56e47f817ae5</anchor>
      <arglist>(const s32 value, const s32 bit)</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>Off</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>ad1051d2c3a51590b7ff6d8eebf207767</anchor>
      <arglist>(const s32 value, const s32 bit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>clampf</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a49d91d981da3589ae6425aec87b8b2ba</anchor>
      <arglist>(const f32 value, const f32 min, const f32 max)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>clamp</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a2ab20be98ddc67c99178eecd4e4fce2d</anchor>
      <arglist>(const s32 value, const s32 min, const s32 max)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>clampColor</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a06c3fcc0066b352d32be5c1af8836395</anchor>
      <arglist>(const f32 color)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>isPowerOfTwo</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>aa1324f2b342af4bee334ecbba1f0d8ea</anchor>
      <arglist>(s32 v)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>fixPowerOfTwo</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a9f316c57e6595e69794eb7404799cef3</anchor>
      <arglist>(s32 v)</arglist>
    </member>
    <member kind="function">
      <type>hsv</type>
      <name>rgb2hsv</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>aa9504068d05a6b4a9f772dbfa9d0e0ca</anchor>
      <arglist>(rgb in)</arglist>
    </member>
    <member kind="function">
      <type>rgb</type>
      <name>hsv2rgb</name>
      <anchorfile>_util_8h.html</anchorfile>
      <anchor>a4a66ca1d47428638881abe32bfd7affc</anchor>
      <arglist>(hsv in)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldInput.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/platform/</path>
    <filename>_world_input_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_device_mouse_8h" name="DeviceMouse.h" local="yes" imported="no">DeviceMouse.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <class kind="class">njli::WorldInput</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Scene.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_scene_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::Scene</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneState.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_scene_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <class kind="class">njli::SceneState</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SceneStateMachine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_scene_state_machine_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <class kind="class">njli::SceneStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>ISoundFileWrapper.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/sound/openal/</path>
    <filename>_i_sound_file_wrapper_8h</filename>
    <class kind="class">njli::ISoundFileWrapper</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Wrapper_OGG.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/sound/openal/</path>
    <filename>_wrapper___o_g_g_8h</filename>
    <includes id="_i_sound_file_wrapper_8h" name="ISoundFileWrapper.h" local="yes" imported="no">ISoundFileWrapper.h</includes>
    <class kind="struct">ogg_file</class>
    <class kind="class">njli::WrapperOgg</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>OGG_BUFFER_SIZE</name>
      <anchorfile>_wrapper___o_g_g_8h.html</anchorfile>
      <anchor>a19906647bd966757e5f2acd00f34023d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ogg_file</type>
      <name>ogg_file</name>
      <anchorfile>_wrapper___o_g_g_8h.html</anchorfile>
      <anchor>ad39f07112cd3b7103d376e1c0c1221f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wrapper_RAW.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/sound/openal/</path>
    <filename>_wrapper___r_a_w_8h</filename>
    <includes id="_i_sound_file_wrapper_8h" name="ISoundFileWrapper.h" local="yes" imported="no">ISoundFileWrapper.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <class kind="struct">raw_file</class>
    <class kind="class">njli::WrapperRaw</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>RAW_BUFFER_SIZE</name>
      <anchorfile>_wrapper___r_a_w_8h.html</anchorfile>
      <anchor>aa2cdcb113ebceb066957c13a5bc9583f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct raw_file</type>
      <name>raw_file</name>
      <anchorfile>_wrapper___r_a_w_8h.html</anchorfile>
      <anchor>a26294bf6ad1bdf1c06bfc8575304acfc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wrapper_WAV.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/sound/openal/</path>
    <filename>_wrapper___w_a_v_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_i_sound_file_wrapper_8h" name="ISoundFileWrapper.h" local="yes" imported="no">ISoundFileWrapper.h</includes>
    <class kind="struct">wav_file</class>
    <class kind="struct">WAV_DESC</class>
    <class kind="struct">WAV_FORMAT</class>
    <class kind="struct">WAV_CHUNK</class>
    <class kind="class">njli::WrapperWav</class>
    <namespace>njli</namespace>
    <member kind="define">
      <type>#define</type>
      <name>WAV_BUFFER_SIZE</name>
      <anchorfile>_wrapper___w_a_v_8h.html</anchorfile>
      <anchor>a9a6da6d572cf36f4c8df9df32f289291</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct wav_file</type>
      <name>wav_file</name>
      <anchorfile>_wrapper___w_a_v_8h.html</anchorfile>
      <anchor>a7ae86609c2e2f5feabd08ac3e3d14058</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct WAV_DESC</type>
      <name>WAV_DESC</name>
      <anchorfile>_wrapper___w_a_v_8h.html</anchorfile>
      <anchor>acd413122c29737f84b9b8ceba9776d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct WAV_FORMAT</type>
      <name>WAV_FORMAT</name>
      <anchorfile>_wrapper___w_a_v_8h.html</anchorfile>
      <anchor>aa043b0d74bde64d109045222bd651749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct WAV_CHUNK</type>
      <name>WAV_CHUNK</name>
      <anchorfile>_wrapper___w_a_v_8h.html</anchorfile>
      <anchor>adb79863e470aef564f97306765fc052d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Sound.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/sound/</path>
    <filename>_sound_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_abstract_transform_8h" name="AbstractTransform.h" local="yes" imported="no">AbstractTransform.h</includes>
    <class kind="class">njli::Sound</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldSound.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/sound/</path>
    <filename>_world_sound_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_sound_8h" name="Sound.h" local="yes" imported="no">Sound.h</includes>
    <class kind="class">njli::WorldSound</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehavior.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehavior</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorAlignment.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_alignment_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorAlignment</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorArrive.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_arrive_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorArrive</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorCohesion.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_cohesion_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorCohesion</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorEvade.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_evade_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorEvade</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorFlee.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_flee_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorFlee</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorFollowPath.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_follow_path_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorFollowPath</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorHide.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_hide_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorHide</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorInterpose.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_interpose_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorInterpose</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorObstacleAvoidance.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_obstacle_avoidance_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorObstacleAvoidance</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorOffsetPursuit.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_offset_pursuit_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorOffsetPursuit</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorPursuit.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_pursuit_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorPursuit</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorSeek.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_seek_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorSeek</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorSeparation.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_separation_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorSeparation</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorWallAvoidance.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_wall_avoidance_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorWallAvoidance</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorWander.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/behavior/</path>
    <filename>_steering_behavior_wander_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_8h" name="SteeringBehavior.h" local="yes" imported="no">SteeringBehavior.h</includes>
    <class kind="class">njli::SteeringBehaviorWander</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/</path>
    <filename>_steering_behavior_machine_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::SteeringBehaviorMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachineDithered.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/</path>
    <filename>_steering_behavior_machine_dithered_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_machine_8h" name="SteeringBehaviorMachine.h" local="yes" imported="no">SteeringBehaviorMachine.h</includes>
    <class kind="class">njli::SteeringBehaviorMachineDithered</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachinePrioritized.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/</path>
    <filename>_steering_behavior_machine_prioritized_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_machine_8h" name="SteeringBehaviorMachine.h" local="yes" imported="no">SteeringBehaviorMachine.h</includes>
    <class kind="class">njli::SteeringBehaviorMachinePrioritized</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>SteeringBehaviorMachineWeighted.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/steering/</path>
    <filename>_steering_behavior_machine_weighted_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <includes id="_steering_behavior_machine_8h" name="SteeringBehaviorMachine.h" local="yes" imported="no">SteeringBehaviorMachine.h</includes>
    <class kind="class">njli::SteeringBehaviorMachineWeighted</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>StopWatch.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_stop_watch_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::StopWatch</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Thread.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_thread_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_log_8h" name="Log.h" local="yes" imported="no">Log.h</includes>
    <class kind="class">njli::Thread</class>
    <class kind="struct">njli::wrap</class>
    <namespace>njli</namespace>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_THREAD_PRIORITY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_VERY_LOW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aa835a0386724239439dda616d1787e87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_LOW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aa2b4e524af29ebc09a0de7eb236333196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_NORMAL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aaacd042e327263f640ce7c87c50e868a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_HIGH</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aaf334987028f6fb3c99daa775393010d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_VERY_HIGH</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aa8bcaf8d75832437cf6097181b6a9c177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_STATE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_STOP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555ab124aca454a99bef1a989eaacbcecec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_PLAY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555a9cb6f1b7593469f350b47bc71a1dc19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_PAUSE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555ad5a618c3425abc7e4dfd9b1567e4e615</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>typedef</type>
      <name>void</name>
      <anchorfile>_thread_8h.html</anchorfile>
      <anchor>af1e856da2e658414cb2456cb6f7ebc66</anchor>
      <arglist>(JLIthreadcallback(void *))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_timer_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Timer</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>World.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_world_factory_8h" name="WorldFactory.h" local="yes" imported="no">WorldFactory.h</includes>
    <includes id="_world_lua_virtual_machine_8h" name="WorldLuaVirtualMachine.h" local="yes" imported="no">WorldLuaVirtualMachine.h</includes>
    <includes id="_world_sound_8h" name="WorldSound.h" local="yes" imported="no">WorldSound.h</includes>
    <includes id="_camera_8h" name="Camera.h" local="yes" imported="no">Camera.h</includes>
    <includes id="_world_clock_8h" name="WorldClock.h" local="yes" imported="no">WorldClock.h</includes>
    <includes id="_world_debug_drawer_8h" name="WorldDebugDrawer.h" local="yes" imported="no">WorldDebugDrawer.h</includes>
    <includes id="_world_input_8h" name="WorldInput.h" local="yes" imported="no">WorldInput.h</includes>
    <includes id="_world_resource_loader_8h" name="WorldResourceLoader.h" local="yes" imported="no">WorldResourceLoader.h</includes>
    <includes id="_world_socket_8h" name="WorldSocket.h" local="yes" imported="no">WorldSocket.h</includes>
    <includes id="_world_state_8h" name="WorldState.h" local="yes" imported="no">WorldState.h</includes>
    <includes id="_world_state_machine_8h" name="WorldStateMachine.h" local="yes" imported="no">WorldStateMachine.h</includes>
    <class kind="class">njli::World</class>
    <namespace>njli</namespace>
    <member kind="function">
      <type>btVector2</type>
      <name>SCREEN</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a7cd195555cbed7b1657e1d48aa0070f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>WorldClock.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_clock_8h</filename>
    <includes id="_abstract_clock_8h" name="AbstractClock.h" local="yes" imported="no">AbstractClock.h</includes>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <class kind="class">njli::WorldClock</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldFactory.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_factory_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::WorldFactory</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldLuaVirtualMachine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_lua_virtual_machine_8h</filename>
    <includes id="_util_8h" name="Util.h" local="yes" imported="no">Util.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_device_key_8h" name="DeviceKey.h" local="yes" imported="no">DeviceKey.h</includes>
    <includes id="_device_mouse_8h" name="DeviceMouse.h" local="yes" imported="no">DeviceMouse.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <includes id="_node_8h" name="Node.h" local="yes" imported="no">Node.h</includes>
    <includes id="_scene_8h" name="Scene.h" local="yes" imported="no">Scene.h</includes>
    <includes id="_action_8h" name="Action.h" local="yes" imported="no">Action.h</includes>
    <includes id="_physics_ray_contact_8h" name="PhysicsRayContact.h" local="yes" imported="no">PhysicsRayContact.h</includes>
    <class kind="class">njli::WorldLuaVirtualMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldResourceLoader.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_resource_loader_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_j_l_i_factory_types_8h" name="JLIFactoryTypes.h" local="yes" imported="no">JLIFactoryTypes.h</includes>
    <class kind="class">njli::WorldResourceLoader</class>
    <class kind="struct">njli::WorldResourceLoader::FileData</class>
    <class kind="struct">njli::WorldResourceLoader::ImageFileData</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldSocket.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_socket_8h</filename>
    <includes id="_abstract_object_8h" name="AbstractObject.h" local="yes" imported="no">AbstractObject.h</includes>
    <includes id="_file_8h" name="File.h" local="yes" imported="no">File.h</includes>
    <class kind="class">njli::WorldSocket</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldState.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_state_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_8h" name="AbstractState.h" local="yes" imported="no">AbstractState.h</includes>
    <includes id="_device_mouse_8h" name="DeviceMouse.h" local="yes" imported="no">DeviceMouse.h</includes>
    <includes id="_device_touch_8h" name="DeviceTouch.h" local="yes" imported="no">DeviceTouch.h</includes>
    <class kind="class">njli::WorldState</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>WorldStateMachine.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_world_state_machine_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_state_machine_8h" name="AbstractStateMachine.h" local="yes" imported="no">AbstractStateMachine.h</includes>
    <class kind="class">njli::WorldStateMachine</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="file">
    <name>Xml.h</name>
    <path>/Users/jamesfolk/Documents/NJLI/Engine/src/njli/</path>
    <filename>_xml_8h</filename>
    <includes id="_abstract_builder_8h" name="AbstractBuilder.h" local="yes" imported="no">AbstractBuilder.h</includes>
    <includes id="_abstract_factory_object_8h" name="AbstractFactoryObject.h" local="yes" imported="no">AbstractFactoryObject.h</includes>
    <class kind="class">njli::Xml</class>
    <namespace>njli</namespace>
  </compound>
  <compound kind="class">
    <name>njli::AbstractActionable</name>
    <filename>classnjli_1_1_abstract_actionable.html</filename>
    <class kind="struct">njli::AbstractActionable::ActionableAction</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>af2020b25504138eb95c993b3a09c6500</anchor>
      <arglist>(Action *action, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a8ad2ebd2c3a7abb313602866259fb98c</anchor>
      <arglist>(Action *action, const char *key, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function">
      <type>Action *</type>
      <name>getAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a2e853aeb7805f7fb878acc2f4ebafadb</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasActions</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a237eba6122f8505a04df9bcc0cd431af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAction</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a902395a20ef04482b15e7a65c0be4bad</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAllActions</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a758cc11b09194399de63537e0f7e1485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractActionable</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a14bdb9bfc024571d6989763629625949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractActionable</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a649739eb41be60afdcf18d7fe0d25fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>aab364e6f121a457e33a61850300c2d7b</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getAllActionNames</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a9df58912375974fd1e5da088e4d4225d</anchor>
      <arglist>(std::vector&lt; std::string &gt; &amp;actionNames)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractActionable</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a7674886976b87af3bfa33ad030268e3e</anchor>
      <arglist>(const AbstractActionable &amp;copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractActionable &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a0f09166a53c6d1b5652ad268fcdfcb46</anchor>
      <arglist>(const AbstractActionable &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ActionableAction * &gt;</type>
      <name>m_Actions</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a17bc44206dd13cb179bafdf0cd2bbda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; ActionableAction * &gt;</type>
      <name>m_ActionMemoryQueue</name>
      <anchorfile>classnjli_1_1_abstract_actionable.html</anchorfile>
      <anchor>a230d6ee2c4c2cd3f7d4e716ea238dbfc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractBuilder</name>
    <filename>classnjli_1_1_abstract_builder.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractBuilder</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a0cfdd77fe097b255a5ca29c70675ed0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractBuilder</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a5e86ed88487717e88be16728662f2964</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractBuilder</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a29a886b06975345f3a35d6f7eb49c0ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>aa63d393509ca11a9c624d34781c327fe</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>aa1d220053e182c37b31b427499c6eacf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>ab66b774e02ccb9da554c9aab7fa6d981</anchor>
      <arglist>(void *dataBuffer, btSerializer *serializer) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a0f2d344fcf697b167f4f2b1122b5fb33</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a902f73ea78031b06aca183a417f3413b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>abb4a8161cd71be12807fe85864b67050</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>a3e6e553e06d1ca30517ad5fb0bd4d000</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_abstract_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractClock</name>
    <filename>classnjli_1_1_abstract_clock.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractClock</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>adf1ecfb49abca618253d605ff43a212b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractClock</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a3c605a41c8f527a61c2226b2dba6bba4</anchor>
      <arglist>(const AbstractClock &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>AbstractClock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a3cdd1200a3ef9bd0a5748ab3e7c2ad7b</anchor>
      <arglist>(const AbstractClock &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractClock</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a41aac7ee2287261e3b9e7fff9863f821</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a95ea44479f55856a0b356edc5a2ad111</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRawTime</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>ad837eada8b3deafe40d6a2e27efa048a</anchor>
      <arglist>(const s64 milliseconds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s64</type>
      <name>getRawTime</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>ada0417b7564b9cdee7357191f33ea448</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a06401048780f7b9522187731d3a97579</anchor>
      <arglist>(f64 milliseconds)=0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>time_t</type>
      <name>m_rawtime</name>
      <anchorfile>classnjli_1_1_abstract_clock.html</anchorfile>
      <anchor>a668e9ea61bf8c76643255af6b65f2a59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractDecorator</name>
    <filename>classnjli_1_1_abstract_decorator.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a087eb5f8d9f51cc476f12f1d10a3cb95</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getName</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ad41266885be835f3ee602311e20877a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a45a6af60b195efd39b1b56f19a8ef14a</anchor>
      <arglist>(const char *tag)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTag</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a1892eb8a5216ffbbe937e747a0d1d141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AbstractDecorator</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>aeebcf1e20165c7d17da774f57eb2a989</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractDecorator</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a8c5ac466e74e908ecc8286af04937d72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractDecorator *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a02e7976cdd7bcc8852e2e6b6dcc5b7ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractDecorator *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a5a27f06290d6561218c1932ee4f0bb1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ae68a7fd88bfd50c2d3dd7831f9e95e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a292c49c95d3fd287d0e4799554288520</anchor>
      <arglist>(AbstractDecorator *parent)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a5ef875734a96eca9b3c7aa3be482ff29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeFromParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a04b797ac24b5de658d1e6dc165167d8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractDecorator *</type>
      <name>findChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a8bdc7cebaaeae22a9519a8839ff3eba0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractDecorator *</type>
      <name>findChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>af924f47defa4cd007308847e1c6d9c2a</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractDecorator *</type>
      <name>getChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ab4685efa1283c203aabd7e8b4aa86fb4</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AbstractDecorator *</type>
      <name>getChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a47f431982092b823d925ac031491d344</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a7bfa660dbfaeed3531c9041569bc23b3</anchor>
      <arglist>(std::vector&lt; AbstractDecorator *&gt; &amp;children) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>getChildIndex</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ad34934f1a89ae3a586af2ce17ab598d1</anchor>
      <arglist>(AbstractDecorator *object) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>getChildIndex</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a87aedeab22233d8e57b870abbaa61941</anchor>
      <arglist>(const AbstractDecorator *object) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ad483ceb78102e1a2ac489d2d5d58674c</anchor>
      <arglist>(AbstractDecorator *object) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a64c272cd1d9c212dacad178db49e2b20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a6b94b03ed7bcf783795e02a628d46bca</anchor>
      <arglist>(AbstractDecorator *object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a907a417691a2e3bfef5fd7d0f0eb0417</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a3de9eaa0ff8afc7ccd4378efdaadc191</anchor>
      <arglist>(AbstractDecorator *object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>accd814c7ee5dd1b5e00a3e44e79bff27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s64</type>
      <name>numberOfChildren</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a7c725af71849474d7a5e05ae79b38661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>afd5844a76f88ee1271f228c6dab2dc6d</anchor>
      <arglist>(AbstractDecorator *oldChild, AbstractDecorator *newChild)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractDecorator</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>ab65a6cdff82f7ef431cd411c57e3773d</anchor>
      <arglist>(const AbstractDecorator &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractDecorator &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a5d151ef3bd5e6d015fc2c99a35fcb188</anchor>
      <arglist>(const AbstractDecorator &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractDecorator * &gt;</type>
      <name>m_Children</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>aef424061af4840eaf18ea3d955ce92c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractDecorator *</type>
      <name>m_pParent</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a2c8fc57dd9d1a874a23ae51277a8968d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_Name</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>aa985f5baca6581f7cfa49d20e444b40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_Tag</name>
      <anchorfile>classnjli_1_1_abstract_decorator.html</anchorfile>
      <anchor>a2a7abd533134461d07b660eba804cf48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractFactoryObject</name>
    <filename>classnjli_1_1_abstract_factory_object.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ad8a2eaf0b14375ad9739a8968429739e</anchor>
      <arglist>(const void *ptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a23b7edad5e21229d9f9f14359dd3ec46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>af4151e41b80d5bc3fc42822c67fc2278</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a207c86146d40d0794708ae7f2d4e60a7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a838f4fa7e65cace6098aab5222892942</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a83a8876ae63b92804004cf3febe76573</anchor>
      <arglist>(const AbstractBuilder &amp;builder) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a6236ab8114b3f3033bc9824b0980b055</anchor>
      <arglist>(bool shared=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>afec18dff52178eaf73a64764c262d95a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4763d05bc9dc37c559111f8bb30e1dd8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>aad2fbe86fb3bdecf02918a96b9c57976</anchor>
      <arglist>(void *dataBuffer, btSerializer *serializer) const =0</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getPointer</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ac4ca71716ed832be357f15f8262c8448</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>getPointerValue</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4ffddf141a426a5a07d0ac19f1913811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ae620e2d5fd6bacf75d6dc63a1a499856</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>af62456deb9b3cd80eeb894b7ee033f44</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>aebb630b30d4649b79a5655471cf727a9</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a475bffe85257bce9d5ad5ea4a991fdf9</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a2703a2ef27de3bd21b0905c571235922</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a8ce0719b53e2cca86046b6dbd31aa6af</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serializeObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4fc4bcd9d1930911474210c047372fc0</anchor>
      <arglist>(class btSerializer *serializer) const</arglist>
    </member>
    <member kind="variable">
      <type>const void *</type>
      <name>m_pointer</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a8eea2673c37f55c871de8a808a1a0b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>m_pointerVal</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>af1a3dd67b0ce2fc70cff9ca111263829</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canDelete</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>aaa088eb7160046ccf467c0f29f509291</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a678b8f28320f6a7e2aa38d5ef72889a8</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isRenderObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a75e5bb1d52f364d303a0a38617639649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableRenderObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a87597409cecc91b4d40be5e9b3a2d4dc</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4f7ae7bf09c7c9426e7d6023f7fd8dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a171f8eecedafbe703fd27d2cf9e51f9f</anchor>
      <arglist>(const AbstractFactoryObject &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractFactoryObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>ae2c1cfc2cf1b38931ac450e2598a6bb9</anchor>
      <arglist>(const AbstractFactoryObject &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_canDelete</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a4977cfd3030c6610ea54ec279b253f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isRenderObject</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>a7b32ea157388606e926495880208db97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_abstract_factory_object.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractFrameBufferObject</name>
    <filename>classnjli_1_1_abstract_frame_buffer_object.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ac8d66ca8d605b2c45873fc4020c579ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a7899eafef8e2f57953a5d1aa799085eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a3009efb11b4bcd56bd933c21b230a125</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a5d7b8b3bc421084f282343e506a6d289</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a73ffd499fceaacd59b518a541ed2133e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLoadedGPU</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a166068d3dbc251ce28daf2564fdb2e99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a9fa4ab667a74a7a23b18ae3418e56f7d</anchor>
      <arglist>(u32 width=2048, u32 height=2048)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ababe9973dc3593e158adf12033f66b71</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getTextureID</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae5fdf18cef91c86d8e1cf97d4728d144</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a66d234282238e25ef245d64d087be8d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getWidth</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa4ab66fbdcb04f1834d1dc05b4c7a10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a95ae9779550ed7496011f859ec3d4766</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>f32</type>
      <name>getAspectRatio</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aded6f9fc4da10af752cf90a97aaa751d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa75a537f5745e4be8f749892d195b43c</anchor>
      <arglist>(Camera *camera)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ac2533319b6631e307c44d0b68f46d9ea</anchor>
      <arglist>(const AbstractFrameBufferObject &amp;copy)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AbstractFrameBufferObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a2b192e82cda52d9dc2b4983581f6ee2c</anchor>
      <arglist>(const AbstractFrameBufferObject &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>renderInternal</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae5861927463cc57cdd8214a4b957a68d</anchor>
      <arglist>(u32 fbo, Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_textureA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a513f1d176292bb518491b174a57b74b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_textureB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a180636e09d0ea991b25b2e45ec06c1ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_height</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a192aef9e52e79eb705258273089a7721</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_width</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa1664d2cb683746ddd76be458554c7bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_counter</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae58bffbd830c6b4f8c85d233a6ba4355</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_frameBufferA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aed8941fa16af18e00f890ed6eadf67c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_frameBufferB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a69aab8142ecbbb43a3d4e43f3a8cfc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_stencilBufferA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a16e27e78936b43b521f4a295b3bb26a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_stencilBufferB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a5af08a294c714db024533f9f0fc0c521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_depthBufferA</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>af0e82f91894a611751c1a42bf0d5e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_depthBufferB</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a58936e11cbd20f21422558447158cab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isHidden</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>a6046080b62350f10fc21c2ff4f9c5227</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldHUD</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>af390e9477ed759618405db2d94aa4b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_abstract_frame_buffer_object.html</anchorfile>
      <anchor>aa1212b6e372a0f45d2c01f3cd203af77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractObject</name>
    <filename>classnjli_1_1_abstract_object.html</filename>
    <base>njli::AbstractDecorator</base>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>afdabb48c4bf763e297ffe810b433a863</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>a08dcf202a47f0782813b8bc98c659e78</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>afc07f4138bd3003910e7aa7fa0fe11ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractObject</name>
      <anchorfile>classnjli_1_1_abstract_object.html</anchorfile>
      <anchor>aadfc508440196d05461ebf48fd3d3625</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractState</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <templarg>OBJECT_TYPE</templarg>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4c7007210237496fbe169ba114c3750d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(OBJECT_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(OBJECT_TYPE *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(OBJECT_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(OBJECT_TYPE *, const Telegram &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; Node &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4c7007210237496fbe169ba114c3750d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(Node *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(Node *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(Node *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(Node *, const Telegram &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; OWNER_TYPE &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4c7007210237496fbe169ba114c3750d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(OWNER_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(OWNER_TYPE *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(OWNER_TYPE *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(OWNER_TYPE *, const Telegram &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; Scene &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4c7007210237496fbe169ba114c3750d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(Scene *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(Scene *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(Scene *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(Scene *, const Telegram &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractState&lt; void &gt;</name>
    <filename>classnjli_1_1_abstract_state.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a22638b01fb13e4e7920071d1c3935622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ad576862504904cabe58e872e316916b6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a0b92c7b010d060a03395ac5874c77019</anchor>
      <arglist>(const AbstractState &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>~AbstractState</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a7a85afddf6feb5908199ac3678225c5b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>AbstractState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a70a074e9ffcc4ad76236052a4f079dc6</anchor>
      <arglist>(const AbstractState &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4c7007210237496fbe169ba114c3750d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa4e66d0016cd5c43dc3a485eaf558174</anchor>
      <arglist>(const bool=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>ae10e437370dcfc3261ec0b9f350f16d8</anchor>
      <arglist>(void *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa1d0341a1b1bd83f9b722488680537ad</anchor>
      <arglist>(void *, f32)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a75207a4c62f813d8d84168024a30c60a</anchor>
      <arglist>(void *)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>aa486b2e60e57d789855acdfb555a4cdc</anchor>
      <arglist>(void *, const Telegram &amp;) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableCanDelete</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a4ed007508bd8f80af668a302376b7d1a</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isFinished</name>
      <anchorfile>classnjli_1_1_abstract_state.html</anchorfile>
      <anchor>a445a5d1ac7572b8b01b81937c89e960c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractStateMachine</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <templarg>OWNER_TYPE</templarg>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; OWNER_TYPE &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; OWNER_TYPE &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a026a33bc918f423304b442e0dfaa046e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; OWNER_TYPE &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a8e946baa055b5dcde6a9916ef10e5c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ade6a658a2ad9ef8c83b900e8b866ae7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5e4cb433301c576d640fff966b2c87eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; OWNER_TYPE &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; OWNER_TYPE &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; OWNER_TYPE &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; OWNER_TYPE &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; OWNER_TYPE &gt; * &gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>afc1c0619e024e807c01802979d5ef3db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractStateMachine&lt; Node &gt;</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; Node &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Node &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a026a33bc918f423304b442e0dfaa046e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Node &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a8e946baa055b5dcde6a9916ef10e5c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ade6a658a2ad9ef8c83b900e8b866ae7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5e4cb433301c576d640fff966b2c87eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; Node &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; Node &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Node &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Node &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; Node &gt; *&gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>afc1c0619e024e807c01802979d5ef3db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractStateMachine&lt; Scene &gt;</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; Scene &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Scene &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a026a33bc918f423304b442e0dfaa046e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; Scene &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a8e946baa055b5dcde6a9916ef10e5c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ade6a658a2ad9ef8c83b900e8b866ae7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5e4cb433301c576d640fff966b2c87eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; Scene &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; Scene &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Scene &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; Scene &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; Scene &gt; *&gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>afc1c0619e024e807c01802979d5ef3db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractStateMachine&lt; void &gt;</name>
    <filename>classnjli_1_1_abstract_state_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9656442a1a93737e55b72cdb3f7f6cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a653f5257533125711c79d054265b1fa6</anchor>
      <arglist>(const AbstractBuilder &amp;builder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>abf78c27c17c84ed7e6e372714e7a87fc</anchor>
      <arglist>(const AbstractStateMachine &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractStateMachine</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af05bef63fdcbaedd01df2657fe9b1e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af5d1c414f2ac3aba89c076461b404271</anchor>
      <arglist>(const AbstractStateMachine &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>af975fdfd08f9f6d93d739b12d1a06e52</anchor>
      <arglist>(f32)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>handleMessage</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a7741c8bc8e0bf7d3d1b1e5310be6b5eb</anchor>
      <arglist>(const Telegram &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a0ef8fbf451f61eaccc97319751fe76c3</anchor>
      <arglist>(AbstractState&lt; void &gt; *)</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; void &gt; *const</type>
      <name>getState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a026a33bc918f423304b442e0dfaa046e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AbstractState&lt; void &gt; *const</type>
      <name>getPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a8e946baa055b5dcde6a9916ef10e5c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a9b0f3cb1aed0c33381d85f204cde6f88</anchor>
      <arglist>(bool callExit=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>aabf808253d72265695e03c299a434798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const AbstractFactoryObject *</type>
      <name>getOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ade6a658a2ad9ef8c83b900e8b866ae7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5e4cb433301c576d640fff966b2c87eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a6a399ba3abc4dbc2f5a0b6d23193c75e</anchor>
      <arglist>(AbstractState&lt; void &gt; *)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>changeState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a5133f8815d99e63c09179928e2c736b6</anchor>
      <arglist>(AbstractState&lt; void &gt; *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; void &gt; *</type>
      <name>m_pCurrentState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>ae82332bd955b01fa48471ec0613e8207</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractState&lt; void &gt; *</type>
      <name>m_pPreviousState</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>a43a2c2c7a36aba24176e5d6d82ab9f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; AbstractState&lt; void &gt; *&gt;</type>
      <name>m_StateQueue</name>
      <anchorfile>classnjli_1_1_abstract_state_machine.html</anchorfile>
      <anchor>afc1c0619e024e807c01802979d5ef3db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::AbstractTransform</name>
    <filename>classnjli_1_1_abstract_transform.html</filename>
    <member kind="function">
      <type></type>
      <name>AbstractTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ae81766ce7baa95743ad256dfab13a086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AbstractTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a8ea40aa6d85fc58ddec0962568921ddc</anchor>
      <arglist>(const AbstractTransform &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AbstractTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a0e9a40091685470285419f35c6c91bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AbstractTransform &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a33740ec533c3328faff5d702bcd36a16</anchor>
      <arglist>(const AbstractTransform &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a6341254e626b209df85d0b7e830c2894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a87650e2ff117cde3128c9de164c84b2b</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btVector3 &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a8ed6d7cc1b5728f68a2455e918a8c6b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a8dfc3a81836971418bb9c71004222c8f</anchor>
      <arglist>(const btVector3 &amp;origin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a82759647e299853f562331879818eaa7</anchor>
      <arglist>(const btVector2 &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>btQuaternion</type>
      <name>getRotation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ab998267bb4662fa0c3902b9a236f15fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRotation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a721ce04e176c7bdd5fea612ccbbd1e12</anchor>
      <arglist>(const btQuaternion &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getEulerAngles</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a1a9cf70d9ae4b9405500be603e74b4e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEulerAngles</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a758c5d11698115dac64ec6e4ba29c5bb</anchor>
      <arglist>(const btVector3 &amp;angles)</arglist>
    </member>
    <member kind="function">
      <type>btQuaternion &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>af23dedd0d33968d9f4066056d442d8ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a8668e1e13020412115e65b7e50176262</anchor>
      <arglist>(const btQuaternion &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getScale</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a292f90f311e9af8e2bffc630b100ca2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ab9059ed0b04b3e5af674ce2652ffda35</anchor>
      <arglist>(const btVector3 &amp;scale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ab3fe736cb93cd9853a675131f34404ff</anchor>
      <arglist>(const f32 scale)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getPivot</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>aec6866eb4cc32cc1f7aecae2f5a55422</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPivot</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>aa2adbe5fcda38419fa30b22a59f734b3</anchor>
      <arglist>(const btTransform &amp;pivot)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a25e1a5d3daf3c0c5839915f33e37e51a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_WorldTransform</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a90ca5d67abcb0a5ea1e3c3554c9f8e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btQuaternion *</type>
      <name>m_Orientation</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>ab86688491ad0a42d93ebf4242a12c17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_Pivot</name>
      <anchorfile>classnjli_1_1_abstract_transform.html</anchorfile>
      <anchor>a6c1eda10f9fa9bd340e3b1a560f3954a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Action</name>
    <filename>classnjli_1_1_action.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="struct">njli::Action::Sequence</class>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a6b97581cbad92f763e70e0f1885c3d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a43afd1030b91fcef5a949af8ffc452da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a12e735927e2340525708f522d8daff88</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a72329c3d6bc5e8b701aad6732bbf5537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a16970f3b547f326476ffd6d0d1feb3bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a38686442a833ff5d6039d61b7f0ef6e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeat</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ac660ece5790dced62b28f6ec0199c1d7</anchor>
      <arglist>(u32 count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatForever</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a63707be93052a5843662ca386ff39fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedFactor</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3aeafe981e3b127eb9ad728e88e31315</anchor>
      <arglist>(f32 factor)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSpeedFactor</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>acccdab60df21ef125bc43e2d914203e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDuration</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a036937b57eea213ffeb977e3c22e51f6</anchor>
      <arglist>(f32 duration)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDuration</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3473d3b336d30b21976a8aa14f105b50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimingMode</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a134104e9db058f54d9724eea552a16fd</anchor>
      <arglist>(njliActionTimingMode mode)</arglist>
    </member>
    <member kind="function">
      <type>njliActionTimingMode</type>
      <name>getTimingMode</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ab0c079cfbeb80643e147ea7899e32a50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimeLeft</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a62fdaf50d4555346103e8f4fd388ed38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRepeatingForever</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>af53c39e134a055c410ccccdf94943ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getRepeatCount</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a1f46ddf3b7469fc24cc50ce184ee1926</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a53e72e1dd95f30c07e97ad59a721669c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>af12f2df2adb1048d1fbe625f9be44122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>linear</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ae86773a5e972de01ad5203b333c01bcc</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>exponentialIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>afb82d5679cbf9870b790347db75f4b93</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>exponentialOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aa510c92b26f6f456f7d8cafd5eea66e7</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>exponentialInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a5454f0bc57ff81f3fc268e9561f4941b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sineIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a4fbf94cf5e13c8b4556f1907086f2b65</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sineOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a6c6b65d55075ec64e5fb1f55d9d61686</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sineInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a7b3215f5fb1f5410f22159133068d56a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>qinticIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a98487f4c9e65ac3541506488171c0c5f</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>qinticOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a14c373ab33f7e878e83f33bcf9844b72</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>qinticInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3949e3edf9e27c8e0bec91d4a482fb02</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>quarticIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a329377b16fb22814ab3c2a3325c8661d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>quarticOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ad45f3afb32fe4b25900fae78faa1fc8b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>quarticInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a6c8c029d9eecd90f2c267319a88d0c35</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>quadraticInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ae511e66934d161fc157bb9c564e7c2be</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>quadraticIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8aa0baf279e5f063495bd974b312baae</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>quadraticOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aef13ae615852df07b02a200554c517be</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cubicIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a95dc3002cea9c237eda7e6c38866f7f9</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cubicOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aa324a492852f73c940e54bc991b91826</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cubicInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a2c4c1e6e2a225d5104ec6736f3036a45</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>elasticIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>af89d90b8b772764145b8efb367958c69</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>elasticOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a6b42a2698d6b55614eeece5870af0f08</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>elasticInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8fc6173595ee8efb7849bf28e635cbfd</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>circularIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a56c6f671a7f57115207c14152f100460</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>circularOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a742f42953df58693dd7dbf4c104e1d89</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>circularInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a008a0a7853db18242a35c744c39400b6</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>bounceOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a11fcfa042ebf4eb68c8fa59b3e1ee08a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>bounceIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ac5fc969457877f55eb7db183cbcde90c</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>bounceInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a7b22ee890ce89aeb747dc1891233228a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>backIn</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a134b999b4e1fd9c95a70ffc8b1436a61</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>backOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a0aa07d335453dd7b7ee828b1166c7a20</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>backInOut</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a201655b8f132351399eec03dead46a05</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8f74322c9c8a1c256a423886feee255e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ad811fdb14878475fc47449b9484bac5d</anchor>
      <arglist>(Action **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a62fc29bc5c18f70547b0769eef7c7dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a1bce37d99fd72302c469c60ec97cfbcf</anchor>
      <arglist>(const ActionBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ae07d8cc55040de9a55fe4db2bf530796</anchor>
      <arglist>(const Action &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3c461aaa03e81dfc294720d0c543a2de</anchor>
      <arglist>(const Action &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a2700b8178a01910f7002e40a9864bd00</anchor>
      <arglist>(Action *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ad9a591ace0350439b796698f75b4665b</anchor>
      <arglist>(Action &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a02d99cc47d811640803da7d9fd000d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>createGroup</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ac4ab7217919a1c0a7858854aa1e18b6d</anchor>
      <arglist>(Action **actions, u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Action *</type>
      <name>createSequence</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a292d91fdb630cc406dd6a0f113e977cd</anchor>
      <arglist>(Action **actions, u32 size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a8eea8ac4abc1e39cf11326854633736b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a06624fdbd7e7d8d6b814b17106520c3c</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>afc2efdef9092be597613173a32ffd6f9</anchor>
      <arglist>(const Action &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Action</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ae04ff281cd7a1305d6045cdd2927d338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Action &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a37b0d25b50c21f8eaedeb357ddd9227d</anchor>
      <arglist>(const Action &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aa1e2033b0f03fa1dce4c39fa707b84fe</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a43b0e8f7215465c8feeb575df61553a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFinishedRepeating</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>aee872536b8ca9280f18297981b7c503d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isChildrenFinished</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ac60289bdccce76f0ca044b2bde60f9e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleActionChildren</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ab787c5769b5be7861a921ee20aa6c9b7</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decrementRepeatCounter</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a39b7125ce9d6462992899cd9b1d16182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Sequence * &gt;</type>
      <name>m_ActionGroups</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a12cae1b645280c6811d664183c63600b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_SpeedFactor</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a650426751b72971d7d92cf0edf3fc364</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Duration</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a0e9ef8b9fb180016c4f4abec67ad8dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliActionTimingMode</type>
      <name>m_TimingMode</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a3ae742326e7c2cfdd86b816816256f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_timeLeft</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>ab82c9d7ba3c11ef73b38f04a136cb87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_RepeatCount</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>a7407ab22c618d86062eb6455c8f071cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AbstractActionable</name>
      <anchorfile>classnjli_1_1_action.html</anchorfile>
      <anchor>acae59ef0f73ad6fe5d30782b3054c2a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::AbstractActionable::ActionableAction</name>
    <filename>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</filename>
    <member kind="function">
      <type></type>
      <name>ActionableAction</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>ab9c1588b35748040376c7fd9af9b517b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>callCompletion</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>acfd8e38d1a51229d6da90dccd2f96ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Action *</type>
      <name>action</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>ab851715245b788c049ee57f5cb100e52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>key</name>
      <anchorfile>structnjli_1_1_abstract_actionable_1_1_actionable_action.html</anchorfile>
      <anchor>a6d5c613f063f9de4c8d998feb1ac9434</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ActionBuilder</name>
    <filename>classnjli_1_1_action_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a410b750e7ae37ac7133400541cc22591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ActionBuilder</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a7673ea681ab0ff5e3590e322f44798b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ActionBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>ae8e386f93a681e8a4ad15c81c2317256</anchor>
      <arglist>(const ActionBuilder &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a463dfb3486b50ee4b3ae234deafd9ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a08a4404af37bd53504e5b72e1c431442</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>afe754e36661339a9e9fed27aa8d98580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>ad94f927c3c793b70caf04ac4170fce18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>afbc316d229d1cc330b0bc432eefbf5d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>ad3f87a956a7a92ea16a5f35f9d1608f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ActionBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a43d1a1223217032a1c9e1f7c0312b89a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>aa1ef775a2c7fa6f4b82c205c2aa815db</anchor>
      <arglist>(ActionBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ActionBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a8bbc5b7faffee5487928032a955bba6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ActionBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>aa04be710105bbb879fccf8b5f950519a</anchor>
      <arglist>(const ActionBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a41bc319da348dc6a8388bbec26cfd93e</anchor>
      <arglist>(ActionBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a86ba01c9ee80e198442a46b3cd5f9d7f</anchor>
      <arglist>(ActionBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a569cbb4a019aabaf3f77c13f20625d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionBuilder</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>a4722e62e278de2668faf92c26fe7f71b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ActionBuilder</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>abc0b4b0332ee13e9e1a8f7121196ef10</anchor>
      <arglist>(const ActionBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_action_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btVector2</name>
    <filename>classbt_vector2.html</filename>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ad93916a57111fb5d1c72a61f5fba0f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE</type>
      <name>btVector2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ab62204de39fb6f26a948d5fd6a4daeb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE</type>
      <name>btVector2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>afc90d2bd38c9d8cd43e2d2453d5bd858</anchor>
      <arglist>(const btScalar &amp;x, const btScalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE</type>
      <name>btVector2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>aad17e54bd21653eac8c44fdf4bb80a43</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE</type>
      <name>btVector2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a392d298eb9d2ea7c9e226e95e8347294</anchor>
      <arglist>(const btVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE</type>
      <name>operator btVector3</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a6e4ad3e96725114081a64fdda625d661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE</type>
      <name>operator const btScalar *</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a8c7c6e3b541d9b6322a7813155c5f5e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE const btScalar &amp;</type>
      <name>x</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a3b84dd1a7a183c88f4ea891a78ae4069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE const btScalar &amp;</type>
      <name>y</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a72e284fa71789b822596d38296827729</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>setX</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a9b3f7127cbcda534394b0a47c823480c</anchor>
      <arglist>(const btScalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>setY</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a6de2274afc229f8b716ed0d422adf32f</anchor>
      <arglist>(const btScalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>operator=</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a3904b7175063f65c35f426ce05ed36cf</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a4dd6b3f8db1f6b6ab8de69f6f9bac4d5</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a10956ac7b900742f63eb82bb65711944</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ab176f4c70c6f9229a17034c76f86a65a</anchor>
      <arglist>(const btVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a2cfe6dcc200fd5dc33c380ef17a3544a</anchor>
      <arglist>(const btScalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a427308be34af9d7594965a0aa4314aee</anchor>
      <arglist>(const btScalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>dot</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a1dd4ca7fc9f7022bf6390047a7953c33</anchor>
      <arglist>(const btVector2 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>length2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a13338a00c0c86ce9c7125d63ba938b2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>length</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a2c92fad776bd8d393c813c2ab85e12d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>normalize</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a07bb2cb1fd5c9244845a9b0fe8ac759c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>absolute</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a94cc6dac39e6ce0b23bab3126b76c237</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>angle</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ae31bc4229685245cfc509f7676ce748b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>serializeFloat</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a5829125306a6dd8afa8b672b1ee8061c</anchor>
      <arglist>(struct btVector2FloatData &amp;dataOut) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>deSerializeFloat</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a3264f43e5f732255ed090c6edf31b36b</anchor>
      <arglist>(const struct btVector2FloatData &amp;dataIn)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>serializeDouble</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a1feb4d2449e166962a435b1175199e7e</anchor>
      <arglist>(struct btVector2DoubleData &amp;dataOut) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>deSerializeDouble</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a97c6a5fa3a3c0d90f733417805228be8</anchor>
      <arglist>(const struct btVector2DoubleData &amp;dataIn)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>serialize</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a544602c4569a2d5c6a93dadbb1742816</anchor>
      <arglist>(struct btVector2Data &amp;dataOut) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE void</type>
      <name>deSerialize</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a3459ff9aca53e3b1a403c87d13928eac</anchor>
      <arglist>(const struct btVector2Data &amp;dataIn)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a4bc6c8afbeecdaea9deda80d3df40652</anchor>
      <arglist>(const btVector2 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a45c1d1a6d77c93ad79b091c13163d3f4</anchor>
      <arglist>(const btVector2 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>normalized</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ad135053e6855300101572487cf2dfc7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>rotate</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a5331d9f88888c93d75017194986f9021</anchor>
      <arglist>(const btScalar angle)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>rotated</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ac2220a78a65246084c3510274bab61a8</anchor>
      <arglist>(const btScalar angle) const</arglist>
    </member>
    <member kind="variable">
      <type>btScalar</type>
      <name>xy_</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a4e80998acd3e1e1482f6ad474f5c6c54</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance2</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a4bc6c8afbeecdaea9deda80d3df40652</anchor>
      <arglist>(const btVector2 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btScalar</type>
      <name>distance</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a45c1d1a6d77c93ad79b091c13163d3f4</anchor>
      <arglist>(const btVector2 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>normalized</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ad135053e6855300101572487cf2dfc7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2 &amp;</type>
      <name>rotate</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>a5331d9f88888c93d75017194986f9021</anchor>
      <arglist>(const btScalar angle)</arglist>
    </member>
    <member kind="function">
      <type>SIMD_FORCE_INLINE btVector2</type>
      <name>rotated</name>
      <anchorfile>classbt_vector2.html</anchorfile>
      <anchor>ac2220a78a65246084c3510274bab61a8</anchor>
      <arglist>(const btScalar angle) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btVector2DoubleData</name>
    <filename>structbt_vector2_double_data.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>xy_</name>
      <anchorfile>structbt_vector2_double_data.html</anchorfile>
      <anchor>aa5c080efc9bb9bc2a7312805b7b25d86</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btVector2FloatData</name>
    <filename>structbt_vector2_float_data.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>xy_</name>
      <anchorfile>structbt_vector2_float_data.html</anchorfile>
      <anchor>a1db283acc89fd4f9ccc9a85d3c0b30a2</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ButtonHUD</name>
    <filename>classnjli_1_1_button_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a72a6b396ec221a2b33cc14217c936d0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a35bd5342f1ac5ea121d50f0a4c4b9981</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aedbe9f0c1dea6d31dd13ff9e7e7e2b08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>add116dc958c02dbc33d7e686c4aff429</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a7f1e4ffa23020919a96f41fad281d601</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab43182f8de5edb34d84d0284acb0e909</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFace</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3b92a6bd18407b356492489408317fbf</anchor>
      <arglist>(const char *face)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3a5f2b5ddaab37fc50633902f8365927</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a94ef2e932df76cb8b390420dce0ecfe2</anchor>
      <arglist>(const btVector2 &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8346d046cb538f1c0269f1ce10354024</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a845ff0e5328fe156aff8d20e90b04602</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aaf91ad4aac85500c011a9b0bd658dc7f</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a478e096b1d257953d612fabd1e2eaf62</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextShadowColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8fededdc4f97b54d54568a6acfd43e4e</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientStartColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab2cca8ad90957d9d2baf24ce1d844d5e</anchor>
      <arglist>(const btVector4 &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGradientEndColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a6b842db44f87687d59ba28d1a090da61</anchor>
      <arglist>(const btVector4 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCornerRadius</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a38b826893d35569f5f4bad03282523da</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a256f464d6b5893f9cfa3eceb15f46220</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFace</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a83f04cb866e1b369fd0b93605b1237a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aa421a6d2aa947e9085fcf2341d0f053e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimensions</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a5b0987df2a6b670226c12dc364d6e3a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a0861390deacc178bb5d8d3f5795f2257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFillColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2b5873b247fac1bd17ff2729a372f4b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getBorderColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a1c85e36e3bee7d12f8af5b2b25cf660a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getTextColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a0216f72b83c5d25ed269d5d18b58f4ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getTextShadowColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a990306059d39800f64dc3d02a12f2dda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getGradientStartColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a7e8db31df5123c9d9a70f83aa4d1edb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getGradientEndColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8527937688cb50f4c57af65e51df2d6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getCornerRadius</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a378f76c76951ad2d48df16ef43971ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aa1d06fd625897be831ed75aacb99631f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a493b9dd71eb34cfee436005674a92f12</anchor>
      <arglist>(ButtonHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab24831855246bea2728f14c7c657d1a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a3de59d29761170b76b44eff099b4b649</anchor>
      <arglist>(const ButtonHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a9ba2fb86b1b725d947ddb21d338ef1cf</anchor>
      <arglist>(const ButtonHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ab4f81ff5e8720b507354e5d9254e1ddf</anchor>
      <arglist>(const ButtonHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a92a3967c328fb717935fb4667544e1c4</anchor>
      <arglist>(ButtonHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2584ca1f6eb5a9dd7db13261f7a01cb3</anchor>
      <arglist>(ButtonHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad2c1e7f0adb647dea2f8fd6b2b77dd9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a506d6b5e9296d605dbb84a8a1f8866ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2bb41974899ae34203aaca05acb3fefb</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac20c00ea9c089549275ac33f528ff5a4</anchor>
      <arglist>(const ButtonHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad157ec80fdc2bd473d02fa4adcf74bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ButtonHUD</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a8330cb4675664992c08c2dcba7e382e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ButtonHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a4dec6cd3d342055256adf12caa8fd089</anchor>
      <arglist>(const ButtonHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>add44501f95991324e5733c8bfc18f166</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ae8dc759bddad5462c7a0928f109977e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a4301c64a091ff9abf32f6a6add14593c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>aa17394aa8dfdb299d76ac1effd5bbbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a9b6b903e46fb1369f15560b2bb710336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac09c838f0985be02e905d1476d698e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a6a83ddc2b584f7e83191dbfb9024df1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fillColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a1162e0793f09db4e3e5d62d93b967598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_borderColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>abbaaf649b3c55c5644cd59827caa00a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_textColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac2561e2838776df33d2c0eff6aa3e145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_textShadowColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>a2acbd93bdfa31be57d9a00fdd411e735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ad252ad621b7f1f8903773f3167da7cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>af633bca7b8c4643687c2db6efee9c0e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerRadius</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>ac098deb37ba7aff504d4d65c5c243fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_button_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ButtonHUDBuilder</name>
    <filename>classnjli_1_1_button_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a7ee11dd8bb9747e13471abb9e8cbfb25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a8fabff458b635395dfcaed73aec4f438</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>aab151f1c413960cb7947976d405d6397</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a8557df23bbea4d66c2281d81e120fd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>af3e9aa36492c2e5f260ae274c3e5e902</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a598c95a41ace9cd75df2381bba2c5cb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a885b3db72e0db164d1a1748f18fa15df</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>aa092409e53e74ef1854920bedc7d74fe</anchor>
      <arglist>(ButtonHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>ab7367f8ad374ecbdda4529d1b1263865</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ButtonHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a33073ea5b117ad2bcc55176788d5be8d</anchor>
      <arglist>(const ButtonHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a0559e0c777d3cae524083ec7bc90d197</anchor>
      <arglist>(ButtonHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a7805e83ddb3f3bb0718129496e83fda2</anchor>
      <arglist>(ButtonHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a1bbf41b90965dffb1ef55aa7772f5489</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a72f4ab170068007b3ed3d22a785569f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a3a49993012dbd9456d13ef822eccc269</anchor>
      <arglist>(const ButtonHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a4e72108d0ff2c0e5503ae0c25009251f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>a6ebd31ff4f9d157b5fd9d0d2f173d1b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ButtonHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>aece9616ae7fcb8d690109f73cc416072</anchor>
      <arglist>(const ButtonHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_button_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CallInfo</name>
    <filename>struct_call_info.html</filename>
    <member kind="variable">
      <type>StkId</type>
      <name>func</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a378cfb37136fabfe59d1c38071c6c9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StkId</type>
      <name>top</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>ae782b06ef00ccfe0720625ffa99b093a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct CallInfo *</type>
      <name>previous</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a1b3e7558ecf4218dd0e3b367c077733b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct CallInfo *</type>
      <name>next</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a71b69e9acba8caa2d8e833d8a79fdf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StkId</type>
      <name>base</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a7b8303ad59b7ba200cd5e3a26b118fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Instruction *</type>
      <name>savedpc</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a4f8b835724037f01569452eab143948f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct CallInfo::@8::@9</type>
      <name>l</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a32a11cdfaee24eb2e24ea80d104638e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_KFunction</type>
      <name>k</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a861d3b2fbd9d287c22b0d9324f578e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ptrdiff_t</type>
      <name>old_errfunc</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>ae18597139d0d00b65683efed8ccd3c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_KContext</type>
      <name>ctx</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a7c410e045297e80c91e9737f959e7ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct CallInfo::@8::@10</type>
      <name>c</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>ac6e7d17b5c3d577aaf4ec4730ac5d074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union CallInfo::@8</type>
      <name>u</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>abdc6bdfd8d5d27234bff45f0852d8c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ptrdiff_t</type>
      <name>extra</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a6ebaf591a47102099de117ef0e29d0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>nresults</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>a0955b3fe49462610d53f082ac3cdac0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>callstatus</name>
      <anchorfile>struct_call_info.html</anchorfile>
      <anchor>af0b3a7a44d49819655c7864faa259198</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Camera</name>
    <filename>classnjli_1_1_camera.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a67d01c2010a70ccdbd3d9962bba57407</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5325bfcff03dcbe482f2d3ba080eb3a5</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ade06e4102661cf1f83a87160f3ebb372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ad5cb7de9888c547c740f35afc6fd3002</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aaa7de10337781527205a7eaa5f1c2204</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZNear</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aecd11caf4880997cdaecef6c47d69c48</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getZNear</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ae388cdacbbe0a24c4048f063b83687a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZFar</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a078a786623bfed82e5c42af635ff7c50</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getZFar</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a3e5c14ce4f79b8ab666390872ba9590a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFov</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a249c6432aa9c8809a92012a272ec6d28</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFov</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aeca41e2beafd04a8394b9e40599a3222</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableOrthographic</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0421efa372890d9e3a934911a4aeebf1</anchor>
      <arglist>(const bool enable=true, const f32 near=1000.0f, const f32 far=-1000.0f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthographic</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a1aefd1a0cb6c7db25ce429bd632d9f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ab5aa8d0d534c0745146ed0d84f72fa18</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>njliBitCategories</type>
      <name>getRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>afb526cf97416d6fcacb48aac9c906134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>afd4e08b967df5e00190f47ac6579adc6</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a122317f4e5f4fef2331c3bdbb094080d</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7870e48c1f18f0386a2dc7961a94b02e</anchor>
      <arglist>(const njliBitCategories category)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>unProject</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af43930c16c51df25a5fc743777fbb38f</anchor>
      <arglist>(const btVector2 &amp;windowPosition) const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>project</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5cb19ed6cae871c33120f5a8662d04a7</anchor>
      <arglist>(const btVector3 &amp;objectPosition) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTouchRay</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>acebff379eca9f4d2d4427473a0f0c9fa</anchor>
      <arglist>(const btVector2 &amp;windowPosition, btVector3 &amp;from, btVector3 &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getForwardVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a5ce9c9208b4eb42baf2bffc077bc6679</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getUpVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a3042125c6d21a4e239324637f94b43d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getSideVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a2099681caa7c779a5b0da74c1be3ee56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAt</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a452756c63a51e1f2499d0581a2405327</anchor>
      <arglist>(const btVector3 &amp;pos, const btVector3 &amp;up=btVector3(0, 1.0f, 0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aaade7beab2611ec8c0db373658465735</anchor>
      <arglist>(const btVector2 &amp;screenPosition, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a88cb37e1d85fdfa9b20601880c73b335</anchor>
      <arglist>(const btVector2 &amp;screenPosition, btAlignedObjectArray&lt; PhysicsRayContact *&gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af65d928e4008646177441036ce92903a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>afd2948456713ad894c519a6409f5e838</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateViewSize</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a2389fe55bb0d6447260b292c3835d6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a896d192b1e16dde947082d245f63787d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a168d7d1a1c93c674c03a16bd2ef9743e</anchor>
      <arglist>(Camera **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a507f7feb6c03019a86782cc8b13ba0a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ae45ea6022038204bea9fc3dc39f978c9</anchor>
      <arglist>(const CameraBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af4d6b31f5b697697ced38c081005167d</anchor>
      <arglist>(const Camera &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Camera *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7877ec046260132d8c3869adb77d8c14</anchor>
      <arglist>(const Camera &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0bb5889b740a1e9834ba49d35cab6ec4</anchor>
      <arglist>(Camera *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a11f8f0594e29a74b85887ed40e686e94</anchor>
      <arglist>(Camera &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a2f963b324689cb9eee90fc5f4b8fcb48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6b242e7ea1b008c3073fea985ac01bc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a82db3cd7c219d8f76d06278f410a8c1d</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a865e8f65462a466b6e2e8c8c98e2d34b</anchor>
      <arglist>(const Camera &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a83f596c774d17aefbe44d3506d42da5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Camera</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a9dddc84821aa7508c5fdc5a1c03354f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Camera &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ad005a1f88da76bf5349fa374889ba0ce</anchor>
      <arglist>(const Camera &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cull</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a9919eed4f61256bb04551ac64d6aadcf</anchor>
      <arglist>(btDbvtBroadphase *pbp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const btTransform &amp;</type>
      <name>getProjection</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a3c26254e5f1217ba465f37054e862bef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const f32 *</type>
      <name>getProjectionMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ad3ce75d9af1a7cc5468a371f211b51f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btTransform</type>
      <name>getModelView</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7a6900fc5cfeca389052ba88c06564b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getViewBounds</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a8a2fe20126d6962fc65b55328905acc0</anchor>
      <arglist>(f32 &amp;left, f32 &amp;right, f32 &amp;bottom, f32 &amp;top, f32 &amp;farLeft, f32 &amp;farRight, f32 &amp;farBottom, f32 &amp;farTop) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getTopLeftVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a39c4a0125df6b0d97cb43e381fd34a7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getTopRightVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6850bfa65f9550c019376e27adf711b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getBottomLeftVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a08f8920fe8982d3c734298ef6f119c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getBottomRightVector</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a86191e9e3772abe7bb18294d57ed77a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a4ce0a661f8a18d87af3453d8159793ed</anchor>
      <arglist>(const btDbvtNode *root1, const btDbvtNode *root2, const btVector3 &amp;sortaxis, const btVector3 *eye=NULL)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Near</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a648b79887b9acf3fb12dd7006a68cb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Far</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a34d45ec43ca2eec498138e80685d8ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Fov</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aab4d792e3aeaf5cf1072d0a75d4d4f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_Orthographic</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a140d99f05bf37657affe3006d7c2f00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_RenderCategory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7fb57199725228cab2ac28462cfb7967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OcclusionBuffer *</type>
      <name>m_OcclusionBuffer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6cd9448c2d481d6b5550bad78201be2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SceneRenderer *</type>
      <name>m_SceneRenderer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aa5b56fb8e1f66bcc1e97cc06708d438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_projectionMatrix</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a8b02bb72aff457b5d68970d266348131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ProjectionMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a513f74848a02e22d38fa2f4b83306363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ModelViewMatrixArray</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>ac14bac7824b812adeb752894023376fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32 *</type>
      <name>m_ViewPort</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0ac4d128631b54a0a5ab1d023c565b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btScalar *</type>
      <name>m_ModelMatrix</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a0cf1d4419f8b9414ba59ce9229ca1037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btScalar *</type>
      <name>m_ProjectionMatrix</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7d25685257aaa004c1aa1aed8376fe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>OcclusionBuffer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>af60c965608a88762c5d3b48490472319</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>aae6efa51fde36cf2c0759009ba7b19c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a82b374d797a09668286ac5cf26f539f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_camera.html</anchorfile>
      <anchor>a1b3bfa4a6d43aea5db6bd35f03087249</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CameraBuilder</name>
    <filename>classnjli_1_1_camera_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>aba07088efa795e475335313761127f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a3b8bca782dfa0e89ef0eda0200c707c0</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a062d43db7288f55f60543b00c4f6a0ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a2759f08e605c789e9d06dd2b52ccbaf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a279d8b7ec01bdb710c8e6d4683dda0c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a1ad70e6fc21964aff244e6c83f6dbd39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>aedcc9f2ff4a35d86c562ec08fe2d08d0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a026f6adbd0bdf70484ca92dbe37b8d16</anchor>
      <arglist>(CameraBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>abdd01724b7aa8ecf4013d9ec6ee8f30d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CameraBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a54a9769ec9ff8dff4b69b4f32c9f22f8</anchor>
      <arglist>(const CameraBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a787c5a9f6c3b698c9d099af8b6d41d7c</anchor>
      <arglist>(CameraBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>aaf7da6a4e59e7d986cd04158472552b2</anchor>
      <arglist>(CameraBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a3745618af153d80fd6b291de25629888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CameraBuilder</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a76bd656e796c9b14fd60ab4762e46840</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CameraBuilder</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>af3533bf68a37790640ac81af6643fa28</anchor>
      <arglist>(const CameraBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>af53e66a943c8f03efca83d55539e1335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CameraBuilder</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>ad7710c2dee09df60a109939f67b4dd32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CameraBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>a25f79aa7c8c80fcd27c98d24c1af850c</anchor>
      <arglist>(const CameraBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_camera_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CClosure</name>
    <filename>struct_c_closure.html</filename>
    <member kind="variable">
      <type></type>
      <name>ClosureHeader</name>
      <anchorfile>struct_c_closure.html</anchorfile>
      <anchor>a552c31467816a1fafbd719cf83ff9cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>f</name>
      <anchorfile>struct_c_closure.html</anchorfile>
      <anchor>a1ba64febc8e6adc43fdbb82583852000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TValue</type>
      <name>upvalue</name>
      <anchorfile>struct_c_closure.html</anchorfile>
      <anchor>a75d6bfc66f8ed48b3dd67007be84174f</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CheckboxHUD</name>
    <filename>classnjli_1_1_checkbox_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a51fbe982b583328b8b73299d75d5fe83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa5edf29add89b86e7dd15ab5c91625f4</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a51763018df640c7b4a4d674ba6bf2cfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a5877b7c1c680c535d1d0878f36a0bbc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a40b9fbfcc7a86278467503de2aab953d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1f5298769d6467f4333a6fa208131ccd</anchor>
      <arglist>(const btVector2 &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aaa1068b0211ba419f36dfb3b10e726b3</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4063a85d6fb9bc70311171465efa7025</anchor>
      <arglist>(f32 fontSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae4b99948d4cc44e2ddd6f1b8b2e6cbf0</anchor>
      <arglist>(const char *fontFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a34ff2d255d4c683052a099f8207988ba</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a186750a8e24a00f9473bb14c47248810</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontAlign</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad910eaefd683c7809d908aa43aba1770</anchor>
      <arglist>(njliHUDAlign align)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxRadius</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae3f929ce57043944b8193b5e82396fd5</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxFeather</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a185341fbfa8e4a4f6c011f6b6a90216f</anchor>
      <arglist>(f32 feather)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxGradientStartColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ac96f62891f59b1f56285b1aeb8dcefb0</anchor>
      <arglist>(const btVector4 &amp;start)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxGradientEndColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2731b7eaefa483f90e8fe96ec4951fae</anchor>
      <arglist>(const btVector4 &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckboxDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a57260414f1a25ced9c1da85f67641c24</anchor>
      <arglist>(const btVector2 &amp;dim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSizeIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4b88a46f30ab4675d3f9d2e14ca59a6f</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFaceIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a9f5a683fa1eadb2844f1d7735e01f389</anchor>
      <arglist>(const char *fontFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontColorIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab23a6ab181e6698b8653c0c8f45a5b78</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab1fe6f159b1937786b4c070c682220f9</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aeb52009f01f539521dc28b4db919a148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a88e5d4d16effbda2538969d951b054a3</anchor>
      <arglist>(const btVector2 &amp;pos) const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a3a31f385e84c25268b677583af6fdd62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2c42628c8c36649eab6e05a5737d7abb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFontColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a291bcdad7b79356d6820a0224c15a85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a22abee806c987db2852b4475d41d62bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>njliHUDAlign</type>
      <name>getFontAlign</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a92870d62459f239e7866f9fbf32757a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getCheckboxRadius</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2688c95a6e4cc7746e929c2be50525af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getCheckboxFeather</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a44f03f6c6af1876befd9f32cf1c442be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getCheckboxGradientStartColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>afb56efe6ec76e058e5a6e71b9f8adbe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getCheckboxGradientEndColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab2491d18a6d6503da3b2952ce8838101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getCheckboxDimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab0da419b8b5ede1ec19fdb21e110666d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSizeIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a72d40dc4183170214df6f3d872e7f3de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFaceIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1c164e6cb1e76d95e17e8ed6f9f2bd23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFontColorIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>acfe11aa6958e76646cc74e6e40c33fcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTextIcon</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2c41c4503415cb8464fa57ebb400cbaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad543bafb52bd55a7143af7a9312d663a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unCheck</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a6e4733ecf2b4e5e44cd8206af9bdc671</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChecked</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a25b48e71d20e08b4560dbcc55b3838e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa55de648a51d6a4b9deaeb7d1f0aecf1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a78fec39b7c044f3b42cb16edd1a20f85</anchor>
      <arglist>(CheckboxHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ad82c2050436a46588852bfdce166dd14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ac1d8b71694df11c9ea0192021d8e0d1d</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa7dd57a54aa295cabb00bfa5440024b8</anchor>
      <arglist>(const CheckboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4e36b531b587aa5b8b6c0f4784cf6da5</anchor>
      <arglist>(const CheckboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aa0a2b943e1310f959840e941ff625ba5</anchor>
      <arglist>(CheckboxHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4ce3230f14d2c7078ea27a4ab3248c3e</anchor>
      <arglist>(CheckboxHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a92edaeae8e24b4f07814e20d4fbff290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aec11f8636407a40541f56c650ac8ce3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a85dcc4809caadfeb82fbfc48e9fbc33e</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a3eb6d43b7a6bc7f47f0d6619bb226d11</anchor>
      <arglist>(const CheckboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>adbd098f0f7b90603014c8c45df1fab91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckboxHUD</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a6e3854c02a8506227af0323475ac52a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CheckboxHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a750ebe87c1e2357b8d434200568420f4</anchor>
      <arglist>(const CheckboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a9a833ae0ac0412333e305dad18a46c6b</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>af97939ec2d8f7137dd7206aaef82ebeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a15d15c4ef020a1d109c1257b535ef6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a0e1d4b8f2b740d9d6189da68959b34d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae30d4899d8b3bb39b583005d30e94d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fillColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>acaa459636c3131b4991b2a7d74d4b6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a57ec6ee10cf894de31c8f5d3c1987cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerRadius</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a4a42a1e6ec369fe33ea9a7d6b546048a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_feather</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a06f4f2ae5cbff9350537724e8b2f5f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a1f692a5cf90de60c6a1d3747b1f3710d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a3f4833ec007b2ee45c150e5b851dc1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_iconFontSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ac904923a373f4c67ab94dbf407459245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_iconFontFace</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ae3f331029c085859eb0e47c66d16ae56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_iconFillColor</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>ab725b03ce1e63bef6675bea2f5cef7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_iconText</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>aafd86237ddcbc55e4797d478b906bc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a5746b7e4e3127374c6761d077e061661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_checkboxDimension</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a2b013bfab34f523e31de0eae6c113d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isChecked</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>a412e277cbdbd39ce605d81342ef11f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CheckboxHUDBuilder</name>
    <filename>classnjli_1_1_checkbox_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a089bc581a03e591903cb182989910ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a75491cdbd9744fa247a2c5b179e66195</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a59a91bc952633352233bb3f05c979a30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>ab71e250c4167ea8d8d348c3af70e6b80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a38780724b9af21a3a8ba68baec494e57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a7b9d8722ef987820c021fd64f597263a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a8d672a58479cbd42b61be49167271d46</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a7bf0a141fc13c9fd136756fa68d97a9b</anchor>
      <arglist>(CheckboxHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a962c6257a10c98321603022823947ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckboxHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a7fbcb6e45b8bacf62472a1f0afa5debc</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a5b5a554a3ce28b4a0a913f2e2239d193</anchor>
      <arglist>(CheckboxHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a19f2bc2032760d15811153263e49cb74</anchor>
      <arglist>(CheckboxHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a7cd1bf586fa32ec0679ba022b82118fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a141ffeba073d9bc717b94a954bb6896f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a12a7752a2d8f4978f46031123747105f</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a84d0f7ce28c152cbf174ebe89d8e0b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a33ea9fdae001f0825ba5909d2bee6b69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CheckboxHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>a5d42bd65c37400db0b2bb8160ba221f1</anchor>
      <arglist>(const CheckboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_checkbox_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Clock</name>
    <filename>classnjli_1_1_clock.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractClock</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a23843e93992d802b41cab9c2af6d8b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a8c6f081b125f65ae45ee0bfd7ef85138</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a54952cf183ca49429004733aad6b3fd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a403ec7bf5455930215121622d0324fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a389d95316793c9fc113b625d92040d53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>aacf123c98c4ff46f5716b488423de72b</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ad318ac6f8c34fa8796dfe6156cbb1824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getTimeMilliseconds</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>af5585917dc19bff0dd795e7a86bb0bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getTimeMicroseconds</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ac1debc5f875f6011e082d93037127870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a0cb02d4753cddc5aa00236c2f37f66f3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a4d8b6dbf9cf4eae3be8bca7ac498ad2b</anchor>
      <arglist>(Clock **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a15b98bdfd4c744f0f3de68cacec783ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a3cab98e8e835a0a113b8211846356c76</anchor>
      <arglist>(const ClockBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>af5238b0b80730c0b42194fe8c5b3cc07</anchor>
      <arglist>(const Clock &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Clock *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a6b20a66ca32c33acce1edebaf5ac0420</anchor>
      <arglist>(const Clock &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a4147bdb4d31e3402ba76ccd9652c50e0</anchor>
      <arglist>(Clock *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a8581e8a61763f24e24929a4806387cdb</anchor>
      <arglist>(Clock &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>afa83aa79eb78706cf661e973a1258c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a46fe51eb140fd7a3e6a011d511a7263f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a7e5e8e455e01fc4deb3174770a9a3532</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a25793091ce80c61997437fb69efedb50</anchor>
      <arglist>(const Clock &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a8223b146693fd33eaeeb13ff476dd2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Clock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>aeefd3c72d70056958b87e689b3372744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Clock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a5b62f508f07e979fe392a8fd099819fd</anchor>
      <arglist>(const Clock &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btClock *</type>
      <name>m_btClock</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>ab107f00a19c387d5b34d4a2fb92d8370</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_clock.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ClockBuilder</name>
    <filename>classnjli_1_1_clock_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>ac6898c3d021350a3fc46c957c2538f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>af1583f2692fefb0a7be4ac89072d3c2c</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a3de46a7a2e9760dc67486462bebf0790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a535f81dd0c0b3313941d139c96cdb731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>aa1d909c599d2fbc6106b417e6b623f9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>aa1be7cb9a59942519783748ce011c25d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClockBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>aae2ec15a97eb44ff4ff88deb9044a62c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a85dfefe52cf31c7511ba96f128f34131</anchor>
      <arglist>(ClockBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClockBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>aab639feccc6592061e99bd343a93a92e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ClockBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a7c84e707ce704ab2d0c30bdba37d00c8</anchor>
      <arglist>(const ClockBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a8120396fc0e83b5df09572393e3cd88f</anchor>
      <arglist>(ClockBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>ab48500de3517ff7b5d5afb6a893f1cad</anchor>
      <arglist>(ClockBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>ad418d0f1b84855aed3143d007eaceaa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClockBuilder</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a252dbc5874f31103b041b5d9b19d9b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClockBuilder</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a1ba284d73c87e086394b6dbeb4b6cf17</anchor>
      <arglist>(const ClockBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>a9cba8993e2e7b2aeed39039d46b589f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ClockBuilder</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>acf7d6ba1bfbe6e4b17893b16a0703e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ClockBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>af528ee817dd44638a10c78227290337e</anchor>
      <arglist>(const ClockBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_clock_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>Closure</name>
    <filename>union_closure.html</filename>
    <member kind="variable">
      <type>CClosure</type>
      <name>c</name>
      <anchorfile>union_closure.html</anchorfile>
      <anchor>ace9dac5a62b61db682ef0cd86b3b44b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LClosure</type>
      <name>l</name>
      <anchorfile>union_closure.html</anchorfile>
      <anchor>a8c338ec7dc76078cbee5887857de713c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CollisionResponse</name>
    <filename>classnjli_1_1_collision_response.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a8064aab248d93b5542b85406dc517084</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ac77762d08227ce57050050a42fa441c3</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a14da55a4e736f5252763942b63d7a768</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ac1c2878ce1f0dacc823ce51d533fc274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a93b5c6645cda19cbac0a56edd38aa8a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ad8ba8d9462d45a5b47b0aa35c1e300ee</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>af5733e1bb53053a28251d425217204df</anchor>
      <arglist>(CollisionResponse **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a1835d7480df528671d398a9f6b5b0321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ad83913a6368ddb7e04d73e3fb505d8d5</anchor>
      <arglist>(const CollisionResponseBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a920e06f942aa95ce2ec26e207ed852cd</anchor>
      <arglist>(const CollisionResponse &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponse *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a86fa2b8ab53032b1d174cec2b95dbddf</anchor>
      <arglist>(const CollisionResponse &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>af3b0b079eb2acd51fbf4c98be372d0c6</anchor>
      <arglist>(CollisionResponse *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a80964006cfa86613b5f15ec53139d26b</anchor>
      <arglist>(CollisionResponse &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a38cddefa3c200081852fa1613369857e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>ae4bc0371f4d64b19378edbb0fde924cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a24e7db05ad1d9b24bd59634614eb87ff</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a0487102f92add4ba625883d0f67e8db6</anchor>
      <arglist>(const CollisionResponse &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a848e4b5a53a32e6e73ad89da46f9ff9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionResponse</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a88dde609dd266005c44139194cae2c88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CollisionResponse &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>a23e9dfaa306170c47404a4ba988d445a</anchor>
      <arglist>(const CollisionResponse &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_collision_response.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CollisionResponseBuilder</name>
    <filename>classnjli_1_1_collision_response_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a198782aa80df9fe7681c346ae69eed30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>af3731e9877af4f074ea1aa555d20007d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a591d32b0605daad09aa789608105e5df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a50bd8b21b5a15b5459e830e865277f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a38a4a2b429c82f2031349228b4d70967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>ab9315b16e096bf21f69703a434a8f83b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponseBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a6aa08e1e478f588b3f7672b84dcf704b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>aa7f266a43e3f731c87c81cf79212f639</anchor>
      <arglist>(CollisionResponseBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponseBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>ac962560ad9fab5686416c4033a059d71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CollisionResponseBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a7fdea96fbff8d82972b5ca78a0bb6741</anchor>
      <arglist>(const CollisionResponseBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a3e610ab2c2e7a753796970880f8ee784</anchor>
      <arglist>(CollisionResponseBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a3ff2f19c040c5ae010be41a8d90b3a9c</anchor>
      <arglist>(CollisionResponseBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>adc227ba24772b6efb0591ede596ea0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>ac53d07488e9fa7b52e3d980adb5a018e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a228e7cc1ea19bd71bb9bc3805620f1d1</anchor>
      <arglist>(const CollisionResponseBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a3a3a7ee2fceef8d94926d2e041f87819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>ad97734b5ae92854348b8d4aac8e0992a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CollisionResponseBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>a8560ccb4c41c8ac2fa96000f458634a2</anchor>
      <arglist>(const CollisionResponseBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_collision_response_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ColorUtil</name>
    <filename>classnjli_1_1_color_util.html</filename>
    <member kind="function" static="yes">
      <type>static SIMD_FORCE_INLINE btTransform</type>
      <name>createMatrixFromArray</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a85a15dfc97aa9126dc33b0b745b745c2</anchor>
      <arglist>(const btScalar *matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SIMD_FORCE_INLINE btTransform</type>
      <name>createHueRotationMatrix</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a7df3c9ab1162ce070ff7ad84b8b34306</anchor>
      <arglist>(const double rot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SIMD_FORCE_INLINE btTransform</type>
      <name>createBrightnessMatrix</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a7e24d543b65d6e9cd535fb99e87fe31e</anchor>
      <arglist>(const double brightness)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SIMD_FORCE_INLINE btTransform</type>
      <name>createBlackAndWhiteMatrix</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a0114e6d4fd8f02fb82ac5947030ab87d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SIMD_FORCE_INLINE btTransform</type>
      <name>createSaturationMatrix</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a3612463fc463d7fb5edad289bf02edb8</anchor>
      <arglist>(const double saturation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SIMD_FORCE_INLINE btTransform</type>
      <name>createColorOffsetMatrix</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a2c4280f030420f1cf84d97dc4c2eba98</anchor>
      <arglist>(const btVector3 &amp;colorOffset)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>applymatrix</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a2142ab81f044133e0614dc341f699bb0</anchor>
      <arglist>(unsigned long *lptr, double mat[4][4], int n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>matrixmult</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a5cb3576c8177f303c88dc4e7283367c7</anchor>
      <arglist>(const double a[4][4], const double b[4][4], double c[4][4])</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>identmat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>af683cd23fbe9098e277248be18047422</anchor>
      <arglist>(double *matrix)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>xformpnt</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a7db2133606fdf47afcbf7b8511a33dbe</anchor>
      <arglist>(const double matrix[4][4], const double x, const double y, const double z, double *tx, double *ty, double *tz)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>cscalemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a7b35d824b18625ef4fa732cd130cfeb3</anchor>
      <arglist>(double mat[4][4], const double rscale, const double gscale, const double bscale)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>lummat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>aeebe354f55f34c2671f42a6d0f4d1620</anchor>
      <arglist>(double mat[4][4])</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>saturatemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>aa24bfa3faf934a7e9cb5fcb6551ada23</anchor>
      <arglist>(double mat[4][4], const double sat)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>offsetmat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a41a9d5c0daa4ab6c0bf04aa9c66ea6d2</anchor>
      <arglist>(double mat[4][4], const double roffset, const double goffset, const double boffset)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>xrotatemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>aa2f35809a653366ba6cfc11a34227af0</anchor>
      <arglist>(double mat[4][4], const double rs, const double rc)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>yrotatemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ac37c7eb0af14d9171809c8a1cab9a834</anchor>
      <arglist>(double mat[4][4], const double rs, const double rc)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>zrotatemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ab43ec520ddd37266b3fb9a2e4f4a4ec3</anchor>
      <arglist>(double mat[4][4], const double rs, const double rc)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>zshearmat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a97183f17df4c96e96351e96c94fc587a</anchor>
      <arglist>(double mat[4][4], const double dx, const double dy)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>simplehuerotatemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ad8878d29f6f4f7cc09cad4a0decd18cf</anchor>
      <arglist>(double mat[4][4], const double rot)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SIMD_FORCE_INLINE void</type>
      <name>huerotatemat</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ac05958efe06cd5958961a0f79da8f1eb</anchor>
      <arglist>(double mat[4][4], const double rot)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ColorUtil</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ae2d34d7e93ee1c81451fe469ea001b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ColorUtil</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a53757b38edaf819ee9d92ec6241544f1</anchor>
      <arglist>(const ColorUtil &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>const ColorUtil &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a2e1a337beed33d364c29a4f2140ba215</anchor>
      <arglist>(const ColorUtil &amp;)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>U_VALUE</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>af8c30d8240cec7a999c78faf633f5672</anchor>
      <arglist>(const double H)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static double</type>
      <name>W_VALUE</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a546dcc4ae049c5b45d9bd20870226768</anchor>
      <arglist>(const double H)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static btMatrix3x3</type>
      <name>HUE</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a500118a29045f966fb8c6ed8ea505e49</anchor>
      <arglist>(const double hueTransformDegreeAmount)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static btMatrix3x3</type>
      <name>SATURATION</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ad4d4feb55fb385c1720dbae9ae5a0d20</anchor>
      <arglist>(const double saturationAmount)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static btMatrix3x3</type>
      <name>VALUE</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a683449ea8eec905409c9b746858cf14d</anchor>
      <arglist>(const double valueAmount)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const btMatrix3x3</type>
      <name>RGB_TO_YIQ</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>ae8aa4830ab0c084398eb830628323217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const btMatrix3x3</type>
      <name>YIQ_TO_RGB</name>
      <anchorfile>classnjli_1_1_color_util.html</anchorfile>
      <anchor>a9b3a5642a95a4cf7fbc782ac56acba4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Cube</name>
    <filename>classnjli_1_1_cube.html</filename>
    <base>njli::Geometry</base>
    <class kind="struct">njli::Cube::CubeVerts</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a1e825a45f0d5562df188067854283d1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a00652e991c099a535207194c73324c65</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ab6515dcb9f54a3bf9945dacbb88d2eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ac5a367b969396afb5e7d060593ce67ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a1a9b42b50049c387b60043debda45961</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5379017996ff9b59a54253f75fac4409</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a62a69318d5cb98a56f81f91968efcc8e</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a7eb8e4a7d431b6b6f46888a1592cf8ad</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ad0a716c391963e9e64e26900b8e152a4</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a059f9b19dfbc85491c78613caa3abe72</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a286147feca746833690715526014f6c2</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a490650f1d2fc6296bc867229367975b8</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a4a3773c8d699643dc5552a341530c824</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a1873e8390f7a8ffc0c8c94ad239ea0e5</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ad3a57659a9ad27cbd21254db444ac49f</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a2a2d30322a9d48d0521fedbba3072a80</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>af656eb95de72d96c48d9be85d3801763</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aadf462166716a9545b1b2b47078064e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a122d3a2b1e326ec33a865cc6f3391229</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a09daf73917a428668773bc73fc9a50bd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a17131ffef5be91b5b1497dad7d377954</anchor>
      <arglist>(Cube **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a1d95c5c13758c11235c31811f4590eac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a16ae2ea03d7ffbafc57b9ce92bd4b834</anchor>
      <arglist>(const CubeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a763f1af98f3d6b392f2f759d0704a716</anchor>
      <arglist>(const Cube &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Cube *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5df2064e5a8248947522ef439b7d0acd</anchor>
      <arglist>(const Cube &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a4c62e4381c762c382f413c66ffe6a3fc</anchor>
      <arglist>(Cube *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a8a3faa56dd3529d271f35df2d550d3cf</anchor>
      <arglist>(Cube &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a97051b1445b3ff0a8d394ba4d550c451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5535d8b421b251568aa2683e68565ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a13c6574a55b74a5a67924faa3936f038</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a5a3ed8352356dd46e9ed33768bf668c5</anchor>
      <arglist>(const Cube &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a11c489f16e5521c12bfbdc6cfd18487e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Cube</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a41fff9f47251ee2a39b54866b906200e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Cube &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a58e0e6d84676354a1cb2198194495a8a</anchor>
      <arglist>(const Cube &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldApplyShape</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ae9b5fd0928a0e47ad37114ca9da6f41a</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>af902a20050d40c642b6c5e7def28cce0</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ac4040d5afd8034ba6cafca66d472c966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a6699821443ee652912052b4d8ddf58e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a33f8ca33a86505fa1bbee02e7ae9ac77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a44544af58aae672e358e364877af9a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a23d0d7188f82ae0b16d79a809b4656ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>abf93b9573c3ef1b94809e50774a06379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a935f8c1119991d17858a3982c33912b6</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aa07b851ff55bd189771d467ca94be5fa</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>ac3cffa5a972b0925f562fcabab368cd2</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a328e8add9f2af823067d7c98e33dcff2</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CubeVerts *</type>
      <name>m_CubeVerts</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>aef7ffe6a03c42b84dea87cda97e625f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16 *</type>
      <name>m_Indexes</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>a6570ae7288027e012bb99028132debd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_cube.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::CubeBuilder</name>
    <filename>classnjli_1_1_cube_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ada865d464420faba97795c29ff79ee27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ab46da5fa371af052900e2cb9df570246</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>abe4f6db15eb9ca1d680fc2652621d69e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a18e74517d40f424ab5eced76cc03940a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a0c7103ba4c07559e32569f8843c31baf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a0bbea643bd9e6585cf9a460c5a84c113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ad7a6e18215ce2df88ec74502725c4e83</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>af06e4e2f2eda9d656e115cde6bcc52a4</anchor>
      <arglist>(CubeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ad35c9d6eef7138613a33e726d91d6ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CubeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a8efc6aa59541a7f5f7ca61161e74c0a4</anchor>
      <arglist>(const CubeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ab2580dcc82092bb1b89e7502c968cd70</anchor>
      <arglist>(CubeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>ae870b598776cd9e82a43575fd0e4598e</anchor>
      <arglist>(CubeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a441cbddc56597d9bee9e9334bcf78762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CubeBuilder</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>abe2c3fbf59c9e98e0f147d1524e9d97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CubeBuilder</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a880e39d83c906cb15e3dfba742d6d1e4</anchor>
      <arglist>(const CubeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a66faeead20453a4a696a370299f6f1f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~CubeBuilder</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a56a689a3cea2616a04854897aff0b98a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CubeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>a5599555bddabaf1d20bfb71cc0e4ed40</anchor>
      <arglist>(const CubeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_cube_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Cube::CubeVerts</name>
    <filename>structnjli_1_1_cube_1_1_cube_verts.html</filename>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>vertices</name>
      <anchorfile>structnjli_1_1_cube_1_1_cube_verts.html</anchorfile>
      <anchor>a426460bcb49986df85666bd7cd0875fb</anchor>
      <arglist>[24]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsWorld::CustomFilterCallback</name>
    <filename>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</filename>
    <member kind="function">
      <type></type>
      <name>CustomFilterCallback</name>
      <anchorfile>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</anchorfile>
      <anchor>ad18b15dd9ba6a364c8a9dc05d84aebe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CustomFilterCallback</name>
      <anchorfile>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</anchorfile>
      <anchor>a293a3bfc1ea6a167ead405f4c30aa1a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>needBroadphaseCollision</name>
      <anchorfile>classnjli_1_1_physics_world_1_1_custom_filter_callback.html</anchorfile>
      <anchor>a4f3f385110e7c084da561ce32c61bffd</anchor>
      <arglist>(btBroadphaseProxy *proxy0, btBroadphaseProxy *proxy1) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DeviceInputTime</name>
    <filename>classnjli_1_1_device_input_time.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a2e5cdadd44d1ee2d7d7136e91f2bcafb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a69e4bb4be69f3ac53f4514a58fd61021</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStampFrame</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a03eca1e2b0725a5be925f6ec5cd33b7b</anchor>
      <arglist>(const f64 timeStamp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeStampTick</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a6a06c7800f1925631dafb54671b2abd7</anchor>
      <arglist>(const f64 timeStamp)</arglist>
    </member>
    <member kind="function">
      <type>f64</type>
      <name>getTimeStampFrame</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>ad5e181aebc12a0f9c662a9af1d559bd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f64</type>
      <name>getTimeStampTick</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>ad68f0958e6f363d09772286650891b3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeviceInputTime</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a2c5cc0a5ead654efbbce74d08f490fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DeviceInputTime</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>af34c8fdf7626c83b3a106984c6218332</anchor>
      <arglist>(const DeviceInputTime &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DeviceInputTime &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>ab1ca58d01db67a7ca5eb57bbbe07d929</anchor>
      <arglist>(const DeviceInputTime &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~DeviceInputTime</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a2c421a428c0d4fdc1311d91b7001f9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_timestamp_frame</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a798d29d739522cad83bd37986ed15a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_timestamp_soundtick</name>
      <anchorfile>classnjli_1_1_device_input_time.html</anchorfile>
      <anchor>a20e05f326dd3a3836a549cba6b536e85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DeviceKey</name>
    <filename>classnjli_1_1_device_key.html</filename>
    <base>njli::DeviceInputTime</base>
    <member kind="function">
      <type></type>
      <name>DeviceKey</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a6c0ce8411a06487b2d23b6d5a527aa25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceKey</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a97f655c0ede86cf0fe3806108517dbad</anchor>
      <arglist>(const DeviceKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>DeviceKey &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a24bc97579381b1f0c3dadf46be045c27</anchor>
      <arglist>(const DeviceKey &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceKey</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>ab7f6d643ded11dc722c507ce6171c58a</anchor>
      <arglist>(int scanCode, const std::string &amp;scanCodeName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceKey</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a06bc979d7804180fd4e383798ee308ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a14f6e0865bbf44c100b34448e9d67f24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>aa7b5696085bd6c8a1a935d422ae51e1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a49edcb4af0e6bc5e9830e770c85437f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a9bf8e7ef5d2038aefc61d8732ee1169a</anchor>
      <arglist>(int scanCode, const std::string &amp;scanCodeName)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getScanCode</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>ab75e19e17395f72ec633f491ad502784</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getScanCodeName</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a1e9dfe1c89d373a70d12a81de08c29e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_ScanCode</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>a326eb4f8f1b7abc2b916c8ed11d8dca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_ScanCodeName</name>
      <anchorfile>classnjli_1_1_device_key.html</anchorfile>
      <anchor>ac619bfe3e166c9f9ddda4e308f4315d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DeviceMouse</name>
    <filename>classnjli_1_1_device_mouse.html</filename>
    <base>njli::DeviceInputTime</base>
    <member kind="function">
      <type></type>
      <name>DeviceMouse</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>aee8091e8d7089bf8428e73dee2fd4002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceMouse</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>a20e7fb08cd22c231a3379e6a492a1fb8</anchor>
      <arglist>(const DeviceMouse &amp;copy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceMouse</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>a627f38bca78b41bb6b62fd7f3577a0e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DeviceMouse &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>ae9fb49d3da9395268f61e508581589af</anchor>
      <arglist>(const DeviceMouse &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>a176cdee101650df7a86e82e8834e5156</anchor>
      <arglist>(int button, int eventType, float x, float y, int clicks)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>acfb2479b7c88042d6fb5ce58b4482264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>acb280f0e78e60d2c6c449d09696c5365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_Button</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>afa3955b20a42c0234eab02d746210a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_EventType</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>ae16fcaa5513c79bfc053432d7fff90a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>m_X</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>ad62299ae082d8a421bfbcc0934d4512c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float</type>
      <name>m_Y</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>a565bc5cfae357af3e49c616c8ea21c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_Clicks</name>
      <anchorfile>classnjli_1_1_device_mouse.html</anchorfile>
      <anchor>aaa91c08bed2545ae7c00f8ae84b23d22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DeviceTouch</name>
    <filename>classnjli_1_1_device_touch.html</filename>
    <base>njli::DeviceInputTime</base>
    <member kind="function">
      <type></type>
      <name>DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa56351410e0c6fe7ced6fafd4cde27f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa34b346fb2574885542d03fe8170ecbc</anchor>
      <arglist>(const DeviceTouch &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>DeviceTouch &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aafb174d178edb785547de79d2c561417</anchor>
      <arglist>(const DeviceTouch &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa0c19c372c26f011e3b60f0fbc5e8c87</anchor>
      <arglist>(const void *touch, int n, int N)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DeviceTouch</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adc6021981c650837f9ddb1486972a9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a0bf7b53fef161666e8c70bf2482be1c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a1920ad95ef19b482f4285c44a1675ee6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a8992899c7e9e28c7f003c8e1d3e8fe68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aefb706600a5f23104c7dd8808ffe4e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPreviousPosition</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a4808a978398d3bd79d49c389d7a3752e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAddress</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a28c015bf3cf07e3c9925b52cb457cd0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTapCount</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a621adf317a60ce54643b076dd80e9b13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTouchIndex</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>ae2c94bd858111f25c7f738ebc103ef21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTouchTotal</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a0e56cd03f8514af36b8d40151c913647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>af37ae2aa3c4b1bb24a1f69e32a0cd659</anchor>
      <arglist>(const void *touch, int n, int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aab179cccc7d0c895455113d0706ae3b3</anchor>
      <arglist>(u32 x, u32 y, int n, int N, float scaleFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a919bb88be34601d01c19c452bd3fae8b</anchor>
      <arglist>(int touchDevId, int pointerFingerId, int eventType, float x, float y, float dx, float dy, float pressure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a82fca185d5e2b1378524b28db4fdd03e</anchor>
      <arglist>(u32 x, u32 y)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScale</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a9ae62b2e6e812acc5283a462788dbf81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const u8</type>
      <name>MAX_TOUCHES</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a8f2f389056e9750d3cee41875987c4fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>convert</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a2707fe5acb996fe22b1b20ceb6b1e063</anchor>
      <arglist>(DeviceTouch &amp;t, const void *touch)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_xpos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aa459469f52287f2085402117c13512f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_ypos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aec3c40c2adb1ba1bf5a13bf366bd3b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_prev_xpos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>aefd5c83cec6edc7dcb7edeec2144c470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_prev_ypos</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adc6f1bce3fa81e81f1a01ca55b2b3db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>m_address</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>adf8b9a7a96b90d0639aca0b9982a95d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long</type>
      <name>m_tapCount</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>af4506b66dcc8e44597244c9a6827bd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_touchIndex</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a8702a0eb417f912b2b8733b2f21a8060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_touchTotal</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>ad36aeb2b221ff37cf29d6b5f837d0d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_scale</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>ae07cde00eac9eb6e816f261bdb0df9d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_pressure</name>
      <anchorfile>classnjli_1_1_device_touch.html</anchorfile>
      <anchor>a1fbc998f1460afc213b0ba31410599bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DeviceUtil</name>
    <filename>class_device_util.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>HardwareId</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_AVAILABLE</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a59dfa2248607f7e6a83d18fae8306b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_2G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a426756b6e91e32d8787381edb82e2f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_3G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aef9f2cde0d6264b94a3b0b4a8401a857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_3GS</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6ad5d2d991e046187f0c8125524af89dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_4</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a6bc46fcd2e969285170bb3820edfbb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_4_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a0bda6882d66a01056b8b27407cf04dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_4S</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aaa6bc9531710ba79ea16e0a5282aad2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a3a685b702a361e4b8f7644a0db02edec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5_CDMA_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a5a458f705f8a7c11a8c40e276b8f3435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5C</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a8c61baf0087c75d5e1065706c6882891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5C_CDMA_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6af34c861978cbdc2dfb7a817618a05c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5S</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a29ea42b1c0889a0dfd11ee44a4ebc196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5S_CDMA_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a72f08b0879de13801118446a8b35232e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_6_PLUS</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a7caadb319881dbe21f56c25c53dbaefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_6</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6ac006c12e0d8ef8b704d660cdf2cc73eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_1G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a2eafaf5d3af8ef5d74609323291012f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_2G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a67489fe12e9113a843b947b7a1aa1222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_3G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a1609005bd5421a79ad24e5f904c1e5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_4G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aa83e7eabe18529a42e39cbe83b713f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_5G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a559d772e788b42914ceba6ea51cba65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a970f5a61fb5328c9be3df7218d66252c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_2</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a10f567693a3e3ed95e54604e8c704761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_2_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a6b9313e7d99fdf150b4caef42bb20eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_2_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6ac788b25de5b19b3898e3d3dd74bebeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a27aa5176f402cd18a622becc95417a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6abd8e2401ae0544ef020921bf548811e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a15e7a40f6f34e8d9510fd25c03b1b900</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a611853ccaf008a1196c11c96f4065dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_4</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6abaaf347119652f3afcf4f9a3092c293a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_4_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6affc073377d7cb597375656ee0af524a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_4_GSM_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a58ced1898dc35555f9a0be5e75249012</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a6756ec07502f339b4ce75fcaf5f94530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a9f6e25f225538424d8daf905e8386bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a203bc1f67712655dcc9ce307afe14a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_RETINA_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a11e3ab97fb5f6f2cc58ea96d3f61617d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_RETINA_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a11488d352dd3632a73434624ed12fe52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_3_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a9fee968dee865d79828d5323796c4fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_3_WIFI_CELLULAR</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6af142fa5b1a88460175197feea19d9471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_RETINA_WIFI_CELLULAR_CN</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a2506c50cb92a515f86166936b3ace015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a4f2548335b89faae77423ceb443387da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_WIFI_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a5806cb025d9d3d380ddb5bf58e0d3f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a8c35811bc1218577794b0320ff7740df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_2_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a448de67eccb6fb2cb667da6836f59edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_2_WIFI_CELLULAR</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aaf6e21e19c261926b25ed94a09cd5742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMULATOR</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a5cb482919e3998b2e07aefe149afd8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_AVAILABLE</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a59dfa2248607f7e6a83d18fae8306b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_2G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a426756b6e91e32d8787381edb82e2f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_3G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aef9f2cde0d6264b94a3b0b4a8401a857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_3GS</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6ad5d2d991e046187f0c8125524af89dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_4</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a6bc46fcd2e969285170bb3820edfbb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_4_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a0bda6882d66a01056b8b27407cf04dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_4S</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aaa6bc9531710ba79ea16e0a5282aad2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a3a685b702a361e4b8f7644a0db02edec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5_CDMA_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a5a458f705f8a7c11a8c40e276b8f3435</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5C</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a8c61baf0087c75d5e1065706c6882891</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5C_CDMA_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6af34c861978cbdc2dfb7a817618a05c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5S</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a29ea42b1c0889a0dfd11ee44a4ebc196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_5S_CDMA_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a72f08b0879de13801118446a8b35232e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_6_PLUS</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a7caadb319881dbe21f56c25c53dbaefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPHONE_6</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6ac006c12e0d8ef8b704d660cdf2cc73eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_1G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a2eafaf5d3af8ef5d74609323291012f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_2G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a67489fe12e9113a843b947b7a1aa1222</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_3G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a1609005bd5421a79ad24e5f904c1e5bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_4G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aa83e7eabe18529a42e39cbe83b713f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPOD_TOUCH_5G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a559d772e788b42914ceba6ea51cba65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a970f5a61fb5328c9be3df7218d66252c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_2</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a10f567693a3e3ed95e54604e8c704761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_2_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a6b9313e7d99fdf150b4caef42bb20eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_2_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6ac788b25de5b19b3898e3d3dd74bebeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a27aa5176f402cd18a622becc95417a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3G</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6abd8e2401ae0544ef020921bf548811e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a15e7a40f6f34e8d9510fd25c03b1b900</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_3_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a611853ccaf008a1196c11c96f4065dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_4</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6abaaf347119652f3afcf4f9a3092c293a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_4_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6affc073377d7cb597375656ee0af524a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_4_GSM_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a58ced1898dc35555f9a0be5e75249012</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a6756ec07502f339b4ce75fcaf5f94530</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a9f6e25f225538424d8daf905e8386bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a203bc1f67712655dcc9ce307afe14a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_RETINA_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a11e3ab97fb5f6f2cc58ea96d3f61617d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_RETINA_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a11488d352dd3632a73434624ed12fe52</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_3_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a9fee968dee865d79828d5323796c4fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_3_WIFI_CELLULAR</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6af142fa5b1a88460175197feea19d9471</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_MINI_RETINA_WIFI_CELLULAR_CN</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a2506c50cb92a515f86166936b3ace015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a4f2548335b89faae77423ceb443387da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_WIFI_GSM</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a5806cb025d9d3d380ddb5bf58e0d3f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_WIFI_CDMA</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a8c35811bc1218577794b0320ff7740df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_2_WIFI</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a448de67eccb6fb2cb667da6836f59edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IPAD_AIR_2_WIFI_CELLULAR</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6aaf6e21e19c261926b25ed94a09cd5742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIMULATOR</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a45e0ab9d49e3a0583798709c4613d9b6a5cb482919e3998b2e07aefe149afd8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>hardwareString</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a169613511f0399d3e0d1b3d8674808ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>hardwareDescription</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>a0b41896ef1ac3277c1126341bee50d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HardwareId</type>
      <name>hardwareId</name>
      <anchorfile>class_device_util.html</anchorfile>
      <anchor>aeacce8246f59676945b5f1914a08fb4a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DropdownHUD</name>
    <filename>classnjli_1_1_dropdown_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>af8d949b42c2d39536ce2f5656b2c2532</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a19985f39f0f49c11109a10a34e293281</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a202580d3713b77451e35589143df3638</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>acc19fe8d89c4f9b2d067dee5271b7230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a314a7ca2aca3e7ceb417097ee5e01470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a095aa2d4f9246574b3c23f88a13dfb1c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>ad05de3f92cb4b4416336bef15656f50e</anchor>
      <arglist>(DropdownHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a00af5f57aaf031925d0c5713fa333a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a71e72935db6a1fe32732bb3bb9e6f08f</anchor>
      <arglist>(const DropdownHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a3647fb8d0fb638143422fdb09a1dc28a</anchor>
      <arglist>(const DropdownHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a14eb934a222d965720b1e6136e811f6f</anchor>
      <arglist>(const DropdownHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a0e7fb8e32c9502d53097d087c6ca8d72</anchor>
      <arglist>(DropdownHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>aed5178a3f55b8db4ffd0349edc7e73cf</anchor>
      <arglist>(DropdownHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a16c5e70d8b3d9e0f28591c6e82c83483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a17dd6c8ecb94471289bcb69662582207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a6f5b1a8e46033f2871b1d3c80294d312</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a0c890dbe0093b1920ddfd628cf7b7ad0</anchor>
      <arglist>(const DropdownHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a8cd9837739df28e99c13778009565422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DropdownHUD</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>af572f6f51c3973a6a5c7ae4c653275b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DropdownHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>acbfbdf4a4fcacb1d26d2c750fe7386e7</anchor>
      <arglist>(const DropdownHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>a69bfd903a2b1d0881f9269679621e050</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::DropdownHUDBuilder</name>
    <filename>classnjli_1_1_dropdown_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ad75ecd2471338b5aa1a2e0fc52bbf9d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a969af945e0761935c8fd729274fc70aa</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ad16e640fcd624dc05489ceb19153bc94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a8b15b43699ca6f22f5226d2ac14bc38c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a43865f1a44b5139f73eb6cb24263a6c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a7cc46a8479bef513604680e8f69931a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a2ef0dd84f858070b1184ea83828d7154</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a6bfd29a4923eae10fa7fa75941e13356</anchor>
      <arglist>(DropdownHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a96f017bc6d7b45dec3ef8ee888df6b3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DropdownHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>aca6da429a5e00cc0a42ababa96af00fa</anchor>
      <arglist>(const DropdownHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a3753bf65cad6ab930b901f9a8ef5e4a9</anchor>
      <arglist>(DropdownHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a6e85e68b01c42e39c250e5c133bf240e</anchor>
      <arglist>(DropdownHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ab15297f8f1c7c1e73a4a7ff40f693b35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a3cc32e8c174921be2da4053a9cd6dd80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>aa0a70e84ba73cffac3ac290c0eb07c64</anchor>
      <arglist>(const DropdownHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>a6daf1f10d29a42c58ff7cb22479b3771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>aae27fe4bd2b27cb82adf197b985ccfdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DropdownHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>ab694e3c60c07c5cf4559099fdf14c4cb</anchor>
      <arglist>(const DropdownHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_dropdown_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dyndata</name>
    <filename>struct_dyndata.html</filename>
    <member kind="variable">
      <type>Vardesc *</type>
      <name>arr</name>
      <anchorfile>struct_dyndata.html</anchorfile>
      <anchor>a9ea28d4a31d64ce92476584631e0849d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct_dyndata.html</anchorfile>
      <anchor>ab7b4e1b3f94ab7cad0cf0991172dca47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>struct_dyndata.html</anchorfile>
      <anchor>a5f104a2554c21af98954babb640ac030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Dyndata::@7</type>
      <name>actvar</name>
      <anchorfile>struct_dyndata.html</anchorfile>
      <anchor>af55070ebce1367877ba9af0320d23719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Labellist</type>
      <name>gt</name>
      <anchorfile>struct_dyndata.html</anchorfile>
      <anchor>a0e4b4f8cf1af3f8e4398e705f22e09cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Labellist</type>
      <name>label</name>
      <anchorfile>struct_dyndata.html</anchorfile>
      <anchor>a72bb32d4e97bf9af6005d8459d44d1ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>expdesc</name>
    <filename>structexpdesc.html</filename>
    <member kind="variable">
      <type>expkind</type>
      <name>k</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>ae74b3577aad7833518986edca3db242c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>idx</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>a2333bf09cdfaeb847c56b2a13925ff11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>t</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>aff73ceb852b920307d0adf7b42111d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>vt</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>acb84f83b72d05cedd32b9e0f760485fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct expdesc::@5::@6</type>
      <name>ind</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>a34b0b7366afb431349e71f11d9428af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>info</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>a0b2f77c33e2412d54ec90f71030121e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Number</type>
      <name>nval</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>ad7e0406615f459c8df64b2b7b86e6a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Integer</type>
      <name>ival</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>ab9299c85deaf83fd3f37c0f7d29639e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union expdesc::@5</type>
      <name>u</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>a044d73b39dc09de8915fa68f2fa1375e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>t</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>a406e85dd954d4a5cec0c0f4a73e519bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>f</name>
      <anchorfile>structexpdesc.html</anchorfile>
      <anchor>afe6e22f2c18d75bc97add0e1f62e93e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::WorldResourceLoader::FileData</name>
    <filename>structnjli_1_1_world_resource_loader_1_1_file_data.html</filename>
    <member kind="function">
      <type></type>
      <name>FileData</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a0f3b18bc1de226c8554a86c1916713fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FileData</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>ab6c34a0ff108e41856bbdb1b23841f3f</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FileData</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a0c5cca1d8cfe27e9566edd0bcb4195ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getBufferPtr</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a926e871f4bde97505b830c8daf0eeaf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getSize</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>ac1c19cfb7325292a4415e379f861654f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFilename</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a8a534c2f997814047d00c824d1d1fd5b</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a4dcf8d3fb37348db066416e6f5929263</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileData &amp;</type>
      <name>operator=</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a37db22a2139681863261e3ab023285dd</anchor>
      <arglist>(const FileData &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>load</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a1b96bd34bbe2b7b9d63c951aefd1c2e4</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>m_buffer</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a14834fda30c9666e526bea54520a65b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>long</type>
      <name>m_fileSize</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a83ed2ee2dcd559a58c02c7f63b8821ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>m_fileName</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_file_data.html</anchorfile>
      <anchor>a3bfb51955988b80ee0b3e6bd6ac9596b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Font</name>
    <filename>classnjli_1_1_font.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a8ed1cf42221ef5a554f966d162d09f69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a4f01ca643082a7043a8012117a972ff5</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a6e86722e707b66fc3830b7f5dfe1ceda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a2c9173340456d3fbdc036b5dcc40145e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a3a8aa4cdd5d2e58ddf2a42b0bb065096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a09c8252c07f9654854e9d600ad248e63</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>ad9e4b917edccd15dabcbdab0db46c2a4</anchor>
      <arglist>(Font **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>aee1458a34b7adc94843a0837ff3bf1e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a67923e02c5b1f11350d1d0be02c5329c</anchor>
      <arglist>(const FontBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>aecf1de07e7bf8f09b50876385042307b</anchor>
      <arglist>(const Font &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a85aaa51dad67e045e6638b1db0356525</anchor>
      <arglist>(const Font &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a618f71d7b128184b48567594d821016b</anchor>
      <arglist>(Font *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a17f3c8fe2c40d4a5109fc9262ff1386e</anchor>
      <arglist>(Font &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a0e79b95a46dff1253ab6f4e6958cad3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a68907f421c0aa100e9d91deb7b4ad702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>af2ea00a4ebba3ab57a719c811677e96d</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a70fbc2653acb46488f802a21c53986a0</anchor>
      <arglist>(const Font &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>ad364f7591804a6e096d3ce271c68a93f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Font</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a64397a81eafa58c09fae5e2937649dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Font &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>a8b68124c0366fa0e9654761ce94865e8</anchor>
      <arglist>(const Font &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_font.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::FontBuilder</name>
    <filename>classnjli_1_1_font_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a3679b383e504ed16ee2e66a4e25a4971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>aa0ec493a1c0501769f492df57ea6e8f5</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>aa1d6db09f6ba63fc47485154c62396aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a6b43a2c86a6ef978900eed403e34d943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ab2d3a2baf477566f80b44a5f593fcfad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a2f4660d39dad947a62c438bdd95bd280</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ab142563549b3f4543eef020bae79aaca</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ac5727165800adb54029bfe7a6dde6f0e</anchor>
      <arglist>(FontBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a2a4979dda753397f53fe8bc470f270bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ad940d5ca2cbfbe14e9e5bf562e518572</anchor>
      <arglist>(const FontBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>ac202726cfed162ff75c162a4eb3b6201</anchor>
      <arglist>(FontBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a738437839223d7fa03269557753e8513</anchor>
      <arglist>(FontBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a4385a3b8e3ca2e1d42422221692c461a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FontBuilder</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>af1bf89e07e97044c41ef63782919e048</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FontBuilder</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a552bc27c16d565f7c6f4cb9a02deec3a</anchor>
      <arglist>(const FontBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a2b10c49afaf95709729b0be017291733</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~FontBuilder</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a65677ae3fe227dd6216e85313ce94ad0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FontBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>a4115c1b65ceb0c0f1cc38b94f923ede8</anchor>
      <arglist>(const FontBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_font_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyRigid::ForceAndPosition</name>
    <filename>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</filename>
    <member kind="function">
      <type></type>
      <name>ForceAndPosition</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a0e6c3f8b0e79eec391ee40f77539c224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ForceAndPosition</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a793f0d8c9d6512fcedaa0f158717cfec</anchor>
      <arglist>(const ForceAndPosition &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a20e9a97be39f77a2c7d3fa0b9f043a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ForceAndPosition &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>aa85e1766065d16c91b6e6797ca10323c</anchor>
      <arglist>(const ForceAndPosition &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a20fc1791d7e8865b2a37b500ec664ab3</anchor>
      <arglist>(const btVector3 &amp;force, const btVector3 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>ad56a83fd380b91aebfb7de95619a8a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a3d0d29d55b0246e4c450cebc47b43fbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>acfd0c44e0b6bd6cefadf5ebc47edfe5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Force</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>abf8c5b0f5b6b3abf8ae590a3bcb6d1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Position</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_1_1_force_and_position.html</anchorfile>
      <anchor>a15ddba07c93b2cfe06d8ab3e5a45f989</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FuncState</name>
    <filename>struct_func_state.html</filename>
    <member kind="variable">
      <type>Proto *</type>
      <name>f</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a9eb5835ecb89505391ace26565f4f805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct FuncState *</type>
      <name>prev</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>aef40521f156a3aceaec2a431a3ba8df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct LexState *</type>
      <name>ls</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>af0b246751acfbdec5bebc850e9e3217a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct BlockCnt *</type>
      <name>bl</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a43d13c83a7d67d08a48dcc4ad41c2236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pc</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>ab2fe1df83ece8a6ca9e5cd70859a7b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lasttarget</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>af20e4cc7f98b798b5319e4015c7ccb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>jpc</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a2a285dc08e7061e4d9f101169aae97d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nk</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a51f2362dabbe7e117feb2f059253a01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>np</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>aa6952cddc83bd271703e1458d012d67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>firstlocal</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a7357e446fded54ea3d2f4cfe529a3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short</type>
      <name>nlocvars</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a5bc4b89742470aa42900e4a459db31df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>nactvar</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a0e00cba6eaa6fc648b7762976e9b748b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>nups</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>aa6595513c43642ce3b506131d847dd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>freereg</name>
      <anchorfile>struct_func_state.html</anchorfile>
      <anchor>a99e672543fbe771557b576b69f54e551</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::GameClock</name>
    <filename>classnjli_1_1_game_clock.html</filename>
    <base>njli::AbstractClock</base>
    <member kind="function">
      <type></type>
      <name>GameClock</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a6eca9b59f7e983c3719b21a72afcba36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GameClock</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a03a8daae8d83735fde3e88792a4739fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a1ab93f24f3738afd3c22bd7f048f3196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a9eef69cf52e3b8591db5718c1c438618</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GameClock</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>afe3c4dab3ee3c43690cac84a98ee29a8</anchor>
      <arglist>(const GameClock &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GameClock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_game_clock.html</anchorfile>
      <anchor>a169ce8985a8bc4adfe7cc4515538eeed</anchor>
      <arglist>(const GameClock &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>GCObject</name>
    <filename>struct_g_c_object.html</filename>
    <member kind="variable">
      <type></type>
      <name>CommonHeader</name>
      <anchorfile>struct_g_c_object.html</anchorfile>
      <anchor>af27f3b17495ada2a250831a5424ed971</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>GCUnion</name>
    <filename>union_g_c_union.html</filename>
    <member kind="variable">
      <type>GCObject</type>
      <name>gc</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>a13ae493ad805f4272526bbb154ea469e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct TString</type>
      <name>ts</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>a1d3891294f8d2d40688a8de859f8e755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Udata</type>
      <name>u</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>a3ce49a4620b5914041add83397482cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union Closure</type>
      <name>cl</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>af6104ad9cdf1e73fb97dac1f0b56f3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Table</type>
      <name>h</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>ac8feeecb39ca5ebcb0da61723d75e240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Proto</type>
      <name>p</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>a9460c9cc70874512ef4909a71566e5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lua_State</type>
      <name>th</name>
      <anchorfile>union_g_c_union.html</anchorfile>
      <anchor>aca3e042321dae2675c5bad3c69115cd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Geometry</name>
    <filename>classnjli_1_1_geometry.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="struct">njli::Geometry::TexturedColoredVertex</class>
    <class kind="struct">njli::Geometry::TexturedNormaledColoredVertex</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8a14d6d068bf303718c1a92886f673b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a42a35911278eb52e0013d6dadd80271d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>abfa3fe3b5680b7b40c650fdc7a7fb737</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac13aedbb6914e12416c46574805cb13a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae678ad91efebe665fc2f5533dc26fe24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3cbdfa54d4321633f3c59c27a041fe52</anchor>
      <arglist>(LevelOfDetail *geometry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae0001216bacc787a9c235fb78609d276</anchor>
      <arglist>(LevelOfDetail *geometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllLevelOfDetails</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a95e2234f03e5a4fae599689e1545f323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLevelOfDetails</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac205720639e55ef44ea2e8102d26fe65</anchor>
      <arglist>(std::vector&lt; LevelOfDetail *&gt; &amp;geometries) const</arglist>
    </member>
    <member kind="function">
      <type>LevelOfDetail *</type>
      <name>getLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aec96c72c2a2a25ff38d2ab5fc0f29ebe</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const LevelOfDetail *</type>
      <name>getLevelOfDetail</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a97ca6b5b3e6241030284eaf8a89b15d0</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8cd2fdd337567a3ec1b6ad53e8010afa</anchor>
      <arglist>(Material *material, Image *image=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a419d020ca0b46536bb53d923fd1c7df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Material *</type>
      <name>getMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aeb3c06288fdf26e61eb942abc69d7d02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getMaterial</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a9eae0bae53bb1936e80a632e6fe48438</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a49e8cb2aeb028d46a2ec9e4b45b7bb6f</anchor>
      <arglist>(ShaderProgram *shader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa4b0598066056bb2ffa97e85febadfa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ShaderProgram *</type>
      <name>getShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af5c8c5bf7cfb1945e7d5dded1a0c09a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ShaderProgram *</type>
      <name>getShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af174791330137117465516251b7b3da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getMaxMeshes</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a99e87d031c95a3a4e73f2e1d68f7e977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a64f70fb9198d1037e363b8e24572ec53</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a125699411e1abc464f923fe4e72fc65b</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a9995d84e425b589da7576cb3815150e8</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a224b18abc15b88b556e6b71bb89ecf73</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae54ead1ba785a8c2207b197d8e419abe</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a495713b5eea24429df8899cfaa59c832</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad4f8c2a3b873a63ee62c87d512b9540d</anchor>
      <arglist>(Node *node, f32 opacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4ba0fc9934e40c651b89969d47b03d3b</anchor>
      <arglist>(Node *node, bool hidden=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac1ea8a16d541174a03addfa2dfede406</anchor>
      <arglist>(Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a25fefe3f656bdcb8c88d2fd4d2f48df1</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1169257a4241392cec0a23c922f148f3</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8ffb29f40c6f175f83cc36568feb87c4</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6661dda8bb03d0f3d6e9764760b6b13f</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>shouldApplyShape</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a9d2e2064f925d9be17ed7fb1b84b728a</anchor>
      <arglist>(Node *node) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a27b42b7a7ed3c67a6f8827288828687a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1033c9f6dee9f725b122c2ddd33f4b0e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>adbf0ae6c38f23779df2b37708e80c24c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a97ec03852997043d6900af8009b390d9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac4edd389ae104da289e2282d780454f0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac857e830af897450652aee0922e62e20</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a64c12722f84add665776c2b9400108fd</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6ba967a65603a7660ab63fe067e338b4</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlendSource</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a52a0a0310a248e03f8b6c410ca0f3fae</anchor>
      <arglist>(s32 source)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlendDestination</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac8524641c3a7273902e2028ef6836503</anchor>
      <arglist>(s32 dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupOpacity</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6c736d40f50aa200248ff2fffe362446</anchor>
      <arglist>(Material *material, Image *image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3242e657cbb5914f8f29ba6dbe21ef89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1c7f801932e981d35c18acd5bf11c8c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoadedGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a29ac09a7f5ea68c26a410a03b8a58e16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a728c03769da533f7ca74fc967582b632</anchor>
      <arglist>(const u64 index, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acf510a790969aae6641ae068f1d804ea</anchor>
      <arglist>(const u64 index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColorTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa0cc2acc76701fd62efdcddd802e4cda</anchor>
      <arglist>(const u64 index, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getColorTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae7af4b2e9fb67dbc658492290aeeacad</anchor>
      <arglist>(const u64 index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a79efc86c5c96b88d33adfdc3debcddd4</anchor>
      <arglist>(Node *node, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableBlend</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a12bd5b2725ed4ec11cd48d4fc365f644</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4270551bf9c0f0ade7ce5b0fd16f78d8</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStencilTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a66c3dcdcfb2fcc30bc0520f280b87ab0</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac369079a8761aeabf7fcef930690db42</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a2778a40635e95c7c7059aa7ce9007290</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac73f3369c9be097e8cd534ca42401c9b</anchor>
      <arglist>(Camera *camera) const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfReferences</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a555e9b90676b286bf036902e164e6fa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a60f8058a4afac8cfe23aa33ae1382fbd</anchor>
      <arglist>(const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupShader</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae448a8fa9c7aaccd9db8ed6dfcf62dab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Geometry *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1b2b50024e18bfce206656b91440dfd1</anchor>
      <arglist>(u32 type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a349dae2018bfdf9bcbec73623d45ce68</anchor>
      <arglist>(Geometry *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a54a7465cbc4c4d1c8c353a809c73393e</anchor>
      <arglist>(Geometry &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a144e779681b19041b60e129cbf7cac29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a73ef5b46355f011df4a64303dd99d7b6</anchor>
      <arglist>(const f32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>getPointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8db5f3cf3727aa03fb31a1954c53c139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLineWidth</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aca9151002282f1d817893db01d48d332</anchor>
      <arglist>(const f32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>getLineWidth</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1c16844fdb0bd887c6338bfb445a1804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa4130386ba85c7f15437fc3539530cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af78c87969f709e52b767f1f1841e6b51</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a11bccbb5b7f74ffe5e85afe825069120</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a91ea8d7cf64ab6c3b07d370a64d69f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Geometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa2b91ed0f6436f990deeef380ef7843e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Geometry &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a191cc8461636a801bce0f2bf8f1992f6</anchor>
      <arglist>(const Geometry &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a61477b1983dc37e146232b99eff643e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0c5960113b3cd040e7df7b8d2104f7a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab2f41460700ad44f8cea15d6e8b66fea</anchor>
      <arglist>(Camera *camera, s32 mode=0x0004)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6547f3d712e0507d79e47b162360eab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aeda5f906f9221ce62149bc959d3460b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addReference</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aaf9879b9197998f1a63dac38ead6354c</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeReference</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a39b63002b1e195651b30186319f5cf6d</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3780bbd093a4b163de3499e5726667f9</anchor>
      <arglist>(Node *)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>enableBufferModified</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3729511d4f34251e0ac1df3135c2a00f</anchor>
      <arglist>(bool modified=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isBufferModified</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a7d8e8d24bb0b2ed0e19bb214cb7f512d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>quickSort</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>af92dc57bfd9c3457085d2fdc4102cb22</anchor>
      <arglist>(signed long left, signed long right, const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>swapTransformData</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a67fcd3f18e15e7da88bc070eb7dca337</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>lessThan</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a7bbffa4f383e7a89a52e9b426d58b285</anchor>
      <arglist>(const size_t idx1, const size_t idx2, const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>greaterThan</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a5211fda676d03559ae8221b60b2738d2</anchor>
      <arglist>(const size_t idx1, const size_t idx2, const btVector3 &amp;cameraOrigin)</arglist>
    </member>
    <member kind="function" protection="private" virtualness="pure">
      <type>virtual void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac7ee1093062d2f342519f7914852a367</anchor>
      <arglist>(const size_t idx1, const size_t idx2)=0</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>bindTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a450c71467016f8266e29c7dbcde2c4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>bindColorTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad8f86922c32926077dee808253fbc7df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0c5aad85ac6ab14068c229abb87e2c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setupOpacity_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aca4922f34c4daa4f3e6209c3ed5c2609</anchor>
      <arglist>(Material *material, Image *image)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>unLoadGPU_Internal</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab4f7836b90acc74a61fce2d49d65a05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; LevelOfDetail * &gt;</type>
      <name>m_LevelOfDetailList</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aadc21c7eaa17ae0bd48895e0b805e926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_Material</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab2ba0f4fa336c12174fcac949df5fee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ShaderProgram *</type>
      <name>m_ShaderProgram</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a28fe075abe7471aee4eff56e0b1389c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_projectionMatrixUniform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa8e22217dcfbcb465395971bef71453c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_modelViewBufferID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0a9f224dd899fe90b27c6da5cafe6489</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_colorTransformBufferID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aae71a91b509b2535d0037a6be4bc3e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ModelviewTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab544bc75aee1731a0bfe0f107eaf4044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_ColorTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a261359d21a4f86f5335975197372e183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InTransformAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ab3c31621e11c227991a764b3dcd8d7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InColorTransform</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a92e00e8041964fbec6273971bde5c80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_verticesBufferID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a0cb9201bc685871f14a28e5ab3ad3ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>indexBufferID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa4b1af9c522fda1a6f4aa6d92bce806f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_vertexArrayID</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a2aa12f424eb0ff7e66138470f14a9544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InPositionAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a3c49bfc26e8e421c3321223cf607ff96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InTexCoordAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a17d04db635e9cfdf49eb928f41569cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InColorAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1c6c813d0d983d18f5f0463b476f8477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InOpacityAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae15315943bb9830d57a1e7a67dfa04ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_InHiddenAttrib</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac455a1ec0567cade34b5453e32ba463f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::bitset&lt; NUMBER_OF_MESHES &gt;</type>
      <name>m_References</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a1a70685ec5ec85f08adbd7277590a67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_blendFuncSource</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a9913325754224a04d80c97942c5d0590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_blendFuncDestination</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>afa9f334ee74381bb6bb7f2487943ebd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_opacityModifyRGB</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4bb3529fcfb94e4567ec743bafdcb033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>u_pointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac5c7f121590883537de568962f8e3b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableBlend</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae1d2dde4fa803b27f8743710841a53cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableDepthTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6417e088ae2684f413e37d3fd17e4b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableStencilTest</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac546ac75ca65bd355d3a1aca7077a7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_TransformDirty</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ad414e27c2a708d6b0e361b88cfd8d75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_ColorTransformDirty</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a27cca52a3235c03f661f5f03a258ea54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_LoadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4e9e4a00d2ae14efb4df0fbe1485570f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_setupOpacity_Material</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a8990f2c3818485e53b23de12fea66468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Image *</type>
      <name>m_setupOpacity_Image</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>afcd7de399a889620ff0ad2b2f2fc3afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_setupOpacity</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a55329444afa99dbd6fd3092e550c3618</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_UnLoadGPU</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acab3d6720f978b23572f0ae75486a14f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_bufferModified</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6dba2ac93b83f9baa5596158e311470b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_vertexAttribChanged</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6a2f29f2dd1c6a0f46a59f719c422a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float *</type>
      <name>m_MatrixBuffer</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>aa2abacdbd107c6b2d23e30be645ff0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u64</type>
      <name>m_maxindice</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ac610f319fbf74cee097fc579ab61e6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_RenderCategory</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ae021b501c8e2052a24ac3139461b86f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static f32</type>
      <name>s_PointSize</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a4719e7a6be0324ad5a3369e563c8528a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static f32</type>
      <name>s_LineWidth</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a31da0cda6afa6d640ce54b5c6642cf73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_geometry.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>global_State</name>
    <filename>structglobal___state.html</filename>
    <member kind="variable">
      <type>lua_Alloc</type>
      <name>frealloc</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>aa26cfe7f3761fda56740a545d15001ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ud</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>af12419c778ac134ece8e269bfcaf06ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>l_mem</type>
      <name>totalbytes</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a65a97a2438ae380708fb1f380e982961</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>l_mem</type>
      <name>GCdebt</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a238d1f76279f013961d01abb93a74a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_mem</type>
      <name>GCmemtrav</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a772d53fa9c456c43ed8196948214f07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_mem</type>
      <name>GCestimate</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>ae23429c806265058502b09625ba3249f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>stringtable</type>
      <name>strt</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a8cdea736db8d268e488aa9e9fa5c992c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TValue</type>
      <name>l_registry</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a3e4eaa91bd14094bf3217073aa40b4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>seed</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a3e1a9b3a2f2dd49f14a38726239494e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>currentwhite</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a31fbedd19538500531d49532226a001a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>gcstate</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>aea4d494b8b9accef389f2be8830f7a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>gckind</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>acf4c834918cf4766f13dd91306360802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>gcrunning</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a2e17e6957e466e8c99c1d8d89701cd12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>allgc</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>aaba2570fb1444c6457a82df9fbad05ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject **</type>
      <name>sweepgc</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a357ff5a5981fc6c64825508c7718fbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>finobj</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>afa672a968752a31f2319d40deecfeecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>gray</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a2d96e2afbc62ff832ab660ed4c357696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>grayagain</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a2ccaa5d2e98c086489c04e2045082535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>weak</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>ab84f67e3b1e863392e504e9d13787891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>ephemeron</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a291641a891457af2d199cb920d9d1a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>allweak</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>ab092ebab0f825675b9e4861d4d4a4fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>tobefnz</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a90da07dbcac2e16b87e559180ebbe852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>fixedgc</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a429b525c636d5b268e03f1c10a85cf8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lua_State *</type>
      <name>twups</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a5e243c2a4646364e0507a5a6cf417eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>gcfinnum</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>abd905b3cd2c5c626e0bdb94b5339383c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gcpause</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>ac043711149aed55ef1d8b911e795b04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>gcstepmul</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>acd2271d481c60fa86f30577f88227e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>panic</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>aa925f5bcdedf55e5353e37cfe9e5d6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lua_State *</type>
      <name>mainthread</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a2c81856ac69a92580d4330cd1070c7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const lua_Number *</type>
      <name>version</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a7c5abd011a64e4d6414550eda1776e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>memerrmsg</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a713375c43bd8b0b3016a97f173ce6992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>tmname</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>ac1d80bd5bb3d4427b25054696eb1542c</anchor>
      <arglist>[TM_N]</arglist>
    </member>
    <member kind="variable">
      <type>struct Table *</type>
      <name>mt</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>afedc8eb51bcf9d250bac26862e4127d5</anchor>
      <arglist>[LUA_NUMTAGS]</arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>strcache</name>
      <anchorfile>structglobal___state.html</anchorfile>
      <anchor>a6a097f2df5d409e565d4a8270be00e13</anchor>
      <arglist>[STRCACHE_N][STRCACHE_M]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hsv</name>
    <filename>structhsv.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>h</name>
      <anchorfile>structhsv.html</anchorfile>
      <anchor>aa27eea5f2a89b941eead7139330d12f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>s</name>
      <anchorfile>structhsv.html</anchorfile>
      <anchor>a3cbdc4bf500068b5c4466c4272114a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>v</name>
      <anchorfile>structhsv.html</anchorfile>
      <anchor>a572c01d23590231adffe6f9b16df20d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Image</name>
    <filename>classnjli_1_1_image.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aab23700775beca98edc5219f171160a3</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a43158ae3c64f273ef22a7ed50adc5c5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>afcb866b82c4c82524678b261bd1963ed</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a2c590a3db2a2e904e2add90afbc00cb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ad41536b7d4585ccae0673892d9bbcf3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5a736a22ab41755f1fa37fd3980d8729</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a9832dbb9ccd17a73581cb8ba3425adac</anchor>
      <arglist>(const btVector2 &amp;position, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a3e991778945527967f1051433d12bafb</anchor>
      <arglist>(const btVector2 &amp;position, const Image &amp;imageSource)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>add817e9d5d8ce5e0fb9913c8c0c78f9b</anchor>
      <arglist>(const btVector2 &amp;position, btVector4 &amp;pixel) const</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>acc74a1af9db48b1631359fb3aa54e66c</anchor>
      <arglist>(const btVector2 &amp;position) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixels</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ab28fe1d7ea14d262795c549040d17f85</anchor>
      <arglist>(const btVector2 &amp;position, const btVector2 &amp;dimensions, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPixels</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aa1fd01f4597a64ef7bb83eab78bfa1b6</anchor>
      <arglist>(const btVector2 &amp;position, const btVector2 &amp;dimensions, const Image &amp;sourceImage, const btVector2 &amp;sourceImageOffset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPixels</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a8403c40ff10118ec972dd1b45942a520</anchor>
      <arglist>(const btVector2 &amp;position, const btVector2 &amp;dimension, Image &amp;destinationImage, const btVector2 &amp;destinationImageOffset=btVector2(0, 0)) const</arglist>
    </member>
    <member kind="function">
      <type>u8</type>
      <name>getNumberOfComponents</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a490b9ccd20f362efca9c2a9b84563e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getWidth</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ad8861c346cef86545c02d0b7e86285b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af3552099b60aaa6a20a94d12d25cd01e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFilename</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a02b7315aabbab49269b1b6091c7c0ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u8</type>
      <name>getBytesPerPixel</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a522283bd78e506d96a7bc512a10a73d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u8 *</type>
      <name>getDataPtr</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a447f4bbf6b076c459829a6aac5d85fbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getDataSize</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a501bfe4e71d61a4126b98f6f9b2ef76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPvr</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a7db60904e8f2631b6d97762ec6202498</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a6639f89fa4b962afff9dfc6c6b242c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>njliImageType</type>
      <name>getImageType</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a0aa8b4efae3b78e51e757b58c6c63b6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>abb8f6bfcdfd719dfe34d983157c352e5</anchor>
      <arglist>(u32 width, u32 height, u8 numberOfComponents, const btVector4 &amp;fillColor=btVector4(1.0f, 1.0f, 1.0f, 1.0f))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a1e15b3f6496df2fd30343d8b1d3953a6</anchor>
      <arglist>(const btVector2 &amp;from, const btVector2 &amp;to, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a69d49e4cee4cddeae589f857f263a684</anchor>
      <arglist>(const btVector2 &amp;from, const btVector2 &amp;to, const Image &amp;imageSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blur</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af0f769d7188c8493a97d3a12c266f1d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ac0af5dfc7833f19b47aeff225506271b</anchor>
      <arglist>(const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>abbf9c8b23419953dba0bc0ac4133aad9</anchor>
      <arglist>(f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5bbc3edaead778489e987e0324744971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preMultiplyAlpha</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5d36dc67447d4f30561baa36357ec223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flip</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a16dd7ca0f260d8096beda930c3df4de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ab7123ed8ee5c43dbd9778cdac8323a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; btVector4 &gt;</type>
      <name>operator[]</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aa3d366f9d5c3535ed96dd47b19f279ef</anchor>
      <arglist>(u32 row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ae62db131c7273ee573399de9e63249ab</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ab90237b3d43d565d2e06763b53ccf339</anchor>
      <arglist>(Image **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af5df1abd1524c9c941be7f6d3f59e78b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a610e5319fd868f5a42d3bfcc6a7b80b6</anchor>
      <arglist>(const ImageBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a26954d0fb6f0c64d153b017ce1e9fb5e</anchor>
      <arglist>(const Image &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ad9424683b5e161bf3688bae039a7dbca</anchor>
      <arglist>(const Image &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a8f66b61abba71241a7facb9a5cd3c245</anchor>
      <arglist>(Image *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aedfe2aac8686b752e7f2a37d9c6c798b</anchor>
      <arglist>(Image &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a431a16a61a1c5e5c8c45926ff421b86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image *</type>
      <name>createSubImage</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>acc43a6c5082de6a16b36b23ebb9d9b27</anchor>
      <arglist>(const Image &amp;imageSource, const btVector2 &amp;position, const btVector2 &amp;dimensions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ab4a9a3dbcd9300dba94c600c89ee6eff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a93bd5b6d3f6955819dad53bae0b2b724</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a70b449b0a21208c1da192eaa069f49f9</anchor>
      <arglist>(const Image &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ad1fcb460b23906d590ba8dfc84d9decc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Image</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a53e6a2614b1db0ccb9ca56115c4b4217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>copyData</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a08bff06bf26c8fd8b7595e02051dd1e8</anchor>
      <arglist>(void *dataPtr, long dataSize, s32 width, s32 height, s32 components, njliImageType imageType, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>copyData</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a2c286ee7b39964ce40a14fab298e707a</anchor>
      <arglist>(const WorldResourceLoader::ImageFileData *fileData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getClosestValidGLDim</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>abe53fce5ad9ff94848f5f1638079b94a</anchor>
      <arglist>(const u32 dim) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPixelRow</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a795757e6b8ced8be19cfb1cab560ffd4</anchor>
      <arglist>(u8 *data, u32 row, u32 width, u32 xOffset=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getPixelRow</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a1d1a40ff4c30f776b445f3ac003de70e</anchor>
      <arglist>(u8 *data, u32 row, u32 width)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u8 *</type>
      <name>createFillRow_createsmemory</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a5d0a48ebc99d07bab0a06967d362fe5c</anchor>
      <arglist>(s32 xOffset, s32 fillWidth, const btVector4 &amp;fillColor=btVector4(1.0f, 1.0f, 1.0f, 1.0f))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u8 *</type>
      <name>m_RawData</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a15158bdf19f840193dca9df44bf9e348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long</type>
      <name>m_RawDataSize</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>af97facbdedc7d4ad1e9831cc7b3d6300</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliImageType</type>
      <name>m_njliImageType</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ae4ede32142eb6433f3db385a0e7bdd80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Width</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a784a866596cacd15f4ddb59a0b56f78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Height</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>ac4709639cbda0dab2a74ffd6a7466026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u8</type>
      <name>m_Componenents</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a313f2d8768b456631e6124eb23c1e4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_Filename</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>a86539a463f9a77d3960a9d7c658cc882</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_image.html</anchorfile>
      <anchor>aa22855a62c62ec48cafb88d34a7cc2f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ImageBuilder</name>
    <filename>classnjli_1_1_image_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a22e4408eacc9b7b1a8f2c6387a030c36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ab719ab40b755786e51f571e85c3097a3</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>ae1c1fcb0cbeadd3b2436df14113e62d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a45d64e23a5e7537aa61f6709591dac12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a93fa1a5be66fa2bd22accab9ee291e30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a92e1b30a2149fbf3b3a1d4058c1bf2be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>adfaa3f987876b3411e5ac6b2060d51c0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a696d93cef71fa03d40ab656a3ab98954</anchor>
      <arglist>(ImageBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a22ef7a57c5a968e60e1b667d84ff0ca9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a201a60e9735869bf1912babb646fb9f3</anchor>
      <arglist>(const ImageBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a795fe08161c3424b63bee264dfd3726b</anchor>
      <arglist>(ImageBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a7d423b1145041a8bcb9e6fc66cc5f40a</anchor>
      <arglist>(ImageBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>af77acf29a3dfbb5d35ef115ba97632f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageBuilder</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>af9547c56bce9f09b589ea57cecca23e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageBuilder</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>afe41d1344d28fbc203f4caa9b20f0085</anchor>
      <arglist>(const ImageBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a77188ee3604cdb3ac57bd3430a7e6dc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageBuilder</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a4d07c7768a7450c7fa5954a278cb92a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImageBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>a7ebb1a6acfb0a318300b6ea9de0caef0</anchor>
      <arglist>(const ImageBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_image_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::WorldResourceLoader::ImageFileData</name>
    <filename>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</filename>
    <base>njli::WorldResourceLoader::FileData</base>
    <member kind="function">
      <type></type>
      <name>ImageFileData</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a95f67fd2dcd6fd0576e1c48f6bff3ede</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getWidth</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a1e51099f69390607836390e148784adb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getHeight</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a9dc7ec4a1ac3681864fd61c9c36bba61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfComponents</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>aa129fc2197bbdd87c4fd638046b8a6d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>njliImageType</type>
      <name>getType</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>ab96e370ca14576a57409c59e8d4cf73b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ImageFileData</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a7732607f7836d9ac9091c6dbc042ae0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ImageFileData</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a7f227092eae4776b8144965bb1466d92</anchor>
      <arglist>(const ImageFileData &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImageFileData &amp;</type>
      <name>operator=</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>ae58cbe419624246b9d5c10fad222b6af</anchor>
      <arglist>(const ImageFileData &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_width</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a815ccf3f42b60a7beead9461aab34639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_height</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a1d7c73d35c27494186c9b111dcdc00f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_components</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>afc583e7a8ffdb4522dad5ae4d96d486d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliImageType</type>
      <name>m_type</name>
      <anchorfile>structnjli_1_1_world_resource_loader_1_1_image_file_data.html</anchorfile>
      <anchor>a50337476c93a38db97e503933b6b2b59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ISoundFileWrapper</name>
    <filename>classnjli_1_1_i_sound_file_wrapper.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SEEK_POS</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>ab4b07720cb2823b4f3f9fa98ee07a6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>START</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>ab4b07720cb2823b4f3f9fa98ee07a6e7a1f8c3cbe37d39eb58733a1d67615827e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURRENT</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>ab4b07720cb2823b4f3f9fa98ee07a6e7a32ec778d5282ca8c51937d66b6db9991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum njli::ISoundFileWrapper::SEEK_POS</type>
      <name>SEEK_POS</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a5374e14efd1564c10852da7cfe31164a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>START</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>ab4b07720cb2823b4f3f9fa98ee07a6e7a1f8c3cbe37d39eb58733a1d67615827e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CURRENT</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>ab4b07720cb2823b4f3f9fa98ee07a6e7a32ec778d5282ca8c51937d66b6db9991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISoundFileWrapper</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a9d584c730a105374c50f9d4e435c6ca4</anchor>
      <arglist>(int minDecompressLengthAtOnce=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISoundFileWrapper</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a1d45f4bcf0e8229bc57907f22ce01ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LoadFromMemory</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a2c4dc8cc613f8f545b0e1ead86ee7e4d</anchor>
      <arglist>(char *data, int dataSize, SoundInfo *soundInfo)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>LoadFromFile</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a525f86e4bbe65d5b90ee3eda171b5492</anchor>
      <arglist>(FILE *f, SoundInfo *soundInfo)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DecompressStream</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a2e62b8b05da06eb1f9594ffdd5aa0cfd</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer, bool inLoop=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>DecompressAll</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a9b338a5bbcb5d07acdebce1efab332c5</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ResetStream</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>ab302d724c78a9a55f6dcb288d31e6854</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>Seek</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a22241a77b7d6adf55045a7a30ec5ef30</anchor>
      <arglist>(size_t pos, SEEK_POS start)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>GetCurrentStreamPos</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a7468aaf1e53cfd6feb38eae4ecf8ab99</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>GetTime</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>afefb180620c4a6e17e994a867726eb29</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>GetTotalTime</name>
      <anchorfile>classnjli_1_1_i_sound_file_wrapper.html</anchorfile>
      <anchor>a1b22318560969f7cc06ac03dcb78971f</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::JLIGlyphPosition</name>
    <filename>structnjli_1_1_j_l_i_glyph_position.html</filename>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>x</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a6ed30622b40cf678e609e334d92696e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minx</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>ae033f5c40cd80581c9b4ea0ef7a50212</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxx</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a7186124c79d3019feb5b1ed6b0408302</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>ab5ffd6bb77fffd445c0d9f38ea8621e5</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a9becd8eef286422eab003470608064be</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>aa0679a354ebebacc7d31aabff0a4e05d</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>aa3fc3849f99bd39c429f75f9f2fd65ea</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>a8c627839571ed060bd66b86b6fdf75e0</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structnjli_1_1_j_l_i_glyph_position.html</anchorfile>
      <anchor>aa324a7eb79043aebc5e1c41c8cffbd00</anchor>
      <arglist>(const JLIGlyphPosition &amp;lhs, const JLIGlyphPosition &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::JLIPaint</name>
    <filename>structnjli_1_1_j_l_i_paint.html</filename>
    <member kind="variable">
      <type>f32</type>
      <name>xform</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>ace4bc2627435f8b885026d397371bab0</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>extent</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a83e7cb273d83a5cba38622cf389a6279</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radius</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a7496627a07e930c0f224b7bdab820924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>feather</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a0ca1781af3e96711b8d93398942a83d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>innerColor</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a1d498a43bc3248a1ac16e5b5b1627a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>outerColor</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a1503a9e8b210e51f305939d54eb57e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>image</name>
      <anchorfile>structnjli_1_1_j_l_i_paint.html</anchorfile>
      <anchor>a3f6e3a4e448803312e7506cf45b31e3f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::JLITextRow</name>
    <filename>structnjli_1_1_j_l_i_text_row.html</filename>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>width</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a94b1a25f325ac2fd07b319026148c610</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minx</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>ae14ecb70a2695a2d483416491b5c3f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxx</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a4721c180f0c8e5d637900c37e9bdb1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a8cebc5909fc78b73ff12cfcf8163fc42</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a7a98698f509414d766a1bca5fe3c804e</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>abfc18ec33fd074ea140c6679cb6d104e</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a93d67945dad8ea8ef959df9acefcc64e</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>ae1ea2e269caff412bc9b4df25af04c45</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structnjli_1_1_j_l_i_text_row.html</anchorfile>
      <anchor>a23fb4aef4a3336830ac13966d757cc33</anchor>
      <arglist>(const JLITextRow &amp;lhs, const JLITextRow &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::JsonJLI</name>
    <filename>classnjli_1_1_json_j_l_i.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ae04065ef213ec0a41246d7a171a57593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aa1e476cfc10ae610e4c9b8a62a5c2114</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ad4d2f9c24a3b0758ce3e83fd9f5f2620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>afb825b630c4ee8489b270a189201ddac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a0d027db8f384f03c29eb34d6f17c9255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseJson</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ac6c67daeea7d4b60ca3cd20f7a8403d5</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aab69baa38139f33c4aac4ae2836b57bd</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a83bf1f54b655a8ffcb44862665dab40b</anchor>
      <arglist>(const std::string &amp;key, const JsonJLI &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aaaf1576600de948cea4e666ca071f483</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a7487f2f83659dfb1a3f1bf75ed9f6e47</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a39309cbcc85b3fc8afc9f16983f71db4</anchor>
      <arglist>(const JsonJLI &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a4bb33dba5db29b43b5f98fd406ca83a4</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aaca6b11677ffe08cd79ec975e4af8919</anchor>
      <arglist>(JsonJLI **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aa042d297050718c9c6f1d8f7a4eb42f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a639dee21b688252f5e570cf46ad63713</anchor>
      <arglist>(const JsonJLIBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a32601c2f880363f7e97de754258a007f</anchor>
      <arglist>(const JsonJLI &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLI *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a2a4d8899495a335c9c734e090dbaf6b0</anchor>
      <arglist>(const JsonJLI &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>aafaa3944f09a731934e5862c4fdea495</anchor>
      <arglist>(JsonJLI *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a3676a4453fa514678f700cb98e915852</anchor>
      <arglist>(JsonJLI &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a5c600e1e7f959c4e277196f73880f224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>parse</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>acad2f27febb63dd99601b1835958b839</anchor>
      <arglist>(const char *str, bool compact=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>ac22e69325c25f4dec44879499565a229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>afdd25a388a00c6c701803f5e8a98f9b8</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>acbcc771bf6781df2ece0aae1cfa744e5</anchor>
      <arglist>(const JsonJLI &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a1901614b3766d0852be1f7a7ec833751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~JsonJLI</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a707b70469f3b0dcd3ee8ac4c0aebaf50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JsonJLI &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a7c5ca5292cb72b9fae301d2c7acde205</anchor>
      <arglist>(const JsonJLI &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Json::Value</type>
      <name>m_value</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>a3e99d03b130213e9923417753929b4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_json_j_l_i.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::JsonJLIBuilder</name>
    <filename>classnjli_1_1_json_j_l_i_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a840c24b183d787cd71ca8265a099d161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a2012b3b2f65e5729d7a06365b749c1e9</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a82d8ed9acc042c7bc9c9a335120d8264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a673faf917817f3e3f4dd2215ce35857d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>ab7b9d6fc279c1eeaf80f761ef77fb650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a1c7f6f0eb380366a2ce04a008621b54b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLIBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>acbd403462d6aef60de6c89832b5690be</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a776c04d38a57941bc0f314e7f417b2a1</anchor>
      <arglist>(JsonJLIBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLIBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>ab956ca1d3541404bac077d196774b404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonJLIBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>ae11c119b938d58a4818b33dcd2bd58aa</anchor>
      <arglist>(const JsonJLIBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a825fd69ba4e09e5055153ed490966f43</anchor>
      <arglist>(JsonJLIBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a97d3565ceee960ede9de69bd09f70cad</anchor>
      <arglist>(JsonJLIBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a78783614cf7ec5dd168d584fa6c4462c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>af1ae069dff60a0ff1ed7ec2e96da0b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a30519a014f411a10616ad43dddf2b740</anchor>
      <arglist>(const JsonJLIBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>acace1c21eb9594170cee3bcd78f2ba52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>adae7742dc510d8f9b483f02ea24ecd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JsonJLIBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>a305951bf3f57185cb22bebea68529f16</anchor>
      <arglist>(const JsonJLIBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_json_j_l_i_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>L_Umaxalign</name>
    <filename>union_l___umaxalign.html</filename>
    <member kind="variable">
      <type>lua_Number</type>
      <name>n</name>
      <anchorfile>union_l___umaxalign.html</anchorfile>
      <anchor>a0521a79b4c0468baf3cfe1eaa67442e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>u</name>
      <anchorfile>union_l___umaxalign.html</anchorfile>
      <anchor>aaf4524b400b6ffa5e8398a4061fb4ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>s</name>
      <anchorfile>union_l___umaxalign.html</anchorfile>
      <anchor>a567cf29bb3a6dbbf09ec4a0e73262aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Integer</type>
      <name>i</name>
      <anchorfile>union_l___umaxalign.html</anchorfile>
      <anchor>acbc12674e6f80d5874522df0885f6c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>l</name>
      <anchorfile>union_l___umaxalign.html</anchorfile>
      <anchor>a77baf9902bdcdd0fb6fa27b564804c58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Labeldesc</name>
    <filename>struct_labeldesc.html</filename>
    <member kind="variable">
      <type>TString *</type>
      <name>name</name>
      <anchorfile>struct_labeldesc.html</anchorfile>
      <anchor>adb07dc226860577090f82586ebfebd81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pc</name>
      <anchorfile>struct_labeldesc.html</anchorfile>
      <anchor>a0383e9e85c343a50a9c6250596e5347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>line</name>
      <anchorfile>struct_labeldesc.html</anchorfile>
      <anchor>ac180e0f26c94e5094956f2b69c0e2b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>nactvar</name>
      <anchorfile>struct_labeldesc.html</anchorfile>
      <anchor>a472fa008a98c95083e6e2db4b66e28e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LabelHUD</name>
    <filename>classnjli_1_1_label_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a29bae4b017aa0c6b96dc789a633b9778</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>abfd2e24d591c7a69305b30d271b38a77</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aa0887086f1e2ad7f2c33e87b1887e5a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ae798a4d1d06814724cd18c02b6b64a08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a19573cd701b0d0c00523c0e5e9fda63d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac684499e98df76e0554bf882588df45b</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFontSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aee2bb7f6202c92a494beb15ff64048b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFace</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aaa414bebfb2c580b721e9ac8cb5d2284</anchor>
      <arglist>(const char *fontFace)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getFontFace</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a14780157dcd0ba8aedbdcfe9731f8117</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColor</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a3a7058fd10326abad7c3ad61b976dae6</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFillColor</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a3098da90340c9cbbe8ec1c1f35ab18d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlign</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a6950d61495c1391048e780c1de548519</anchor>
      <arglist>(s32 align)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getAlign</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a970d0a47b794659a5e1c3b58e07c239e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a196a78a5fb764d5e14287d593a442c89</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a55a3f0c4c64bf7e0a5c510500f3288fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aa41b131ee1d33967a5aa23ebbf459387</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getText</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a600c970bbab43aebdd7d72e75c9519df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a439b7a8a4120389b3499a6d8526c681a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a733dac9e1b004210e1cc25b879a1ff26</anchor>
      <arglist>(LabelHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac78877c0e1b98c5837779544fe192b48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a7c23d00e02b8595433e000540378659c</anchor>
      <arglist>(const LabelHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a19ec4a7244c92dc3bac335d4247e80be</anchor>
      <arglist>(const LabelHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ad592872b1e59d73aa8d3dfcaec1daec9</anchor>
      <arglist>(const LabelHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aa285d743d92bcf2dbb467dfeff1ea41a</anchor>
      <arglist>(LabelHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a091ed0d6dd97cc37f87733951c87b67c</anchor>
      <arglist>(LabelHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>af0e2d204e906dff5fac5e5f744477f35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a8b2fa2f2b349bf0f426a29b88816c61b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aec37b679f1007bef302e96521d4bf793</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a0ac0ceb62be175dd54166581c1e78d9e</anchor>
      <arglist>(const LabelHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>addf0c42945b248883022f2701c9ad690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LabelHUD</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a89455c0039675a892a8f01dccfe7d89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LabelHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ae4a370ed6012f63081797ee083d4976c</anchor>
      <arglist>(const LabelHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a40fae179595de9d7d29bdd7bc9fbbcf7</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ac38777c0a4111605ecca48e4a971c760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a58e6540e10e48a118af8581222acc25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fillColor</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a13d1c6df859379202a8986ac7097700b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a2f9f7352660b1574a4e715454aa1a7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>ae242434778593a15db9e3f34555d42a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>aae09e316a6c205adf6620d3a576a7657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>a0e917cde3ec783326e76033b11a6a0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_label_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LabelHUDBuilder</name>
    <filename>classnjli_1_1_label_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a4474a67e7fed5f17ebd37a3a0019da06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aec96df7406190d4c0d6c9d6cb4f71de4</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a7b2ce22588b0935205f2f116446affd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a065dab35d2ad65345003a168a6748cb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aa7e57d529bee575b73ddd4f70d39fd32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a77c96ea5dcd8921522ac5d6e9c025908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>aca3bb53dfeb5df96087f7ef7d861c7f3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a4a8ec57b63478657ff1869393d242b79</anchor>
      <arglist>(LabelHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>abc86417c388dcf96cdae374ada398b5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LabelHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a793337df080b9df135e1876e49e164ac</anchor>
      <arglist>(const LabelHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a6651f48628a7bddbc66bf39b52f46491</anchor>
      <arglist>(LabelHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a805ef11e96ae7cb6fee203a3779bf345</anchor>
      <arglist>(LabelHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a2393097c6cfd7d456fb5af065ac68631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>ac3059bbfa1a2f136e1a8ae133a000a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a0da59c21d965f7a4e8447e1a75952b90</anchor>
      <arglist>(const LabelHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>a857ee8ed1e618b0bed1cfe4d9fd222f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>ac25cad6374d56fed41ac33b362c72514</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LabelHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>afa9f56518339977a34b3591162634696</anchor>
      <arglist>(const LabelHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_label_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Labellist</name>
    <filename>struct_labellist.html</filename>
    <member kind="variable">
      <type>Labeldesc *</type>
      <name>arr</name>
      <anchorfile>struct_labellist.html</anchorfile>
      <anchor>a330c4161f41ef91c4f4e730e50d75b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>n</name>
      <anchorfile>struct_labellist.html</anchorfile>
      <anchor>a68f90673b9dc53b9a816bc981525f2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>struct_labellist.html</anchorfile>
      <anchor>a2d0f72da42c57cfdbf8a19b9929b50cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LClosure</name>
    <filename>struct_l_closure.html</filename>
    <member kind="variable">
      <type></type>
      <name>ClosureHeader</name>
      <anchorfile>struct_l_closure.html</anchorfile>
      <anchor>a6014e6d418f56b1ec866c449cab16044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Proto *</type>
      <name>p</name>
      <anchorfile>struct_l_closure.html</anchorfile>
      <anchor>a4cf173817d3897b0e70822e70d241d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UpVal *</type>
      <name>upvals</name>
      <anchorfile>struct_l_closure.html</anchorfile>
      <anchor>a94886e7c7df838f5fab36575b0554682</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LevelOfDetail</name>
    <filename>classnjli_1_1_level_of_detail.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a497e9f0c1a6025bb7ac6cf06de6ee4a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>adf8ccbfc2065af4e646888dab0402855</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>adf0fe87798b3a638e503073cf348e720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a19d0340ade902b34b8369144ba38997b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>aa42d9d5128c39ba2bc4b29abbeff8db8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>ab8a51c06db961b97b3934fb3a0a5a6c4</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a578947ba5dbc024131ae8fc2e5a8ae36</anchor>
      <arglist>(LevelOfDetail **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>ae680727c2c235ebbe7075761220c2607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>afb11a42b8ba72b23c0af91b3feb0f3d0</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a4e157e2d27cb7e6f2194a8239673a735</anchor>
      <arglist>(const LevelOfDetail &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetail *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a8b9f86076c3a59dbb5785ef7999d0596</anchor>
      <arglist>(const LevelOfDetail &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a532c61a6453bc75fff3d1d813a9a904c</anchor>
      <arglist>(LevelOfDetail *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a508687acaa44f29a4b02d91e949800e8</anchor>
      <arglist>(LevelOfDetail &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>abf3736edff218865fabdd0586ae9f581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a875c55721aad141c9db3da41bc600be5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a272925da421ba01f41ed17c013d30d96</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a145baec0397df5a7f98ed1a7cf202c7a</anchor>
      <arglist>(const LevelOfDetail &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a2979efde7c79a0e8fa14bdd386ca071c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelOfDetail</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a9b17cafbbe17ece5d3bed3da04cc4e38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LevelOfDetail &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>a822c7e770a22199a6bb830ad63063a44</anchor>
      <arglist>(const LevelOfDetail &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_level_of_detail.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LevelOfDetailBuilder</name>
    <filename>classnjli_1_1_level_of_detail_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a76387dbf67963d3c714af69771f0e3b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a8784ca3914fe34bcdfa67c4ed31f663f</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>ad78a7c87770ebb9d6f2a4e8fd90a80a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>aacfd436ae9d8b6aa1a96e4051157ba1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a99bde1451b3b110d62ecfc881c0f5af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a760a4184b67f41a976ee3271f6070f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetailBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a9f3853391a2a7d67228ce329bba8ca23</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a06ea6b988384235d876bb57e1b2417ac</anchor>
      <arglist>(LevelOfDetailBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetailBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>aa20b31e8de26f34163724d3ce3184849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LevelOfDetailBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a63db1f2fc7d0bfd57f4d26ed5bd29247</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a7e1cea8fe75376aad4380152b53dcb3c</anchor>
      <arglist>(LevelOfDetailBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a59a86dce4eef12f7fd1e12cd161486b3</anchor>
      <arglist>(LevelOfDetailBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a4ce3a6498f6e5208bab1f9ac7b9a8444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a4fb459d11fe33ecec7adffd9bfee1085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a7197fcd03fa97a397ae99f7cc4c7cd94</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>a86c19f728a855df683f126e2662e5841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>ad07b42bddcff462b519b1934348f6c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LevelOfDetailBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>ae7c4d3968b07a0471168762490a10012</anchor>
      <arglist>(const LevelOfDetailBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_level_of_detail_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LexState</name>
    <filename>struct_lex_state.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>current</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>ad31cc4568332a48d22d37a13c8eae006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a9047632ca93c760b66b6303c819099d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lastline</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>aaadb237d4fc6b81d2242e666de885bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Token</type>
      <name>t</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a597c734626136f4ddb8232e8fc3abfc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Token</type>
      <name>lookahead</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>ad3c75c11dbbdae006057cb4b847a4f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct FuncState *</type>
      <name>fs</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a01999e4f68cc6a3bd0b9eb6ebd241f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lua_State *</type>
      <name>L</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>af1ffd91f6684eee85e707a4b9927019b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ZIO *</type>
      <name>z</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a591ffaffa1f3c21653904dccf81a4377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Mbuffer *</type>
      <name>buff</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>aab00ebdc0eaf42caa098ecb6ca3c8389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Table *</type>
      <name>h</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a0fcd03e58c52d100bc9dcd52787724f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Dyndata *</type>
      <name>dyd</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a3275102e0a909a24d21e8dd183847a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>source</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a054af516711cc3d173a73a301497ff27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>envn</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a1f3368576038a65ab629da91de3edfaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>decpoint</name>
      <anchorfile>struct_lex_state.html</anchorfile>
      <anchor>a0673e50a1368c36f24624a710e42e389</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Light</name>
    <filename>classnjli_1_1_light.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>af612d5714d0255c1c7449166d9f23d0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a631788c53a51d9bd2d45aec1502197a7</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a36c0c113950ee57a28d1daa9e004f1bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a06755694d3359c31bd95e121f7dec871</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aff812d39fd03b88f2cc505cd09e85a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>af5480d5e20cc23e6b6396682933b8f7b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a414cc8fa485887315275bb0aff544317</anchor>
      <arglist>(Light **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a7cebda7210fd52bddcd127d856917567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a9f63fa25bf0911636398d7b0d9d91a2f</anchor>
      <arglist>(const LightBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a5117da30363b8e8474bf188a9b4afac7</anchor>
      <arglist>(const Light &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Light *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a8396303da432e6fe4d24c92ef7b37d36</anchor>
      <arglist>(const Light &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aedead9223dc5a89c173156b6d2aff99d</anchor>
      <arglist>(Light *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>af7ce8d0f0ae2c3ab98254f982c337886</anchor>
      <arglist>(Light &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aa33ddd3945fc8bf5510edb43b97cab08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>ae0e78a73e2bef4d00deda48fe5cd08e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a2edf4d7c92dea0c8f1525b86967a0784</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aee08c07de527987355ec28780054bf18</anchor>
      <arglist>(const Light &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>a1b79e3b111727895a7eadf347c5b1d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Light</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>af9cb1cf3a119efa14d13a74193b4b941</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Light &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>aea305e92709425c1617943175bd34542</anchor>
      <arglist>(const Light &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_light.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::LightBuilder</name>
    <filename>classnjli_1_1_light_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a43d288c294c41b636d4b82667aa2bde1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>abe9991f05d3425a49d57143219651944</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a77843a3f1458641e1010c8054f244fba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a43535912e865dfb5e1dd00042a6f7f91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a5726f852a750eb9eab320deb78b1203b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ab78012792d57d6082e119c435a989e69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>aab30733f1421b35630caaa0ac907dcb2</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ab16a1e8eed4eb47d0567fd04eb7545ca</anchor>
      <arglist>(LightBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ab9c0ea3d00ad2542e86f67d49aa0143b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a48ee256578d1390ef6bec7627a30a4c6</anchor>
      <arglist>(const LightBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>abf4ee2d41383010dcbad031b939e66ac</anchor>
      <arglist>(LightBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ad1e8c0f31d685a967232ea8be1f2e954</anchor>
      <arglist>(LightBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>ab116d38f46899e9ede12dd63a24a9096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LightBuilder</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a22fba014290a67469f193aa3ceb70f6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LightBuilder</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a21e8114a3d6b9a5b82f2e779037c51ae</anchor>
      <arglist>(const LightBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>adb76c72fb81a5069825256062fc50a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~LightBuilder</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a7d60399cbc33aecd6ad11f63d4efb9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LightBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>a60818643979ebb467edf749bfac23dec</anchor>
      <arglist>(const LightBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_light_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LocVar</name>
    <filename>struct_loc_var.html</filename>
    <member kind="variable">
      <type>TString *</type>
      <name>varname</name>
      <anchorfile>struct_loc_var.html</anchorfile>
      <anchor>acf62684d78349320b90b4acfa3b6d22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>startpc</name>
      <anchorfile>struct_loc_var.html</anchorfile>
      <anchor>ac5a8bf5a59430eea070db5b1a97d8b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>endpc</name>
      <anchorfile>struct_loc_var.html</anchorfile>
      <anchor>af7f0f7d509579ffec5610e329f85693b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lua_Debug</name>
    <filename>structlua___debug.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>event</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a6578d385d2322429a0fe87b79f1ddec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a2978ab7f2ade479a003beb16d3b7a993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>namewhat</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a7e8c201950ea4dd3f2c7df9e1201019a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>afbf8df5f26e9c345378a7eb402eed081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>source</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a422bceba8605d96bce4d19ce801a62e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>currentline</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a97b3ed36cdfdc6f2c694b253a3d96da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>linedefined</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a97cb69b18daa46d20fb1a13eec78661b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lastlinedefined</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a4c69b9d30e54cf9071cd2987ede128eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>nups</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>ab87c2a6ef686abf10da683f7e9af1b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>nparams</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>adb5efd1576224ce9d14f42f8bfee7a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>isvararg</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a943220c57a4dd46dcc1bcd1198cfea88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>istailcall</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a08e9cf647790ffeb068db293c7572260</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>short_src</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a9b953c2fa9ef95a72a9ffc423744e1a4</anchor>
      <arglist>[LUA_IDSIZE]</arglist>
    </member>
    <member kind="variable">
      <type>struct CallInfo *</type>
      <name>i_ci</name>
      <anchorfile>structlua___debug.html</anchorfile>
      <anchor>a6cfa3d2272ea187b08164b0a2081d59d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lua_State</name>
    <filename>structlua___state.html</filename>
    <member kind="variable">
      <type></type>
      <name>CommonHeader</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>ad5311df12c1bfa3c4e11b7a1dbecaeda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nci</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>affc91cc87a077d30cc812fed4769d967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>status</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a563f8f114867e0b03405680633672102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StkId</type>
      <name>top</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a195f448e76fd404953fa1962d28212a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>global_State *</type>
      <name>l_G</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a63c9e91949432bcef6251366fbac6c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CallInfo *</type>
      <name>ci</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a7fbb5727050853f411ad64b4be9ab5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Instruction *</type>
      <name>oldpc</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a432a65b4dfa167b9e80ca0abe1fc119e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StkId</type>
      <name>stack_last</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a797a585a2bdb638bd1ca78c15bbe46fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StkId</type>
      <name>stack</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a27e1d5122ef7fffae7542814c72fdd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UpVal *</type>
      <name>openupval</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>aa1f4a24dc6645e10ba8d6f2713e446bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>gclist</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a0d446661e92287c8409076c970771217</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lua_State *</type>
      <name>twups</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>ae1da80ba9fa9d9adad4deb8ae5b42ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct lua_longjmp *</type>
      <name>errorJmp</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>ae4bbd2199ffd804fe64142c3d5ecb249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CallInfo</type>
      <name>base_ci</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a8c707493c7e45c7e0467381f5a80175d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Hook</type>
      <name>hook</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a89d3fb3ecb6831d1c5c51b4a87ace8ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ptrdiff_t</type>
      <name>errfunc</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a09de3a7c6d3bcb6c2b0d26a81bb8d44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>stacksize</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a44530127453a374634f7ad22eee9ec6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>basehookcount</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a5d760c922e94390cd270ebb4ca4bc848</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>hookcount</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a8824aded162dcdb9d3a142a90819e372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nny</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a24099a91bbfa23048f1b940f26819f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>nCcalls</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>ac388127d044b54d2e9779beb44398845</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>hookmask</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>a1d4ee1613c41d6100db9e0c73217b41f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>allowhook</name>
      <anchorfile>structlua___state.html</anchorfile>
      <anchor>ac2903d4a712ca1c2d114f541636490f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lua_TValue</name>
    <filename>structlua___t_value.html</filename>
    <member kind="variable">
      <type></type>
      <name>TValuefields</name>
      <anchorfile>structlua___t_value.html</anchorfile>
      <anchor>a9d2b6f4b9aa1afd4f1b04977b70b2caa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>luaL_Buffer</name>
    <filename>structlua_l___buffer.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>b</name>
      <anchorfile>structlua_l___buffer.html</anchorfile>
      <anchor>ad519a6ef1557666cbdef35e5e8a4ef3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structlua_l___buffer.html</anchorfile>
      <anchor>a2d0288dac89591516c834328beee71cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n</name>
      <anchorfile>structlua_l___buffer.html</anchorfile>
      <anchor>a85c23e8716842c83ee8e9d80f1652812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_State *</type>
      <name>L</name>
      <anchorfile>structlua_l___buffer.html</anchorfile>
      <anchor>a66ae63716768952c74910da4351886fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>initb</name>
      <anchorfile>structlua_l___buffer.html</anchorfile>
      <anchor>a740a9839c94f115d3d5f574a066b9d49</anchor>
      <arglist>[LUAL_BUFFERSIZE]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>luaL_Reg</name>
    <filename>structlua_l___reg.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structlua_l___reg.html</anchorfile>
      <anchor>a58b99f63b304e5c489b90d812f92cba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>func</name>
      <anchorfile>structlua_l___reg.html</anchorfile>
      <anchor>a54aa8f9955870caf78148514e61196ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>luaL_Stream</name>
    <filename>structlua_l___stream.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>f</name>
      <anchorfile>structlua_l___stream.html</anchorfile>
      <anchor>a50fc81b2c6481ab7768e41bdd3793bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>closef</name>
      <anchorfile>structlua_l___stream.html</anchorfile>
      <anchor>a98731a1b0b1e28336d7206798895e62f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Material</name>
    <filename>classnjli_1_1_material.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a07a92910ef8da284641f6eb70a30e3be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a3ab82dce5ced09f9caaf974e24088aa2</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aaea36cd9ab4ea05af15a0a260d853d8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a13708ffb8342a5d988d0acddb31af07f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a3b6cbb2dfeef53995d862414fac28345</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getDiffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a389857d136e1a7ab61bb0dfd4a6e2e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getAmbient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aa29ca4337009ceae601d7e109585d70a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getSpecular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>afc56ace85ceb0366d6419f4802a3bac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getNormal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a5823254059c86af02c20994309e081d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getReflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a33a6626c6e0311e027eece10bb9c92fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getEmission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af0b1b01eaef338e5231b1a583db7cc72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getTransparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aeef9185aafbc38792815114a57cb8078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaterialProperty *</type>
      <name>getMultiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>abb8dbb0fcff241cc7d73886b57223834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getDiffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8c3b5721877c6e71084c54c547280d0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getAmbient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9997fe2226c7abff100c7059fbd6109f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getSpecular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af00611506e87ee56810e5a6673e8eff5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getNormal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a2447a2ed442e449ef17fa64fd850c9aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getReflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aec631cd6781121b6b5a44cbcf73dc122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getEmission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>accadd4b05460b5d6fff5560bac4d8d05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getTransparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a6270106430360cfd995e94d206c397d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaterialProperty *</type>
      <name>getMultiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad8aec4a344a8853e573c0d4c56c31fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShininess</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a88b23a7dc24dae378fa6e345a8600e19</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getShininess</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aae200625d8caa2c551beca640945249a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFresnelExponenet</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8f725eb3d8e586c3f8e02c51cfd8bb42</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFresnelExponenet</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a39a624518fbe4e029918ed855adf3aea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparency</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a1082fa0725cabeb9b824d9ced36e2c69</anchor>
      <arglist>(const f32 val)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTransparency</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aea9acf595dbc594ec215c9c42842e79c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableLitPerPixel</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>adeafc9c196919b3936e9a4cac979b8b5</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLitPerPixel</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad21ee1c7e0de8c532f3bd8bf0314d5d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDoubleSided</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a637971ef59e44b54f49522882f6b1c67</anchor>
      <arglist>(const bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDoubleSided</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8b9cd58b0b79154a5d4a813d86d91417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransparencyMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>adfa835da63d259e393f16edf5e7e589a</anchor>
      <arglist>(const njliTransparencyMode mode)</arglist>
    </member>
    <member kind="function">
      <type>njliTransparencyMode</type>
      <name>getTransparencyMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a0b8c45cc2da094f6c0cb89fe3e597ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCullMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a2ddcfec45012339d0b771c08e76985c0</anchor>
      <arglist>(const njliCullMode mode)</arglist>
    </member>
    <member kind="function">
      <type>njliCullMode</type>
      <name>getCullMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a0424df07cf4252ede04069be6e8bd56b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a45ed0723a5bff8db95b0e6e5b6b48a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Geometry *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a77b6c840f54e6a088248a46f43ac7f23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOpacity</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a51aefb6e0eec43c7a19f70fce8e04ef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ace089b72b670f4dff85bdde77f0c17a4</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a6095f4248e3366d802bd585f0e75e7c9</anchor>
      <arglist>(Material **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a72bd6ccb8f216e2f5c4d054b297a55e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a3e040d6afaa59825df4c3df3edcefdb3</anchor>
      <arglist>(const MaterialBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ae92845d754b6ff837489c461bb0072ee</anchor>
      <arglist>(const Material &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Material *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a3296d34a077b014a02001bbf876eab80</anchor>
      <arglist>(const Material &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>afcb45b24c6865b6743ab60589c255975</anchor>
      <arglist>(Material *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>acbf12f3b3abb3f7ea02d9bc2acfb8028</anchor>
      <arglist>(Material &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a94b5c1de306550320577208339a4bec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a95266db699eaabe4754d72f2c577deeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9f36e174cfc3bc09e05d93ca343d625c</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab631f786b9f19b8fb9415f221fc57bb8</anchor>
      <arglist>(const Material &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a4855e2ed843f6aef0db9148ff954a288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Material</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a7c1af140483cf0f7b93db5a4098a2064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Material &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a73eec6a48a71b7129497fc980f74bb0e</anchor>
      <arglist>(const Material &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeDiffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8f7886965c92fb212d58342f77055e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeAmbient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aca2f49d7b538a779edbf1b58573666b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeSpecular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad10e910fba799bdc8045470161777540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeNormal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af454f737db887890ea70cb35d16f0348</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeReflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a0edc0a0e9ff9784bb1d63c7ddb795913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeEmission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>af3b8bdf52a330ed4a0fcb5eca5bdb717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeTransparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>aca74a247496651560b87a4513f8efa0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeMultiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a8761380e9d38fc626c5b66643a3e5ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>acdd2f10804ee793308e61bf232d47f4e</anchor>
      <arglist>(ShaderProgram *shader)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unBind</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a2c33a9199d78c0feaffcb566fa0f4fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Diffuse</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9b605c885d158f6bcf3510c7bc0c8c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Ambient</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab6e95c0a9083cc7836aa027e16c843f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Specular</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac40bacaa57dc01a8ef74c1a346675056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Normal</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ae209e334a114b1a29643d4f1c3fdfada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Reflective</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ad73e3e455a6801b7dfee1c17f4ee2664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Emission</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>abf9bf481eac85f01fbed79bb520c634f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Transparent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac622968e9f93c0434701ede20d11750e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaterialProperty *</type>
      <name>m_Multiply</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>affbb378b516bf6c39df30e390f1deb84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Shininess</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a130ba87d3c1d84af92b533f8a5048385</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_FresnelExponent</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a5635224a80fd28c8da170225ea69102f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Transparency</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ab1312ba0234332d75f4727851c9f5974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_LitPerPixel</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>afb1e5515756851ea25491828e35da57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_DoubleSided</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a12bcd32fc000bb1c86c4b55b41a2bf63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTransparencyMode</type>
      <name>m_TransparencyMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a635e9141bcc8d3963deb734427f91de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliCullMode</type>
      <name>m_CullMode</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a186c0897e4c86131c61cf81d775d6baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ac1e5ab02d2359e991783010c562791e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a82b374d797a09668286ac5cf26f539f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_material.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::MaterialBuilder</name>
    <filename>classnjli_1_1_material_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>ac16a0c308e735dd3da244b1dc1c9f284</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a469bb521d641ccf253538c4d0e914f58</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>acc744b4d414edcf669b6aacfc11573c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a7114856dcf01d474cab30bfd63e66930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>aeaf990186fd43140af8263fb04518693</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a372ab364d0d091f6460f91ff10251819</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a7b155539c03fe505fb82942c982ccc72</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>ae9f327274245a38631fbe03c44479583</anchor>
      <arglist>(MaterialBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a03cf7866e76691ce27d44fde730bf59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a2748f334d7e74cfd8b17e404822379b1</anchor>
      <arglist>(const MaterialBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a2d4800c922242a8e931c98b5792b8d97</anchor>
      <arglist>(MaterialBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a75f20dba44c65bd88f34e4eb2b8d39c7</anchor>
      <arglist>(MaterialBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a9b4a5cabb705cd50ac7ec14844818edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialBuilder</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>abf72495ee49aa1fdd9accd45aee1fd94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialBuilder</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>a15ee94e543a5dd5c30474be74b4c221b</anchor>
      <arglist>(const MaterialBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>acbf454f4aeead5d80c59474b3dcedda6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MaterialBuilder</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>acce429eca2de8ade08f8ed50bc630400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MaterialBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>aaa2c67d1966ebcea7277957e918ed831</anchor>
      <arglist>(const MaterialBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::MaterialProperty</name>
    <filename>classnjli_1_1_material_property.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a888f05d2a7c7db1d701aeedc41390943</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a5338183b33812c774e246c9d1827d666</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a10e4f8c062f12361638445530f82bd69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aad6d725e907d46679f9aeac68f91ff42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a3ab43fdd4f1a6dd76f5e8e468c1be923</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Material *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1c30fb90512ef7eef66f4571d34fc42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ab401ed5ab389a124afe832ff9a67777b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a252a4ebb78f314af5eeec14ebd794692</anchor>
      <arglist>(njliTextureMinificationValueType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureMinificationValueType</type>
      <name>getMinificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adbfec558090c7a6091b23a0ee4ad0c76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagnificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ac8519825cbf12f274d2cfea9d1afcc64</anchor>
      <arglist>(njliTextureMagnificationValueType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureMagnificationValueType</type>
      <name>getMagnificationFilter</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa5f65e3731941c88cc6600b414a8b1dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapS</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a373bb320a2411e19eb79b376bdace858</anchor>
      <arglist>(njliTextureWrapType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureWrapType</type>
      <name>getWrapS</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a88eebd11319add4290b5d7d28a177161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapT</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a085c669a1f7e6df12a6e8bcabd70a176</anchor>
      <arglist>(njliTextureWrapType val)</arglist>
    </member>
    <member kind="function">
      <type>njliTextureWrapType</type>
      <name>getWrapT</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad83676a4a57a35e1e8f4ece4942ab300</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad96612e3ed0bd7e7ee02007e4a7e6449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ac710f73d560118360ab73f5bf87cf016</anchor>
      <arglist>(const Image &amp;img)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aff66a14be2c9117f8620cd2bab88f9b5</anchor>
      <arglist>(const Image &amp;negativeX, const Image &amp;negativeY, const Image &amp;negativeZ, const Image &amp;positiveX, const Image &amp;positiveY, const Image &amp;positiveZ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a54a76d538f19e7b4bdd29b1106ca92e1</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a26086f9fabd9f206fc89ef9e4d1ab351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reLoadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adb0972e7a2a81e22c59252d609ed4134</anchor>
      <arglist>(const Image &amp;img, const btVector2 &amp;offset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reLoadGPU</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>abb3e55b3f32ba67f6e52b3a1af5672be</anchor>
      <arglist>(const Image &amp;img, njliTextureCubeSides cubeSide, const btVector2 &amp;offset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureTransform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8c9ed69e9d9965c8aaaa8e5a79ce1d3f</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getTextureTransform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a0e93c57d80278fff3bc8f873e0cba4da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getWidth</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a03191c04ff259c86536626a6efcaf6d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a15f1ba5be6e2f5da618dea70c3e2700e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextureCube</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a80ffe6edad2abff10c36fb54ff7640f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTexture2D</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a839469894a0d05814b6947a107e34516</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOpacity</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a81e7c9ce6255bf9a4a07215892b1b5fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ab1577f6ebd7e36432b326dbe37602185</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a663827a5878ba71adb46ace8142f823d</anchor>
      <arglist>(MaterialProperty **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ab7a5e5535ed79f6ac2c86c8b78214007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a030ee6b5b94ec745e83b044ccc6906ff</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a7cbf31bfe41a2048c0bd26d99f57a74c</anchor>
      <arglist>(const MaterialProperty &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialProperty *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8347b1bfe6959984904ef14d113bad53</anchor>
      <arglist>(const MaterialProperty &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae3efb73be6d8d3e1bcca27d438959fe0</anchor>
      <arglist>(MaterialProperty *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a4a3dce836762ad8e911e7965df320b07</anchor>
      <arglist>(MaterialProperty &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a4d223566b0ede80d533b50bdbe9e6717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initReferences</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a136a817ad5462dc2946014aab739bddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6811e536c0304699a61cfc1024f2ba8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adb5e4547cc2288c3a2eb3ff527550b7e</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a7c76ca284edd6d7ac17b90ec0f0367f1</anchor>
      <arglist>(const MaterialProperty &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae5c6b3221d3eba4205c5301d440c00ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MaterialProperty</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a75c8490c52755625c177afc58c229a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MaterialProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a2be91e903f98e3eea9309485e76a7f79</anchor>
      <arglist>(const MaterialProperty &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u8</type>
      <name>getTextureIndex</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a50438fb39042ba68cd581bff9658b2b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTextureIndex</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1ec8ff2f8e2d6289361d1fe9c8838807</anchor>
      <arglist>(u8 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>bind</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a51d5f7827d6a08ab84c0ec549dbaf9de</anchor>
      <arglist>(ShaderProgram *program)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unBind</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae15d33487d858135cb0366bc629fe255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadTexImage2DInternal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a9bf91c2260c96d60ee8ef7eaa491e8de</anchor>
      <arglist>(const Image &amp;img, s32 target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reLoadTexImage2DInternal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad04b3469ee0c493240c55e1294c71727</anchor>
      <arglist>(const Image &amp;img, s32 target, const btVector2 &amp;offset=btVector2(0, 0))</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loadProperties</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae72cdc356494add65927cabbb9141d82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>njliLoadGPUType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_NONE</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bab2312f8edb2846647ff841d4a7813c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_2D_EMPTY</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba19facd571e661394fd10c4adc26e2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_2D</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba84cee2de1a9c1bff7902327c2871a4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_CUBE</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba705566d6faa4dc00bf60956035329286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_FBO</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bac5507e15f557a30a23a193db80d35b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_MAX</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bab57e4f81335fbb5b1af57ef0dde78a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_NONE</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bab2312f8edb2846647ff841d4a7813c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_2D_EMPTY</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba19facd571e661394fd10c4adc26e2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_2D</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba84cee2de1a9c1bff7902327c2871a4cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_CUBE</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855ba705566d6faa4dc00bf60956035329286</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_FBO</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bac5507e15f557a30a23a193db80d35b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>JLI_LOAD_GPU_TYPE_MAX</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ae02b26fdb8ff7968cc6def931e69855bab57e4f81335fbb5b1af57ef0dde78a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a9952072ad753a049bf653dc55a7089b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a2279e0f7abdce078f62c121520cac369</anchor>
      <arglist>(const Image &amp;img)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa9a78f32c94e7d5e822dd328eb954ec9</anchor>
      <arglist>(const Image &amp;negativeX, const Image &amp;negativeY, const Image &amp;negativeZ, const Image &amp;positiveX, const Image &amp;positiveY, const Image &amp;positiveZ)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>loadGPU_Internal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a0e2f5b5c25f4b11f282905cd4492c5f8</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>addReference</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a9bbe416abf678f714afc3cedbe235b11</anchor>
      <arglist>(MaterialProperty *)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>removeReference</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a9aedcf990d5787c531ae4126d1329c5e</anchor>
      <arglist>(MaterialProperty *)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static bool</type>
      <name>hasReference</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aebfaf86035d419025c151dfdd20bd6b1</anchor>
      <arglist>(MaterialProperty *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_diffuseBound</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aeb9f7375f6cf29868549e99f1d709b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool *</type>
      <name>m_materialBound</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a792f0aecc3bf0a36018e7abeca5c7080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_textureID</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a54b3b51f4b0d736d316b63777ccda316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureMinificationValueType</type>
      <name>m_minVal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a13b42d54787929d981050557ac4748a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureMagnificationValueType</type>
      <name>m_magVal</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a99668eb548352e3b136eff0d78bdaf47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureWrapType</type>
      <name>m_sWrap</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a18842aef4fce7ec9871bcf206fc5d517</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliTextureWrapType</type>
      <name>m_tWrap</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a1db9e13afa4a288eaf901c7e6726d36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_textureType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6561cf1412426aa7a0b40590ad221169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_TextureTransform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aeab9a246acdf7a58f77381addbe25af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u8</type>
      <name>m_TextureIndex</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>acbc4746b18b182d07313eeab1fb0a62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Width</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a8e0a5e6f9f07c09905cc9bdef219486b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_Height</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a51e2a105287561c4417234e5a804fa32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_NumberOfComponents</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa65bd34c711ad4a992d9c0cca0408502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_2DUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a71f667dc1a2ab962ed1d014b223c6c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_CubeUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a48374b6e4a3ec749e21499e76633606e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_is2DUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6ca2655337c3335aa3188e4b0a202d0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>m_isCubeUniform</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a24142b6247dd361b43102f83d2d8e36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractFrameBufferObject *</type>
      <name>m_AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6d09f742e5c768571d6a240648cfc488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_hasOpacity</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>adda1b2988da4117aefb2d54ff735c13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliLoadGPUType</type>
      <name>m_njliLoadGPUType</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a3ad0ce3f3e483eff600e95737228c218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AbstractFrameBufferObject *</type>
      <name>m_loadGPU_fbo</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>ad46878315683b289618fc02ade373381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::bitset&lt; 16 &gt;</type>
      <name>s_TextureIDReferences</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a6cc6f82863c4a24f7ce7fd987d79621d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static u64</type>
      <name>s_MaxTextureUnits</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a2171d36a9f88b3a13ae5076d4260bd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static u64</type>
      <name>s_MaxTextureSize</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>a4a448748254555524066ca2806a6b66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_material_property.html</anchorfile>
      <anchor>aa1212b6e372a0f45d2c01f3cd203af77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::MaterialPropertyBuilder</name>
    <filename>classnjli_1_1_material_property_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a9a614b1c939742e7cf607609bc203c5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>af7e20ef437aa6cc055d94a2d4ca0f917</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a1826a34f12138d11c777889a47a20fa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>ad525b4ddef84c344f680eae7c3f6d78a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>adf85273c4fad09304a9df9f7e8f3be9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a6965c5e122844746df524bb41aa0dc7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialPropertyBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a7d117421edfceed2888f291142723835</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a8d1b1085258fbf72fef04cc3e7dcfdc0</anchor>
      <arglist>(MaterialPropertyBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialPropertyBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>aa218b51e5135a0aabf2b8993ad6bdb3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MaterialPropertyBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a3efbcba21da4d8a4908809685974b127</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a89e5c5f1f121cd2f91e44a3c757db275</anchor>
      <arglist>(MaterialPropertyBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>ab87af016322723607bcf6c467abd65dc</anchor>
      <arglist>(MaterialPropertyBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a164a98bd7a61c4bfb6ce7444b981bdba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a3f4b376899bfc9219577beef4cdde52d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a6d852e85c5d9534c2f06807d1d452c0a</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>af946f0a4dd30181c0bfc54926473d383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>a99bd4a3a19859b9675b4f83f32ed9510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>MaterialPropertyBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>ad5ddf83cde678e5bb45cc054c48bae35</anchor>
      <arglist>(const MaterialPropertyBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_material_property_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Mbuffer</name>
    <filename>struct_mbuffer.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>struct_mbuffer.html</anchorfile>
      <anchor>a857012deb824b216c19d7e4d15be5561</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n</name>
      <anchorfile>struct_mbuffer.html</anchorfile>
      <anchor>abd195588f24e02b6f5bfb1a39a109380</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>buffsize</name>
      <anchorfile>struct_mbuffer.html</anchorfile>
      <anchor>a48bbc7ce4413bf1cf9f4825f1ce36e41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NJLIGameEngine</name>
    <filename>classnjli_1_1_n_j_l_i_game_engine.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>PlatformID</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_iOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda6cf2daab29241b0e763ff97c8f4f53e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Android</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda6c558271f40073f76d00143d7cb6ff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Emscripten</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda4aea7a4dcf787eccd5eeb27f18a4353f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_MacOSx</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda0957148df4fb1940266bf4153d5cfa48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_tvOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda9e5108023740f93fa7a49845aa0d72dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Linux</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4edaaa85a957f94a226990385d06106eee62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_iOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda6cf2daab29241b0e763ff97c8f4f53e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Android</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda6c558271f40073f76d00143d7cb6ff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Emscripten</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda4aea7a4dcf787eccd5eeb27f18a4353f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_MacOSx</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda0957148df4fb1940266bf4153d5cfa48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_tvOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4eda9e5108023740f93fa7a49845aa0d72dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PlatformID_Linux</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5a2bbb7c337d3918056ba12307f2a4edaaa85a957f94a226990385d06106eee62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isIOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a18bdada0e3ba0fb40de703fe7a958f60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isANDROID</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a2728fbe484c5e56c75525839c144555b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isEMSCRIPTEN</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ac4d956dc87db55cfa0b5bfe0096b976d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMACOSX</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a10a676b87e8a0e467de8e98c595d181c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isTVOS</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a053716ee7a9de6ef968df7756b20a341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>af6225412a3586fdcda3af0cf468a2d4c</anchor>
      <arglist>(const char *deviceName, bool initLua=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resize</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a68f8a09df140f3275e9063fabc52aa4f</anchor>
      <arglist>(int x, int y, int width, int height, int orientation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>width</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a3b27833c0d69e5e4a2dec09335b38673</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>height</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a56ca64c01ac4d79123229af44a8c2228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>orientation</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a6fcc45cad0ceac29634f0f76bd922362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a9b08da977237bdf3b47bc4796c6a62e2</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a0cc3ea87f7451156b3d2b493688bf90a</anchor>
      <arglist>(float step)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a6a82035066c2f958f588df82bbee5d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ac672aa4d352a38dee9a98e64609509db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleFinger</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a30fa9ebe2167c4f69febe5248378b030</anchor>
      <arglist>(int touchDevId, int pointerFingerId, int eventType, float x, float y, float dx, float dy, float pressure)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleFingers</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a136a6550305dec3c346255c55419f691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>mouse</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a73a62c2624ce57bf6ba7493c096c2c21</anchor>
      <arglist>(int button, int eventType, float x, float y, int clicks)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyUp</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>aae0cb673e9330ca776cca5edb369ef8b</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyDown</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a3b56f22140c20e3459824f3239182cf3</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>handleEvent</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>af17d124611303256bff71fffe4dca8df</anchor>
      <arglist>(void *event)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>willResignActive</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ab57113e9ef7c184f12ffb7b8417639ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>didBecomeActive</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a98c166ee40919fbf616f358a8bcb9bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>didEnterBackground</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a500f73154090764efccd084c56c7d0f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>willEnterForeground</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ac0150f9ccf3a8b1e4fea04ac39526187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>willTerminate</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a830dbe46713d362957ac1a0671967b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interrupt</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5e157d71043942716317aaab5fe62914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resumeInterrupt</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a976e9615ffb50e23b57d46d5e3e0958c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyboardShow</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a5ce47bb1bdc5bafdaae6528e100d2316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyboardCancel</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a885ab8ad0939bf6fa51009b5854ef2be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>keyboardReturn</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a360672d3cfecffb69a91462256da9da4</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>receivedMemoryWarning</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>ae2c3d2427e9e19edefd222c692143975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlatformID</type>
      <name>platformID</name>
      <anchorfile>classnjli_1_1_n_j_l_i_game_engine.html</anchorfile>
      <anchor>a84194db2322fdba0ce7942f4fbb4a345</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Node</name>
    <filename>struct_node.html</filename>
    <member kind="variable">
      <type>TValue</type>
      <name>i_val</name>
      <anchorfile>struct_node.html</anchorfile>
      <anchor>a79460c331faee0ef988637e92749e866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TKey</type>
      <name>i_key</name>
      <anchorfile>struct_node.html</anchorfile>
      <anchor>aebc572dbe9e3b392c3231046475c7faa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Node</name>
    <filename>classnjli_1_1_node.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractActionable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a27d0c8349a4c0852fec2dfaa572945ab</anchor>
      <arglist>() const</arglist>
      <docanchor file="classnjli_1_1_steering_behavior_wander" title="Lua example">ex1</docanchor>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2a5df0b699648161d3a9a4180ea70197</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ad7e048703b244f6c31c8c09be8eadb25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8c949ac7cdab8b3251e51162f9a7127d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4cbf1484792e7d582bb2722325ba0ece</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9db07db4b5fb817d5335d3b31531ffed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getColorTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a05480357b853195997e5ef255a6f2e70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColorTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af52fa39a8c2869ddcd48b452d423fc26</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae54076fc2201492cead884c2dc7407b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a86a7e9e1fea1e47a9baad47b6c5caca3</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getOrigin</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3258ee7eeedc10261985f5d5eb4e765d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a16a10ec08e52af2b11258d84a243c0bd</anchor>
      <arglist>(const btVector3 &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4254472727081479bc1df40b9dc9c4f4</anchor>
      <arglist>(const btVector2 &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>btQuaternion</type>
      <name>getRotation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae2bbaba19dc71e3731af5f63be1014ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a81bfccbe8ff15eed2fb694c018910184</anchor>
      <arglist>(const btQuaternion &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getEulerAngles</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a83815891fb443ca57d90572405b2c606</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEulerAngles</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a13770061dcc44d37c1f2a94eb0cdddff</anchor>
      <arglist>(const btVector3 &amp;angles)</arglist>
    </member>
    <member kind="function">
      <type>const btQuaternion &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac0add98eca113cca1ece6bfc42bd2ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a176cf31ddc96051576f3c2357b8c5db4</anchor>
      <arglist>(const btQuaternion &amp;orientation)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getScale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a623cb5452d643d156fdaa2a7a0c2ce43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a765aaabc294a7c30171b86d22fe31a43</anchor>
      <arglist>(const btVector3 &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a82b119a67be08f51cb55e2488abc8eb9</anchor>
      <arglist>(const f32 scale)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getPivot</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa3d0fa27774066836af2b64346641779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivot</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a84a2fde3b93ec048a3ccfa7a993307cf</anchor>
      <arglist>(const btTransform &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9fda14474ce8a4805e4336a1e1c57dba</anchor>
      <arglist>(SteeringBehaviorMachine *sb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4a910c860697e885b2e1d98ea4a71acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SteeringBehaviorMachine *</type>
      <name>getSteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4a6691a03731d68bc8b0c0085f219148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SteeringBehaviorMachine *</type>
      <name>getSteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab12edddc98044af4268387ee63ba66d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac61c06f12dc9129c1c575515343c9a5c</anchor>
      <arglist>(ParticleEmitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae08c22d2d4b832972e97072b4b7ae140</anchor>
      <arglist>(ParticleEmitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllParticleEmitters</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a444e78b0de3fa1072ac008331ec18457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfParticleEmitters</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>afaa6e4db3fe249da19459772f20d9aa9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleEmitters</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a10b57ef7a912c5b743def293a9aafeff</anchor>
      <arglist>(std::vector&lt; ParticleEmitter *&gt; &amp;particleEmitters) const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getParticleEmitterIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a44cf22fb6896a874bfa7eb4eb3b2122e</anchor>
      <arglist>(ParticleEmitter *object) const</arglist>
    </member>
    <member kind="function">
      <type>ParticleEmitter *</type>
      <name>getParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a863bf04366e0aeb8ac67fb062b7f9296</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const ParticleEmitter *</type>
      <name>getParticleEmitter</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5c98aa47fcea68502023ac465951d8cf</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a53df21090a93628066b4fd351317a36b</anchor>
      <arglist>(PhysicsBody *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab7fb4316393dd9eaf00ac7caf65ef339</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsBody *</type>
      <name>getPhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>addb4eaa36fd97ae32b53b421c83408a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsBody *</type>
      <name>getPhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>adbe8973bc62e3f5ed9c02f561bebac1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac6e2774c5d66ba8ee450f810a172138d</anchor>
      <arglist>(Light *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a08a26531ce5304da2b57592c8c2ba5e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Light *</type>
      <name>getLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1c75e5abee6e32cb4448dc8e8df8ee7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Light *</type>
      <name>getLight</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1eb4c4b55942621e4a02bf72f964c871</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a24cd0259329061a4bfcabd5d1dff6071</anchor>
      <arglist>(Camera *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a48c8ac87c02260fe2cc64db3bb7f208b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>getCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a727867aa2b4c8524cb5f220066848f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Camera *</type>
      <name>getCamera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a187db29f3099dddc9044b7f0c3f4590a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6a280d81415c65eb8df641c470dc94f0</anchor>
      <arglist>(Geometry *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aecc02091c34df61214802b8da38031a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>getGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af42abaf74067a2bd1c507b8a1fc28796</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Geometry *</type>
      <name>getGeometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a973cb392c460b8199aaa59ed4ee63c05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a825b1d962c1200848a069748356079cb</anchor>
      <arglist>(PhysicsField *body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a569a6ccc606bcc819c0f6a0be830a23d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsField *</type>
      <name>getPhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>adc880f00ca477aa26851b783ebd4dfe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsField *</type>
      <name>getPhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab7e8423c99ad7ca2ee69e04c9b0b8608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a60e79f386f3d1e3843050a843b4c8a82</anchor>
      <arglist>(Sound *sound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac0a3bb1dd9fb0ccd2f53ff426d4f9309</anchor>
      <arglist>(Sound *sound)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllSounds</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8b1a04170a07e378a7972dcc8f7671ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSounds</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa696bbf821649390f3104ccbb7e82e66</anchor>
      <arglist>(std::vector&lt; Sound *&gt; &amp;sounds) const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getSoundIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab59f6b844d0ee80eb65e3ea6a9b0ceee</anchor>
      <arglist>(Sound *object) const</arglist>
    </member>
    <member kind="function">
      <type>Sound *</type>
      <name>getSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab286bddc61b0c95e5fc66f57862134af</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const Sound *</type>
      <name>getSound</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4d6aa88b18a3bc0a4c7f912a36933ca4</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6ce7d73fab5d4d42fe3be0edb00898f0</anchor>
      <arglist>(f32 opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa46eb060cb1055d933b0b0908b8c416d</anchor>
      <arglist>(const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>afac33e777f9b0c7ad816e646258750af</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2ff7b1e0ec98a5ca99fb2633a7a936aa</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getOpacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ad399157554c53eaee612b8bce47bdf26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasOpacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aefe134d367769f34fff2c6eebbba519d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acf8e0b415e5b6e1c753ec9f0de5ec61d</anchor>
      <arglist>(Camera *camera=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a53575c84555fe0884f9c8a1db69415f5</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8e2d933072775e46519812b890f44b26</anchor>
      <arglist>(Camera *camera) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderCategory</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a62df3bc99a3cb060be7532b6c265eb4b</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>NodeStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0e952bbd0ad0bbbe33f42639b9af844f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NodeStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae42a983ef4f2f4037aa94bc9a5b8a59b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab3c28554c6727257099723089739f1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTouched</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a67b6e23d47cf7be1b80f2c137a66081c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableTouched</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3a62a2eed74823ed7e420beaa16f8c6f</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1665e8075c188baf897682470cd84103</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af9fb9a65a5f91bb4528bc71d5afb5beb</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, btAlignedObjectArray&lt; PhysicsRayContact *&gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a08ae871c8da4c86989ca40a76b08e138</anchor>
      <arglist>(const btVector2 &amp;screenPosition, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a51b52e3df8267ce23555cd550b359ff1</anchor>
      <arglist>(const btVector2 &amp;screenPosition, btAlignedObjectArray&lt; PhysicsRayContact *&gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5674da852b950cc581fd22bc0c309b5f</anchor>
      <arglist>(Action *action, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>runAction</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4a5ab73e783b102ffa0c5af0d118e207</anchor>
      <arglist>(Action *action, const char *key, bool callCompletionFunction=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>removeAction</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae469bbf7d36fd0ea3b78ff9ee8cc6dee</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeAllActions</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ad497289960419c904082516aab4ab551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ace3971fd38146ecf3b501b5a71246b55</anchor>
      <arglist>(btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a65ab991b8728c265d6d68d870450c1f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a30973b8e0601decafa4a1b0fdc9eef50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4151e924a1b2b558976c062345d7edd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>adb9348e3765aacbabc94297e39a0ce16</anchor>
      <arglist>(Node *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac2ea52a338582bd41fef29230107049a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeFromParentNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a100119ca086dab1c33416fad1d885e11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>findChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af58461a0154d4e1281ea75ee5d553164</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>findChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>adee1d24767f0aae877ee2275b8406e99</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2c324ab68a85fda11dd1c9e324de9f5d</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>afb42f32385d6413ffca69072bf3381a9</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a941c51cab768f4f3faf80bcb590602e2</anchor>
      <arglist>(std::vector&lt; Node *&gt; &amp;children) const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getChildNodeIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6c77a7d8e6c4bc04c990d9d8db12cf4d</anchor>
      <arglist>(Node *object) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ad6294680a8854dce1a887abd2b692b1d</anchor>
      <arglist>(Node *object) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a41ff168b602fb88d4d79811a18dad3d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a616d8f89896918a2bc402f3c0d06aecd</anchor>
      <arglist>(Node *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae82a40147b291452e191899dbad90a42</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4901fc620d589b160ac7017ed671a1e1</anchor>
      <arglist>(Node *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac78a32efc2fd1e3b57a5cd036a26350c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>numberOfChildrenNodes</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2287b13cde2105148b363b7fe3d68696</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChildNode</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9cfbf971553e8c11548701deaa28a4a5</anchor>
      <arglist>(Node *oldChild, Node *newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentScene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac88325ecd1e14a76fc00b3b55bc3fca8</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a84cb417cae539076d9ee123c8d59a7bf</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae9cb5171f3a98dc90911758e9d5baec4</anchor>
      <arglist>(Node **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a955a287409afef586899ff05e4340fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a55a31dd7ce89a76fe6620b3deb984bbb</anchor>
      <arglist>(const NodeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acb3d3885f7798ef44a1636a290acae51</anchor>
      <arglist>(const Node &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Node *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab05be8c908fdd34563021ac6e13e7bcb</anchor>
      <arglist>(const Node &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1dac5d53dc1ceea187d3f616e8435da7</anchor>
      <arglist>(Node *object, bool destroyChildrenNodes=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5426eabdd117e6a4884baa963c5f402a</anchor>
      <arglist>(Node &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab11572494b1cda9c05475abad2581082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a91aae9499658e92fc326ea9f9e1678f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5d925e98c91ec97042a0c91e9602edff</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a97a94f2f5f107c86d284238cc95602bf</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8b08e4f3293dea50b2cf7ea54d217fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Node</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a256fc357da68d049b40baa98b00dfcec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a489763eb75c752e2d650b1ae81b08fbc</anchor>
      <arglist>(const Node &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateActions</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aafd87adc70ed57be9d7f045a1be3412c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>canDelete</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a23f6a6a0cf8fd344d0687f4e35de7e98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3eb1db3aa2681e4acaf3e9e95fd01e69</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyPhysicsBodyTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>affbb98fea9966349be743de38256e355</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setGeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab3dd16a4322896c94bc1a398e3466163</anchor>
      <arglist>(s64 index)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getGeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4e29b0c0c0f159296453314e306f4712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearGeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0a07c5e7c436ed50072c78f4e7ed6d62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scene *</type>
      <name>getCurrentScene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5cf39de8bc22ee961717ceee0a2c40c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Scene *</type>
      <name>getCurrentScene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>abd42c66830a9afad1acb368c98c5ae50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCurrentScene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5f1c647c5bd283ac008106863c06406b</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCurrentScene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7d33f50c3f40b5baf0d1a0028550a9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>updateActions</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a4d3f767e870dca336b5daabb1abc00ea</anchor>
      <arglist>(void *_ptr)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PhysicsConstraint * &gt;</type>
      <name>m_PhysicsConstraintList</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a90d39973dc81175e6adca0d979c96e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; ParticleEmitter * &gt;</type>
      <name>m_ParticleEmitterList</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a11d81ddc7960f5357631c4ab873eac09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Sound * &gt;</type>
      <name>m_SoundList</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a968bedfe579efae3b70fd75400ba8d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsBody *</type>
      <name>m_PhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acb3dd8658ad0f052d0afff42c5257367</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Light *</type>
      <name>m_Light</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a3bd3dfc6fc7857a16b591198fc9de860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_Camera</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a943cf43bef4f74a93f967842f9e8a348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Geometry *</type>
      <name>m_Geometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6f79b7a2b199147e83dfc3460c4b7481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsField *</type>
      <name>m_PhysicsField</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af9deeb8e605b08425cf8076a51b4936a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Opacity</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a367e50aad4d7657d62f0ec39115a70e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_RenderCategory</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab01d7fb7fdf191957e526d32ddf7a6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeStateMachine *</type>
      <name>m_NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab74c5f3135cff558ae020a1bcc0339fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_Children</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0cc4f40e2cdc109e1dddb57a2282f4c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_pParent</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab91a76d7fdcb69284175eaf51ae5694b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>size_t</type>
      <name>m_GeometryIndex</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ae1aaf55ff1ea611b3d4d1adf0fcbf1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isTouchedByRay</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac89e94627bb4bb5e418f15f36f936245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_Transform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a8ec7076cfda5578b99c9f582a0beb4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_ColorTransform</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a55837964c343cdfac328f9c8c779dbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btQuaternion *</type>
      <name>m_Orientation</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a443a5fd1ec25ed12ac6bd0c219a70201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Scale</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ab0b2ca986d3881d4ccd5404097b6c0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_Pivot</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa2f2d5836c6cf6c99937e50bf2603c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SteeringBehaviorMachine *</type>
      <name>m_SteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6b21e06dc194ce9478cb7d48652b6f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scene *</type>
      <name>m_CurrentScene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7e8e57ab902ac7349b1bbcc4abaf4d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ac1e5ab02d2359e991783010c562791e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a06afcd7f1b1822af8e15e045e77eed2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a5602338bf4d8e0e6baa58d3daa8dc90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a726223aef7972f289c4a01ccfd23d5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a0117dac2d3ca1ac4ebe089ac8c258560</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a2ccf10571ac5c97189a4c7d1fe3831ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a684f5ece6d7d44c2b9f689e76458a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a1d2185bf07a23cc48cd8f9d4271f3e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>af32c447e4cf588410ecc1a6106157f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>a6b9fa11eb22d1cb30e2d4fc2247e9afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aa59c958a66870f0d251ec0dd477d2eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>SceneRenderer</name>
      <anchorfile>classnjli_1_1_node.html</anchorfile>
      <anchor>aae6efa51fde36cf2c0759009ba7b19c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeBuilder</name>
    <filename>classnjli_1_1_node_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a3474df147e9d5d2a10ea7c89be9e1714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>abe6fbd5bd379bc9066cedc1bdeb926ad</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a8f64ec36093df1da2c75187f5ec40460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ae22fb55f9cb25b7cd94fce32d5dc6004</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a13d5f0892f290de9ad73ac608c484a8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a8ed2bf9afc4adbeee5dc221056a009e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a11ab516128b4bd4ac95a2cae46d3b871</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a1e3ef77bb9b523dc0fdba32be7cdfd5c</anchor>
      <arglist>(NodeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ac22ec084ecc2a6e4fed2ded2677c6092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>aeb94f3016709aa566a40ee440d33faff</anchor>
      <arglist>(const NodeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ae48cb203c697e148be8ae96f6d4fa58e</anchor>
      <arglist>(NodeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a2237a6ded1cb3e16280bb614038da1f4</anchor>
      <arglist>(NodeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ae9741693ab2cb281c617ae99401e4eb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeBuilder</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>ab75203c2f9b4fd4627f09ae95850ad44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeBuilder</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a542b69de918f40fbab7d6033ed8bccf7</anchor>
      <arglist>(const NodeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a6f4f999e27919f671c9c68c6dd57f46f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeBuilder</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a94ce9eced35d6f8009a9c46c515a970e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>a4ce9324fccffdfad8eb10545bcce1cdf</anchor>
      <arglist>(const NodeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeState</name>
    <filename>classnjli_1_1_node_state.html</filename>
    <base>AbstractState&lt; Node &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>afaf6f0ecbc077af2003c6fba3eb81eff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a6383632da2585bd7da2c12216df1f18a</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>aac4612e5bc3e6a5c4a361e593157723c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a58607b67974806152c3483b40786b2de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a9565c2a4a62f9ee0093da373fcbd716a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ae2e27ccb73406c40bd502c5684bf62b0</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a627419875be255906b52e08d63fe61a3</anchor>
      <arglist>(Node *node, f32 timestep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>adbc43108aab891099b2cd9080f97a543</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>aa05ae9e51e4a9c5061dbf6815e1a6b27</anchor>
      <arglist>(Node *node, const Telegram &amp;telegram) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a46f4eb5ad4b0cb11d454d2e17e88f07c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a6f2ce1a2b1a3ad475cd4b8b23321533e</anchor>
      <arglist>(NodeState **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a00caefaec4d9b4a16c76d6020882f720</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ab1379ea6f6b5fb0d7c5a38fbeaca7bc5</anchor>
      <arglist>(const NodeStateBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a803f15ad59bfb455e70e159a9ab7912d</anchor>
      <arglist>(const NodeState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeState *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>abcdb692c2ef398c1f3d946a60105d549</anchor>
      <arglist>(const NodeState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a0de1bbd47e3cdbb87fcb81ecae81c2c7</anchor>
      <arglist>(NodeState *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a5f4bfdcec42cd5a9baab7754d0ef09c8</anchor>
      <arglist>(NodeState &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ad73f8c965c1ad03441d1c1d07d6442b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a1ad92560b4057809dcf0a658d576cd6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a1cd1d39f5b5e14e5466d4bcb75adc568</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a102adf95d05a404dc6b564ea7a18c723</anchor>
      <arglist>(const NodeState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a30ad1be81dbbe9614a951859c319447b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeState</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>ae336cf62e8e11ed6016fd1737a4604a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>a680aec8f08f28157238c1f2d178e99b3</anchor>
      <arglist>(const NodeState &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeStateBuilder</name>
    <filename>classnjli_1_1_node_state_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ab69b90abd6b2c1d4b75e0b84c66074b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a92d4e7b8cf9b1c6e7371879ed636d7ec</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a13715317d483013399224e1053df0442</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a3121e4e027fa11034e4eab047eff63d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a225d2ae7bd1e60f041d15ae5bd4492e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a9eefa7f0c864fc1064ba071a730f4e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a3e2258c717172451b12ccfc4d25c1af7</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a6f19074faac45e8363007f4475a9742c</anchor>
      <arglist>(NodeStateBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a928c7c469900b4b2246bbd8fcd0d5762</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a5f79a27baf7673246dfa24f7638f80a3</anchor>
      <arglist>(const NodeStateBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a5439375062a47f970758dc92d56cf1c2</anchor>
      <arglist>(NodeStateBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ab7b368f9b1f86b4dd745686c1ac850e7</anchor>
      <arglist>(NodeStateBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>aaa3c3aab88316d8bc21c28de0c3e4ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a7e43b6eebf0448e71cae5a4112d15082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>aa5bb9e667cc9f77e4c947ae1bede3c18</anchor>
      <arglist>(const NodeStateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>ad972d6a38875b7ad117fdd38d38c80d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a1e49ab9edf8416fc7c94dd020fbb6f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeStateBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>a2b7f47d5c47ffc145aa7cb924f322298</anchor>
      <arglist>(const NodeStateBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeStateMachine</name>
    <filename>classnjli_1_1_node_state_machine.html</filename>
    <base>AbstractStateMachine&lt; Node &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a623987a0f43198b70aa9373d758a5afe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a3e6ef26c17f22a3f7c4e03fc651f82ad</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a2b3063546fe0cadb8fa59006b9f68913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a5d31328eae2661bf79eeddac3f614dbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ac645b2b1a8f2b937babd496031809ab7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ad5c7d8fcb8a5e273ca9e6d847bb53f01</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a79dabd3b695231fa3700098199574caa</anchor>
      <arglist>(NodeStateMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ad5595d3273e958005648a848bf8d8c9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a730ed058da4c921083b93eb7b90a62c4</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a5fd34376d9ddab87af68c8e02b43e540</anchor>
      <arglist>(const NodeStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a233206f0db79b5aa14486b7aa8167578</anchor>
      <arglist>(const NodeStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ad8f04819d6afdbea47415ab4004fde0d</anchor>
      <arglist>(NodeStateMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a2fb819c35b3036d119fe7ef4939ec9f1</anchor>
      <arglist>(NodeStateMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a79ac2de5c4c13157efc5c012e299bbc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a4b3f0fdd16f333096457a4c149e05a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a189477bb794538aa3c6fb1acd30cb643</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>ae70ef8a7140aeebc2e9d6a0ac5c5176f</anchor>
      <arglist>(const NodeStateMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a42407b76ce190e23fe72d76fda485e57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeStateMachine</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a05746b8ba3e9bf38a0f955a8703b4e0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>a8471dc3a24a5ef783e95243472e57c44</anchor>
      <arglist>(const NodeStateMachine &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::NodeStateMachineBuilder</name>
    <filename>classnjli_1_1_node_state_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>aec96a7644bd25ab9d9541f292555a8d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a4a32ceed262f528512eaab3d7e4571ba</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a78362b9cab6be01d3161564f83c09b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ad1c1928bac8a1408c424dd5baf372a36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>aa7f35477df5acf3543d1abcbff213d18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ab653c07135669393c78d7989392536c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a87e85ebebdf78aa50dcc33397ee3274a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a71a0104d4850e419f9b06f3e6645475b</anchor>
      <arglist>(NodeStateMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>aea0b3e3e1d48675456383359f82ff9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodeStateMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ab5d5c3edf905469d7d5b5388bb06a27d</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>aee8753fc57fd57568e1c5aff1e638fac</anchor>
      <arglist>(NodeStateMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a3f31e9bbd1877b320c004d7d2dddcc93</anchor>
      <arglist>(NodeStateMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a167eb52c0f2a1816f9afaf9544e5f2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a90fbd3f716fa6adfceeb1e71adf75026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a918bae0356a70a1c815ee00f7c4589a2</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>a87fab3b6587a3aa00408b655b65d64da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>afa608c2c341b0bb1a84cdd11b6485e7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodeStateMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>ab9a6bcd9224410910230f1bb8568d8fe</anchor>
      <arglist>(const NodeStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_node_state_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ogg_file</name>
    <filename>structogg__file.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>curPtr</name>
      <anchorfile>structogg__file.html</anchorfile>
      <anchor>a1d79fed1cd34a17c415ea361795dcf6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>filePtr</name>
      <anchorfile>structogg__file.html</anchorfile>
      <anchor>a6fc2ba03266798a26d28b944d9455aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>fileSize</name>
      <anchorfile>structogg__file.html</anchorfile>
      <anchor>a96db2da70b0fc374045245e7c77077ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::ParticleEmitter::Particle</name>
    <filename>structnjli_1_1_particle_emitter_1_1_particle.html</filename>
    <member kind="function">
      <type></type>
      <name>Particle</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a8c71e163c93619d9dcfdc4314147c3df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Particle</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>ab6cd7e2320832f8eae9de75bc1d9b05e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>btVector3 *</type>
      <name>position</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>ade20643990ed017988bb56da41ac9b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3 *</type>
      <name>direction</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a7341ccc03a0fc0909657a8baafd75ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3 *</type>
      <name>startPos</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>ac5f2a37aa0bd9f7773f1cb9d80775cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4 *</type>
      <name>color</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a8e83d0d110ba59784a450572edbe24e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4 *</type>
      <name>deltaColor</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a015a874fc4ee8a2dd5280acd33f8aacf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>rotation</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a89050138b57e930631d32587dcb00062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>rotationDelta</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>afe5bb0f5b6aab6c4373c4f2ec27e329f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radialAcceleration</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>aa79c47a3e1e8a52adfce87a78b69cd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>tangentialAcceleration</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a73fa55041d6053507c905776f4ef8992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radius</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a7e9ed4b209202e2cc5e9cb253bb95803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>radiusDelta</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a4bc83c34b133aeb2861b865ec096a0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>angle</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>acf3f091271c341e4dbbe65c51caa3e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>degreesPerSecond</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>adad3c449c06bc60ac72721d008274228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>particleSize</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a3acb5624501e87e35969f30d01b83073</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>particleSizeDelta</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a2220049218ea0743249374e7024d2205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>timeToLive</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>aa099f2fa9eaa5aa5f63e4b8110bd34f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>node</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a1d239187f6bfa8e36db1e387c79feb47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>used</name>
      <anchorfile>structnjli_1_1_particle_emitter_1_1_particle.html</anchorfile>
      <anchor>a223d0b5f5ad07c8dede4f7f354ddd9c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ParticleEmitter</name>
    <filename>classnjli_1_1_particle_emitter.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="struct">njli::ParticleEmitter::Particle</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a40f59eab6df7068b7f8492b3eab2ad8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a041d9903cc7d37f572a3cf78c3d5120b</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8af19928b42197049a6495eeae5efd67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac619dadb63ed938e13c11e3ee8b9ae6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af8afe71631de5be2f6cdd39688f12581</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aed77fee123512b6c75b019defbdcaacd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a45a3c77c2299042082d3dfd0d69a8bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa4d2915815495c85fb349da5e33dd1a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseFileData</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad64b84036b876f4d16a9f431d5644d90</anchor>
      <arglist>(const char *source, const f32 z=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0c4d0379f8b2827b74a5f62cb8755a6b</anchor>
      <arglist>(Node *particlesRootNode, Geometry *geometry, PhysicsBody *body=NULL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1f1b6f8ad353f240fc89e9d4febbcdae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3eee4d6a09c2516ee09fe07529c258e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1bb095000e8c08a2e09598e50b85e0cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7376b63782edf2010d75abf77ef087ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getSourcePosition</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae569369da180a03372f3f0508386ca04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac709de0745b9ccf90a2d681d9e49c1a3</anchor>
      <arglist>(const btVector3 &amp;scale)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a06720872c8a4b3fd17d8771887ed30b3</anchor>
      <arglist>(const f32 scale)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getSourcePositionVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7706a548b6fea88ce6ac6426066725fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourcePositionVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a26ca2463d9cc86ffcab132a54e86a930</anchor>
      <arglist>(const btVector3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getAngle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa6f8f210dd5e1f2678a7e68038c6fbb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3f3072237c7afe532c31abb83db0cb81</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getAngleVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a02d174f69f999b228e2b53e0ccf0e660</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a2b3137d3f6b7008bec04a21dbda09d11</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4f0ebb77d698250e0c939e7fc5f17661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af58d78f577c600e69bba07e11f8d07ff</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getSpeedVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a848e021fa1cae817cb1d1270453e0799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8a15a3aff8d7f264512e364e3387bc22</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRadialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4920e2c1a95891e561f8cc6201ca2231</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4199bf8b709d0f6bce526afabb2a0803</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getTangentialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab03a9c460bed389cd99131a0700db5af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTangentialAccel</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0a95851c167af70c9b696d4e2ff34df2</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRadialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6265d5e2fced029bb49323238dbbfd80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a36a8d257bb331e40001575edda7a1564</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getTangentialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5f194996243198be315773fd478acc32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTangentialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a350b5d3c77cacf23fa7297414d215d0e</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a35f6b8d1fd24e55ad727a647a711b6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a88b3e1c1cac582fc31076c1a13663db8</anchor>
      <arglist>(const btVector3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getParticleLifespan</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6218eed2c61aa532844d1dda807a8c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleLifespan</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae66b02e5fb5fa80f2e314a6013e7059d</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getParticleLifespanVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a070156ef14f64708eaffc08ee51393ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleLifespanVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab925d397a4ad73aa3177dda3ccf2174f</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getStartColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4e6efe5e81e086d81a3d6b04e0239685</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3705b6113fafe520361e0bce816ce11a</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getStartColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a84f58ade0c02c1715cd5f93466f4d149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa99b66eb5a2744af773ef016f86e8ad9</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFinishColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a55307cfc00ce9545693c28c036182d5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aaadaa67989345435f0f91135bd20659f</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getFinishColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3418034b822a39c71cf4e315117bcea5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a85cd1f4e3a66a351a1fd0918667cedf7</anchor>
      <arglist>(const btVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getStartParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abf891249b166ddbe244d0d0673e0b169</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4ff68f5c5491dc8409ae91d452f423fe</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getStartParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a701918fb2f09961be26f707007aac7dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acab2d66b1b889b9c3159207bb6d17a9d</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getFinishParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9b3fe805e7e88d64a61df2140e13867d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abc00f8ad722fcb0e694db302e6942ec6</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getFinishParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6e13b9c82b4ee0a9f16aee08b27d2c98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad882ca8fc381b8e06adfe34ee0b41515</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const u32 &amp;</type>
      <name>getMaxParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a655c16bec98188b693b70390ed62fc07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5029ab3ba29b3f6e52059c12ca40ebdf</anchor>
      <arglist>(const u32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getDuration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af2fc6bc2e179185d7f481fd82646f746</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDuration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8bfdce6e6589f4bc5974c7a8339c3e41</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationStart</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac9af97a8b1f2d5a87ebac058ec70e835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationStart</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae8be818dc4b9f989420d38d00d5c53ba</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationStartVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afbf89fcc54d6a7e387157373b44c256e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationStartVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a06b9db945d2562c5878574cd594e79f8</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationEnd</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afd6af26a2f2fc62ac9ec755bc8fb3e31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationEnd</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a65f0ce3c56d6dab81959a00f38c7a93f</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotationEndVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab961f9c25254a11ed565598ea2855b6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotationEndVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7aa82ae5e07ac56cce53bdc07334fdb7</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMaxRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ace47cbeba0be70a1840a4732a3a06967</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af5c7ab6d53dfb95e9d40ebfa0200a5a5</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMaxRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a732f82ef7fe93be9dda217530ea6406a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acaebc8c8b81d8cf62ad30463c68f4a8c</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMinRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a02d57b64ad821c30fc608fef4bfcb446</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af2524c76c57fa8b5f6246199ad8fa927</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getMinRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a14a064fb84c1f4fd9b821f1b34bf58ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3d582b35d0c86cf39c81b1b0db876fc9</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotatePerSecond</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a548433364fd93ab4225af78aee61930f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotatePerSecond</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ada1ff06356979eb4c7f51ec6e6e00c35</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const f32 &amp;</type>
      <name>getRotatePerSecondVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7c17bfaf96fc5981f99d9eb6f7781de2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotatePerSecondVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a92f25b187a1c76822558cd65a8cf27b4</anchor>
      <arglist>(const f32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTextureFilename</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a7c10baa951db09987e3282248d27de96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6449de8d6806afbcd8f06c9810bd8e1c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad802fa0111238cb87cd78cdb7242793d</anchor>
      <arglist>(ParticleEmitter **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a08d13d496fe59ef6546eac4e56b3d45f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3c0e274cedf2f51c2bcd47a77f03bd0f</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae03b17179ffa67d76bbdde0fab1981ba</anchor>
      <arglist>(const ParticleEmitter &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitter *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa54cb621ed2c6172df40158b0f504e9e</anchor>
      <arglist>(const ParticleEmitter &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0c36e01f2a6c172eefafbaca5f328a5f</anchor>
      <arglist>(ParticleEmitter *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afe4f5827da78d6235c2ec2bca380a0e0</anchor>
      <arglist>(ParticleEmitter &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8d2f4b745a5f1529e87a15eebb5f9487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a76afac4a484ded180177002f6e91144a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa92c6745c9063ae9598fe22bf3aeea4f</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abd233b1c624f6337ef6f58a090aa2a25</anchor>
      <arglist>(const ParticleEmitter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a47324e105e9271076815f77f86290534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleEmitter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a084dd0a9227b5a0e8df4f6d8a83b20cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParticleEmitter &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a53d9eff68b586bb1cfcf45ebf33712e9</anchor>
      <arglist>(const ParticleEmitter &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a725f9fc883364849ab9d69ded574328f</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addParticle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9d8b00c1c98fcf2ece111e7b4f432d60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRenderCategory</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a91475183e7ad0eeb9b5a409f1d8103a2</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="enumeration" protection="private">
      <type></type>
      <name>kParticleTypes</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>kParticleTypeGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097a9f4b6e16f6f9761111705e45bf2f7ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>kParticleTypeRadial</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097abd1df11f6454842ff49cb74f706f5306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>kParticleTypeGravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097a9f4b6e16f6f9761111705e45bf2f7ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="private">
      <name>kParticleTypeRadial</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5c7255dcebae161993253a14c1c4e097abd1df11f6454842ff49cb74f706f5306</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Particle *</type>
      <name>findUnusedParticle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>afb4769ebda101a59874157382f83d8b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>emitterType</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad5e5baf0ac026383a9867b3363cc2739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>sourcePositionVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3bdafb8ef4016ae934405c9c4c8bcfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>speed</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae9e09600c828636113e5d61eaa75b4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>speedVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad1bf01d3cca0b18cd035c128e63847f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>particleLifespan</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6b1eecd9579c8c6c3cbe2385e184bbc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>angle</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa727070cd45bb3c6f3452e54b131d48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>angleVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9fd84a1995712fafed4a6620a34ce597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>gravity</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0b93b2b2a3066c4796a3dd17a7003bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>radialAcceleration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a24cf0fb59a04493a9d2207eefa0e5fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>tangentialAcceleration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0f3d3256f2a7eb69dc3aa1733b17424b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>startColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a632b7b08db08c63e8434d706a81785e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>particleLifespanVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a4901804fbe7510c678d30ef646048323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>radialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad977f4d9241aa0b02b121707f84ae901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>tangentialAccelVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3f6f2c2e3c53acfc4f45aebd141d15f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>startColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa4824157a7f4f067d6e51a6a27201220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>finishColor</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad404a98c9ababcc2f36fb91333009a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>finishColorVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa8a3157a500764aed98e3e7c56e4ff91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u32</type>
      <name>maxParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad9d09c7b1715a7a8734a5e8076f94708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>startParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a221276a57bb815272db890f20649b712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>finishParticleSize</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>adc4727b444a16b394214ba40d6fa6f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>startParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab57ce49a97c200b47648915c0a60566e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>finishParticleSizeVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a8a115e1ca5818f5e7f0d0d242aa150fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>duration</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad85a65088f6700a89b69e0fc6e8c73f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>blendFuncSource</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af2a3ec3b978f8e4022362e8889add41d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>blendFuncDestination</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab16e4d90539bb8eaabf0aed6282dfa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a290eaaad894a181afc5220f95a5fb9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>maxRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a9e5c16d986e77e3521c907be5694c2a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minRadius</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab69fe415021a783939e0cededa11ed07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>minRadiusVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>af34f670d96a6ae168825832d43a95a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotatePerSecond</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a55689668c018e913be10568e27f4eb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationStart</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0e267e333e22937f79569c99090760d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationStartVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a781c4dda4a9d5898f721290de5b7f6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationEnd</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab79f0e60f1b15054432ce3ef93d1f000</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotationEndVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0b1e391fbe3b8a12379096e3055ac2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>rotatePerSecondVariance</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a3dee0bb7b8e995da5aa84638dfa95f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>textureFilename</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>abcf96d8ca5dff9419dc52a4641e485e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>emissionRate</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aa0e025068c468db0c7ab07aeeefc9339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>emitCounter</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ae3e31b529fa8649e94b6a88a5b869598</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>particleCount</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ad183b3502dc1030b90a251ed6c1e68c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>elapsedTime</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1ff6d5612c496bfbaadeb8ee443936c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>active</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a905024b9c36077de686cdf193729821e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>particleIndex</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a85626d66e4f909bb841b80d0c5ba7a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node **</type>
      <name>m_Nodes</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a1e7b14808dedeb9a8729c7b841a7f8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Particle *</type>
      <name>m_ParticleArray</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a46aac8923bcce6d1c12476f219578ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_particlesRootNode</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ab42b939953c9056096190d640bf393a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Geometry *</type>
      <name>m_geometry</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>ac2d3c693bbd8ea55439070800b89b215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsBody *</type>
      <name>m_body</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a5cde7769e5298dd82098e0bd83d89808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Particle * &gt;</type>
      <name>m_ActiveParticles</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a0fcf8fb984e5c2af28afd8f539e2ba5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_Scale</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>aec08a338a0ff997d54a591dcf20e5db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_particle_emitter.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ParticleEmitterBuilder</name>
    <filename>classnjli_1_1_particle_emitter_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a6e0c255370b2550ae2c3a49ca0a8c942</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a1e39254273d34724cabbae7a118ad9a4</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>aa38b8a6e823164153ee551be4349a1b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>abb18fe669921fb43309d7bd8e2c52374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a37c7ee24ecce61ba8d9cd71200339722</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>acf0372214c34e4034d8d3c365dc60896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitterBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a80b3c1b4e4f7ffb338f58ca24bdad33c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>ac8289944f7f62b9e94e9952a1c985691</anchor>
      <arglist>(ParticleEmitterBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitterBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a9f350de3bd6d17484cbba9e1566ab04d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParticleEmitterBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>aa233db2125a2dd99907dc35b56cda000</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>ad78bd0dfc56c6f70f76139887f4f2e4e</anchor>
      <arglist>(ParticleEmitterBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a16d593b236422fd2f3ba87555d03db4e</anchor>
      <arglist>(ParticleEmitterBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a82aaac8c009b5310435c014aa26a0afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a5cd2dd72ac6d8e3a1cbe305e30c6a76a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a74774e50507001d37a9cfbd9c95fe23f</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a4c80a1c4a4b476508a5ed08ccb066cf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>af91a252a5c3182ecb94be316d422b744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ParticleEmitterBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>a5185f10888f76abc77fecbca032dcd7a</anchor>
      <arglist>(const ParticleEmitterBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_particle_emitter_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBody</name>
    <filename>classnjli_1_1_physics_body.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function">
      <type></type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad68e3bd30ca09693f5b03855d020923b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a58cbc549412fc623f35276d2f18b8785</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae72cb51b910158466d481481e1042a2e</anchor>
      <arglist>(const PhysicsBody &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aecae8b7ddd0550b4f685326bf2a723da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a181de210c6f8af7a7ec4ccbc5198e969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsBody &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a4259c9604cec6377e90bbf71b15778a3</anchor>
      <arglist>(const PhysicsBody &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a21bdbc459532f004dc4cd0e9c99a4765</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a3c40378e7f3033557ec6adf9428b6a9d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9ba235d39a1b994f22a13edeff862ba3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1338648bed55e4ca2d3c50d953fd60c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0c12067445dfd7893e37052ae90a9173</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCollide</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5e3c626da8fdf32375e0f16f6187934d</anchor>
      <arglist>(PhysicsBody *body, const btManifoldPoint &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleCollisionNear</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae317118b0cad6699ce9d7c1aa27db7fa</anchor>
      <arglist>(PhysicsBody *body, const btDispatcherInfo &amp;dispatchInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5a4d5f7e9f4c39180f157f42be422358</anchor>
      <arglist>(PhysicsShape *shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5ecb49baeaa8c38937ee5fc566702148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsShape *</type>
      <name>getPhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a3a502c491f089c573083b9958045924a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsShape *</type>
      <name>getPhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa03d33a7cb2e4da061f23265c250808c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a570891a03ea4f8243ccec9202b3dc965</anchor>
      <arglist>(const btTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae8501b09e0eda9f0f82069c537f16663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa274a01209a062b130d675bec9aef6ed</anchor>
      <arglist>(f32 friction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5140f2a2f0df419db4acfe85aa7ffc1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9361f24aea1decf35d872e7509d4e9dc</anchor>
      <arglist>(f32 friction)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getAngularFriction</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aacb7f2a5e518977ee8db878286b86884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRestitution</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9741d811656fcd2865d688627ee2ea8b</anchor>
      <arglist>(f32 restitution)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getRestitution</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1b125030c9a2abf3c450ef4e1dc492c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPhysicsType</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae9b3b3115dbc70f21b5f5fb8c66aa18c</anchor>
      <arglist>(njliPhysicsType type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual njliPhysicsType</type>
      <name>getPhysicsType</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aaed92388b5924746fbd38b87d3bc66b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionGroup</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aad9390d215723749aabf132dac31d455</anchor>
      <arglist>(njliBitCategories categoryBitMask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual njliBitCategories</type>
      <name>getCollisionGroup</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a58fdc56103d9aa37f477d7a09d5a91ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a15550580fd04daffff4a9f777259fc4a</anchor>
      <arglist>(njliBitCategories categoryBitMask)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual njliBitCategories</type>
      <name>getCollisionMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a650d1076cacf8ba50ddbb19691c01324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStaticPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a4c323ff21d529c581207eca237d93fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setKinematicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ab7747d6463f3bc09b0834f51b3e0d3ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDynamicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a507e920a3e95896173545a631325f52a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableContactResponse</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a445e356d3e6757c2d629e307c3579e01</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableHandleCollideCallback</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a52eca1531519fbd9a3612e36fd797208</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStaticPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9371ebdae5ef5e8de3ac5d132a98811e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKinematicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a00c42708cf7cebd2c287b6caae77b589</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDynamicPhysics</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a37afd50adbf592ba17ff2b4cd45b5311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isResting</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5aeab5201a9d85013340b2a1fb8af7e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enableResting</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a03e2635ad02016962cee7df3019e73eb</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>add437a6d229dfbf74a838d0de7229867</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a598de298accae3b59c821ab8e640d464</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9f98398ebd273f305ffb8316908d8088</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setMass</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a2418ec20e73cfe304bac23e306daebcd</anchor>
      <arglist>(f32 mass)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual f32</type>
      <name>getMass</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a6f86b5736d90e252ec239357835377e9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPhysicsConstraints</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a62a572e1c500a90ade8e279d72664123</anchor>
      <arglist>(std::vector&lt; PhysicsConstraint *&gt; &amp;physicsConstraints) const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getPhysicsConstraintIndex</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>af17e37b5161cf45c98fb07607ec27eb6</anchor>
      <arglist>(PhysicsConstraint *object) const</arglist>
    </member>
    <member kind="function">
      <type>PhysicsConstraint *</type>
      <name>getPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa4e623ba19115b05486b415929a32016</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsConstraint *</type>
      <name>getPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad0f774812e46bf37b786adf13b00ab4f</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a4899553ad56d95577a74893b416db401</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a9cd56ee4fa9e3258264ae7fa2a5a3a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>adb2a13498a34dadc69c7746d88ca4a79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getCollisionFlags</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a4be49988e50146b12c149bf66bb51230</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getActivationState</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a5c92da5dcc5580adad10fced20266d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBody *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a440e12dbc2367ac3676481183bc8869c</anchor>
      <arglist>(u32 type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a3b15b7f0943b31e6c2dd24661c82c4bf</anchor>
      <arglist>(PhysicsBody *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a4f490b34152c1355ca09c1f6cdc0be83</anchor>
      <arglist>(PhysicsBody &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a98036bcbea6e3269603a83e532d2e5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a48031c76bbe2bd9c4540d6d27b8b42bb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad3edabf71cfde91351bb428c9f06931e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a674974f0df3db645620c7156177659ee</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa2859a8335e3c38ff71b12bc0b002b0e</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a832ed4f79a2b52b334d63d094364f86a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>setPhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a144a0d79efe85c3c64da84d28e880768</anchor>
      <arglist>(PhysicsConstraint *constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removePhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a45058a03979e89b0b0fc4dceb07d8b4d</anchor>
      <arglist>(PhysicsConstraint *constraint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeAllPhysicsConstraints</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae4a8cca611e33c624b287613eac4d72c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; PhysicsConstraint * &gt;</type>
      <name>m_PhysicsConstraintList</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae940a11c675d6434564f8deebbfe45b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsShape *</type>
      <name>m_PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a00c2b8d2e86534be769c4984956c00c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_CategoryBitMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa474bfee45457dc90f521b1fcc47b4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>njliBitCategories</type>
      <name>m_CollisionBitMask</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ad54b0614806637ab666fd9a779e55d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_RestingAllowed</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae0f4e419f8e05558232170246fe7ad83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsResting</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a313bb39a706c42bc97c86cff4bd0f309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_CollisionFlags</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aafbdd7a8a90737acd399b56961cbd16c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_ActivationState</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a63352ab7615e4537f30479062ffb6a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>ae9fdb8cf9943dbfd76910301cb0ac1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa594c185e502e1b87c998e01dd17a50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a06afcd7f1b1822af8e15e045e77eed2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a0117dac2d3ca1ac4ebe089ac8c258560</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a2ccf10571ac5c97189a4c7d1fe3831ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a684f5ece6d7d44c2b9f689e76458a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a1d2185bf07a23cc48cd8f9d4271f3e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>af32c447e4cf588410ecc1a6106157f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>a6b9fa11eb22d1cb30e2d4fc2247e9afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_body.html</anchorfile>
      <anchor>aa59c958a66870f0d251ec0dd477d2eff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyGhost</name>
    <filename>classnjli_1_1_physics_body_ghost.html</filename>
    <base>njli::PhysicsBody</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aba5336f0f355644716a17ccc03b83535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ad3f75b8cbff7431afbb14569bda203c4</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aa04661e7cd05271931351076c53991b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a8b7a0599b7da88fbcf61451dc066748f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a86a29fb8d31a0b8f5cee712b8f84d7b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a489d0e67788ff5c74033824814470855</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a6b131b8407733cc046c4c8fa38b35055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMass</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a1edc30655aa0495dbf60c59138cb52e2</anchor>
      <arglist>(f32 mass)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getMass</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ade6ffdabf6c80a9443b2021848872edb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aee53dbc6a3aba8ab33c10e3523f1f4dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a01a4600e0521f09ec19879c1bdea3b8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a82c9fbfa4acc13deef6493ae7cd5840e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aef9155fedb503e9d7d57f8f803de18ce</anchor>
      <arglist>(PhysicsBodyGhost **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a7434dc568f080596a8f87a35e60343cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aff9751cceeb013ff72d5c7a187f7337c</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a064764d7ba64bf280729bdb0c6d17743</anchor>
      <arglist>(const PhysicsBodyGhost &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhost *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ab50b73dd844cd6d9aa1304df0367da16</anchor>
      <arglist>(const PhysicsBodyGhost &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a44e61ce35d636ee399d28cdf2eb69bce</anchor>
      <arglist>(PhysicsBodyGhost *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a05c9dcfdbcd586c1f670eb7aa5d6dcb7</anchor>
      <arglist>(PhysicsBodyGhost &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a899bdc02ac8dc04add7a17cc8a820280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a657ece9b7062ed0d514b9d62cf88c110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>acac7f2029377a783c65257451331b472</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a41018c93aba8e1698a65da7813419d4c</anchor>
      <arglist>(const PhysicsBodyGhost &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a039b603e81b9f24508901ff3da80cc25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ab719eb5810bf02cc2a238b663ef08f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyGhost &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a40aa22c5e94ed4d58315d538bad51732</anchor>
      <arglist>(const PhysicsBodyGhost &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a79b35eaf9c790ef43ad3e0f4a8a4c518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a6e5a9ffb4448b4a73bac8e3e44421698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a87c4ba0c2317a6e6e40231f58a1c9ed5</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>aa6f6ca168453f49b48d295a1bb8d7228</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a854f866870a887026cfb87d441008595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btPairCachingGhostObject *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>ab25cf5362db7227eafe8db536905d078</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btPairCachingGhostObject *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a2d883e17713153e92b13c0a7ad324c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btPairCachingGhostObject *</type>
      <name>m_btPairCachingGhostObject</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>a460197cbf7ec698c64ac6b7a95cb1418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_ghost.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyGhostBuilder</name>
    <filename>classnjli_1_1_physics_body_ghost_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>acf3842dd1d94d114671aed266c25240e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a45017515b351bc6900ebf4f5875ee93e</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a6ee3e575f23f3e1c9a3eb57d75eb86cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>aa8e8fdecaf2d8c03f6f347f5b0952844</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a631cda51d9aac43f52365928360463b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>aac575c3b87ced8bca08c374f40cb5130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhostBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a96ba3bbcc01126adbd3e4d53a554b151</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>aba77f6706afe0860812540eb958c81c4</anchor>
      <arglist>(PhysicsBodyGhostBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhostBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>aceb6f0a62a709dabd4dd0a42d9bc9259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyGhostBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>acf64508f874e55455f7b08eb5fd379e3</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a652cdb55fc9c23ea1ec55fb8d58b0036</anchor>
      <arglist>(PhysicsBodyGhostBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>acc77deeeb4e3bb36c1790000223664d7</anchor>
      <arglist>(PhysicsBodyGhostBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a7c64e5d2f7100006b10283248abed043</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a15cf1ce6427ba30588ea31feab7dc61c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>ad16190ff46c4cf7cae5b92837e0f4c9a</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a2ddac8155aa2c1329fd94501496d16ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>abbfd3517213575dedfe287c2982a3202</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyGhostBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>a8f711c771c4b12e5c78a2da5dfae0b15</anchor>
      <arglist>(const PhysicsBodyGhostBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_ghost_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyRigid</name>
    <filename>classnjli_1_1_physics_body_rigid.html</filename>
    <base>njli::PhysicsBody</base>
    <class kind="class">njli::PhysicsBodyRigid::ForceAndPosition</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a8263223fca42a563b9f2a756d077c8b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aa2f009ffadaf78b84bd36c8cb5536f6c</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a13a8810e9ddca12e83bbbe6676e8c906</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a701c7a02bd440b03982d7f9509baca03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a6fa8e700498136a0a6f64c9c3c45eed8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a70afa1817272e87547d6fccd8ca91ff4</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ad65b1292303642832a18f864bb23cff5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLinearFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a3d02fd518a3031f48f3512b8026a8a75</anchor>
      <arglist>(const btVector3 &amp;factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getLinearFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae098aa8333a7f82efabd8e3945eedf87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aea1f079a7abc6817bb53ed59e816e4e9</anchor>
      <arglist>(const btVector3 &amp;factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a20c0ae6e0bc489646c4d3206fdda2662</anchor>
      <arglist>(f32 factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularFactor</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a2c2f3087ebc43b32ceb3fdb13935fcca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMass</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a1c8b45c013666e4cd575fc6e3c6db031</anchor>
      <arglist>(f32 mass)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getMass</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a91e536e02eac21b097654263c6298f1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCharge</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a620b7e704797642da0594762ff24a0b8</anchor>
      <arglist>(f32 charge)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getCharge</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>acbf656bd51d8b91a3795a615eb364f9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a18a20381b14bf38c1dd731a9e25fc278</anchor>
      <arglist>(f32 damping)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac9d68b1764effd8b44c48559705fbcd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a9cf475f63ddb4962e95dc47d2f0bc8c5</anchor>
      <arglist>(f32 damping)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getAngularDamping</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab6d50a3ae1ec1756ed4d530bf7a4a9d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a48e65253892e04f83648e9e9fde34f69</anchor>
      <arglist>(const btVector3 &amp;direction, bool impulse=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a905d2e7b94681a30744a32f134611c15</anchor>
      <arglist>(const btVector3 &amp;direction, const btVector3 &amp;position, bool impulse=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyAngularForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab6ade2b1326ef586c71fa61d49a580b6</anchor>
      <arglist>(const btVector3 &amp;direction, bool impulse=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearAllForces</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a7d170e0159d7d8003dd937867dfecbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aabbcffe4b49667b4b0d285940c775ced</anchor>
      <arglist>(const btVector3 &amp;velocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>abbd7a0ea7ee539d9b84c64859ddf8406</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab6e5a5e5d9ee063013bb04502508d9ab</anchor>
      <arglist>(const btVector3 &amp;velocity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a13bb91357c547d832411c02be5e89260</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a0679c29d4447ee758cb84234731dfbdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a26ae91f4189d4e858907035bbd485967</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aa7454c3658a28f869dbcc5d6c0386673</anchor>
      <arglist>(PhysicsBodyRigid **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a9cb801c257f66cf5c58dea67b10115e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a701d02af43bfc3c058252d907b7a091c</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a2ea6d80ad8df71463cfe0b2c3c627b4c</anchor>
      <arglist>(const PhysicsBodyRigid &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigid *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a7e1f73eba8cbf9860638b600f292eaee</anchor>
      <arglist>(const PhysicsBodyRigid &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a537eeedf7da62318ae0d3a2d076b5fd4</anchor>
      <arglist>(PhysicsBodyRigid *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>af57a409d8e39b06aa74c0c742fe6ff22</anchor>
      <arglist>(PhysicsBodyRigid &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a99dba252410763fe9ac82424321add06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ae94e7b3c64a48854e5e35a8e1d298afb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a43b90ad880516b3b0c007b598cccfb21</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a448ff60fc10c6608e182165535c73bd7</anchor>
      <arglist>(const PhysicsBodyRigid &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a2c023043cbc9f56703704cb4f822f963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a7721538446401b34a6922d400412fc29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyRigid &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a5dadde62b5baa8c4c9c30d318b03c1f7</anchor>
      <arglist>(const PhysicsBodyRigid &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aa92b1f7c329ae49a2ad80947db1dd7ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a47bfa192d6de09d5ce0486ed2cc09831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a772e64b569e190f647047c0c5be2a852</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btRigidBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a03cf3d38b4083b61dcffcb1a5327213d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btRigidBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>abe9121bf7697467e7eddd8cd5da2cdd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyFinalForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a46509fb78aac02dc21c6f801b1f61bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyFinalAngularForce</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aa8971d87ad91419622dd6438ee00f58c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a45c724055d7d0192f4e3c154b2c944f4</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a7efbdfc46e8df26d073b00efaaf0c91c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Mass</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac62838462af7ad59f3763646a3062496</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btDefaultMotionState *</type>
      <name>m_btDefaultMotionState</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>afd22b7559363849aaa342867380a6eb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btRigidBody *</type>
      <name>m_btRigidBody</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ad0c3d067b9532e7670182595df270d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; ForceAndPosition * &gt;</type>
      <name>m_LinearForceAndPositionArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a9af7b03d6c6ef5aa06807ac323ad9007</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_LinearForceAndPositionArrayIndex</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ab2c6509114dbd98b54082105ed189c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; ForceAndPosition * &gt;</type>
      <name>m_AngularForceAndPositionArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a08b68126e5e77a81c7b4da2d618ecfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_AngularForceAndPositionArrayIndex</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>aaefaed500ce6efd686be0bd8eee056f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btTransform *</type>
      <name>m_btTransform</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>ac3048306f34e8a0be2551b99303216d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_Charge</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>a1bbc2a7a02bedcc65adb61e37d742eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_body_rigid.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodyRigidBuilder</name>
    <filename>classnjli_1_1_physics_body_rigid_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ae3abc332baeabe1fcbb097ed2573c3b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a9be25c248667548488588746cd37f529</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a18ff621e12eaa333c1af3cebfd1f6cec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a6a4f7544fc0ad96b952f738854adb076</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a430f133dad8c0c7deb350b510bc0e6de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a4f3f030d4338d61778db9ce149b5d5c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigidBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ab596f9f3c7c403805ed7522c0e2a8d3e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a6ffac3801a48f17edaeec435e0fb4c20</anchor>
      <arglist>(PhysicsBodyRigidBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigidBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a0e839f557f35c6fcb76de21ad7161f1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodyRigidBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a20e077423efb4ff6ea1c8325129809b0</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>add6f126172e4b520d49594c4e42a0931</anchor>
      <arglist>(PhysicsBodyRigidBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a670c0e458615527675736bfde8fdd1e1</anchor>
      <arglist>(PhysicsBodyRigidBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a7f6dc2947c99ff79f5d8ccb376ecca34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>afcce4270b4b17007a8525cbf2b8902b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a57b327f86208d2b18dfe8001a284fbbf</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a637cda99de6fe43af45f10c75bbfdd6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>a21d3eea0cf3f2341ef21f81bd2a59113</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodyRigidBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>ab2a0a2ac51dad17b770f616f369feb6d</anchor>
      <arglist>(const PhysicsBodyRigidBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_rigid_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodySoft</name>
    <filename>classnjli_1_1_physics_body_soft.html</filename>
    <base>njli::PhysicsBody</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ae2588284d8f625c70e93ed293bb9cb0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a7e38c5df16551787c35fc55c1335ddf1</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a1d3ad459c9527251dfdef541ae44c850</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>adfe628fd5ab43df08332362414d72b2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a59efe6d63a15ad3ea002c3f0dbfc3fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWorldTransform</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a500a0a1f0e9d729bd0ac23da18202af4</anchor>
      <arglist>(const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInWorld</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a22d6c5a0a3572feb0a8888e54b2c0e9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMass</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a23766e4c1a649a93680f37592cd56060</anchor>
      <arglist>(f32 mass)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual f32</type>
      <name>getMass</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>af288891787749f41ddd0097ded18e413</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>af8cbddbeb15e03ebdf1e6000d7abb6a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>getAngularVelocity</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>abda1dce34eaaf0e2524d2f6afde1c502</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac66deabb8649d1292091ac38ffe7b754</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a00f6b3d236273705d53e306ad7da80ed</anchor>
      <arglist>(PhysicsBodySoft **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a198d97f667d97209f031539d5f885cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a31d96acaf729965ab5784ec230ccf6cf</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a64e0e3a72cd3fc10fe0f877b1b4ba50e</anchor>
      <arglist>(const PhysicsBodySoft &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoft *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a18f365a1ab8ddc523c38dddda20049dd</anchor>
      <arglist>(const PhysicsBodySoft &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a5a41905cf8b3016cf9adfd19a1b0f827</anchor>
      <arglist>(PhysicsBodySoft *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>aa91c3dff512d08491eb7b964b1164d53</anchor>
      <arglist>(PhysicsBodySoft &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ae2affac4ff13b2d8b43114d9a0c14058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ad1a57cd27522290455d696bcf9a797d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a00848efd4496fe05e9dc05340eef2fc2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a6545d7e6a7706d93266e6fe5299978d4</anchor>
      <arglist>(const PhysicsBodySoft &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a0d39f39abc7a807e9ef68e2a44a8d1af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac2c07fb5d114918183ce86208f5ca9da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodySoft &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>af1ab4b5f7f7e8ebea26e5b8302cad734</anchor>
      <arglist>(const PhysicsBodySoft &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a41f7c080d5c79ed719cfcfb0de35a449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionObject *</type>
      <name>getCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a30c0af5e858983da4b549e883e6ca21a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionObject</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ac84a68c18afab8bf7cabdf51461d52fb</anchor>
      <arglist>(const btCollisionObject &amp;obj, PhysicsShape *shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>setTransform</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>ae0db3e9ff0ab9525f3f1b8e694ce25e5</anchor>
      <arglist>(const btTransform &amp;transform=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>removePhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>adce1993fe1287488cc5cb42b30a09bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btSoftBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a44c640897800dc6829b7a39284196596</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btSoftBody *</type>
      <name>getBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>afda8afc3d3ca4bcd805b134911f480a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSoftBodyWorldInfo *</type>
      <name>m_btSoftBodyWorldInfo</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a3a3770a0489d8629de7b88de0c79fad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSoftBody *</type>
      <name>m_btSoftBody</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>a5cc839e65a947ce67d81141aceffff53</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_soft.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsBodySoftBuilder</name>
    <filename>classnjli_1_1_physics_body_soft_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ac2e698c90107693b1ce5e3afa88efd5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ab419e0da7b86561aec533b94c9b82ca8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a40ced68212472cadc5e7a23450a665e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ad715623a45b652ea56a8eceb44558267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>afccd0cd50e60619b3d47016ed21537f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a992c9000d0efcb356069fab23672c85e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoftBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ae084ba415196ba8405e63848904b6684</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ab732d7732fdd85876a05a5905ab96e57</anchor>
      <arglist>(PhysicsBodySoftBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoftBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>ab70e1bf497a340d25921592ee9191cad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsBodySoftBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a8aa659a234c78f56e03ef5bae4d4903a</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>aeeef04cdc3809b35bea315517715a01e</anchor>
      <arglist>(PhysicsBodySoftBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a00e2bafe1620c6d6ee2ccd1719931103</anchor>
      <arglist>(PhysicsBodySoftBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>aa048da2b8737da157b54153587db7f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>a236eaa31424b4c13346922855bc0935f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>aaef6b31296d9d22591a7d753467585db</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>adac7505e498438c51e3d6b0e66807d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>aa8c593175f58bb8043978462515550c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBodySoftBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>abf6ae90c8e59320950bfc550ed6ade26</anchor>
      <arglist>(const PhysicsBodySoftBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_body_soft_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsCloseContact</name>
    <filename>classnjli_1_1_physics_close_contact.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a4631145f28c1f050dc5ed2740adf48ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a555f478bcf7a1edbb7723f9391272552</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ac7e13a4e9875f865617923d368896ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ae02df3f3dcb8311bc913c71124b96442</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a6f6719c0cc5c2abf83cee57585d48b7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a7111929b332ea06f9c9d0c37a5d6df55</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ac5b6a7fe1b9d376dea7e051004e118b9</anchor>
      <arglist>(PhysicsCloseContact **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a798fa044971cb937c50ca688db22e7b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a6cdd2f44f6e1dc6a8051e95977c2f374</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a2853031635fead8faa6ebeab24206613</anchor>
      <arglist>(const PhysicsCloseContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContact *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a845f18318e0609f18bb675ad23e9cb2d</anchor>
      <arglist>(const PhysicsCloseContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>af392bda92b22ec489c8a91af4e02a7e6</anchor>
      <arglist>(PhysicsCloseContact *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a96820db038f8e09a99b52418c5a38f86</anchor>
      <arglist>(PhysicsCloseContact &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a41098eadbced0e1b4ce390fccffdea4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a3fe40ee1f14897d01cf22425d845f8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a458752337dd7bee43ba3fdc8d355dfcd</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a50033f6c1da215d908b2265ce0148b20</anchor>
      <arglist>(const PhysicsCloseContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a092b76aa7ae7386952c1bb6b59830c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>ab4c3f8b0667ba99662e6ad4f52ac98cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsCloseContact &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>a731270363395fa1154af53a4b9252242</anchor>
      <arglist>(const PhysicsCloseContact &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_close_contact.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsCloseContactBuilder</name>
    <filename>classnjli_1_1_physics_close_contact_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>afd1c4406661d4b22584a553792a2eef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>ad71770ba21104190fba89c76468e77a3</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>ae5f9f599e817990a58fb395da3eaa240</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a6f71bf92547966206aa4f9ad705b934d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>aecbb1136c71c0e2980b178f7b3b00272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a94de8ff429c771f019fcd5ba88807f30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContactBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a6f9588a2c58867b6b5000c42a2504c6b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>abe100858f28e115edef5b0605ae4b669</anchor>
      <arglist>(PhysicsCloseContactBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContactBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>afa51854834987b555e41b0c10c74c180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsCloseContactBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a0879ce808e41a39aaae70da300a730f1</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a11118573af1d447f3b5861a266d05f85</anchor>
      <arglist>(PhysicsCloseContactBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a096a8b84177a18c7f0f351b8a89c84de</anchor>
      <arglist>(PhysicsCloseContactBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a7dc46e313576f83c2297da3094b85918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a8a48cc12d8fb8bb524b33a43c087639d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a5edb032228c085e5977c6617a4500737</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a7210fc81b1aaa792fe84a01377b05d1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a2fb47a3eaee6cb4c43e3f296ec9c1f34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsCloseContactBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>a6608b0fc3b34ad18eb5cc3c50e177e22</anchor>
      <arglist>(const PhysicsCloseContactBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_close_contact_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraint</name>
    <filename>classnjli_1_1_physics_constraint.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aeda6c35ab271897cfe3192870d4ac7a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ae294d089963246a8e65b41913730efb1</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a4d31c5267199972942d66b3480374010</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a3234aefaf2706165fbc52b5b37c05888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a4cb967ebae1b139bc7511bc9fcc074c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>abe33286cebf5cb3c2e9440393f176517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getNodeA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ac3722d2349aedf66ea3378f1d8e41e2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNodeB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>adecbad6334d7fbfdafc8bc5bab75d171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getNodeB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aebd01f59387c919d255c07f1b1c0e0a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getBreakingImpulseThreshold</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aaffa0c7d84f053e276d0fda61db14550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBreakingImpulseThreshold</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aff159cbeea66d0f2598172e7cecf2269</anchor>
      <arglist>(f32 impulse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstraintEnabled</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>abb9996d3456e93ba7027d85f038d10a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a2c3b06804d8447485c9170bca568b244</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedForceA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a2a02805fa70d5ba764986a0678dacb57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedTorqueA</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a4fb1d50043e450fd584d12852a756c79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedForceB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a62b371d9914b2206441be949df162afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getJointAppliedTorqueB</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a1df0c51cb5bb8bebbfc4474908df3f74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PhysicsBody *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>aea662a8e9b6eb74c2f772d35226aa79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsBody *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a206984148059aa74e81ee7a3ae09ecb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a4d77bf76586344a445393a05f3295cb0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a100472a7edab98f9bcd213459f3ae2c6</anchor>
      <arglist>(PhysicsConstraint **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a40da285e559ad3daf2ca60452a92a056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ab3c5d215f3df6f2ae6f6d1492114449b</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>abffd36e886d036ee96c69857cfad4f9e</anchor>
      <arglist>(const PhysicsConstraint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraint *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a5c8b99c2a957918ee982a6101a4a6a8a</anchor>
      <arglist>(const PhysicsConstraint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a3b197c229e8bd4a030a54bdba54e081a</anchor>
      <arglist>(PhysicsConstraint *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ab423c0c46435ea5630e50f1f39fb1dd8</anchor>
      <arglist>(PhysicsConstraint &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a213a1a155d46a52ef237cb4ed82a8607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a7b3e8cf84cbb22fc6a9e238c56404a03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a7b711432de531a357b0b49e446d224bf</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ae70f2363020b35433e46fa34fba42752</anchor>
      <arglist>(const PhysicsConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>acea9f53b2ec41266be66764bf000e603</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a7532a67911e2d8aba738f08638c2efb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraint &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a354f06ed616836ba1a5b21387ed5b83b</anchor>
      <arglist>(const PhysicsConstraint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>a0a22d54c2c896af49fa57db9be76a5da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>af4cb8c0158a044f75fe61f89cc278338</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>ae3dc487da3069d859bb4ddb05aa2e779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_constraint.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintBuilder</name>
    <filename>classnjli_1_1_physics_constraint_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>aff183ad9098f0b728bf3940126f8aed6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a150e376adfc9bc332f2b53073bc565c8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>aeebea41ee8495110877d9ba37abe136b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a3f9857e95c8ef12bd9497d647ba3c38b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a57a5d069a0231a67c42ddc3cd46eb43c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a7d19e806ec306322aeabdee8e9257b3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a4a480262ca76e42e7abb72acc1b3f3c4</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a2f170c34503a87f175e1f8ba1f7c5066</anchor>
      <arglist>(PhysicsConstraintBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ae1634990857be090fffc4a838eb45581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>af19af90221577409e685cd820a581ffe</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a5edda7adc4b144130a1fbbe2651a0534</anchor>
      <arglist>(PhysicsConstraintBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a95693bf5468af4a15f56a69bd350f5f6</anchor>
      <arglist>(PhysicsConstraintBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ab8ad4dfe06ff661fd64efda7ab1666d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ab2f4a2dd4f1a69ee31e83fe8d7b4cde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>ad5e809bc48fbed105ab1646d28373406</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>af62b5d1bcbafb7009285a67a923123f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a45d7ca27f704286c7465c80e16d8fc44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>a78e92834a688b68081a11edd48b5641a</anchor>
      <arglist>(const PhysicsConstraintBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintConeTwist</name>
    <filename>classnjli_1_1_physics_constraint_cone_twist.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a0d6e6a5ffced973aca49898094745d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a0525276852c678e2dcda35d864d035db</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>af65735ee847bd4d4bc72978f52c238ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a78562bcb3f15cde1a2628732cc917fd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ad24f7b9f50dded24bcef6a3ca0683a1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a62ccb09aa4eb5e21fa325888b619b434</anchor>
      <arglist>(Node *nodeA, const btTransform &amp;rbAFrame=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ade9557985d29d2dbef78d0dc232ed367</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;rbAFrame=btTransform::getIdentity(), const btTransform &amp;rbBFrame=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularOnly</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6c8c071ebac0a8b00d66a17044c9d62a</anchor>
      <arglist>(bool angularOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aeed1b0161940309464c6f5f56de1dd22</anchor>
      <arglist>(int limitIndex, f32 limitValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a708e02ef79f7e67c13eb5bfb82a76115</anchor>
      <arglist>(f32 _swingSpan1, f32 _swingSpan2, f32 _twistSpan, f32 _softness=1.f, f32 _biasFactor=0.3f, f32 _relaxationFactor=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getAFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a1a17ffd697fdd1028e5e2518ea86b75a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getBFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a5f3cb5d2c160fec5ec92de024df68a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolveTwistLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa9a5bdf9fcbebce5686c4fc630597dcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolveSwingLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>abe8033d8ead97feb20871704c0ac81a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTwistLimitSign</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>acee80e920f51081de9354094379f7b11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSwingSpan1</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a027923af16628517d65094297cb3a575</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSwingSpan2</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a08296e8ff84c002fda396b348ec622de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTwistSpan</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a38d2f9a65c88de728a2a1f5d3255ae24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTwistAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a456096ba5a6602c65e1cfdacd2e155ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPastSwingLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa88ef9a706160dba1e9805171bfcbd43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDamping</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9552eedd807cd2833d584d0ccbf74f91</anchor>
      <arglist>(f32 damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a7903e56124cef31df66e81467f4fd597</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMotorImpulse</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ad80eeca857c3ba2977181a2db59ea185</anchor>
      <arglist>(f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMotorImpulseNormalized</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6c0ffec35cf8e2d669f7333c1d889a21</anchor>
      <arglist>(f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getFixThresh</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a86bb590a043c9e7604e144081a86ee0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixThresh</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a0bfeee1933ef308fc523f58421dcb9a2</anchor>
      <arglist>(f32 fixThresh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTarget</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa9330c775b1d77026c0b3b23d8750bab</anchor>
      <arglist>(const btQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTargetInConstraintSpace</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a8e8f494383a0db257761c61924481232</anchor>
      <arglist>(const btQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getPointForAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a3df16444695d8a3d406a7efe742106fb</anchor>
      <arglist>(f32 fAngleInRadians, f32 fLength) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a8bbcee31a07d672830c0079e8559fde4</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>af59e5ea018cd7346aa8cbb63ba54e9e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a4e7b8678b101ddc4e0ead4d12a9e802e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9320581689ebce20210ed1d0239d1257</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aa963148686e225ef41a5f101a4ae51c1</anchor>
      <arglist>(PhysicsConstraintConeTwist **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a038c356380d19df8c4cf8830298e4092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>ad5435f5177a5d4980ba8f1073e91eafa</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aae501e94d550f61640012cda44d6d690</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwist *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>afeb1730a2b010167a283cb04f94a154a</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a4744a8d88fc827477a9ca1deb3781f4c</anchor>
      <arglist>(PhysicsConstraintConeTwist *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a3174e2995c524ac300bed364e4816080</anchor>
      <arglist>(PhysicsConstraintConeTwist &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>aee319aec49b4989f389054f69b0e522f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a947d157eba75740eb5ef4cd2a2d84fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a6f984ff219ec12b993910004831aa06f</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a691aaa4b2f4ea930445a8ee05d50f66b</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a3c54783fbe28ac8b26ab032bc34a8418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>adad948a62aa3f635cd06f1799c3a1312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintConeTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a5eeb8731d6c64f9b37e00202f14fc9db</anchor>
      <arglist>(const PhysicsConstraintConeTwist &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a50abadf06a0a68049c69a905cf09d1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a51dfe168c4b70ea71ce210079394b22b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a975d5736a7ef4c440f9138dfdfcec357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConeTwistConstraint *</type>
      <name>m_btConeTwistConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>a9a2b6ba85104cb0aacc840dfa28625cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintConeTwistBuilder</name>
    <filename>classnjli_1_1_physics_constraint_cone_twist_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>ae42ec507a3f9af68faf77ab90b77a97a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>ad14be8780d1742ead6f1b004b80c21af</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>ace204bc15a20ca9ecb152dcf194b5f18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a84baa66ab2cbe6bcecdd90a7a522f8ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a2f461980dcdccd82fb290baa23055eea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>ab6e71b3e8a4a7703efad638b1363af93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwistBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>aa6d0cbd168ffaebe2a46392c579e2b92</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>aa05b7d7c30b2bab2715d5e6c41a25d5a</anchor>
      <arglist>(PhysicsConstraintConeTwistBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwistBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a3cc7191ba1b2427d94fbf940500e39b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintConeTwistBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>aa7f25dc4ccc5e3c9f65bd8f88dcd45a3</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a72aa3a44c1475da5406ce104092d212c</anchor>
      <arglist>(PhysicsConstraintConeTwistBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a42995a1a7acc6df6674bb211338251d0</anchor>
      <arglist>(PhysicsConstraintConeTwistBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a9b680e5ddfc584561df99feb64c99533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>af16141b2bedca7a585957ddc7d48e4a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>afab8a85fb10dc345be8773da4aed2e55</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a9911d604a6e4c1962c4140b64ba5fd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>ae3097c9cb39ba656481a238eb120aab3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintConeTwistBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>a327bb06dbe264a762b3366e28ba7e3ce</anchor>
      <arglist>(const PhysicsConstraintConeTwistBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_cone_twist_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintFixed</name>
    <filename>classnjli_1_1_physics_constraint_fixed.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a6be6f7a7df09a3602a0f4606729420d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a36b23b6b62b01e82724b71bc02e5c887</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ae6b9c4224d1dcc599a396385664b0ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a15e1155bd37763d3e7d012bcb12a4d26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aa13ea9efcf150050fc58b2d68045dae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a9c2e500b265b2e050ff26183ac739224</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ab81f24e0e128e347f7fa152d54877803</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a2d9b9e229cb4b85b1143f0e3be7249dd</anchor>
      <arglist>(PhysicsConstraintFixed **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a871ec2fb30520315e5b94f903919bf6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ac4aa0710e8762196ec38512ef92a464d</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a842878b76d7f66ae80e7a9244b12d5a2</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixed *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a3955cdd659159c1de1c7a015304e173e</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a2c2cceb0946d76136247a9b5bc2ce850</anchor>
      <arglist>(PhysicsConstraintFixed *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a80035a24ccca3f5b3888646059ba8c13</anchor>
      <arglist>(PhysicsConstraintFixed &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ab1ebf178433c9cd51d07e85a58aed16c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>ad7c29d1fbe102ef0df39b23e83b3a0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>addab0e380c07beb28bd5eda9169af956</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aede93ff52f7972a0ccf6bb0825c6345b</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a6fc29984577d1ac55a0c9c7d975c80b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a87c0794e0dc3955f460ae85855f8a670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintFixed &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a352c9e12663cfc9f0bef958420cd27a6</anchor>
      <arglist>(const PhysicsConstraintFixed &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aacec008844d5aa73eb2763855607a688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>acd6e7d3872dc19e5bab285fddc2fb2f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>a6b0a9ef970808875deef88a91f59f8b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btFixedConstraint *</type>
      <name>m_btFixedConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>aa84989fdbd81cb13f6d09150cc22dd8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintFixedBuilder</name>
    <filename>classnjli_1_1_physics_constraint_fixed_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a008dc282fc181e502ffefb25dab21986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a31aad1c1c4f1bc4175f58c3e716e6cc9</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>ac9dc0e37cd6501eb1748e993df8cdcb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a2bc42bf80feef43c24eee74e44840af9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a0ba145723f8f735d2b3cc2f5c9e5e9a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>aa726a4fbb431297736129c816d215977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixedBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>acdaeca452058b3f424b916e0c729b7c6</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a1b4151563bccb912022a8399eb7ec41a</anchor>
      <arglist>(PhysicsConstraintFixedBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixedBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a279c0c26b9faad323068b428724bf091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintFixedBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>af4326c3a53c9a8fce71472d6d4815a47</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a87f26beab39b90667c2993d411c0657f</anchor>
      <arglist>(PhysicsConstraintFixedBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>ad9c96e7a0630f5216dbe5ba7bc5a1131</anchor>
      <arglist>(PhysicsConstraintFixedBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a00525afcce888aef5d78deb6b6a9f482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a099814f08a682c800facd7272f74e36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a27a735d0f935892d35beb1cda81508da</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a7a030903bdabc4d48aed1a62b24eea9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a2d8bda3ee011d99923d26b49e02c02a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintFixedBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>a5390a28f6394c54c1f715a89768c7409</anchor>
      <arglist>(const PhysicsConstraintFixedBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_fixed_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6Dof</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a386006d689e37b554d43d86d718966d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>adebf86567407706023e5800b59308635</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a29b23a079a5d93600a701d7635fb26cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>aa3004e4d926ca03e19209b5ee79817d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a8989bd7a2e05a4abf8edcaa7468648f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a906e4dd9d37dfce908cbae90e58f3dbf</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a52d5136abf9b7cac2d0ad0200745d30d</anchor>
      <arglist>(Node *nodeB, const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameB=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateTransforms</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a120abacab53cf4dcf4b97241dc8a59b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformA</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae240be2b376857039701ff15e7304c94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformB</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a62448d0b780fa3c40b7d8a3b38458533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a47e2abdae640363408d6b65abe8abeac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9831341ba2e4ed3fda9f4c0daf48bd03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5c522c9fc645e001c74d78d435fc31a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a2f64146e62a92c8aca2127a3e9038084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a3cada42a66e9341e7fb75e3bedab031b</anchor>
      <arglist>(int axis_index) const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae933d3bad2ab5614a25c8afbc79eda7a</anchor>
      <arglist>(int axis_index) const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRelativePivotPosition</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a80989ad0ca61c764fc63c9404229cbd6</anchor>
      <arglist>(int axis_index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ad0fd838dfb528aa5d473236951452a93</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testAngularLimitMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a510f7c50e1db34da7587e29be21cd95c</anchor>
      <arglist>(int axis_index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac2635d4d1f732dbaa0607a39c42c1fb2</anchor>
      <arglist>(const btVector3 &amp;linearLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLinearLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a985b84a9bf3dcdf319d5bf246785359f</anchor>
      <arglist>(btVector3 &amp;linearLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a36ecbb880f9b8d1e47295a8cb4d38ac2</anchor>
      <arglist>(const btVector3 &amp;linearUpper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLinearUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ab5b34b9f7c16ab4d92c4c5d87836eb75</anchor>
      <arglist>(btVector3 &amp;linearUpper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae30482945c39ae7b4fff65eb1e11c804</anchor>
      <arglist>(const btVector3 &amp;angularLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngularLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a8bcad5d1bb5a9a207b69197f2a9f3b17</anchor>
      <arglist>(btVector3 &amp;angularLower)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a09328e27ff0e4f5bf3c5f4fc399b5176</anchor>
      <arglist>(const btVector3 &amp;angularUpper)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngularUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac2d82f1fc8c0e094c62eaac8c46fae8e</anchor>
      <arglist>(btVector3 &amp;angularUpper)</arglist>
    </member>
    <member kind="function">
      <type>btRotationalLimitMotor *</type>
      <name>getRotationalLimitMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a831494acf79eaff54aa1d95d3d1c7f0e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>btTranslationalLimitMotor *</type>
      <name>getTranslationalLimitMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5a05d447a6c149310f93ce8879827ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a8492ffdcfe56852bfc3cf940d955fed5</anchor>
      <arglist>(int axis, f32 lo, f32 hi)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLimited</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a4b7ccf539945ec18862d03459cc7af4d</anchor>
      <arglist>(int limitIndex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseFrameOffset</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5e88bda1b6f298611499a60e0a431587</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseFrameOffset</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a7f85647f957150c306f7086e6a36fc0b</anchor>
      <arglist>(bool frameOffsetOnOff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a476bea05db9265b4efacc503b6693615</anchor>
      <arglist>(const btVector3 &amp;axis1, const btVector3 &amp;axis2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a381a2088b01e0250c34d2da797df64aa</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5c3c7a6da2d13eccde2f45ac66624cb8</anchor>
      <arglist>(PhysicsConstraintGeneric6Dof **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9127a08a4c28e717357b9f38ae4d2aa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a3a1107170a0d064424b00f49f16dcf67</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a75cf11aab13266cac631ea51d084c2d2</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6Dof *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>afb151ae4e2a88a7ee3f92ea035497773</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9284dc403064bdfbc2cee6a713b070c4</anchor>
      <arglist>(PhysicsConstraintGeneric6Dof *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a4a498b612c781bef2aef8f7b7986331a</anchor>
      <arglist>(PhysicsConstraintGeneric6Dof &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>addf3c9314c7f54a6e816f961b89f3c5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a5c2718defc17ccb5f247cd5151cd8a82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a9cc10b347756198caf3d519bc4a73acd</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a7b9691c73edd82ba0d12d2e8d5c0a02f</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ae50cbc7db6e709453f0cefc167a12ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>aa2ab894c3fcbbe373a9d1dc1cc82ce8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6Dof &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac42ed9d463f637ef98b2b45112d967aa</anchor>
      <arglist>(const PhysicsConstraintGeneric6Dof &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a0591b18e41f1e1e349ba3cef3e8cf4a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a55d44efd5fb9dcd1f983f3bb5f2ac6d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>ac57766961297ad087fb0ee7dc26e17d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btGeneric6DofConstraint *</type>
      <name>m_btGeneric6DofConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>a621259b5a4a7a54505a5c73e30772c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6DofBuilder</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a03d46bdf8bd1ed3f9788a031d98ee651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a94439f03a17acc8213e32e3e0f447792</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a111c5c229b075dc823ff35634f1f86d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a9b5207d1250b97df3ac9b63668158ec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>aef4d139d552e3631ffaa2eabde80741e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>af24c273d394d1b66f41ceb82d36a68d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a7b06ac114aa1fbcc704133290fec5b3c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a9fa41019822ee43f0769bb52e29cf488</anchor>
      <arglist>(PhysicsConstraintGeneric6DofBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>aaf3fe91011bb96d8b6dc0cfb79c23625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a98be0309bcc91621a6cc38f9ca01b6f7</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a90ceb1fa858b5d4231c40e6cf9f2f563</anchor>
      <arglist>(PhysicsConstraintGeneric6DofBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a3ea0eb8b8a34159c1190d6c7f1b176cb</anchor>
      <arglist>(PhysicsConstraintGeneric6DofBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a834578ee471490e8b274e22cf21642fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a9873aa55e683d5d7695ec0e0348a4f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>ae3cf05f6e1f05f3257695e60f02bb4ff</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>abf75fdddeaad061b3540fc62da0d809a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>a9f8d43b92426005f9775051a4208db3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6DofBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>aaf3ffd63926492c362674c9844ab32a8</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6DofSpring</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof_spring.html</filename>
    <base>njli::PhysicsConstraintGeneric6Dof</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a2d22369c72fba1c3a477251c14273a2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a8d00ec82407e32449b1e9016c13ca301</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a8a44bad32336f595195ccfa836a91068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a2fecef82051a7d6f1a51a81ca5621798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a5ac3c1339170b7f94c3cb32cdd1d33ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>afe3cd6485847535d9f02c35f289113fd</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a48675ca9439612df9cfb029216ec1e6f</anchor>
      <arglist>(Node *nodeB, const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameB=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ac9ee86dda7ea98b3e06130e5cc07a1d9</anchor>
      <arglist>(int index, bool onOff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStiffness</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a21ba981d8b8c8a7ea383e99c94ecf2e0</anchor>
      <arglist>(int index, f32 stiffness)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDamping</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>afd76f8cca3ad0d36b0426c2ee8ed2842</anchor>
      <arglist>(int index, f32 damping)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquilibriumPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a40d2ff0ac7576828303e9865f720454c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquilibriumPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a15198ee1c2433da2bee647c18b06b891</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEquilibriumPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ad29953e4752e238af691d92da16673d1</anchor>
      <arglist>(int index, f32 val)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ac8d968dd1b3e929978635ec8fcdf8238</anchor>
      <arglist>(const btVector3 &amp;axis1, const btVector3 &amp;axis2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a1cd2d7b1a7bb8ef56286e178c95f99e7</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a29dd9a920f0c518800bd91270b761394</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpring **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a8a50fb176c1795f70770c7736b4b4f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>abdf988521a32e8f90555412f5521adf7</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a05eb797e000b0e4e1079fa55c3933e3d</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpring *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ad0f3a2c25060758c236a7341d45ec471</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>acbcad205ab444a397ec02dfc592fb202</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpring *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>aae8d77390d43c2fb72bf71e1f6c486fc</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpring &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a26622b5bceef3e66e0a3b9f5ac3f60b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a3477772fafe8745a8963235b7eddad65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a9debc78b7868e3d1af4a5e3876f50a19</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a7520f002b92a424ddb5fd19e52c7a47e</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a916ae50f81fd16538e0700f883a84302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a80a7d57ae9374e5a5a6795d59a9b53ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6DofSpring &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a213a2c40144478db8dbb877c6539dcb0</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpring &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>aa90bf42f88d0314d834a6b3d670ba90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a072c17a336b74f574c9892e8ccf12278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>ad8d9013c4e17710207f13cf40d667cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btGeneric6DofSpringConstraint *</type>
      <name>m_btGeneric6DofSpringConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>a493a869835cd8138ecf3b347b9aa7373</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintGeneric6DofSpringBuilder</name>
    <filename>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ace1089dd59add0a4524bdf3c8359a996</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a5ffe1a93e4bf4466a0b460314a96c15f</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a2f3454dcfee134eea8f742da56c93ef6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ac81bd912ee88a8dcc8ffc7519ce7ba91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a6352c196a84e114d7448c9cf0bdc4445</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a929e3396809d09d2ae4ee6ed9546e8e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpringBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a85e7ce26bf8b5217dc8ba1d5431bd5e9</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a485a6bf0d55a3a9f548551373bb09fb4</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpringBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpringBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>af08040617decc3acd3212930415ae131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintGeneric6DofSpringBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a182e21f1591ca26e4b124a03f6678de0</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a66c67a6cb1e2b3277a92f0d4704767bc</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpringBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ada9dae397a8a580d1d13adfe0e5bdfc2</anchor>
      <arglist>(PhysicsConstraintGeneric6DofSpringBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>abadc19b66e278a4dcc7b7d3d2bb2df42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a96e7fd9eab29846c27862aadd2c244b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a0d7ee2c28da321f0eb592911ae6a4e01</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>ae304eb3d0766c52d3d4896faa6865567</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a98e6112cbfbba4cd17395630514d0469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintGeneric6DofSpringBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>a0a2ee57a64c09b4909393de031a1bda0</anchor>
      <arglist>(const PhysicsConstraintGeneric6DofSpringBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_generic6_dof_spring_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintHinge</name>
    <filename>classnjli_1_1_physics_constraint_hinge.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>abdace027e8450d8962cbde115496b097</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ab3af6e3d64bf17cdf5cef687df03cdda</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a30edeca9b74147307de1440a37dac556</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ae31ea0358f051f773a4f06b52f6c92ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a47473ae8529b6502ac247189af9a0a10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a5c4c4f472b136fadfa394109a8ae9e49</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btVector3 &amp;pivotInA, const btVector3 &amp;pivotInB, const btVector3 &amp;axisInA, const btVector3 &amp;axisInB, bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a388cc9189f0c78a9587b706ea6b8ae78</anchor>
      <arglist>(Node *nodeA, const btVector3 &amp;pivotInA, const btVector3 &amp;axisInA, bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>af0950830b79cb1999d47bf8185c72e34</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;rbAFrame=btTransform::getIdentity(), const btTransform &amp;rbBFrame=btTransform::getIdentity(), bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a26455b3460d3cd8581359bab0f4fcc94</anchor>
      <arglist>(Node *nodeA, const btTransform &amp;rbAFrame=btTransform::getIdentity(), bool useReferenceFrameA=false)</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ac86b8f0002f7f8325fa6732badfac191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a0e5e723a10746f7f7b7a188c972017aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ad4be215d7284b01d8122f0bf770c391f</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularOnly</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a29156cea121d2887e74204e3bbb79adf</anchor>
      <arglist>(bool angularOnly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAngularMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3fb601299961f642b0b26ace87759e5d</anchor>
      <arglist>(bool enableMotor, f32 targetVelocity, f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ab51a1cffbd35fd20709566467fa22bd7</anchor>
      <arglist>(bool enableMotor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxMotorImpulse</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ae923a5eb9ea4e2d19471b448e61ebfa8</anchor>
      <arglist>(f32 maxMotorImpulse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTarget</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>adf853f9c76676b2f6bc13f8f8196ce4b</anchor>
      <arglist>(const btQuaternion &amp;qAinB, f32 dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMotorTarget</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3d60c1cf68fb85d408d20bfcd49e5df5</anchor>
      <arglist>(f32 targetAngle, f32 dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a658f010e5decd6e9dea4f239333c46de</anchor>
      <arglist>(f32 low, f32 high, f32 _softness=0.9f, f32 _biasFactor=0.3f, f32 _relaxationFactor=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAxis</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ac29154620819b36709e15be9e11275db</anchor>
      <arglist>(btVector3 &amp;axisInA)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLowerLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a4df6c7953c16257d85669a7f7c786809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getUpperLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a5e2573f9accfd604270b48ee0b9e1cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHingeAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a25fd1c88775b227aeda9b5f6aeae2a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHingeAngle</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a1cd6383e545ad3a933f4be9a2ffc7507</anchor>
      <arglist>(const btTransform &amp;transA, const btTransform &amp;transB)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a76aa725a1ea8033ca1ddd45ec1e30143</anchor>
      <arglist>(const btTransform &amp;transA, const btTransform &amp;transB)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getAFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a9693e745cfef0cc2616df93fbecd494f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getBFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a49de84bc56852c3c5b75d488e4a755c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getAFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a5c98e610aa6f1a2efb8f35ac8450c1c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getBFrame</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a2f14b879a49458109f66fc0f78d51a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSolveLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ac579e32bc5bb6a7d1f3ac9dfc3f94d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLimitSign</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a4e4531b90a04163f97716276d0bb0c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAngularOnly</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a703a002e1683957b19e4623299ff414f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getEnableAngularMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a3bb7a607cc9fb96b1a56093aac70731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMotorTargetVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aefd276bcb6fd0e6152b6f5e102350ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxMotorImpulse</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a03960cf6d81fc9496f662e537e379d0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a26086ec7b819cb9f77875926367e65bf</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a9f5b9ab458ef6a2551a7ede20b3c2d3d</anchor>
      <arglist>(PhysicsConstraintHinge **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a143ffa4a346d08ecba967b4e0bd8b43c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>ab30405bdc3c9a7bd84915ada5c07fd27</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a633ccb73ed4e5522fc71e55759bb31e0</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHinge *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a202f0ee9f280a7c0e691239c9b373c19</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>adb8534e0d1b950006347ed71ae652d87</anchor>
      <arglist>(PhysicsConstraintHinge *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a6e29f3b72d9e4f1215f8170dadbf6236</anchor>
      <arglist>(PhysicsConstraintHinge &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a567c2dc54151dbcffb8e26590bc6bfb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a98b095bfe21e5fd303130f8991f39552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a560929857ec13439f35c459bc326e583</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a0487d3ff017819816839de83fa450ad3</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a54cc154675629f9c1fefb2caa925cc57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a47b7e2f35e6062de7a813a0849686f65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintHinge &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>af2dbf3661171c4725e57626d7ad7944b</anchor>
      <arglist>(const PhysicsConstraintHinge &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>a0e6fd626089d0df9061f58e05bf81cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>abc19706f99699a8af8178058c8d80822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aad341621e3585f5f8c3c2b4d369be7e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btHingeConstraint *</type>
      <name>m_btHingeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>aeb5449d17ea4a80fa37ac059e3fba661</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintHingeBuilder</name>
    <filename>classnjli_1_1_physics_constraint_hinge_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>aa9a15e83e23b7a33b8269f2800da8c60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>add1abc1990445ad5c38757dbf5b6f131</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a88866caafa7de85fb729148d52c3c020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>ab5e963ca036022a3881bbd4ba6a033d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>af6d72e9484339ace1c657fd0f2d75153</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a08d772c74b00685234120bc33b1ac3bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHingeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a25525a2de723ed80a5db00bc013a7d83</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a9f7bb6bccee74609eba62cf0067927f0</anchor>
      <arglist>(PhysicsConstraintHingeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHingeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a6f6f4723d03bed6ed1b36345465aa139</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintHingeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>ac81051c05d79b7ee3bbd48c54dbdec63</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a62a14c8bca5cd2075bf6a579f612baa0</anchor>
      <arglist>(PhysicsConstraintHingeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>aaa23f647aba6ecc76db81cefcec07098</anchor>
      <arglist>(PhysicsConstraintHingeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a630b25a403ccfbf3c0cb3c1372c36817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a97d48d59e59a383e0a0bf0c50f01851b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>ad35c2cdc791f1704662d5feeeb4edd4e</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a53d617c2c8f9e304d9590d9f69375653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a325190a956d402b524dae04ec343a76e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintHingeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>a9ceff764c6378af8a9a6284c35a0c507</anchor>
      <arglist>(const PhysicsConstraintHingeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_hinge_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintPointToPoint</name>
    <filename>classnjli_1_1_physics_constraint_point_to_point.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>af0766c0d2de84aa206cd4fcc33b6b9ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a9327a02aa2883e39074baf3503c2ddcc</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a98c21294338cec0671e817ff2c2afc2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a1daae07c31eb59ee245674d465919cec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a17b1f8d141a377f71ffeca21d6dad0f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>af5f949ec6492fd8c96d5ae03a3aa6436</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btVector3 &amp;pivotInA=btVector3(0, 0, 0), const btVector3 &amp;pivotInB=btVector3(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>acbf07690cbef3072ee6b5c141a4d21c5</anchor>
      <arglist>(Node *nodeA, const btVector3 &amp;pivotInA=btVector3(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotInA</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a22513468676e92e523caea9e7c0e5ae7</anchor>
      <arglist>(const btVector3 &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotInB</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aab12a17b9530cd91700860c6e8e1fc3e</anchor>
      <arglist>(const btVector3 &amp;pivot)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPivotInA</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a0081daad53ef60302f884626e1da987b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPivotInB</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aaf9a440f01231b52ff5b4e6cc390ed25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a267ed31f1fb0083be950281b9bea0385</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a44225e2e07a7792db8d50f752621c526</anchor>
      <arglist>(PhysicsConstraintPointToPoint **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a76dd0450878d6b069bf8533024255a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a10657194042f642076ba63d6e34246a8</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>aa68a1860b305a227593fe00442bb8846</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPoint *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>abcabf8d381d2c8c7adc66b3ad6a4eb08</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a99954ab0a125669815fcde1d80868f87</anchor>
      <arglist>(PhysicsConstraintPointToPoint *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a1b48c6302604d867278645b18e4119ea</anchor>
      <arglist>(PhysicsConstraintPointToPoint &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ac1f72e0fab59953758302de4b5c8fb72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a6fe4d9bb07a35df5e54e96762f305905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a2d1e3de4759eff8e43b414401a4508e9</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a6809b9b60c90768e4677b9b398963073</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a07981bdbee82db7870f1fb69fbf190d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ae32b237c28fc0dc8c0fb6a0d95ffc7be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintPointToPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a74aa555b80e55dbb4700e9f230bda563</anchor>
      <arglist>(const PhysicsConstraintPointToPoint &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>ac6660242268a76ff271f041fe22ea52a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a2ee05517ec402655c0953184dc7642b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a337401a0a9ad667b5d7c952913c40852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btPoint2PointConstraint *</type>
      <name>m_btPoint2PointConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>a54d76a95cd5fd595cc8c71715479cccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintPointToPointBuilder</name>
    <filename>classnjli_1_1_physics_constraint_point_to_point_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a3bcefc90855e193d66a5932174b141bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a49becf720b22a7be49ffb0228cb507c2</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>ab135c6e1514b155704977143b1d2c358</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>acd35a9a7018977edc47c49ef7eb82272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a75b5f5425bf6d9893de91d87eab21e24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a462ed75523ba1ee0fd259a6184e6e2be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPointBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a1fb76f2a849d7f2a659d82a0ea509a93</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a5db886abd25700bce341507f41d387c4</anchor>
      <arglist>(PhysicsConstraintPointToPointBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPointBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a9188b738b38a4e3cd498de1b74e559c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintPointToPointBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>accf99fe85ce75a56451259ff26975c66</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>ac897b22aa3994deb31a875dd7047d8c0</anchor>
      <arglist>(PhysicsConstraintPointToPointBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a6f88d40ffba6ac5e04a3bf0d95cb8286</anchor>
      <arglist>(PhysicsConstraintPointToPointBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a883748c7fa30b1c3f4e340e7f4aaf7d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a636b1167ea436b1dd497e0072a60a81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a8eff4e6df18c657ef2ff1d4d28b4631d</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a684ae02356a40345b8ac6c981ffdae7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>a48ee05e7ce2a4e2674322b2192c02c95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintPointToPointBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>adb8c14236faefa5f707beaba959fc887</anchor>
      <arglist>(const PhysicsConstraintPointToPointBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_point_to_point_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintSlider</name>
    <filename>classnjli_1_1_physics_constraint_slider.html</filename>
    <base>njli::PhysicsConstraint</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab6ed2eeb48050c378f525ee7f80a4bd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab29e0ae4cc45af8ac95cfe8052f1ed48</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6258ffd852a364064bfddb19669293c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7cc1bbd160314dabb3c6764a8ea1e307</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>af9602575e8d5e0fff26b52871c653484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a57013fed17878085a66adbe06df33545</anchor>
      <arglist>(Node *nodeA, Node *nodeB, const btTransform &amp;frameInA=btTransform::getIdentity(), const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodes</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7e83353e02b081ac6b1a42ca52239455</anchor>
      <arglist>(Node *nodeB, const btTransform &amp;frameInB=btTransform::getIdentity(), bool useLinearReferenceFrameA=true)</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a861837cb7a6b3da7f3a7402f78220efb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getCalculatedTransformB</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9bc7ba57a4bb23927fd1918df223cb4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a0ddd008beae3354d3eb6464d26f133bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a52fc014051a8e446575a43606e5ea698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a51d8981be28fc9abdd9b044db032280a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>btTransform &amp;</type>
      <name>getFrameOffsetB</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3cca885309223cd47665d81ad45b3705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLowerLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a2f84890f5c02e1c5ca7caa2c930562b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a8ce84b863a5f45630d74285509a5f72e</anchor>
      <arglist>(f32 lowerLimit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getUpperLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab3f5c8fdee3a5425050e672ce7cd51d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3ff24369c4200448e7854b3b64943656</anchor>
      <arglist>(f32 upperLimit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLowerAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a236211fb9108e12d05d70996c77f9b98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLowerAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aea8072c63719f2d3be84a02b1cabb9cb</anchor>
      <arglist>(f32 lowerLimit)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getUpperAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9a5f4200038f730b6258fb192747821b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpperAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a01abc657d56a32e5eb36acc2733a7178</anchor>
      <arglist>(f32 upperLimit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseLinearReferenceFrameA</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3c2943c9560065c56e41b14ef38d9060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9d871722b5c2e1b81bcf64a1ad418061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>afd4c73d7f0752743917d974340fb6c67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a732ef9c25c7b514691e56e1bc73e5aa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a31f607f773c5b6f827d27f5cbd43610f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a4869457f8a4a2cfc71f66606ccd942d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ae8c4b265141b12546818c7896867f5a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ac93374ab5758d4e78bb38a1d42962642</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7b7d150cda0db00189ecc492373486f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a711a6208ab0d7de999c4db1a46c5320e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6462fac6e59d92dd741b200973b9dfbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a4745cf240bce575b18b79d874a39e6e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6e763888cee48794371c15a6fd811925</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad408d1f551357257116871c118fa2f98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a11920f6e958b1591cb1faff980aaeb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adf3ced5f93349660f8a34231b1fc03c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSoftnessOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a5357f2567ce7644b56c42215aecbabe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRestitutionOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a0c4a8ac866dc4d7f487d2eb6ea00116c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getDampingOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad03b7dd2c7a81e7096bd813ea39b95a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3aba80e223b149a32c93de1ecbdc7fba</anchor>
      <arglist>(f32 softnessDirLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6d4b746ba8c203158d7cc30a00b138b2</anchor>
      <arglist>(f32 restitutionDirLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingDirLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a51eddef7955b5089ff178c5c06c7bbe0</anchor>
      <arglist>(f32 dampingDirLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a38119f35a3296c2cb3d296b216d9fad5</anchor>
      <arglist>(f32 softnessDirAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ad61cced921c56be733113123f8cdc701</anchor>
      <arglist>(f32 restitutionDirAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingDirAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1db5431eae25f429aef438a3968cb6c8</anchor>
      <arglist>(f32 dampingDirAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>af8944672819807ff34698dd9ca71fa8c</anchor>
      <arglist>(f32 softnessLimLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a70acf1aa88472c443e002d4153f39fc8</anchor>
      <arglist>(f32 restitutionLimLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingLimLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a8da4bf74177a1ccf1c783e2292f24008</anchor>
      <arglist>(f32 dampingLimLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acd70aaf79937089b08b6ef30c8560761</anchor>
      <arglist>(f32 softnessLimAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a72b12ab4f85f816949b59ba75385abf7</anchor>
      <arglist>(f32 restitutionLimAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingLimAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adfa0e530b168847156b10884457039db</anchor>
      <arglist>(f32 dampingLimAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>af6d2ad8ed10a4634f2e0c9e15a43cf75</anchor>
      <arglist>(f32 softnessOrthoLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a46d8a90d1a17e728e2836d020204968d</anchor>
      <arglist>(f32 restitutionOrthoLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingOrthoLin</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acd555aededdf9800e83c513603005a40</anchor>
      <arglist>(f32 dampingOrthoLin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoftnessOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3eccd87e8fb25f41b0668cf4275f484c</anchor>
      <arglist>(f32 softnessOrthoAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a4fd93409b01a00f7307a3483155d1a8f</anchor>
      <arglist>(f32 restitutionOrthoAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDampingOrthoAng</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a08c148b76585f4d2abe9f8569db6e311</anchor>
      <arglist>(f32 dampingOrthoAng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoweredLinMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a442e22e2e620cd3aa19451c239bf7fe5</anchor>
      <arglist>(bool onOff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPoweredLinMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7516538fdd1c4defda6def5290e93eb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetLinMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>adb621e16230cb8e01b05738667e9944b</anchor>
      <arglist>(f32 targetLinMotorVelocity)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTargetLinMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab66ac3f4e1e63a699a3ebadf275b6437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLinMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ab8528b7eba6a82b9dfaed9d246ba784f</anchor>
      <arglist>(f32 maxLinMotorForce)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxLinMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ae4a60d9f5ce61a7a9ab432573ebadc2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoweredAngMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3485779b1dbe5d3d7922d71df253cb9e</anchor>
      <arglist>(bool onOff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPoweredAngMotor</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a6ad2fb16e03ebf5f93a83f762de206d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetAngMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a0c5c5803511412299e72f8ab147b6c9e</anchor>
      <arglist>(f32 targetAngMotorVelocity)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTargetAngMotorVelocity</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9f765345742e2ca1fd00a8bac20bc364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAngMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3bc3e5a8ed7d5d139f826f80baf8a4e5</anchor>
      <arglist>(f32 maxAngMotorForce)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxAngMotorForce</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3431f4ad0d98ae77b47c94c20afdf46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLinearPos</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a78c6ac55f5986dcfeeb43291019bd94b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAngularPos</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a27e2a17ec40d5a576b67e76e31a4f986</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolveLinLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a5a708d3b494cedca05791f188fd8c6e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getLinDepth</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a398bd60beef995b8b39e92ea6b7565fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSolveAngLimit</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a9bc2c78196e81aa82a7708c0ec9e0628</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAngDepth</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a1f98662c2eec6024fb68e54031afabed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrames</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aa094607cc490eaf1edcf429267d76070</anchor>
      <arglist>(const btTransform &amp;frameA, const btTransform &amp;frameB)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a450adff89ca4821c15d5b5e038261e94</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a293103ad00ee8f7fd7d2ddc6ba82e56b</anchor>
      <arglist>(PhysicsConstraintSlider **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a020eb232400507347e4e7fe41e4ae572</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a154d2e4acbf2c4a568ed6f95bb5897e9</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a40db75b41a6eaac15127312ab15a8d04</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSlider *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acb1f1dffeec353b98d5edf9597b42a58</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>ac746bf16e379f1142f987816d8b8fab2</anchor>
      <arglist>(PhysicsConstraintSlider *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a7fcf7e1b1ba501fbe1429e17db845e59</anchor>
      <arglist>(PhysicsConstraintSlider &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a583e96bac901b7464d7cf2272a2d57f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a616ab8c83dfe01a481394ff21db39fde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a3ce0e8d15d15fa8e39503be30a9aade9</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a836a6d7a6b5fe8ff58631b750d867d4f</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acb06c17a06f8ae0163d564df18f9a05c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a44b68eacf15e6f719fdc1a94f4b4ecb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintSlider &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aa46415916ed15e9cc1d2307c48ebc8fb</anchor>
      <arglist>(const PhysicsConstraintSlider &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a0de9fb59fa29e7e1766c6e0e02ef37e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btTypedConstraint *</type>
      <name>getConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>aff5bac3b1c256860d6f8214d64ca8a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>a86bb3a2cb9397577d6f4003c1ff9a2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSliderConstraint *</type>
      <name>m_btSliderConstraint</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>abeac39c96abf6541fba28c9630f3edd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsConstraintSliderBuilder</name>
    <filename>classnjli_1_1_physics_constraint_slider_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a5b3709e75ff42dd9437465c3519b623e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>ada9a4323c249d514ddc490dd5376f592</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a185c67ee17f1c3ee041755d91709a08c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>ae9cbc5f2a609e660a740fcca156c0a03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a940b9375eeda3834193940f434581374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a2b6b73ef4e284e4e138a657a8848c5c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSliderBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a0eea07fc0548741da6cdee5d9e293b42</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a2ecf524907abc5887dcc314a99297da8</anchor>
      <arglist>(PhysicsConstraintSliderBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSliderBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>ad5e304bea0271dd4a80c904a96e569cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsConstraintSliderBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>ae1deeaba866dddbb8a71ec1b28571ea4</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>af5f8d51f95ad9d7e0c503e748f76be63</anchor>
      <arglist>(PhysicsConstraintSliderBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>af4327a38490149a4265c9f7101b635d7</anchor>
      <arglist>(PhysicsConstraintSliderBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>aede51b8778aef72bf1134f8693a773b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a16177681a967d5d1252b283a5a730452</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a5f2070b8a634fdc49a3c8ac1f6e3abbb</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>a7493730f0cfc648a7ba4e1220aece78c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>add7e5d7ff7a64025443104278cd5564c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsConstraintSliderBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>af241f4529e2d0e4cc6cb9912dc064dcd</anchor>
      <arglist>(const PhysicsConstraintSliderBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_constraint_slider_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsContact</name>
    <filename>classnjli_1_1_physics_contact.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>afa89d88f674d282a3bfa5298f0991af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>ab69746db04699f604b6d17d13c64a8c5</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a3b1f29b9f7dde712abecb0729290ee50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>af13f209afaec1bc28dbd047d71042aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>acf450595392492b7f7e5f62e65a52c5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a4e2f5f156a83e857dbbcdaeabd177190</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a5c77ba3e3647f5e71ff0332b6960a5cc</anchor>
      <arglist>(PhysicsContact **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>ab71fc4798c6035544efd00cf20ced421</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a774cecf47bf21a0a6af2807cf6161f93</anchor>
      <arglist>(const PhysicsContactBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a9d1f5b1074cee4a7c8edd683c4be9f78</anchor>
      <arglist>(const PhysicsContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContact *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>acc8b8748ef094f7d05d3b84b64979136</anchor>
      <arglist>(const PhysicsContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a6e13c908bef23f175dc20d5e5a23d25b</anchor>
      <arglist>(PhysicsContact *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a050fd2d4957ae612862b015af09548ad</anchor>
      <arglist>(PhysicsContact &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a417122aab7713317bc18da3d3f6a3bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a53734d054c26b23065f2b994e9f8153f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a31d3673b8451cfe4ea8c0c2e3436a593</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a1bb94f2e84e93ae7060f5d0d6edc20c8</anchor>
      <arglist>(const PhysicsContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a0a658bc8a36f2dca0cf9db21627b9d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsContact</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>aadf83ef4d40400730114a68f853e42c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsContact &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>a7bb830268bd86140800930cdde5c5cc7</anchor>
      <arglist>(const PhysicsContact &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_contact.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsContactBuilder</name>
    <filename>classnjli_1_1_physics_contact_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a5058ab45cbf60b96c15415771dcbef60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>af0f3dd42490776358dd492c47e85ab89</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>ae4ba56df76f28087e4824bb1d8eec50a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a724051c3657dcc9d6982b3f20b60e7ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a25ba4b5be88ca246e8d117d955fb1fd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a91c8b69e90d7c08b8447faed2b17b398</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContactBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a131af3c4be72ee68c6a93cfd6969d152</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aed09aa4931074cf0ee141355e397fabd</anchor>
      <arglist>(PhysicsContactBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContactBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a3d38cec8ab92913ff95d1d4311d30cff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsContactBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a3c138121444b8c66a9c6f5481c4e1ea4</anchor>
      <arglist>(const PhysicsContactBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a710a5f30180c6c5575f9f6330613130b</anchor>
      <arglist>(PhysicsContactBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a7fa031bfb1fbf0eb748ae3350d9e2012</anchor>
      <arglist>(PhysicsContactBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aed94e9c8813e241ef93896673e43dd0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>ad209941717768086727443fd39968c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aa3d78f8ae98c34f524193dd22699bc47</anchor>
      <arglist>(const PhysicsContactBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>a95e94b2fd50cbd2ae7fdea2c617a57a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>aff0a728e0125ac2debb1af7e1e7ae1d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsContactBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>af1319899b50158cd3669cb538a324049</anchor>
      <arglist>(const PhysicsContactBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_contact_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsField</name>
    <filename>classnjli_1_1_physics_field.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>aedc65e6cbf11d4c006636ac5e04723a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a847d3ad0028e318491a850381a33c054</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>ad9c54dfbb4fdd414c3862c9f26566b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a3bdcaefc1a3a9d5b7a247315b67812ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a183eaa822384ca1424e02f5cd49811ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a4646a470388fbb4fd5f405d911e31bb0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a8190a354cc130035426f76c9d815e643</anchor>
      <arglist>(PhysicsField **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a3e58b5592e7ce80d50b9a0a74ee55782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a888c01a315f5470a00e7f77d9b9a7f64</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>ab77b1adf0af32187fef707b33332ed80</anchor>
      <arglist>(const PhysicsField &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsField *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a5fe0a67fa8b3648d408c4ba38c43aba8</anchor>
      <arglist>(const PhysicsField &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>ae7e7079ad19483fb8add9e33af27e913</anchor>
      <arglist>(PhysicsField *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>ab50dd31d1199fec053ed695a7c6edec0</anchor>
      <arglist>(PhysicsField &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>af3b1cbe263122bd34e418930a9a2f9e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a32d6673e4cb636cf54a03d50dc68fc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a44e9f7757b2ebcda987938a0abea31b3</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a927f25e2cfa6e4dded2c44b4b15600a0</anchor>
      <arglist>(const PhysicsField &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a8fe55cbe1f75e559d88ae147b2da3ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsField</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a17d25bf024e5ff48a22e315791ef0fd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsField &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>a45c6e394c3f7d50c2a09207c69c210c3</anchor>
      <arglist>(const PhysicsField &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_field.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsFieldBuilder</name>
    <filename>classnjli_1_1_physics_field_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a7cb860ec3583ac63ecfae95a53492373</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a71f853a857bc30b68444f69b9bc9936d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ad4016d00bc62ec1270754dde5b31d835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ab9d6b3a93b3e8e05ae0cdf325c2d29f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a241d709c0cb9ed68efe50c915a58975f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>abffc04fc136536f947b076b86715c4b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsFieldBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>aa1e7294df124723f5eaf563c58430d2d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a706cc8a4651003410842cc201731cf1f</anchor>
      <arglist>(PhysicsFieldBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsFieldBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ac4194a649769d0cd234e9174ccd56257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsFieldBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>ae22483c5cbbe46de578d2ea76184419b</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a533642614f2f7ce25456722a0ecf7fac</anchor>
      <arglist>(PhysicsFieldBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a528569317d69d7470cd2129ace16a330</anchor>
      <arglist>(PhysicsFieldBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a3f8f63a0e33bd854d2277ace452804cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a95423d081d494102a825469955b93731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a3a79f5d4bfdf77e2c41cdfad8ce61f66</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a61855181b09fba8e1f01c3626d55abe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a67111b5d783b93e2098cef2025442b1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsFieldBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>a5878f42248d40f6756cad0d1a5d691fd</anchor>
      <arglist>(const PhysicsFieldBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_field_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsRayContact</name>
    <filename>classnjli_1_1_physics_ray_contact.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a137ae28469554d1e1a9f932fdb3f808f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a7dc16a5e0bd9c514c615393f2e96a99b</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a0359afcb01f851ad9774bda869bc8eea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a0bb5770242ff196aa9c3102fc4baa731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ada58cfcde104252f771ad6d1b604f7f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getClosestHitFraction</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a911887e0780b9a95c0d003833034f58f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHitNormalWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a69ed826971b15e1dac145fe0f220663d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHitPointWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ae4a0bc9a07a0a504fecd776424ee89f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getHitNode</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>aa7508ae743098d57b2e11862decfeb2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getTouchPosition</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>aead7a5c4b596bb008533c4d75ec06054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a4292b0c22fcabce21e8f7f066ef84812</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a83407a542ac6b4fe3afb856949a6c8f1</anchor>
      <arglist>(PhysicsRayContact **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>af2363fea4145cacad545b63386c2b071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a44731e003241a785dbdb45ae94531c61</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a438e26cf68a5d260f2fc3b6d23acd387</anchor>
      <arglist>(const PhysicsRayContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContact *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>aba4cb7f93abc0faacee4f600760405b3</anchor>
      <arglist>(const PhysicsRayContact &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a7c45fca2b9c95f31d4fac45b3f20fff0</anchor>
      <arglist>(PhysicsRayContact *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>acc6851bfddfb4c66a81f7d000fe5b817</anchor>
      <arglist>(PhysicsRayContact &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a46bdbc4c8a6f814a98a9f7f72510b513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>aaf35d126b209d8f09270fad928faa51a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>adf6960ca7a232ee4d2d58afc105c1883</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a158613e1edba5d0175a8a0cdddde1109</anchor>
      <arglist>(const PhysicsRayContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a55b296d9dbe3cf8aa8e886a75fc8c0a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a75d11d2cb2a59dadec4cf08c8d74b863</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsRayContact &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a02b26a7d8039cbf2b595f517bbfaa166</anchor>
      <arglist>(const PhysicsRayContact &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>screenPosition</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ae44f643d72f6feff01536b0514ea2cf9</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ab8995b347efdd2ad6d096dd0a0359977</anchor>
      <arglist>(f32 m_closestHitFraction, const btVector3 &amp;m_hitNormalWorld, const btVector3 &amp;m_hitPointWorld, Node *m_node)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_closestHitFraction</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ab45c460f290a435ea879528f4dd5b372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_hitNormalWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a3cc7540d9aff7dad7860e6910aad7b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_hitPointWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a8bb6d7b4281cb7a5f36e28f87d1a2d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_node</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ae315ed84ad9ab0f019a7a515f5a30f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_touchPosition</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>ad676d79b15af074e79631759e42f59aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_physics_ray_contact.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsRayContactBuilder</name>
    <filename>classnjli_1_1_physics_ray_contact_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a03827057cf84cb281096ce1935a9a0c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>af11d9c73fa7c074c62fa2e5e01f368d4</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ae2ebfa550ff3ac2c6cea079947bea034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a55fed195f3192a411c978c18a21c816a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a67c24309ad6afc528f4b6aa20b7767e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ac5d9bcfbc0d3938416fc862576a08a9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContactBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a9ba1430a1963afc623987d50200c616d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ac2940123b0ac1ad19d09278453d55bff</anchor>
      <arglist>(PhysicsRayContactBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContactBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>aaee5c3ad4954040fedd568fd118e553e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsRayContactBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>afb36a78aa3fea0526e46c44e7eca0e42</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ac398ac93035c6ad5eda3abf5fc242813</anchor>
      <arglist>(PhysicsRayContactBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a512a9df934c2b61abeba6394f697699d</anchor>
      <arglist>(PhysicsRayContactBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>aa6edc3d5013e98be7572fd4e8d1d1af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a25c1c5ae3477bfde44b1faf6c3bbb837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>aeb1ccf771870bce935fb22296535b9a1</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>a84ad29c8600360cc0739cd7715045dfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>ae9bc39b2acc2aa75d1bf4052186936d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsRayContactBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>acc899f63fafc4de380b1f3b829d3babe</anchor>
      <arglist>(const PhysicsRayContactBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_ray_contact_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShape</name>
    <filename>classnjli_1_1_physics_shape.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a0612a1c8c3f4520d78cb7f5838f03074</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a2ac8a109a5ad67ee79f40ce8f28337cf</anchor>
      <arglist>(void *, btSerializer *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a72cb98a55614a3e264b8e4a157b45c64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ac7c6b2ac373892095f8220d56f8ad6de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a890d915f88af06dcf1ac1fa4f5943dc2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>btRigidBody *</type>
      <name>createRigidBodyWithShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ab71ebdd73aea0c6ce0a47c9c47284a66</anchor>
      <arglist>(f32 mass, btMotionState *motionState, const btVector3 &amp;localInertia=btVector3(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a7195c6413beb2e8bc4916e97ffca02f2</anchor>
      <arglist>(f32 mass) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ac3f7cc28341fd58ace164bf8666480f0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a24df999ba2b7ac0d9abda09c4f17c2fe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a657e98309a2a171ccb02a054a04c9b57</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>acb05a16bdbfa5cee6dcbab5c253eb78e</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a11cb80220393bfce177b8bdc34f7f359</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ad5418af48c1210d6d5119244826cacbb</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a346a118ddc9e6b446ae7a8586fee76fa</anchor>
      <arglist>(const btVector3 &amp;pt, btScalar tolerance) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLocalScaling</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>afd2f02f3fd7ab5c1b48f445f2831f18f</anchor>
      <arglist>(const btVector3 &amp;scaling)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a33ae845e59c2c693c07a17cc112bba3f</anchor>
      <arglist>(const btTransform &amp;t, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShape *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a701dbac9216cbda5493851634ade84c3</anchor>
      <arglist>(u32 type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ac3f7a072f33f984a3bac11b2c9191167</anchor>
      <arglist>(PhysicsShape *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>aaf889e6e5bc193fb8c5518a3a4c48f9c</anchor>
      <arglist>(PhysicsShape &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a2d21f55f6e742bddb5b5fc44223f96fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a23c941342461cf9b8ea3a00f96e4b166</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ab15fa64eb27e24f04baa5ba707a9a030</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a16a9abace510dc1886f82c09782d2976</anchor>
      <arglist>(const PhysicsShape &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a60e97b3ea2073db45dde247fd1c7d379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a4bd97d3b6ff4c10b082cc228aec318b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a7c29f1de36c1043e77c070626af242ab</anchor>
      <arglist>(const PhysicsShape &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a527e956caca24bf16ed0d47f69ff14e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a2910f0362035c971f245349a55378b01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a441e82a42f3b588a409c3b6c41288abd</anchor>
      <arglist>(const btCollisionShape &amp;shape)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsBody *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a060d12d9eabbed9aa1187580def44571</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const PhysicsBody *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ad13001911fd2fe30b2eee35b883b6bbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a5602338bf4d8e0e6baa58d3daa8dc90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_physics_shape.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBox</name>
    <filename>classnjli_1_1_physics_shape_box.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a0aa7607b93e89ea9fe1c6a73e44ec1d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a3c8a170c8a0a3bb3184886d9657df74c</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>af0500ac8a54d96ada3a3ab1b775fdd76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>af078fddd3770d7c3846ef74d00d613e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>aeeaae082ee5e0fcc1fe07cff9af3d940</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtends</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a25c10d3f2ecac19728eb1696f566bd91</anchor>
      <arglist>(const btVector3 &amp;extends)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getHalfExtentsWithMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a693cafc045442dc4811f65a54e6fcfff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHalfExtentsWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>abae566d1d3e1f9fe77208904eaaa4f13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>localGetSupportingVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a90137df2c2cfd10460f1cdf657dd89bc</anchor>
      <arglist>(const btVector3 &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>localGetSupportingVertexWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a6545aef4a08365f0fadd57f74c3518cb</anchor>
      <arglist>(const btVector3 &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>batchedUnitVectorGetSupportingVertexWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a99378d684de6e94bc490521804eebb5d</anchor>
      <arglist>(const btVector3 *vectors, btVector3 *supportVerticesOut, int numVectors) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a44141f2092a02d14d8b3d1036c53b709</anchor>
      <arglist>(btScalar collisionMargin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a96db7f2f7c960c4c3b57c77b1bdeac8f</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>afdf7c5e8b6d17bbee2f62a0083bfd072</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ae7e7ac75e0350dbffcb6ed9c0e6491c8</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a107c31779cfb98b22c44b90d66f93db9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a36c3b4521b3559311f259e3c1bec1ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>afaa84e3e0b58aa2fd2a1bdd269c39c21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>af1045ee343d3434f0187c526bfc23fb5</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPlaneEquation</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a9d83af6033c2604aa9472720ebda40be</anchor>
      <arglist>(btVector4 &amp;plane, int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>adacd48a8deac2b0469f79372c5637170</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ad3df70682f66f1a613a14c03e5390cc2</anchor>
      <arglist>(const btVector3 &amp;pt, btScalar tolerance) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a0b8e1c864d1fc1be5e6b4b003666498b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a6d55d7d82a7670804d59a2b8f78f649d</anchor>
      <arglist>(PhysicsShapeBox **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>acc8fc5e187407dd0f03767fd19d82de2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ab191df13c23f00ae7119b265444d3792</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>aa04d5e621853d74464758ee5a48b6f73</anchor>
      <arglist>(const PhysicsShapeBox &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a53c86d86b8d75802aedcf6bc187d7775</anchor>
      <arglist>(const PhysicsShapeBox &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>af2cedff97d4c5d4f4c9b48b747151edc</anchor>
      <arglist>(PhysicsShapeBox *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a57859a8942039904a92578f289aa9236</anchor>
      <arglist>(PhysicsShapeBox &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ae95550307295d398f96489183c27f8f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a42baebdb0053634644acf4df9ca2562c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>ae80dda3b86c951c04dfb339621159843</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a9e8d8253b125c22fdaa2bc56b48bdf56</anchor>
      <arglist>(const PhysicsShapeBox &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a2c6aac0c51045c17a0d364fb9fdb151e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a3f77f0341fdd6706a182ce94915e0ecc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a3096f9c7ee5fe5a0b15672d16bd330e7</anchor>
      <arglist>(const PhysicsShapeBox &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a5b2c32f5353b66f77a44fa53fde65d60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a3d4319affdfb39571fa631ae31317b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>afef84525d2cb60ad5f2386a4faf4db9a</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btBoxShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a23520ac102041f17c8edf396d82020d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btBoxShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a9b3a640de88bca9d4aec57a5b04c69b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBoxShape *</type>
      <name>m_btBoxShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>a2e9169aa7d91d43890ac1e231ebd52a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBox2D</name>
    <filename>classnjli_1_1_physics_shape_box2_d.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a14716c113a5f559ffde6051a018bb7a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ad3f806a86d7db579cd7d43f4e8f41ace</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a176b8cfb4df192e48295adc6e97a1e8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a1fd8c07d99fd3cbd64a94c3030c0d5d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a66e77cf7de8db55806fd760ff66591b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtends</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aabb6127836224df169241021262fd609</anchor>
      <arglist>(const btVector2 &amp;extends)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>afe01bb58b54161763a144b4560161265</anchor>
      <arglist>(btScalar collisionMargin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a361328cd84db13fa37ae62b727e94596</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVertexCount</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a14448749c7d6f84beff490ca12acbd6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ab6b86970a80827d5ea8620dbb080023f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>af97955a8925df43fa8339b742c0c082e</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getCentroid</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aa4e53789b8520050a5c84c7ad6ad3489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a78cebc044d0dce9bfbf9bbad31398419</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ab116e4bce67ace59c1d7b6f687a66d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ad5d35467acfd3c047d0c85c9aa1ad415</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlaneEquation</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a89174101a9d32e694bd005f77d42e60b</anchor>
      <arglist>(btVector4 &amp;plane, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a34a87015a53f50f543d106bd3af1ab07</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a7275508a58e70148f5c1e0d26b5e1bd6</anchor>
      <arglist>(const btVector3 &amp;pt, btScalar tolerance) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPreferredPenetrationDirections</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a1f43866f98bef22ba0fd9b30c1eee161</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPreferredPenetrationDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aaab48e4259b37f9c13739982ef5b4904</anchor>
      <arglist>(int index, btVector3 &amp;penetrationVector) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ad8e533cb22ebf975b57fa5754922ae41</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ac9aadd4b0efeab6c170ad3f37ad8cf40</anchor>
      <arglist>(PhysicsShapeBox2D **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a51f4d02cf43ee6927f982a93607e2655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aea37ab0a015b2ea5c7960469a762cf18</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a6a2976c0d404af777361ca4e20721b6a</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2D *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a83239f524d6261f9717e0ac238cddd00</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a673615f3b7ae376a2c3baddc97df5f4a</anchor>
      <arglist>(PhysicsShapeBox2D *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a9d71f53154968a269d4cc45feebb106d</anchor>
      <arglist>(PhysicsShapeBox2D &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ab37ca536b706f65c2321c9609ba2f462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a10a881d6e9951bd920eb1ebc53dbe2c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a4e3a1ee2fa643fa7e1d0e75760eef068</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ae279a61f007c074ff282ab5eda19c084</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>aa4b846ab673bd8610370008c78f3ab10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a0c79a9523afc160ec1a50e1e4c561bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBox2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a00f815d6593063c9cf4b886e8e591630</anchor>
      <arglist>(const PhysicsShapeBox2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>ad8d9342f3ef94ae2426cec1c771c0208</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a484e8759584df9acd50c60740906b201</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a5948eb2b64291b9ad1e1ce711326b5c6</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btBox2dShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a2e9e4d1090ea0041f87e4ac4b040ec34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btBox2dShape *</type>
      <name>getShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a88fc80b2bd00f7615c50e19322acd612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBox2dShape *</type>
      <name>m_btBox2dShape</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>a3e946790bb7d72f91faf88224d88ca72</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBox2DBuilder</name>
    <filename>classnjli_1_1_physics_shape_box2_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>abcd84070f238c9b6a9b3e5637dc98c03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a5d79090ff3c7f67dfc64869cd8daa6b2</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a37233c16c737855c53c266dc61c38460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>ae6471440a74be5d0aaf13df66ee076f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a9a211fdd20d1a6f5f2dda97a1d8b6b0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a1ca0c35a90b675ef077c5e4a3e0203d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2DBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>ae5cacfc4548f0b36c4631ff5e37a157d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>af5d8d7aa9dcb2791a1be28169c206593</anchor>
      <arglist>(PhysicsShapeBox2DBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2DBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a3273b7ee5aca9f70908bfdfdbb9c8a7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBox2DBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a61c14aafa279c3c0a6243ec4399903e5</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a181009ebb721b27eade52cbb955fec43</anchor>
      <arglist>(PhysicsShapeBox2DBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a3c5646d0ab24eea4247ca6891f484de7</anchor>
      <arglist>(PhysicsShapeBox2DBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>aa96bb4f668a8ae62c5d67011dbfd3ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a8a59e68653b3237ad1afd4915ed9bef9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>ae62021092f97a31992324274c7cfb3dc</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a92cf42c5f99d27be559a4b9cb4b05acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>aa33da8c914fd329211191d2e6050bc15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBox2DBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>a0fb1a5838c3833566a00d90181ca6598</anchor>
      <arglist>(const PhysicsShapeBox2DBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box2_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBoxBuilder</name>
    <filename>classnjli_1_1_physics_shape_box_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a31c3fbfa9ce02a424e57525247db6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a7f70d7647631101be450c593dfc3553a</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a1d1f75cc3ba31ea15c935260b2401e97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a81c30888998942dae14ca1ed4c766b10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>ac0de9c8dfd8cb0bf1499bdc5e916d022</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>aff2b20bb67ff6ad148976dd1629d1698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBoxBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a4c31be2ff7f17fea5aad2dfc74f35e19</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a82c983d44cde0dc3a4bbe9213c2d41b4</anchor>
      <arglist>(PhysicsShapeBoxBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBoxBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>abebd1fabb504a63b33ee01edff45117e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBoxBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a41cbe409e54e6c6411144e9a3507fd61</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>ae6b9fe92a84c38262a12ae92d30a04c6</anchor>
      <arglist>(PhysicsShapeBoxBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>aabf5ec5ad49f44bef4a06d0a484010af</anchor>
      <arglist>(PhysicsShapeBoxBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>afeb5a27c03c011899dc92d3925d14411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>aad1b89364fd342f213ffa722cc014073</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a66153c085bf838cfcb4587cdae29dc80</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a302bcf9a9f1df9753cbc4308e8212409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>a6f35a485d44ef85b34cbd9332cfa1dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBoxBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>adc89f620bf76da820746cfb1f5d7df53</anchor>
      <arglist>(const PhysicsShapeBoxBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_box_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBvhTriangleMesh</name>
    <filename>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a04d31d1728e5c858f3e5c91f00933d1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a559d30e350c441eeeceac724a635c9ad</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ae178ec3b2606f34fd8a5a659be3f202a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a559022a1d5b28e604abf671607ca2527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>af6efd230aa3b4d6dce9717586ac0630a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>af0263ac5341f2a8e560142a02aba7f34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ace1bebc13dc826cfc9475b55ba58c5d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a5595ac8002b807fefc1eed4b0dbc3762</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a3d32ee4da977a41d62c1884eebe8ea93</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>abc8e8e1d5d04b9a5fc300841bc8fd70c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ab45fe98147c8ee9fa8a576ad8b1fb472</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a6262c423d3c1e634d3acb497d76e70d3</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a308a7517344fdd5a064f19259e01286a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a98bbf411e994ce5db281ad080b33382b</anchor>
      <arglist>(PhysicsShapeBvhTriangleMesh **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ae47d76be18e0603117b366f64c73773a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a74b16f1f34663f05bfa4b0150c12b382</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a6d84eee4990aa600cca8a278e55610b2</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMesh *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>aea4dfccb4d3f2e77de449eb2ffa18390</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a7a04fd696544a8e1cdee9d307a1bce67</anchor>
      <arglist>(PhysicsShapeBvhTriangleMesh *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a144673bc8d83ca747964024154e8b525</anchor>
      <arglist>(PhysicsShapeBvhTriangleMesh &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ae410fd0fc8a6a19c3efa29a1d87f833d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ad8459c8e754640e092b27ebf0af6d380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a83dc8a1b69e35a4fae6861b8de200fd0</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ac6e8748f394f19877a8c3344cf6c5b7f</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a364ae47a05022af3495fb4dc2432f275</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>af2aab21ebea60c50045d380f9aa33a7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBvhTriangleMesh &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a13628bf9856c76e8f4cb10d867b80268</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a8e2e34bd218b74d7f03c0bdcdf142901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>ac4db6814bd13306aee765a71203525a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a5aaf42224afb0773a280daddfa3c93d1</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBvhTriangleMeshShape *</type>
      <name>m_btBvhTriangleMeshShape</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>a3e9723a04a224603d3349a898bf6746b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeBvhTriangleMeshBuilder</name>
    <filename>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>af797e698d40eb6aef835f8d346a3e52c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a2ee0c6483dcec7a031bdee49488eba7b</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a5be31b8731f8a5ebc9c742b1c4e88181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a45f239131aefd54239593232c7926dcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a356f9a0d887db5defe1748427a9be4e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a3df3eb3e133b76fb247ff6b9fae01a72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMeshBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a7ad3378b3bb9dd8a11f510bd37cc38ac</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a1a75f574ea8a4c79ab5541e40a06be0f</anchor>
      <arglist>(PhysicsShapeBvhTriangleMeshBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMeshBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ae65c5a0d924be1661f201f35eedbe1cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeBvhTriangleMeshBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a2228084f7bb0e23ecf92b03b643c7b9c</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a4b924a758124bf67b573e7d3b8958f56</anchor>
      <arglist>(PhysicsShapeBvhTriangleMeshBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ab1244e85c5e210c389307bad6de2046d</anchor>
      <arglist>(PhysicsShapeBvhTriangleMeshBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a5dda474ef30e475f54b1fae2bb256a9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a31a08f20298fb972cafa73efe7ca9eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>ac86f9bfd4a49a18b3f41c4199e9058ab</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a01af1bc430fbb5b7b13e0e54e7d099e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a5239a5706920c27d516419ccd5db22b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeBvhTriangleMeshBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>a56d926d92fcf0c61be03b6ee09a0c079</anchor>
      <arglist>(const PhysicsShapeBvhTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_bvh_triangle_mesh_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCapsule</name>
    <filename>classnjli_1_1_physics_shape_capsule.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a02e303c62d9e0924d4e7649b9bd7bffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a48a70d364b231ba98de91dd53af33ed3</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>adf81c202808451b499e665d7db4a2e93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a7eaa51f833cedddc3f70ee71ce83fc41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3ca9563249b80caa6c7e745d49340130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>af85b2258d5ab0b0ac1dbe88419c32fd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a0e06d7b68da66e3af079f5e700d384c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3ae09d2ff8191ddbe9cf610f4795eab1</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>afb1902c79121fd1feba6df1b8b70cbd3</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa0b34e9bbff704708da44cfae05e0579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aeb22f9561fb8da247c71d2c19639277d</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a68c39b5cf57194cff15a904d3a944e3c</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusX</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a17194d0ea8151feb0b6faf0b39842bdb</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightX</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a1983fb785ef1314f92027dd209d96774</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusY</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a5799e459af37db7465c58103738070a4</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightY</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3352f7dee2c3f947f8f71ad1c4d9b46e</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusZ</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a93ecc81a4a9f71c82e6968b10d7decf8</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightZ</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a076f5e3be196237e9854d9ae2ceadfe5</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3d69704b5ac77d6fd4578a9aba53e422</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a376aed4ab15cbc18e30b4ebd65c6f864</anchor>
      <arglist>(f32 collisionMargin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a0fbdf8a10688efc4a289b4fca48b33af</anchor>
      <arglist>(const btTransform &amp;t, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpAxis</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a4cfa7c77b533b55bf5fc4d6bd9554afc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a14ecb677772d4798d4bdcb5c3f971db2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHalfHeight</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa70e8084e84fb039010c16416eb126e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalScaling</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aced243d46142c8680d87e2cf4fbfc5f7</anchor>
      <arglist>(const btVector3 &amp;scaling)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAnisotropicRollingFrictionDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a8bb4ac31afc01e2d17d0891eb29d072a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a9234db71fb65c7514e32b384c07359ed</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a1208e5bd3514c6a4259b312322575e2a</anchor>
      <arglist>(PhysicsShapeCapsule **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a735bd23707d27292b7d94124afffed5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a4c14553480dab63092c10f6b9cac7fe2</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ab697ab88912433e342844d090492cd7d</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsule *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a0340921c913c7b57a0b553876471bf98</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ab8862c509b556bab997e596e4181fdd8</anchor>
      <arglist>(PhysicsShapeCapsule *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>ae4e2004100028feb7f7af4c9dab34569</anchor>
      <arglist>(PhysicsShapeCapsule &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a8d41dedd4e23513219a6f598b1a7007b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa5faa50ab0e935dc91f7000b0c36d8b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aaca36e4f925aee078532dbccdee02eee</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa8fc0e2d8af232c76a7b6295157717b4</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>aa5938a5c85d0908c108190e0dbf35f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a3e2d57b5b55c9929b544ef0c3eca471d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCapsule &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a08cb2f051b3a3852425a1ca9528b3f8b</anchor>
      <arglist>(const PhysicsShapeCapsule &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a1a319c965b9b504353759dd8729944e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a7d13876272eca6b0fd5d7f04392b134e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a8f520536b574f254ba6635ab2fe644cc</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btCapsuleShape *</type>
      <name>m_btCapsuleShape</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>a5f0db680ed20e467ade57cb3c40b96a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCapsuleBuilder</name>
    <filename>classnjli_1_1_physics_shape_capsule_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a2478bdaf8359646a09b54d80c330aa8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ac3f3335354278473758cab0428df5216</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a449979329f6b4b4093396ab819076c72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ad3c2c7ec2142d57fff20665c52213461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a7fd6bd989de9f3b930b7af5816dddb3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a871383ee2ac35cb2c4fc762fa6cb8310</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsuleBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a470b4bb9f3fa3294ad0d6f18aed1ab4c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ae03a51c4a693891bdfb5fae80b7c9c9e</anchor>
      <arglist>(PhysicsShapeCapsuleBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsuleBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a8e2a13fc6a5c9c67231f9987523590f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCapsuleBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ae9612d564c92dd65492bf4a1115243a8</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>af369946b7504220b7cdb5bd59cc0ac31</anchor>
      <arglist>(PhysicsShapeCapsuleBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a4f37e94a0abb1af66d3299281520476a</anchor>
      <arglist>(PhysicsShapeCapsuleBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>ae351e11296275cf1cea9aed9c06d3346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>aeae40b9de6a3a4630b4f23b9b114d493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a9829b03b427a586ca796e915ccd55172</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a168171c081b41c47c831398a75902743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>af0f9f667e26bc79907fbbf7f2682eebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCapsuleBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>a02d75bb339253e9aa94acc9ae4229bef</anchor>
      <arglist>(const PhysicsShapeCapsuleBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_capsule_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCone</name>
    <filename>classnjli_1_1_physics_shape_cone.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a17be301f4efefa570239611a65a8dd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a8697c559d914b92d57671d4204e336da</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a16dabd0490dfc7d3c5695ab39939f692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ae5cf0a39440a5d46dbb8cae82a73c794</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>aa424b40c2427b3fc907e359e2c1d026d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a7d37fd30a4ad7615fc17682d06824c11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a238d949b674d432f4f7f4accbcae1d8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>aa0f34f14fa64e30bf5f52c5e7305885b</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>af77e8177d252806cdfaeb05ae88bc305</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>abb7a45ae2636b54cd6f986c2985daf65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a045f46217a76bd453e311c0f04528d36</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a9641ea16321a24d8eccef232761b5197</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusX</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a8a67974576e194c97ee8106135d94c65</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightX</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a28c6c8539b9756348191fd0504512993</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusY</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>add9d625b2039fa0689e410cf86f2df88</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightY</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a6b504b0f28f39e21cf5ef9c07314b4ef</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadiusZ</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a67f210be934ad9f9ce06d5edbfa0ee53</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightZ</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a7a900e59ca5b55008a85011a14bb6f85</anchor>
      <arglist>(f32 height)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>af5f9bdb09664649e9d7398624f5db6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHeight</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a71aebb1e12422618b5d09c8d91c040e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a21fa87ea8cac650b68b2e42105923c0a</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConeUpIndex</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a411e6e50e05af10e3d4c71e8240775b5</anchor>
      <arglist>(int upIndex)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConeUpIndex</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a8c35f240d1e7e38239db309d935792ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAnisotropicRollingFrictionDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>add550b724bf1cf271ce69b3f2f3de399</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a53bbad7291cfc99b45a4b755eb853dc3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ab9714f1b9af213f9bab289ac60a6c57a</anchor>
      <arglist>(PhysicsShapeCone **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>af0f9059a4769091de3f7191544323904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a01d3c914e19d5d4e539f1f5440f94d78</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>aa62661a9209d65ef178185bf87aa1285</anchor>
      <arglist>(const PhysicsShapeCone &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCone *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>aa32dff9bc067849302595ced93cadf39</anchor>
      <arglist>(const PhysicsShapeCone &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a91510476813e2e6d113cf4955035741a</anchor>
      <arglist>(PhysicsShapeCone *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ac5bd2ec8c47b39939ae5324f36af0e92</anchor>
      <arglist>(PhysicsShapeCone &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a8d8bb8d53ec48270be2bf51806ff912f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ac6a158806b78bae84ee7cc425d246ce8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a4e3d15653670e4817d297dbfc777abb9</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a99e81748a3195479cd0dac23217450a1</anchor>
      <arglist>(const PhysicsShapeCone &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ae1ef881259006695699643498812b147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a13149f9a82c2c2bb600f4135af362d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCone &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>ad649d8d18a88ccedd68e4dda3b3b8c0f</anchor>
      <arglist>(const PhysicsShapeCone &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a39f88d5fcc1139aa139c9d9163240e9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a504851418142c2a7abd89c3861f09caf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a9d1a22e39d9a3b70646df7ff58bd46c0</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConeShape *</type>
      <name>m_btConeShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>a650023829d4961897114be23b7123c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cone.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConeBuilder</name>
    <filename>classnjli_1_1_physics_shape_cone_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a5b98a951c00fe9b03c121d3e94b6e910</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a2a0376fd376d574255de19de5961acc0</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>afaf1daa40f05416842f5eb9f61e58608</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a68948fc1dd3683ea335c5bf6645dcc1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a11ff6199b06423247720ecf8585d69bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a30e60c72c505f1945b25990affe53aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>ad52483797ddcb3189e2d28b386a22614</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a90298bcea1676d8c3655e7b0cf243555</anchor>
      <arglist>(PhysicsShapeConeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>ae90e688c959bed817ee008755f7f8284</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a740146e491d77b354a8ba7c0bbcec109</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a4257de7ae7743d0bf8a537b1c2c1c28b</anchor>
      <arglist>(PhysicsShapeConeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a2c5f053be527c492b5c54f50c43eb255</anchor>
      <arglist>(PhysicsShapeConeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a79efe7234069d916c0d743b7037abcfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a4bc0201417bffd77b88719ee19f20327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a6287d989772e35f6970a09f5675cd11d</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>ae94f4900d22701a09a607fea8af8747d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a8f20a57dc48b9f3f1a6fd1375199abf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>a72b982131c1f57bb408cf650fb7fd637</anchor>
      <arglist>(const PhysicsShapeConeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cone_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexHull</name>
    <filename>classnjli_1_1_physics_shape_convex_hull.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aa9ec0cd740c7401ec7aefc8329b72ce1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a2243032bcc3590a97f3ac40f976b3703</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a90c6c121436e997379305a4fe66bde0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a000cd31104b2c03cb68652d59d39a214</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ad1f7999f76923d03c3324371595f8bec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a14ad34853c7049de052a460fe1f349c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ae60a0cdaceb0fe22f53425b38d4b039d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a1da6bacc7f59a6a2adec45322075f4a9</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a274757f4f0bc1cf0e229c95c07fef7bd</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aeff289a96116eed946c2ba7c77a9a101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ad7658f47a3acc7825453650f22dd72c5</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aa36afe5a7ad06f0195e3400375a99974</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPoint</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a4d739444321a865b367a2094686ce14d</anchor>
      <arglist>(const btVector3 &amp;point, bool recalculateLocalAabb=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUnscaledPoints</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a6308f57aaa90f995867be22532bfcb02</anchor>
      <arglist>(std::vector&lt; btVector3 &gt; &amp;points) const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getScaledPoint</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a9faf016dea8118ebd6b321f84cd8cecf</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPoints</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a1dffedec65f0094774fdee81709f6123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a7fa7815ca0dcd22b8518e2800104494c</anchor>
      <arglist>(const btTransform &amp;trans, const btVector3 &amp;dir, btScalar &amp;minProj, btScalar &amp;maxProj, btVector3 &amp;witnesPtMin, btVector3 &amp;witnesPtMax) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a403439147d1030a6cbd6b8d273b19994</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aba4f42fb932f88910c99d97252a446e0</anchor>
      <arglist>(PhysicsShapeConvexHull **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a5f777094ab8a8507f0c077456272db93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a022a78779d029e127635a9e8ec790ae2</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a56c1bfac52ff878caaa4548b4dd7c20c</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHull *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a8d7c4203a34f5db7faa52f594fe4bbf0</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>af78f40a84f2e0a1e4fe2fcf1c5f4ae74</anchor>
      <arglist>(PhysicsShapeConvexHull *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a88aff2dea2118c7a1c0f95c6d0d2ddda</anchor>
      <arglist>(PhysicsShapeConvexHull &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a44c6ade4db7be6193253e6a364aa9713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a363b041662a8c81f4e27ad2d3e56c5bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a6da6fd77ce73c59de118b71a9a3c1519</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a860d30a92c8d7bc8b3718880c4e9768c</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ada4b577fed72fdf40be9454d92c34ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>ad283854bf299d69f85495bd8cb78a9dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexHull &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a6fa6c108dece02f7076f7de56788fa58</anchor>
      <arglist>(const PhysicsShapeConvexHull &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>aa8378f7e3af08e778dce0b416c8e0bfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>abd5ce039acdb2ff2654bbeb36db88ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>a0fbc71273b102cffdb224798d5cf0d49</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConvexHullShape *</type>
      <name>m_btConvexHullShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>adf9e91ee0f43ffa85eb61ba6237c233d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexHullBuilder</name>
    <filename>classnjli_1_1_physics_shape_convex_hull_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a96ace17c99a343b123555173e1150316</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a10dc63611b53d78494287ecca38fe3dc</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a76d05fadd8ccea50dd90a6528e5002c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>af7f60ae74a27d8338281678cd150160f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a844516ec483973fc1d0264c7c4c3f79b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a8c2b997c0e957a8c011c2972011d1b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHullBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a0f30f085beeff40b964adf704c5621fb</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a46350533a0425e6e6b6627eba62a535b</anchor>
      <arglist>(PhysicsShapeConvexHullBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHullBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>af4eb31ef7cd00ad25d31c7eb67cea173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexHullBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a575339a2be728a169b8eb6ec2aa15255</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a14327ed45eea52c4c0149b2d79d4603a</anchor>
      <arglist>(PhysicsShapeConvexHullBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>ab016cc01e763bcba040840b98a80690c</anchor>
      <arglist>(PhysicsShapeConvexHullBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>aad6a6c1a62f556a45dbee87c8a4ac9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a9119532f39d13cf420723d9e6312a8ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>aa754e19f449577cb65927645cc4fedac</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>acf566e62ddaef7659b11a27e273b8858</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>a67c4e81cf3a30215cdcf9af6304e9c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexHullBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>ad9318041e15c04f4ecb9f6dbb35935cd</anchor>
      <arglist>(const PhysicsShapeConvexHullBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_hull_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexTriangleMesh</name>
    <filename>classnjli_1_1_physics_shape_convex_triangle_mesh.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>abe17d7d9dd1c880e76553e2fc7f6da2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a4a009f76809d15cbcd4f4e6f8353f1c4</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>af468a2dcbc7bea9b1c7fc4cefd381f6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a6e9b5aaac0e31b354e53058d0a5da73c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a511b9645026962471fdb4a12cef49a37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aef5d4654e20f1c128b350867c2ea8eb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a71cabda2ee30273b0a6ae2f5b390102f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a75802aa375b7a694779dac73864c2cf1</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a53a05210663e07ec01a0882110b9ea56</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a4a79b73e99c68e69332d5603f9c825f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a4ffbd0b5fee6ef20eb80063a548a2ef3</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a2b9264f4c5e23ac726d3aab26178f33c</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>af9375054b0d4a6b18a833ef01917857b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a6459cef88563e5ec60b75087e92df163</anchor>
      <arglist>(PhysicsShapeConvexTriangleMesh **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a5884ff06b5fba44d4c5f8575cddc0cd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a1c38787be54ebd44f9f7050e6074e382</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ae0f2cc0e5cbff56245424b4235db842c</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMesh *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a843d37268a560c1512ee1cbb6405c46d</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aa5c6e79a23fc865fc1f1bef9a943fafc</anchor>
      <arglist>(PhysicsShapeConvexTriangleMesh *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ae14ef3bb61a75e7964ff58a82ec4847f</anchor>
      <arglist>(PhysicsShapeConvexTriangleMesh &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a6a96f7fe730935004042f2a74c1e0bf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ab5f351b3bf15c7bcb636031dbe8914b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>af3a35d1c8c12749848c19e9aa72b966e</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>ad01fa32852ca4102a072a287e19e31de</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a205939fd6060adbe495dbaf58e036324</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a72767fab051b89e5edac60ba503785ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexTriangleMesh &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a31512f7194eb3b311397c58cfa4613ea</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMesh &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>aacb06bac718d0ad96b0bf2b2b5f4d3dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a86d32058509c5e63b3ec98c758648c34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a5fb1e1a0a980e346a919d155ac5c2c82</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btConvexTriangleMeshShape *</type>
      <name>m_btConvexTriangleMeshShape</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>a3ec48ca0d0ac09d99c17e13b7fb61e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeConvexTriangleMeshBuilder</name>
    <filename>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a4fcf9f8e56c67482a47f7cc5e8011cce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a96fabe0bd23c01c752b08a547ab2cad2</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a70cd9cc21ecfc663d38f225702878bdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a89df3bb6663f332d53cd2e589949283c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ad634d7d778ce6db1f63d1cc0cb77b965</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a16ba52e48166d70f3522f0c5f4ddedfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMeshBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>aecf73b56d238ebcf729bef55c465df76</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a43ee83f6a793dccd51ff3cabf863bdfa</anchor>
      <arglist>(PhysicsShapeConvexTriangleMeshBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMeshBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ab54cd53cea3bb8901d3766f5f8d8f9ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeConvexTriangleMeshBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a2d54c76e2d2f68dc21107049d8977aec</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a012065225d40d29736a27eeb58fc0b4a</anchor>
      <arglist>(PhysicsShapeConvexTriangleMeshBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a6cf26fd7cccaab4201d5edf28e3657b2</anchor>
      <arglist>(PhysicsShapeConvexTriangleMeshBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a0dade1bcadeba5142bed3d507bd6dbbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>abbaf4a5c66782c2c50622ca5f30cd565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a1ba186e194b042276128c8f8577df588</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>a1f3db8693ea32f7d3c00dbbc95854a11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>abc50a6c14cb2acb504982543ac63d43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeConvexTriangleMeshBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>ae1b7f1e588a09a5ad8b3fba70dda119c</anchor>
      <arglist>(const PhysicsShapeConvexTriangleMeshBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_convex_triangle_mesh_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCylinder</name>
    <filename>classnjli_1_1_physics_shape_cylinder.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a594a3ced7daabd53c425d79f6bfb4173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ad7ec0be0f27ab4b0248fa1231491fd20</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aa8ed8409e1a6ba5ed2c5de028558425a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a512461c5827b246cdd5e037b2dc38d7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afdffa5511a58e1bd0898716ecfb111cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>af865d6862f4dd8849f4b9290a3907337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a05334d41b8bad6261922842a5c204015</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a9e73e95275b9127ce3cf25fa51bad8ba</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a8e138b8eefcf94a6d8a7296ac2c883bf</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ac0494575204d508cc5f91ebe68d3addf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ad5f230b6c39911b3737f8e1d956ec390</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a74ebf6b5c2ca835e1cfaaa1bec156ef3</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getHalfExtentsWithMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a528cb67c172a04787f7f1fa8239dc205</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHalfExtentsWithoutMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aae8b9aef78ec51c51ed8a3fe875df5b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtentsX</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a685026badc2ed6c9bd64ec4784fbfd15</anchor>
      <arglist>(const btVector3 &amp;halfExtents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtentsY</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afac940ffcb588c11962642b4d0329d10</anchor>
      <arglist>(const btVector3 &amp;halfExtents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHalfExtentsZ</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ab11198a4980fc34eed9c4c4d53bb41e1</anchor>
      <arglist>(const btVector3 &amp;halfExtents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a844ba3ec7a53212951e0b2b9021a6832</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ab264eaa033bd9f0d19030290c12b58b4</anchor>
      <arglist>(f32 collisionMargin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUpAxis</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a540d188e51168afbcc758b0ddeb74c9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getAnisotropicRollingFrictionDirection</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ad725634ae3a5f9b140db0847ed6b10a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a7827d143353f66b460e6cd679da4ae2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a85f5ae5b9a6df49f9b6235ca37fe7496</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a206e5561c42493f64037429253d5b715</anchor>
      <arglist>(PhysicsShapeCylinder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a1c47189018afd4ce17ebc2628ccf4288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a50af85972d00bad9e0ea3cb6df4636e3</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a00d9bbd12c316e95087402a703fbfe17</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinder *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a0f46fea25774f8b6c9b5f11b662e2ea6</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a4af110c841b136ee56c4cd6185ab4633</anchor>
      <arglist>(PhysicsShapeCylinder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a86823cfc30c2f53f5e6d93bad2c13d60</anchor>
      <arglist>(PhysicsShapeCylinder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a3a7aa75547f61cdfbb292e64ac18190a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a7e9b42a5baf9eab31f6d3f447eae56f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>afe635fca063da9463ced31e09d241745</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a6faad4aa97c6275c9dae35313e3f8b66</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>ae2dc8177ccf121405a2d3aeaa5a5c513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a83539bdbdb5bf4b8e270475070a39199</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCylinder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a0d44e40875147bc6999adf0693268099</anchor>
      <arglist>(const PhysicsShapeCylinder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aa3676c39e8377b6798b034b67ba07d31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a9a87d86c692a3b1ce42c68354f312440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>aca6f41dfec9b3287717357cbfa57935a</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btCylinderShape *</type>
      <name>m_btCylinderShape</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>a59ebaac81520be5fee6e86ff8b937737</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeCylinderBuilder</name>
    <filename>classnjli_1_1_physics_shape_cylinder_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>aab0845692e06379082872427ec25b2b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a3f5771845a33f76782dfbf1a5b7db31c</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ad0664106b9916319c22dc2f3e1d667a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ac345af0509040d7b42273277c77e9ae5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a898b197c3dcc879ee1ce5d6ccf08b960</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a52973d70f5318a2ded0156e91c79b577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinderBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a311d45910de2aad5e481c2162184ae12</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a105dd096a887c907388abd4033dea3bb</anchor>
      <arglist>(PhysicsShapeCylinderBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinderBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>aefd37a42f1a5cd301ad2db9194cbfa9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeCylinderBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a4294a014b8dfb62b8c613caa4624b565</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>aa508b55f868d88ab82c2b87070006cd8</anchor>
      <arglist>(PhysicsShapeCylinderBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a39d1bb86df64ffe8ecf56ec1b195ac98</anchor>
      <arglist>(PhysicsShapeCylinderBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a660431da9254ce3526856075bd85a535</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ab9ca148d4bf3d6c9f98ad3326e299bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ac76b3bf33173f1947e0eedb98639da8c</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a901b23092dc351ca0a3908a7e09559a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>ac510e95057eed0ffc55f8eeecb65dde4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeCylinderBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>a20d26cb7528ccc4e92a5cc16701993bb</anchor>
      <arglist>(const PhysicsShapeCylinderBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_cylinder_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeHeightfieldTerrain</name>
    <filename>classnjli_1_1_physics_shape_heightfield_terrain.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a67209a4c37b16ff0de98ac273296f2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a445d0515891fd81edc19049ee5a8c46f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a730f6ff1a72fc73f43c2daedf82b46e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a5f6609da87c315d169df2f85908f15ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ae7f37e3f8c8cf55663727e025ee618f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>af6b7c8322826c83fc672b1ddc50d70fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>abb31574ee5a71532d25cb045a840aedf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ae84a8db205794e8d4ba73b864c2e003f</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>aaeba3305211ed8ee895c16cde919d47a</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a46270856ceec080bb19bbab9ba0ca81e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a3b815c83cd5b90b6982aff44aa80c67e</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a5a0231f5fba81a27ec7a66a0ffd084a7</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a8d02dc48f9dd364228890b24691f3632</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a57337f8e719788b8f00862a6158f41f6</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrain **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a99221bc00751a5b39af56a9500b40e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a1427cac41a5689ea2acf85fcd9fe3845</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a965bf005222bec5d75310ffed11d621a</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrain *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a090478c6886514727ac2462f2f7ff6c3</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ae24eb0c7625122d6aa27eafff6b615ab</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrain *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a85ac02a73a1313365a3f4eb80640a923</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrain &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>ae596e6bac50ec3eafdcddcbd82176429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a86dc8ee8ab41a62c6520cc7a33064fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a0f108ebf1e1d7344189da6f5ac1853c7</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a1f04a12e54baaab4644b1eb1a7a03c93</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a406a8216e9feed043e83c3414672c741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a0351b0629c7a9b21bbd36639935dfaed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeHeightfieldTerrain &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a9f6223a214fcf82096b00651e7ae2abe</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrain &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a2de5e5e8c2d159963c46664d7ec4ab10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>a43635ec439d573213bae218901050d66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>aba0df18d6c428c60f6efe61bb0fe1699</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btHeightfieldTerrainShape *</type>
      <name>m_btHeightfieldTerrainShape</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>aea1853b1ab3d6cfab816b4e8a70827d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeHeightfieldTerrainBuilder</name>
    <filename>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a8e2a29e4482f49f15071c30ec28ed790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a669b6c5d74788b88902c69a54ee59e9c</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a8190b068102560bacebb79a4338e212a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ac0cd372ed65e9f98804721ebbc5ebab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a23e1dd10eae6896b1be6e76fdba275dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>af425de5941b36c0d9afc92be971a45dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrainBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a29698c623a44d1dd7b84b7d60af1862a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ae264b58d592d583bb949af7985353581</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrainBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrainBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a7352753e6659e11627dd2fc1a2b505dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeHeightfieldTerrainBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a6d732c7196301cd10262b5f3e9152057</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a0ddb0264a5eb73d7eaa268994b858822</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrainBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a39217f232133ddeb229e818ffa7d5362</anchor>
      <arglist>(PhysicsShapeHeightfieldTerrainBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>ab9ae03e71c637f08bcb627f36a516ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>aa8df995b53a3d9c26b810589bf77e935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>aaf84975d20884430868df0fbca54e912</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a5168b2b46aafcc3687bfca6f57022ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a8de5e43f3da44c87bc5a38b12e1bc17e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeHeightfieldTerrainBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>a4b32869293f1b723f7bdced4aaab92c1</anchor>
      <arglist>(const PhysicsShapeHeightfieldTerrainBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_heightfield_terrain_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeMultiSphere</name>
    <filename>classnjli_1_1_physics_shape_multi_sphere.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a0a9f8e9382af4fb1115abf8bcb035931</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a11acca92dfad6bbfc36017267362f128</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9a1d33140c781451ceccc749e0233033</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>abfd5533159ecea36c3f9147b49dfe7c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a34d365099e710fa7dfb1bf010674eb2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a8ffb7cb487afc5582cb4c1ae4997a065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a24afd8e689b4111391f8079376edfbc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a4bf4fdd81dfddc61b0c40adf04bdddde</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a467600545bb56fe471cb930f5a7b8aad</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ac89627a1d9681838e4539f30bd06ea82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ae0b4b79c9708c963406aabf07e699d5b</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a839ea1301fdc8e1442f4ab4fb5a7cc30</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9f72bb39a016aa5115af51a9e62638e1</anchor>
      <arglist>(const btVector3 &amp;position, const f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a3bb2481f06e880597dafdb8c9da1a54b</anchor>
      <arglist>(const btVector3 &amp;position, const f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a27795bd39ee7a3dbde335ec454d0e1de</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSphereCount</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a3d5187930b555c1c421928e642af206b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getSpherePosition</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a679dc7de50f2783428f31c8be37a47c2</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>btScalar</type>
      <name>getSphereRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a6833432afbb47a8800e3bbd12999954a</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a27f19ac79c5e8b7034fcfb4fc05b2388</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a67cf27c9dcf4d1dd68ea1c603eb054dd</anchor>
      <arglist>(PhysicsShapeMultiSphere **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a5a3b9657b148c2e4e4ea26c89097c679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>af29257cf63678fe9718a821300d5575b</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a465246d891108d982e8c18bdf2c49917</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphere *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a64000bc87d83940963e1b323328377c2</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ab662607b3880e2239637469d75955ec3</anchor>
      <arglist>(PhysicsShapeMultiSphere *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>acc4f13c0be21f65b1eaa63c357981a0c</anchor>
      <arglist>(PhysicsShapeMultiSphere &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ab3bdb3d0b0d07962fc85babae7026614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>abaccfac08f371c6f00f234abaffe5252</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ae260f03b0b26e25c8491fa36cf0c6273</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ac9f725ca1a8bde780079e66a3a1d500c</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a353c1255f1e87086f2055d8abe20e490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a5e4c8a59fdba9c2aa22f13568443470e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeMultiSphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>aea1e4639bb29535b236e1e56b90f9e44</anchor>
      <arglist>(const PhysicsShapeMultiSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a3e11137ac6e9e9ef6e76ee396db9297a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a591dec07102b432fbced1b4bfd093512</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ae54e42a11d5b7737dad326aa1c11b2ad</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btMultiSphereShape *</type>
      <name>m_btMultiSphereShape</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>ac43b193d22e235ea71f17d93021e0967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; btVector3 &gt;</type>
      <name>m_localPositionArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a20192615e273ac465050fb139edcae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; btScalar &gt;</type>
      <name>m_radiArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>a9a7781979e6a9f6b62e5c621b14ccc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeMultiSphereBuilder</name>
    <filename>classnjli_1_1_physics_shape_multi_sphere_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a902545dd1e34e54fdf9b8c72d9ac9998</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a862367a2b4f02efb10f9cdcbc5656df8</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a44c971909b48ec8c5e5cbf7a147df377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a66426aca342f51ea918d64690a74d4c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a12ce7d034b9952a770362acb3b4ab0f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a78cdf33a751ae2d2edd4a2a45b90d0a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphereBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a1bd6afbd215f295368f84c18eef4648a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a63c86d52b855bce35d47a4e5a14aa805</anchor>
      <arglist>(PhysicsShapeMultiSphereBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphereBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>ac2eab3049d19f25208af91e822eb477a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeMultiSphereBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a29dfd115d30f7459523d0df50d055dc8</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a3f59fd995d271b2d7dfa469c8ec41ccb</anchor>
      <arglist>(PhysicsShapeMultiSphereBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a4110b157cd4e6f95b8de049ae2b00537</anchor>
      <arglist>(PhysicsShapeMultiSphereBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>aa227e639fe36d060dd20c46fa356e893</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>accc16cc7fb41728d9851eb08108434a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a69a89d86308bfc5353736675aa04497c</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a45cc436914018c788a00dc31e7a0e119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a34bee2df0fba8ae0628d9b1b6d86b564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeMultiSphereBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>a76d166e48aee7cbfd92c04df9b73dd80</anchor>
      <arglist>(const PhysicsShapeMultiSphereBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_multi_sphere_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeSphere</name>
    <filename>classnjli_1_1_physics_shape_sphere.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a048ff733f942dcac60a7d2b382a1d0a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a945c46bbfca818c8c9570124896cc8dc</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ac5c2b0aa40a78763720fc47fe3d6693d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a04a15e2a5226fdc9b920750b3d9b6af8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a2aac2eef57be19f2882c647087c71343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a9f7815a4e99feb1c2c0e62f6b7f0adbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a1031a181ab93d60ae32e97332618287c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a562b1cdfde0a2428ee66802df4878183</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a6087255ff18c442470b790409261edf9</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ad8e9f27811164163a87692725502de6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>aa70ae0dd65cfacddab9600d0143f69a1</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a10b233e9fc9b6dc6ac593fed898b472b</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ae014734c779ae780a981142cf8ae7f9d</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a6e3ad5cd99a9fa760cd937aab23f9c35</anchor>
      <arglist>(f32 mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a639cf12522dc348269c156f6dea675ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnscaledRadius</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>af38100684789bb68150f2b8ffb8389ff</anchor>
      <arglist>(f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a0e111b3b9189d7851bce31d92405244b</anchor>
      <arglist>(f32 margin)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMargin</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a36ac0f56c02d29825febf9261cd8fa1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>aa7044286a73f1dba93773bdc3d1ccc81</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a2913ff7eb4b1a576cc0e0b832eab0eeb</anchor>
      <arglist>(PhysicsShapeSphere **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a6ba1d3aef468411deee1b0525d5510b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>ac0cc733b465cf06dc04f6d9949de2c1c</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a62800c61cc69cab1aa03734fdf0090c6</anchor>
      <arglist>(const PhysicsShapeSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphere *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a36401d4b67bd40ef1694325cb7ca07aa</anchor>
      <arglist>(const PhysicsShapeSphere &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>af539bed7a0cb19660a3e7993e8777543</anchor>
      <arglist>(PhysicsShapeSphere *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a9208b4f02344bc95dc5090d0f2fb17fa</anchor>
      <arglist>(PhysicsShapeSphere &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>abb7e873d046cf4470ac7c9b5242d8088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a692e7b24fc48ddbf8301c9ea47cbbda0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a29f4ba9f9895e3c567f44d349a862e4c</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a5aa1eb28266234195f2d4d7cf2adba12</anchor>
      <arglist>(const PhysicsShapeSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a571bd26716c2cd08198e44b370c2a8ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a74fea8aee27ee089581029b2368dddd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeSphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>af3ff5bdb2cbd09f32eb3158a4eb04c56</anchor>
      <arglist>(const PhysicsShapeSphere &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a75ab9287d8f5c36ea782f4b7fb9535d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a8929b088f8eac7b80215679f24da1abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>a6c4f6e4cd8f796892bce7c3c09f0d14b</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSphereShape *</type>
      <name>m_btSphereShape</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>aeb4452f79c06b476a09bc23980abec57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeSphereBuilder</name>
    <filename>classnjli_1_1_physics_shape_sphere_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a6cc61cbac0a196569f4fdfb73e994804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a260f1fc9223583600f1544378b863352</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a4ef436a6125f40dc3121b35d0c998180</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>aacdedd9e2d89ab504d5540d9cd6fdfad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a99a7b9eaeabaccc78559b6baf09601d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a454d6caf6e56d680e468166e7c75d5cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphereBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>acd366ec74bb20ca7237733023457834f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ac529063dd27a995a69caed14399c09d8</anchor>
      <arglist>(PhysicsShapeSphereBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphereBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a6d95dd09fe39bf985fa616042eb10cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeSphereBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ae1435ea0dbbf0be68a238e248b87b2ce</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a24e892e3dba8edb73be8c4bf21c8a655</anchor>
      <arglist>(PhysicsShapeSphereBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ac1919aa24e3c726eae892a4e87561c2a</anchor>
      <arglist>(PhysicsShapeSphereBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a87f9f44f646b362c3ba46fcacad3a4d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>ad86fb5aa86978d04e15b28b12ca92b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>af935e9e37ed4f4214bbafd3df47ec0ad</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a393a4aad91017156bf81d1803f13193f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a13b0cc141e26037f2bf71f8c6863cd82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeSphereBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>a94aee97d067c834b14bedda7c2403ee3</anchor>
      <arglist>(const PhysicsShapeSphereBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_sphere_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeStaticPlane</name>
    <filename>classnjli_1_1_physics_shape_static_plane.html</filename>
    <base>njli::PhysicsShape</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a43560ce1d910b68d20f602ab1fc03631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a95e3b4c85db36869d5cb85487b88cbad</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ae40c449320efcf3c483e7ff67b68b812</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a2ca386d4ea821161f51aedf153581c16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ad47cccb4bc99838d9f8f3820930ba028</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumVertices</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ab17422166a9a96672d671f8843c49f26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumEdges</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ab6a794d539b83627a5ccd4f7b85a531d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getEdge</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a7cbe0859434c8f246406de6e7927a0fe</anchor>
      <arglist>(int i, btVector3 &amp;pa, btVector3 &amp;pb) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertex</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ad6a9435112a9d9ebe56b0db5f8b2f5ce</anchor>
      <arglist>(int i, btVector3 &amp;vtx) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPlanes</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a7602280dd520ca98ec426278cb8e3681</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>afaceeca4c3253774f92b2d67e6696b1e</anchor>
      <arglist>(btVector3 &amp;planeNormal, btVector3 &amp;planeSupport, int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>abee3513f871d8a14e23d06e6cdc5827a</anchor>
      <arglist>(const btVector3 &amp;pt, f32 tolerance) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaneNormal</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a351f9c4734b51edef978bea4598d1c16</anchor>
      <arglist>(const btVector3 &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaneConstant</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a046e8fdb529ee0d0ec14c81cba9c58bc</anchor>
      <arglist>(f32 planeConstant)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateLocalInertia</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>adf9dfae5f28e8d2dcd0480e698cd4522</anchor>
      <arglist>(btScalar mass, btVector3 &amp;inertia) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalScaling</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a2f6934822e6cfe1e4653809231fb4218</anchor>
      <arglist>(const btVector3 &amp;scaling)</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getPlaneNormal</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>af5e3847eaaa60ba5f46336fef66220b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btScalar &amp;</type>
      <name>getPlaneConstant</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a09460db70d98e4bf1bec7b945bcb0e9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>acb4c383f2673513148490879f3c44d06</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>abbae76b7c560dde8822801fa6dceb907</anchor>
      <arglist>(PhysicsShapeStaticPlane **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a79a084c8eae9c46259e7a16161a1dca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a8a350cc452c42731f47a41ff0c917fda</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ab3f56be3f14ac6fc2afbd8a8916c811b</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlane *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a6cd5000f8c3d92e1e8f05c56d3bfe242</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>aea86cd8ba2fddb802e7bb812656e4874</anchor>
      <arglist>(PhysicsShapeStaticPlane *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a4cf043a132670af307378d22a3044f8a</anchor>
      <arglist>(PhysicsShapeStaticPlane &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a5a914f2bd547a35665e382a77d04f058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a8ed62d505376e5dbba222757423ba84b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a95a9c5270ae2e9e29154332a8dc93860</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a75169e547ba98dff8be05aeda01b2fda</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>aa2b1b0428a56aaadba2ba7ed240c8f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>af8611cf655223b9f34c8b029127d269f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeStaticPlane &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a617dd0ea0639d4beda545af3f37b31da</anchor>
      <arglist>(const PhysicsShapeStaticPlane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a59b7263115001da7a90c30b375ac6b80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual btCollisionShape *</type>
      <name>getCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a3a3e5928c3f1a0e944c583025962f418</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setCollisionShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>a5ebd80dd3f719bc9f172f29e3bdf290d</anchor>
      <arglist>(const btCollisionShape &amp;shape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btStaticPlaneShape *</type>
      <name>m_btStaticPlaneShape</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>ab6d17e2865a59caf1bd6022df162b258</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsShapeStaticPlaneBuilder</name>
    <filename>classnjli_1_1_physics_shape_static_plane_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>ad831802d7b9ca50edd59ab68ed5d2437</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>ab56fb6007e7cb72fee413108b67bb948</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>ad138ee89da6ee49660b08491bef40b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a22d054588024c9b23d225abfe4fdb146</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a051e1a65d40481c515d2140485dd0de2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a29fd90a50558d4530885200bd5e3f76d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlaneBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a48f63630dda6cf518e2b069a7047da83</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a386cb12ab6cf40799b5e92e19367ebcb</anchor>
      <arglist>(PhysicsShapeStaticPlaneBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlaneBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a1185296ae0e95774278d3d7483db32ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsShapeStaticPlaneBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a5403d83289199a59928581d08195f4f0</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>ab47d6a0315188d9fab36ad76f752bead</anchor>
      <arglist>(PhysicsShapeStaticPlaneBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a3272650ed7517cde4581f5d802cfcbb3</anchor>
      <arglist>(PhysicsShapeStaticPlaneBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>afb58bbdb11a4a8435aee1d2b03ee63e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a5a7fa33500a4bbf8273222d57e70e245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>af4b40b5f32bbc64e6e337c76cf2a1c2d</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a84a723711e9c7fc80aae534cb2ccd1ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a843535153945d4982db72379fe9b5812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsShapeStaticPlaneBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>a73fe0c31f106a69bd158632454edd637</anchor>
      <arglist>(const PhysicsShapeStaticPlaneBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_shape_static_plane_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsWorld</name>
    <filename>classnjli_1_1_physics_world.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <class kind="class">njli::PhysicsWorld::CustomFilterCallback</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>af738be88df0902fe6921d46a46bced9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aac4422bdcfb063b92aa0a39c889e5b07</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a5966246f8f7902403e51f6b6c481ebfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>af4b51d0d7e4bf4da6b1be6525c7b7937</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a9ce27a6f2a6386f5a5e09bab5094e8c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2d13fac3772ac6a2417cbdfb9ec65ed2</anchor>
      <arglist>(f32 timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac3fe9c56c88ef269803ee550975f0a4c</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravity</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a55433c9f9a854a45b2135d6e15423f8b</anchor>
      <arglist>(const btVector3 &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>btVector3</type>
      <name>getGravity</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2ab946117c0c074c384956b9df0fed8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationSpeed</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a6349b4cedb5718009109d9614e8cc8b7</anchor>
      <arglist>(const f32 speed)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getSimulationSpeed</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a9ea8ef8cac36b815fa7431bd7fbdd045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimeStep</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ae347ecd60cf40a997e712bf0ff51f3f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreTickCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a0fc4b0b757a0fa74f289a9186e26fc5d</anchor>
      <arglist>(btInternalTickCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPostTickCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a727d1fa784603c527fd210a6b9950842</anchor>
      <arglist>(btInternalTickCallback callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestClosest</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a3b7a0136977fba6c34da2c3b8b598536</anchor>
      <arglist>(const btVector3 &amp;rayFromWorld, const btVector3 &amp;rayToWorld, PhysicsRayContact &amp;rayContact, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>rayTestAll</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a211942b503f8a7d2932504a2c7e5ac66</anchor>
      <arglist>(const btVector3 &amp;rayFromWorld, const btVector3 &amp;rayToWorld, btAlignedObjectArray&lt; PhysicsRayContact *&gt; &amp;rayContacts, s32 &amp;numContacts, njliBitCategories collisionGroup=JLI_BIT_CATEGORY_DefaultFilter, njliBitCategories collisionMask=JLI_BIT_CATEGORY_AllFilter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ad29d2afe4cb405f8217662aa07cb4a2b</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2f98c36debbef81fed25d92a20d06688</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRigidBody</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2fcb8da2f603c342ac9f72e33e3df9b7</anchor>
      <arglist>(PhysicsBodyRigid *body)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeRigidBody</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a90eadf9bf47cb07aaa058e38ffb81f2a</anchor>
      <arglist>(PhysicsBodyRigid *body)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addConstraint</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a01043c9eab9fa91adafa957ef1e57293</anchor>
      <arglist>(PhysicsConstraint *constraint, bool disableCollisionsBetweenLinkedBodies=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeConstraint</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aa881c299b2550503cf9b678db6eedfc8</anchor>
      <arglist>(PhysicsConstraint *constraint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a79e85fb35958b4613526181e9c9bdb86</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a2abce5fcfb7f547fdd056717ac44247f</anchor>
      <arglist>(PhysicsWorld **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a7bbce96ef8fd04a42161cccf07eb1944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a52397ea3dd323182160d9c39ccdb635b</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a99e15fd93e236e959f2b7ce4a284279c</anchor>
      <arglist>(const PhysicsWorld &amp;physics)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorld *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a03aca8773a10c85fd06e045542104e1c</anchor>
      <arglist>(const PhysicsWorld &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a6d6e3b4603d5804e69c6644094c11cc4</anchor>
      <arglist>(PhysicsWorld *physicsWorld)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac46ba955f16710f12fd0a57ccf5ed7f0</anchor>
      <arglist>(PhysicsWorld &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>adfed64f0c077cb328745d8ad18a5e217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a64f4e12a96831a18cf568fb338193379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a11c079e930dfb8d4d5e7834b22f2d3ee</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aaa5561b67b4b8ddd1e71b26e1f9e9cb7</anchor>
      <arglist>(const PhysicsWorld &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a92c908a89e5d1b8f061bf706ee3df631</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ae2f4d16a40aaaf5b65d091861c5069ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsWorld &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac324be9f6e37e0057c461202203863d2</anchor>
      <arglist>(const PhysicsWorld &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>debugDrawWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a5e3b0fcf00fc8a8151510c86088c034f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ghostObjectCollisionTest</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ae6873032c9a97589b406c69f33383fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_SimulationSpeed</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a54627e3b1f1e890d5c9247e00f9f002e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_TimeStep</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a126ce6c1394f120b6b325a175ed1f21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btDefaultCollisionConfiguration *</type>
      <name>m_collisionConfiguration</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aafdda2fa604a317def17d80f314ffa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btCollisionDispatcher *</type>
      <name>m_dispatcher</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ace80c5e179eb0c715b681b674812c50b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBroadphaseInterface *</type>
      <name>m_overlappingPairCache</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a9196ae1dcdf7af4f556bc7f0ee0f7e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btSequentialImpulseConstraintSolver *</type>
      <name>m_solver</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a89f04597ef21e57dd83b634062343822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btDiscreteDynamicsWorld *</type>
      <name>m_dynamicsWorld</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac56a66cca1fd4605a7120901be9617a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btOverlapFilterCallback *</type>
      <name>m_btOverlapFilterCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ada03017b6b1b08439170bbefa348d787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btGhostPairCallback *</type>
      <name>m_btGhostPairCallback</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>afcd5c37a467fc854fe78ef3a0093c970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; btPairCachingGhostObject * &gt; *</type>
      <name>m_GhostObjects</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>aee336d653cf084185323fcd280daf9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btBroadphaseInterface *</type>
      <name>m_broadphase</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a595d7dd5dd9497891b369aecf2ad3553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; struct btBroadphaseProxy * &gt;</type>
      <name>m_proxies</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a068f9b23b65b403bec6743ee123a6a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Node * &gt;</type>
      <name>m_collisionNodes</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a8f68c492c26e09fa5dcc538c5c63b587</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_Paused</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a1dd5d5abfae452cdacad0836b9713940</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVoronoiSimplexSolver *</type>
      <name>m_simplexSolver</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>ac17465bcb753aec34bb4ddf5faf34a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btMinkowskiPenetrationDepthSolver *</type>
      <name>m_pdSolver</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a4eb1b6e28edaf8ce45facce58be6cf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_physics_world.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PhysicsWorldBuilder</name>
    <filename>classnjli_1_1_physics_world_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a60de0aef2cb32a819856a009a07d7211</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a795847019f3bea770fcd58c2e3225e7c</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a665a6db3345d1cfcdf2ea8cca2baa20e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>ab046eaf50c425ccf120a4bd6f8702fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a0286fa01f8adc2fd7b71f6e3a2f0bb31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>ada0b9e51b166170d7c3a90d81b2bbe55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorldBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>aa8d4ae1e621ca869d29d09d6f619cd72</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a96ea933d2e5c36b92152c0489f3a707e</anchor>
      <arglist>(PhysicsWorldBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorldBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a9171c619f9b0695b9051ae8e770ea4fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsWorldBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a7f4d93d89d71f063f9a5c1b4906aaf16</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a140d1567c171389e8dfadfef72d23335</anchor>
      <arglist>(PhysicsWorldBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>afe65933657d8cc22800bfe0104aecb62</anchor>
      <arglist>(PhysicsWorldBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a0ce1bd1ee43207d33c421d3d2af1ed3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a4c55892d1d68387f494f3bbd0e4cd15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a5054082270de6a969250be2c07c5e95a</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>af3418db197e13f540c19833932c6a965</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>aaea822b9cc259c6a68d9ad3ad28781d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PhysicsWorldBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>a9a9892f6f6dd6ae309f90d79b602caba</anchor>
      <arglist>(const PhysicsWorldBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_physics_world_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Plane</name>
    <filename>classnjli_1_1_plane.html</filename>
    <base>njli::Geometry</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a7f585c76d7bd568c089c91c12cba4982</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3a3dd9c8e6f4a7a8304732b80c1ce68f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a9a7ccbc86c1f486cd816f0f4f3e9c550</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ae2a4d392bb3fe4ad2aa068a578aa11d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a0530fd624d0fbb1b2629f74e81a8b0fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ad021359d2f67ae8165be5b14c33b4b6d</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a6e25a6d9b9819d375c257b68a1e8a6d6</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ada514395abc636326f76aee6fba5ab4f</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ad003f2734ae681dc704bac77d7e7ca89</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a55020a9815103781fbe1846cf8b5c81e</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>acac9e0af1f82ed239af270c9c50ec4ab</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>abf634e87fdc57ec8a9a2965ec24cc34f</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>af6ce772f6604982a03f837f9479e590b</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3c9fb24d02e80c3f2f91790bed222886</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>aeb45c844627228083af4f2dd4d6b5010</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a918065b54d466a43fe4c56688a9f0ee2</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a39afa45eb73d3c9a84d5a814d58ea963</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadGPU</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ad52d21698d5e389af343d798b985bc67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a5a5600ceb6d93991c31bed8249ab0e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isLoadedGPU</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a0c9b3ff7436f10618116b3392dab9cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a5e69f210a364b0fbacb0e06d98e41725</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a4dd558b3278ca76bfd21d2ec9f02b87b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>abdba856cfdd6d38b011dfe684a4dde19</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a5f1fa3ef1069b6ece075986d7c29a7e5</anchor>
      <arglist>(Plane **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ac092b738af84c49c487a67a79af4ea9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>afa389a6efdc6ea1c74c923bd82b6445a</anchor>
      <arglist>(const PlaneBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a42586e08719e750272614dbe1b1a077c</anchor>
      <arglist>(const Plane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Plane *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a06750ef9f0dbb17a36e6c202b7be7e96</anchor>
      <arglist>(const Plane &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a30b48bc2acf03778e7024f93735a9fe2</anchor>
      <arglist>(Plane *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a700d1782cad579cd37c12e8f6c1e9f3e</anchor>
      <arglist>(Plane &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ae6dc5ea1dbfbfed13d99ca25ef4b36d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a076eefa748e73d4740b3478b8893c31d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>aae78e01991506fd8ac864ab6c707f3df</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a42dc655613f12dbe9b7285e82e43e15a</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a258b4f6236afdeb8a1fc64090853dd1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Plane</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a187cf89bb3ede3ac17801ae25c1f722b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Plane &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a551051db5631112ed3bdcd68b49263cf</anchor>
      <arglist>(const Plane &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldApplyShape</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a0ba9fe9f6a03a8438d6204520776250b</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a238e9b9a68bf90b6e7a90119fe852da7</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a134447dc787dab9269e68f8011e2973f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>ad7e4c804fee51739e0696e34c7146a3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a13ae025d91ca2ef639d1ba4e92b5ccc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a5826539217d13c19c72ed6504d1b6d15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a69ac7f253c3a2a068f9fd20526dbfa3d</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a60396b5d7d0d1984cb05703a843cce79</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a12d8dcbd747c9d03aba34dbf864e4478</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>a3394026e187763e245fcf11c483bb75c</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_plane.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::PlaneBuilder</name>
    <filename>classnjli_1_1_plane_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a4ff48e99cbd2459bb3317ed03923b038</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aed67cdc952bfc0b7ef2b1a9012e99c14</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a7abe7585ac11bd21f6c6bb801a004ab0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a54fa171ecbf4e38cc79d54ad5f9e6d92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a0fc49801f10941b2e3084d0a05d70f4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a0e33a5b534677398d4124ed00c0c550d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlaneBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a8ccda78e11dc743eac59119d6447f629</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a17452a7478fdf3290fb050f1cf94b5fe</anchor>
      <arglist>(PlaneBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlaneBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>ac9fc17fac1451f36137b88c11866a55e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PlaneBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>ad187a59e424005f39f7b33bb4523226d</anchor>
      <arglist>(const PlaneBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a07ea1c08008e7734b4c99a60634c5c20</anchor>
      <arglist>(PlaneBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>ae590dbe5b5be6f890ed16d1e15002eb6</anchor>
      <arglist>(PlaneBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>ae22f7828d8b9e4c0f8257dea57a52edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlaneBuilder</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aa5d5ef367ad8b77b3f7d900450633fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlaneBuilder</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a6a0c6795347d5cbecf83701b0954f8c3</anchor>
      <arglist>(const PlaneBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>aa03f4e80efac67513aa91dda3a7a4e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PlaneBuilder</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>a553e71e7b6b410868df41c384aabc44d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PlaneBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>afd2a66270153479a9fab0ff1be6052ab</anchor>
      <arglist>(const PlaneBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_plane_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Proto</name>
    <filename>struct_proto.html</filename>
    <member kind="variable">
      <type></type>
      <name>CommonHeader</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a5b0bf6a93e383f0a873573b9c99dfb95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>numparams</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a3f106f177af6c68ffd8b042713266b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>is_vararg</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a82302f2e9040b681d5b34c1239dcd673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>maxstacksize</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a9c9ed4e9d996233f75cdf56b912e4803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizeupvalues</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a6ecec897497ba7d94df6ef69289ef5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizek</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a5bd719e0486168f6ecd4b01bf41a7444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizecode</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a43e4d3849b5859112d93bdc2534a7cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizelineinfo</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a65303ae1d815313f3358a578113fcc6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizep</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a73ddad1a18b7c46be46ec32aa2a08632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sizelocvars</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>ac2ab37e941e8866687f44f7b2f4b95a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>linedefined</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a62cf1c61b70bfaa4f1fb839b7398160b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>lastlinedefined</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a9ef7fae1b22b11f5a145cfee8150059c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TValue *</type>
      <name>k</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>ae292fb0c0558679704933824ce96eac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Instruction *</type>
      <name>code</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a53b66e4e4ac4b612a41b67a0ace9b6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Proto **</type>
      <name>p</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a54dc8e2e8973007794fa0ab0e4a71461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>lineinfo</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a7b35e79a276933f7e71edceec5b4593d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocVar *</type>
      <name>locvars</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a41d627972548e1a6aaf358480ed46f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Upvaldesc *</type>
      <name>upvalues</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a028070514796b4accbd99c59e6b83930</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct LClosure *</type>
      <name>cache</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>aacf3485926c3a7d069b792d4c94b8612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>source</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a92b6ec319e7aa1ee8b8ff7807353ad96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>gclist</name>
      <anchorfile>struct_proto.html</anchorfile>
      <anchor>a7991ec396b493a42b5c7f38b4e162959</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>raw_file</name>
    <filename>structraw__file.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>f</name>
      <anchorfile>structraw__file.html</anchorfile>
      <anchor>ac211dbcdb304fa78dc231c939233ca48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>curPtr</name>
      <anchorfile>structraw__file.html</anchorfile>
      <anchor>a21f1f2ca29c97f8786a938da639fb5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>filePtr</name>
      <anchorfile>structraw__file.html</anchorfile>
      <anchor>a426ecbe92162fd69a119b7d3d5a299a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>fileSize</name>
      <anchorfile>structraw__file.html</anchorfile>
      <anchor>ac3744b3c64b2b9d16e5f709c384e9132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>processedSize</name>
      <anchorfile>structraw__file.html</anchorfile>
      <anchor>ac7ea6a97f86f1d5dcf21a542d596e6ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Rect</name>
    <filename>classnjli_1_1_rect.html</filename>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a2c25e6a42c5f9e1b65817767a1623551</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a243933a940eb2dbb7ec885983298a909</anchor>
      <arglist>(const Rect &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>Rect &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a7314f91fde16f316d58f65cf6fc7b15a</anchor>
      <arglist>(const Rect &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rect</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a5bf75eebecf25e183d78b9bc2efe1b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a25efd75622840e4ed4c82f8f8a1e17c3</anchor>
      <arglist>(const f32 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a5606d634e931e9f9c933a5f51f128f9c</anchor>
      <arglist>(const f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a4d2d37a28ab1395b9fa4c1074736b7a1</anchor>
      <arglist>(const f32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a0f649ffe61c054d305651b14e6239a9e</anchor>
      <arglist>(const f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidthFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a793503fbc0a2568486dafe8da98c0304</anchor>
      <arglist>(const f32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeightFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad6c24fa78959ace89e20e153e1e10c00</anchor>
      <arglist>(const f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotX</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aeaf093fbf6609d4c1b002b41d26af704</anchor>
      <arglist>(const f32 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotY</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ab371a8d3282ff9de7237f49ec23e77d3</anchor>
      <arglist>(const f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffset</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a3f348042c8ae89746202bc6b2e4ae682</anchor>
      <arglist>(const btVector2 &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ae74eca301c718c9a3f7d8443dab062d1</anchor>
      <arglist>(const btVector2 &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensionFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad6867e2f09fe401a4648acbd8a572bc4</anchor>
      <arglist>(const btVector2 &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotPoint</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ad5edbced1c61688846d9a658673ff5e9</anchor>
      <arglist>(const btVector2 &amp;pivotPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrimmedName</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ae3d08571cf5301cb45b6aa5d1f7d0d56</anchor>
      <arglist>(const char *trimmedname)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finishedPopulating</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a5587114924ea3614e3d51a772f17edeb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPopulation</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a56aa65f48127935bc155f447ff6fa6f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getOffset</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a701e4a44071b449ded9dbcde1412e271</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ab814faffd8863d13821d08e5478d98ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getDimensionFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a7a3792fecac4ecc852378c5503fecbc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getPivotPoint</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a6d7b7208975391879326a1d0c957a30b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTrimmedName</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a75997b34f04a294b72534d0c267ceb30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ac0c7f6ed39d0448a6cd0e5c906a5596c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSouceX</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>af5b5c10f47874e5b82c55d81a094a881</anchor>
      <arglist>(const f32 x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceY</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aad437bb2add0ea5cb17f32a51877e70e</anchor>
      <arglist>(const f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceWidth</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aa3fd64395ce6b785b3ba5b38d11e1ee8</anchor>
      <arglist>(const f32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceHeight</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>ac47ba4c289d8439dafd653e3c403131a</anchor>
      <arglist>(const f32 height)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getSource</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aa68763bfa980409c25d162f10281cc12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getSourceDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>abdc3ffdb2db699465f774dba88dced61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>offset</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a6f23c542bdc39901ed8fdb494f3be56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>dimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1f9f935a849b021e525e470c9b4b27aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>dimensionFile</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>aa07d368205936a23ab9a47552b4e13c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>pivotPoint</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a5108b573ccf0471fe3df6d8b81409584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>trimmedname</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a2caf9b5b79ddae7f604841cfdbbbb93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>sourcePosition</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a4ea7c70282ea45aeb109a7efaaf8c979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>sourceDimension</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a1066fad026f447110bc3c4efe0ff3a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>populationCount</name>
      <anchorfile>classnjli_1_1_rect.html</anchorfile>
      <anchor>a200cc3b5b916522d04e3efab3e0d81e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>rgb</name>
    <filename>structrgb.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>r</name>
      <anchorfile>structrgb.html</anchorfile>
      <anchor>ad5a38e43f70fb57d6da052745ea5ff90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>g</name>
      <anchorfile>structrgb.html</anchorfile>
      <anchor>a1c51cad47a05c797643776f9357a8749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>structrgb.html</anchorfile>
      <anchor>aa3e45a2c26ad435fe29dfea49f16831e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Scene</name>
    <filename>classnjli_1_1_scene.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aca382ffb528d7cb055a4b3cf09545050</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a09f66453d56234e0c2e7d85116b8d6d6</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>acc03bc01043d647c64d512abd9fd44e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aac1c30b93e02095431fbc7a2739269e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a264f0ffff37c50ec083d14305484d33c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a3118fbf195018c52cc493efdec177f9e</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae29659499a79266189dbed583e262873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a6bb6c79820215734862915f282c08058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getRootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a9b9405d1a8582835baabce12fdcd8c1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SceneStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>affbc7b7b0c3ad6bc2cba663e4359fc2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SceneStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a8975e7ec684eaea3563acd6c10f50814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ab67517186a935dae9dca439f31c5154a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a1df198e68ada8de3eb23caa2eba04f5b</anchor>
      <arglist>(Material *material)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a9186fa26416275bd05fdcc0357fa1745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Material *</type>
      <name>getBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae2f72caffbca0a65f601ee99827e1c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Material *</type>
      <name>getBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>afbd5cc6d18028c8e948b4e4fb72bd891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a81fba745ce70cb12f08c522627ff43fc</anchor>
      <arglist>(PhysicsWorld *world)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a967c76f1e30d1690cd5c7425f3dd2f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsWorld *</type>
      <name>getPhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aacdcd2433fadc469c85c16ea50f9123d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PhysicsWorld *</type>
      <name>getPhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a9f348500b14218f8f4bc7f2bc3b16c63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a666d9639161eaad751d3ff373325b33e</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a52ebc14871130c84d52d2db461cdd1fe</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllClocks</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a245ec2b188fb22f97e58d2bbca676424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getClocks</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a3a97afacd1d6a151b0405788ed5b8b63</anchor>
      <arglist>(std::vector&lt; Clock *&gt; &amp;clocks) const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getClockIndex</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7988c5db188ad35b0a4d474ea493e611</anchor>
      <arglist>(Clock *clock) const</arglist>
    </member>
    <member kind="function">
      <type>Clock *</type>
      <name>getClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a825e7bfa517703751e9263464b220911</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function">
      <type>const Clock *</type>
      <name>getClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae03ad36c1fa1f906ad9affb26f03e519</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ac843c56be80b5c13c602cb324f38fc65</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a292488e27e7feeccb28d36f827cff719</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a8e22ab9072c414608daa632c3cff9c96</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adfa4d5941916d1716d9015a22a5976dc</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af38110449fc118d5656bb95ff8885ccb</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adbe3003a2a52c0fff0b00deb461692cd</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a4861fe63ac950cec785a15fd8d778edc</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae9191f23764b22fb14f84d8875306431</anchor>
      <arglist>(const DeviceMouse &amp;mouse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a2b765b00a1f01803ed6c06556751af80</anchor>
      <arglist>(const DeviceMouse &amp;mouse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a76e20645cea133ed0fe5082ddd1d6dd1</anchor>
      <arglist>(const DeviceMouse &amp;mouse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyUp</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a37ce7fc85fdb926bc66835ebd9f927b9</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyDown</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a4404a903bf1230b4933891bae10a9c86</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad517760d7c2c0de588cfffb99bc225a6</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardShow</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a292f2f69409c9f30a2c16d20d40ffda6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardCancel</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a2b864950aeb5d0b6687faa6b20840428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardReturn</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad59791aaacc4de7aaed6925c7328838b</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderHUD</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af5834a2fc653e8f4dd1dfca5b530d5c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pauseGame</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a0cfb41baa6a570e3e298ff7b455da617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unPauseGame</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adbc56ddd00f3388e58112a75725f341b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willResignActive</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ac2b5630b706a264ebfd89582e6f1b58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>didBecomeActive</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a1cdee932514ef030b48aba4aa23f899f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>didEnterBackground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>abea5b18900978c635d8504ca14436e79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willEnterForeground</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a86245ab3697f318800abeee65135895e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willTerminate</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a48d0ef16f60e90db786bbfcda684d017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ac567928cfa8c10e45a100792559d1d2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resumeInterrupt</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5f6ff76f0029b35b9b0ec17ea0be302e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receivedMemoryWarning</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad68f6a92d484bc021051b8d12b4eaf38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateViewSize</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5fbe046c6f2d690408381f2ef4c4f3ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCameraNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5cdd2ddd0c077b542290e3d2c04c52c6</anchor>
      <arglist>(Node *cameraNode, bool touchCamera=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTouchCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a4a926234963cc9b8f14928e559dbd82f</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>getTouchCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad964360f4cf41a7db15a1407bc4d551d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Camera *</type>
      <name>getTouchCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a82306455f32f71f1865d185ae4588e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a941f75f0519b1ffa1a9bc02cabb33d1d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a0214dc61cbd3b427fc1642c5f7288c16</anchor>
      <arglist>(Scene **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a51f95c5217cfcf9968bcebc8e874a689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a23a898b795e134892fce27924e89c1d8</anchor>
      <arglist>(const SceneBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad3630f0e75efb992b123c89654607040</anchor>
      <arglist>(const Scene &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7f779488f52836cea51f1a38488f876b</anchor>
      <arglist>(const Scene &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ab37540b9164d318889e1323be7fa3b8b</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a89333f10a40329f55271c794685575db</anchor>
      <arglist>(Scene &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aa760cdf1cda1dd3a460f11e257fd46b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af5b5f627027c8c24f6a9eb27c1cb1dbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ab7db7cebb1627f136ea6831bb455a073</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a833d4549a6020037969b44d7dc766027</anchor>
      <arglist>(const Scene &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a04e4c63725b6fc0df8581eb71231d18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Scene</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aff30fbf404fd4112c54759d33960d78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scene &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a6d9e503fc33bad3dc24f884a72e17d08</anchor>
      <arglist>(const Scene &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aad491cfead02896db73ba6271d58a298</anchor>
      <arglist>(f32 timeStep, const u32 numSubSteps=2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>adc510ff6029dca669031a031d9ca0069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a8dadc66e35d70f7d51bceee337aa268d</anchor>
      <arglist>(Camera *camera=NULL)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a27894158aebeba1a3251efa33c41aa71</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af1b996e40edb70d8eff9b3aef11f9197</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5a826df53ef02ccb6bdcd7969c186162</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getActiveNodes</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aafc49de895ac5cdf65bdd2668b186333</anchor>
      <arglist>(btAlignedObjectArray&lt; Node *&gt; &amp;activeNodes) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveParticleEmitter</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ac4345dcab380f4f28240047f684100a8</anchor>
      <arglist>(ParticleEmitter *particleEmitter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveParticleEmitter</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a09172111155b23406c7110982fbce2bc</anchor>
      <arglist>(ParticleEmitter *particleEmitter)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a8ccfdf570bddfeda002ab780f14223a0</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveClock</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a31e1f83511a7340324c21cb1285ed0a2</anchor>
      <arglist>(Clock *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addActiveGeometry</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>aadb34e2132fede8f4a3dc0a9fdbb9d2c</anchor>
      <arglist>(Geometry *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeActiveGeometry</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af4f7c3b7b136bbf4f8aad6640814b9a3</anchor>
      <arglist>(Geometry *clock)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearNodeTouches</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad8f34eff6d8d4fff8c293936b316f4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearAllStates</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7a3b03d4a7537c7716f88ba8e10af13a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>m_RootNode</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a43647a8e0be9fc885b5154c1af895afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SceneStateMachine *</type>
      <name>m_SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>af74cab422e8f225410580c3094a621ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_BackgroundMaterial</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae68fc17490d0d3afc6aa5ac61cde8944</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PhysicsWorld *</type>
      <name>m_PhysicsWorld</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a987c6686913633182f6d4d71a917872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Clock * &gt;</type>
      <name>m_ClockList</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a43c89f420568172383a0a74dd4a4a2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Geometry * &gt;</type>
      <name>m_ActiveGeometries</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a35add44afe6bc1cffcfad5d4485598a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Camera * &gt; *</type>
      <name>m_ActiveCameras</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a848fbc8e44f9607cf718c3873733303c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Node * &gt; *</type>
      <name>m_ActiveNodes</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a24a8ee9f086038177024f3302ec4da55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; ParticleEmitter * &gt; *</type>
      <name>m_ActiveParticleEmitters</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ae7fde2d5a6e6cff7000aa4c452c78fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Clock * &gt; *</type>
      <name>m_ActiveClocks</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a68d32e9cc141536aa783b34ba13ff82f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Geometry * &gt; *</type>
      <name>m_ActiveGeometry</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a996289861e836e52dff177d6198b084b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_TouchCamera</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ad530ff8622354101eb23d43982a2fea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldInput</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a5a2020205bbce2fe559331689dd5d3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene.html</anchorfile>
      <anchor>ace13a6b81a7cce08dd6f9d0c1c00af04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneBuilder</name>
    <filename>classnjli_1_1_scene_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>ac13d009de0ff091079d34319b73bb96e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a3d3c23ac1b1b3a81f24c16a54e1c557f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a6130751ce0ea6cf1cde422405fa03496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>af0655e6ef38a89ff1c8d663d5163fc91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>aa5ba585a6ddf1b6a329339c8ba2e87f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a93fb9bf345fb4f268f26056fbf43cd71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a969a8dfd6b03041f2c1ab018a459188d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a2fdae0dad7bc105720ec40e4500455f7</anchor>
      <arglist>(SceneBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>aa4f2fe2401942a03809494d03a9f76d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>ada4fdb5701ec3f8167c7c27d0e26828c</anchor>
      <arglist>(const SceneBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a7cc2b228996ae221236decdcd8c4211f</anchor>
      <arglist>(SceneBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>af9d2a17c5d96f81fe52bdc0e1153caee</anchor>
      <arglist>(SceneBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a35e422e5b7dad78581a730934fce3019</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneBuilder</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>aefa2147c696bf2edee0274f20fbf96a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneBuilder</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a4874af1675ba7d22de8af89a03df7a91</anchor>
      <arglist>(const SceneBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a36a05627709826877824957228140eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneBuilder</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>a87cb465f0c0593b647fb84383c7e9da2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>aa7c6d3a968512f28f965f73bfcd73908</anchor>
      <arglist>(const SceneBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneState</name>
    <filename>classnjli_1_1_scene_state.html</filename>
    <base>AbstractState&lt; Scene &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a274aa78664eb18d3787d5a4034f85c07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a15557415360834103de80e85e235cb78</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>afde64dfd84a8b1cd1b648225231e7ae7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a8945a471807893c9442a17766dbf5dd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ac1daf5f9a9bba0a4700f8fa75d7b488b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a6d0c25d933938e8542f7bd17fdaab8e0</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>afa0b086c1bf0a41bf9caf7408ce2d324</anchor>
      <arglist>(Scene *scene, f32 timestep)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ada2a116a9ed51f7e3e0a0e9e94dc7dfd</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>add899a791145ac1a06ee1f54d0b60196</anchor>
      <arglist>(Scene *scene, const Telegram &amp;telegram) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>aada7738b0ccc928bc8f258de1f046738</anchor>
      <arglist>(Scene *object, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ade8105306ea69c75496a62a49ddb0352</anchor>
      <arglist>(Scene *object, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a9066440c12710e56d460f3ba64e73b00</anchor>
      <arglist>(Scene *object, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a68e927da0cdc2b8806fae344b75e3f61</anchor>
      <arglist>(Scene *object, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a091f6ee2bbc0f250362a17177b108300</anchor>
      <arglist>(Scene *object, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a4201c0cc0281fa0a0686bc18508f3ee4</anchor>
      <arglist>(Scene *object, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ae76881dfc8ba5596113c1d35afec1b78</anchor>
      <arglist>(Scene *object, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a234c9b5a8b7ea611bd38e8614ad12ae4</anchor>
      <arglist>(Scene *object, const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a2bc77b1d7e48504e1273c82fc8c82e7d</anchor>
      <arglist>(Scene *object, const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a2dc269f881e2685742813f56f412d36a</anchor>
      <arglist>(Scene *object, const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyUp</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a0285084af113825bd125b559f408c9f7</anchor>
      <arglist>(Scene *scene, const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyDown</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a411685b6b560bd62977c53cb1fc78961</anchor>
      <arglist>(Scene *scene, const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>abda337709547b3fd1cc5ea03632299ce</anchor>
      <arglist>(Scene *object, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardShow</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>adda084dbfb2c043d462fa37269f1deb5</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardCancel</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a4fb86e98a2622bf121bc8da38669307c</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardReturn</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>af2aa710b56f4cf5d513e71c1490d5f26</anchor>
      <arglist>(Scene *object, const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renderHUD</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a36c01e4a68cfcdf6b61ee8a52c878456</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pauseGame</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a7937319d3e5d2444f873841065b463bc</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unPauseGame</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>af9864d565dcf4da79041560e0167e0e3</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willResignActive</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>affda631631e58dc23fab8a32f77311ca</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>didBecomeActive</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ab9d94ea67665b6cd57396c3e383abfd3</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>didEnterBackground</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a6b10e154bd9f688b1e2eabb7e3f4d60e</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willEnterForeground</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a2117d146196a7b0d71900218105e2480</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>willTerminate</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>af24fbd52046a96068f4c95a7c8ba199a</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interrupt</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a6a733557c14d69103650485b239a9fc0</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resumeInterrupt</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a075ad8f0e66c93ef018ba79fdc5b31be</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>receivedMemoryWarning</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a2284c8a48c1b17385eef0b8b150bb02b</anchor>
      <arglist>(Scene *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a3010d62b1e488e95690af8cacfb33ed7</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a3e2d4d122ab498db3a958e2fa4ccf7c1</anchor>
      <arglist>(SceneState **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a8a6f3696b73d1c5f62ef2aaeb7133cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a61241c7c75c26c8b101933f902d59426</anchor>
      <arglist>(const SceneStateBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ade44964690e66b33e30c9523ebe946f5</anchor>
      <arglist>(const SceneState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneState *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ac9a25b582796ba60d15b09afc316b1ef</anchor>
      <arglist>(const SceneState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a8d4e7fde5ccb368eba840abd98baa3ee</anchor>
      <arglist>(SceneState *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>afd1b0b2061bfc50bb2ee1bee6b201ed1</anchor>
      <arglist>(SceneState &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a4b0106f0f24fa972164621f077751de9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a52f95093a613a2731c9e5af6d393d406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>af36183061e329d8bee934b0102dcca1a</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>ae224c0ca2d4499a7cfdabecf50f4191a</anchor>
      <arglist>(const SceneState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a10621b814c7eb3f151d1fb2def0de843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneState</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a7a162969f8688aca76d9f4524bdde614</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>a7ff08f27f08190fe52c335c6955582ac</anchor>
      <arglist>(const SceneState &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneStateBuilder</name>
    <filename>classnjli_1_1_scene_state_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>acccc4d0f0b5b8b6a6e12c3eca9d48ffd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a2aa348d593beb031fedb8012962c40da</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>adbb863f1a1d85cb5d8354462cb7fa5ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a6321171363bce444496fca0e11290835</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a6e8b777bc6877335f84bb06f0f568494</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>aa22041ffd1550b3f851d5439e8c588c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>aef4178bb85949d3adf270ac0e4e9584b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ae519e8d5d3a7d5c581a867a5495b58b9</anchor>
      <arglist>(SceneStateBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ae0807229954ee519c875880eb7a2f69d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>af4e8a8b91ef4203267d43831379c09c1</anchor>
      <arglist>(const SceneStateBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a02708b50e5123587ea6ec3282900373b</anchor>
      <arglist>(SceneStateBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>af8d7b429f1265290225f47bd036cd9b5</anchor>
      <arglist>(SceneStateBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>aa964a5f9761378d3a65c4a826f1edde2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a044d81097ef875d2f0ed89ecc5041597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a83aa4a152e5afb7687cf1220f69fad78</anchor>
      <arglist>(const SceneStateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a8dc264c729889a1b9d298d3723999acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>a85272a153c7c378f0f11080fe06347fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneStateBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>ae8cc4fa5a09cb1ec0973d701b6ed2ed9</anchor>
      <arglist>(const SceneStateBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneStateMachine</name>
    <filename>classnjli_1_1_scene_state_machine.html</filename>
    <base>AbstractStateMachine&lt; Scene &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a3bea7e481a04e8c938d92bb911072a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>aea5cd03074546b8ffccf52936ea67e72</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a5a3f221a1b765b690d2cfd45e8a5e574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a26b4b620f64b21d9731c0114f2943cfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>aa3292255b28de515aa6bd2c5c8a9507c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>aa2304fea832ff06310a7812d347d5fa4</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a9ce443b1a603e328c6e4b0e4d8579abd</anchor>
      <arglist>(SceneStateMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>aa6763773b5a04f92920c7965db0bd1b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a70e5e383bfe8e85378b722a0ab5259fc</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a431d92c00f51476ac4e3734ab4beb8f9</anchor>
      <arglist>(const SceneStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a123b3de15599ad532fd6e7ab3341bab0</anchor>
      <arglist>(const SceneStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ac5cd66601629095b24f9b481670b6bfd</anchor>
      <arglist>(SceneStateMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a8263efd65894599a95b65e45c2f161b5</anchor>
      <arglist>(SceneStateMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>abca4021d6883832f287a1f259bb563a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>ac83cc2a4660d40ab9edd96b0c84c8582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a6b9e73f592b2b21dc20c4ad857200a55</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a2aa3ce6ee48ccf355faba089b44aa57c</anchor>
      <arglist>(const SceneStateMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a8d6f652887b7adf0a6627c60640a42d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneStateMachine</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>adc1399c50341ce5a2b1b0da1347f2fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>a4b30a311d96f0b26e1fdf6d66fe01512</anchor>
      <arglist>(const SceneStateMachine &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SceneStateMachineBuilder</name>
    <filename>classnjli_1_1_scene_state_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>acd2f0c46e5235d4147cb649ec631ed3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ad37279b99a3e8528b24eb24bffc0a940</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ae47cef2ded61a7fc61658ca3f9f92c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>aecc17e1921cac1cda12579de778d737a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ae3bc10469ad482428a105f933b25b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ad81f97274b9a9c03d0bdf33a9020bb14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ae0350a99b5be771c5e981fee2748ca1f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a044c8521b552871703df61e526a43b9f</anchor>
      <arglist>(SceneStateMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>aea2b1500804bee4d04c625f16f0b83b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SceneStateMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ac50a3efc74db66ef90683651cf1f9a8d</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a702e8dc5d3aa03f19fd59420c3a8e662</anchor>
      <arglist>(SceneStateMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a3429901daf45bf8649b8157804abe8a9</anchor>
      <arglist>(SceneStateMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>abdae2a2e543b6c7d76de85efb832510f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a71d8ef4d4414baa4b6606d4c50a44c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a0a51d5c4c70f41044dee451b1b0c39c7</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>ab73b21033ac0ce8ccd949a445cc9518c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a7492e20e8f9a4a3ff84c8226889d882d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SceneStateMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>a74adb973afa0ffe2ed7da2c033d10134</anchor>
      <arglist>(const SceneStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_scene_state_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>SemInfo</name>
    <filename>union_sem_info.html</filename>
    <member kind="variable">
      <type>lua_Number</type>
      <name>r</name>
      <anchorfile>union_sem_info.html</anchorfile>
      <anchor>a43b00f784510a2d500550b81578177d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Integer</type>
      <name>i</name>
      <anchorfile>union_sem_info.html</anchorfile>
      <anchor>a6ed52b8a8b415d8f16089445f93e5391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString *</type>
      <name>ts</name>
      <anchorfile>union_sem_info.html</anchorfile>
      <anchor>a393ebb62432ff3e689283e54e113b33e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Action::Sequence</name>
    <filename>structnjli_1_1_action_1_1_sequence.html</filename>
    <member kind="variable">
      <type>std::queue&lt; Action * &gt; *</type>
      <name>sequenceQueue</name>
      <anchorfile>structnjli_1_1_action_1_1_sequence.html</anchorfile>
      <anchor>a58e1fef231bba3b8b0f2a679cd0e6abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>numberOfActions</name>
      <anchorfile>structnjli_1_1_action_1_1_sequence.html</anchorfile>
      <anchor>aeb5ae53036c6785941c59a85c4bc9d2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ShaderProgram</name>
    <filename>classnjli_1_1_shader_program.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ae6b8ee664db016d247d1969a80a4d0f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>afe83d2e58961011b642a25e7c15a6953</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a61698287de4dadfd88151f40038569cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>af2f154eef9904f4b5078983ae025cd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a2af9c6b24ed749e698c3fce3fabda18f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSource</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a302cf231b252535230e1eaa794c0dc3e</anchor>
      <arglist>(const std::string &amp;vertexShaderSource, const std::string &amp;fragmentShaderSource)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinked</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a232cb84b51bfdd0d3ace500fedde45a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unLoadGPU</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>af93d37d88d0d56ae1dfe0a902ec7391e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setUniformValue</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aa48f0968f86931295b686cb31d6aadfd</anchor>
      <arglist>(const char *uniformName, s32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUniformValue</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a01aeae9437f32732e8d2d3b59c962139</anchor>
      <arglist>(const char *uniformName, s32 &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setUniformValue</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ab55e9cbbf6a0921259a38c50ff0c6c80</anchor>
      <arglist>(const char *uniformName, const btTransform &amp;value, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUniformValue</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a3a27d20080728fd333fb013f6492ee34</anchor>
      <arglist>(const char *uniformName, btTransform &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>getUniformLocation</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aa870b331b82002024be451a7d556d99c</anchor>
      <arglist>(const char *uniformName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>vertexShaderLog</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a132663261df4c7029260a59afb91a19d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>fragmentShaderLog</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a3f4444c90822c63fee69261f476774b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>programLog</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a28dfbce737ee0481f6a8199a0b1b226f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>use</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a1295b3e2656bc24f485dc97a7d920b67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compile</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a5a6c623a0321cfc305b6edc6e514b049</anchor>
      <arglist>(const char *fileContent, njliShaderType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compileShader</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a47e7e27178632533e9d8c805f5482812</anchor>
      <arglist>(s32 *shader, const u32 type, const char *source)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>logForOpenGLObject</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a73023771e5e565e69571188ebc59a471</anchor>
      <arglist>(u32 object, GLInfoFunction infoFunc, GLLogFunction logFunc) const</arglist>
    </member>
    <member kind="function">
      <type>Geometry *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a663abf703712e6cbdffd9ac7ee2631b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Geometry *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>af1c05ca7d7c97f0abeedf3c34426ddc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a78a8831d8b2c160381b3f00b5bd0a9f1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a86ca7eb980e28330ee6ca6a7d17e0a12</anchor>
      <arglist>(ShaderProgram **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a0d6c86874feb9ca5e1203afe5c30b216</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a425842368a91fb2d82d550a36d3d440a</anchor>
      <arglist>(const ShaderProgramBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a65c36d0386ef8a58f55d14918d0d8096</anchor>
      <arglist>(const ShaderProgram &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgram *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ac5ccaeffeccdfc14a2579eddb07e0a36</anchor>
      <arglist>(const ShaderProgram &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ae162b5b68d88e47b14b507fec798da1c</anchor>
      <arglist>(ShaderProgram *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>af1b37f6cb592d8ebd4f5a31a80a373c2</anchor>
      <arglist>(ShaderProgram &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a92e24de59f2e44318baab955895910ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a5def475147030f4b08273f0dc0d8d0eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a46ab4a8c88ca20c55202c9a152a57838</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a45a93b1279f11a5323e28070ccc778a8</anchor>
      <arglist>(const ShaderProgram &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a091874e0063dade5799d8061f156fe3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ShaderProgram</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a8b08a64a5724aba5cc614c2288846044</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ShaderProgram &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aba28741515ef99ccd725473aadd26a93</anchor>
      <arglist>(const ShaderProgram &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>link</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>add1203b770ecde00cf3089433cdc372e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>bindAttribute</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a0f30cbd74175ed6967bafc46b35bb928</anchor>
      <arglist>(const char *attributeName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>u32</type>
      <name>getAttributeLocation</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a44caba1039485701689f734de28462e7</anchor>
      <arglist>(const char *attributeName) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; std::string, s32 &gt;</type>
      <name>UniformValueMap</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a36ecea1b480769cf2a125e5fb13f122a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; std::string, s32 &gt;</type>
      <name>UniformValuePair</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a784188d8ab62d1eb541432ce756689a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_Program</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a8391542fc26ae41466b6fe713a5ded2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_vertShader</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a8f1c16c8132f6680d0fd8e7cd0f53ad9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_fragShader</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a9b528190f997c332ccd7f4605a2ba5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_VertexShaderSource</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a36b6891a72ec4e6f7ee89add79884282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_FragmentShaderSource</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>aa1e64cb2fabffbafbff9f7c707672643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UniformValueMap</type>
      <name>m_uniformValueMap</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a20e228a576a90ddd2e232fa490cde560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>float *</type>
      <name>m_mat4Buffer</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a2de7645fd10fecfe9bd3e128984c93e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_shader_program.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ShaderProgramBuilder</name>
    <filename>classnjli_1_1_shader_program_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a9dc26dce669964afdddd7ccf44ce3210</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>ae22417a6b93438971835bdf638fcebb8</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a12234652d43de942922cec53b69956b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a131e91d141b0223cedebc6171de59b9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a252394f97f129b953718c0b2713005e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a84e2ca7ff8a9b890ddab11ce9feb07bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgramBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a7ad4dfdff810f39a5d9ea199706527ac</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>ab5b9f90e9cfbe7bc84cce9cead9c03a8</anchor>
      <arglist>(ShaderProgramBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgramBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a29db7e71179718d1d22c76b4cd3db023</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ShaderProgramBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a539760d31d54d1c95c2fffc4c3fc3fbb</anchor>
      <arglist>(const ShaderProgramBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a9cabb0fb024d57b344c3c62e81c0e950</anchor>
      <arglist>(ShaderProgramBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a5e440bc4611023d1350b958ee2077fe5</anchor>
      <arglist>(ShaderProgramBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>af7c6be5d68fae216af430dba56f249f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a4743299668f5602a53b707a34d160e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a8e2f894d4040fb68acb4d0af0cacafd8</anchor>
      <arglist>(const ShaderProgramBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>af93458672273f1de79cf909e24e57851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a4bd9e9f32cf2de9930d3436d77855fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ShaderProgramBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>a9a3271993de06e35de522429e79e616c</anchor>
      <arglist>(const ShaderProgramBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_shader_program_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Skinner</name>
    <filename>classnjli_1_1_skinner.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>af88dbc19397204e3f8811bb90619eb76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ad70231f29258b02bd8a64701b4535856</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ad81abcf0cfc3dd6ca23709c9a88a6e75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a797a6a7f87d2bdb108bd23789bf54a79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>aa7aaf60e36df1de64cd62c6858ee13c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a0734a98004e5c67690903c48a1d63115</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>aaaec43167e79100f72744b21f5c4e370</anchor>
      <arglist>(Skinner **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a78feceb3e2e4785dddf2c34effa2a0f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>abde17c25b0dd465be2cf5a9eec8fbea6</anchor>
      <arglist>(const SkinnerBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a099db5a3a6cacd9ae2485fb4e9b05998</anchor>
      <arglist>(const Skinner &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Skinner *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ab8442114221e6016091c544584da30fe</anchor>
      <arglist>(const Skinner &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a977a61c154a63f6d1517a99dbb11ab68</anchor>
      <arglist>(Skinner *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a7d6b3e1a1e1fb58323d50ed7b8fce536</anchor>
      <arglist>(Skinner &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>aa6ddbc193192b2e5ddcca57cd936e7a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a971fdfce176805ad32671fa772f355b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ab8f209901a9b9978be443c0c1d13b345</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>acae70ea7c8a5dbbcb8f8483a9fcf513c</anchor>
      <arglist>(const Skinner &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>a701e75f62ec38a9c39d88abd4f782c1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Skinner</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>aea41a660450f27b02e5c6631d6a7b964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Skinner &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>ad9d630dddb556f8855c126e6892eb25a</anchor>
      <arglist>(const Skinner &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_skinner.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SkinnerBuilder</name>
    <filename>classnjli_1_1_skinner_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>adec22b8a23c4223bf42be4e08993a5cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a25ac6b4e538b33329b9a54a03eea67c4</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>af5a6f6f73b0a7d61b4a558ab76fee5a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a9c1161b91b23a079a4a060a7ff679e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a63933de3879401bd9d2681d7c97b6e5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a9aeeac78bae57f6ca91e7edc2fdabd89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SkinnerBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a8344d2b1a58676136d3fa122d4d38529</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>ad3dff1600ab1e01de4e4932fde4d58e2</anchor>
      <arglist>(SkinnerBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SkinnerBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a23dec85823c098ba80e17b6e3a7f86b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SkinnerBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>ac90e72b4b4b29cf200e714b6639807eb</anchor>
      <arglist>(const SkinnerBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>ab2433bcdd5d80f4e829a0636e3e3f3d3</anchor>
      <arglist>(SkinnerBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>aa8bb5bc2ecc561f3815c114341824d01</anchor>
      <arglist>(SkinnerBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>ab9ce72b50595aff70d438828f3125fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>ad550292245e00cf9018ef51d8a793b79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a400b16ca147c44e5a8afe3d9fa4731f8</anchor>
      <arglist>(const SkinnerBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a0b5e02d1a83e879b816c3acaca0b4a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>a359bb318d5f7d2f9118ecf96efb95745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SkinnerBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>af133f1d86503b5839870ba8d16c83ec5</anchor>
      <arglist>(const SkinnerBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_skinner_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SliderHUD</name>
    <filename>classnjli_1_1_slider_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>ac8b3369b0456c8fa0d8765975edc3ed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a40bc8a80246227afedf2b4cc15bb4a02</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a3a5f2b2fcb08174a629f52986153a67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a6dd59463a9e8b9ea30244b096f8785cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a03d13dc9d560ea5e3034f812f2562ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>af297ea719c95c5c078620135d8b715c5</anchor>
      <arglist>(f32 v)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getValue</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a1fcb9ca9673e68d68845e450282d1434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a7c2239129d284b67553d0c6535eaed1b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>ad2a2ea86c9748a6dbbaa9fb32860be0a</anchor>
      <arglist>(SliderHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a39e75f82c8e15b733dd034f94d33927c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>ad82c56035c83ac61772fd56872575136</anchor>
      <arglist>(const SliderHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a6a515652bfa2ef7926ea86b80e3f40f7</anchor>
      <arglist>(const SliderHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a144602096b965e2b6e836e752d37e77d</anchor>
      <arglist>(const SliderHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a0d32698c697432a157e24ac11337f35b</anchor>
      <arglist>(SliderHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a4736d2eebe4afbebfddda76dfd14cce3</anchor>
      <arglist>(SliderHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>ad0d5a4c37308654054255e7f261364c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a8cc2cb200f5a52bd7f4d5f1520a08524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a2ea762c03a7585d4e5c6d2aa3a23692a</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>adb10bba5954a63dc1b6c0a0c22b41899</anchor>
      <arglist>(const SliderHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a7804e6f55bef27c234667ab64595acca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SliderHUD</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a64da41c2529ad0863638117b9749fec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SliderHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a67c6e29fd346f8e303dc477682f0dcf8</anchor>
      <arglist>(const SliderHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>abb2dd1860a2ae905408275a8bdad484c</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a0b02cb21788a357fb319b8e788338196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a4345d7ad18c82bffdd598fa040dcf95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_knobPos</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a2f5beb25d041a338881130f604b76c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_slotHeight</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>adca46e42811634fb76694319deb9cce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_slotRadius</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a983798d2710f43d303b8b0d573cd041a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_slotFeather</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>aec325cfe3424cc232b5fe653e2ca6868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a52343c794850b57c10fe8ae72a89f18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a17b3288b1e99144187f62ad925e36a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobShadowGradientStartColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a72fffbbb906af2c53bcd4ae214720725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobShadowGradientEndColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a8eb7e4813c2c5db6b4017c122fc51109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobGradientStartColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a72191d6f3cf8188a0a84f26058700430</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobGradientEndColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>a63a84c5b27d77d69697e02540ea40c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_knobColor</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>aa2045a80a0751ba59755d073d44087dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_slider_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SliderHUDBuilder</name>
    <filename>classnjli_1_1_slider_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a5e47f810bdbf71c626689b7abe9c98b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a35671014401438dceb5e1468c4fcff24</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>afa0f286961acc9e1657cd801b11cc360</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>ad290f966d4e75c073125443cee217c23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>ae79b4051ab1041b6d0e3d6b1775fe095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>ae7909be541de9b9d4662ca0e5477e430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a680aaace6d70491bbe44a3fa1f559e05</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>aeeb254844ebeff53f2d4415e0b92d58f</anchor>
      <arglist>(SliderHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a7445624612c77a91979b4613745aeff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SliderHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a71991a7d0a5a1058f1c7a381cb03cb2f</anchor>
      <arglist>(const SliderHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a36c97ae77bfd67c0896fb12a18656e28</anchor>
      <arglist>(SliderHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a0e18355fc8350c87ec0ac7e8ea2764b2</anchor>
      <arglist>(SliderHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>ad7eb0696e32ce163c3bf7a90b26e3d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>af73a377428f6af72564355d163b4dc16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a196d311ee0b48ddb8d3afdc096f5e392</anchor>
      <arglist>(const SliderHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>afd9977bba090ace2dd35ea7fd0b8af19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a15c750c346fe90e705427082213b7c68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SliderHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>a5e75bed3ec8b1934facaa3a9125e429c</anchor>
      <arglist>(const SliderHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_slider_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sound</name>
    <filename>classnjli_1_1_sound.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractTransform</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a69f1dd0a3f2bb6c9679d234690370646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ad89767bc3d47d55be5c47691d8f07e9f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ac88b2973a00fe0e9859022de01380be6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a4eb1275fcde09dd0bbefd6950fdd8fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>af27e59803f8b7136d71375cfb51620ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimePosition</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab901d2259a11d7fcfb81703bdd123f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimePosition</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab47ad411b9f9cc12b39ddd20080293e1</anchor>
      <arglist>(f32 pos)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getTimeLength</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a310e49f228af60ce97e14fc1b6a448a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a24d6a4011b3148bf41801ad68350d14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aad31814ddad91970ae4418da96035b8a</anchor>
      <arglist>(bool isPaused=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab1bcced722c234e1f1e243ef2c0fec33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a78cf20388060b6be413aadc5967193c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ac9b262c7c7d7a68f3812e0d30b675648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unPause</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab6f878ee1163bab97ffffc98ee60789d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuted</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a75777bf34afc2d2c3a83238dbc67aae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mute</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>adf46d412ea87b44a16190049b74a18ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unMute</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aec8eb5528c8c0f4abfd7a69b0fb48aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getVolume</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ab765af304f9023b6aa75cea03893fa32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a2dd1ddc8d8b04c90bb06808ad43e6642</anchor>
      <arglist>(f32 vol=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getLoopCount</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a200bee960269b65caf5e756db795cc31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoopCount</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a0b08a237f722aec6daa46c364026834d</anchor>
      <arglist>(s32 count)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual btTransform</type>
      <name>getWorldTransform</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ac6e54aa0ca0c4e9893d9a78322f86dd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a56f596a7daacc96a7f6127dc75d12866</anchor>
      <arglist>(void *system, const char *path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ae1637016ca27ecf2259b5428ae3a5f41</anchor>
      <arglist>(void *system, const char *fileContent, u32 size)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a14a65624a35ac8b64585bdabf001cdee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aba51bc1bd1f8b72ae6a02caa706f30c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>afe9d314ce74f806284a71dc06b4ed49a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>af1810cb796cda9c9d84ba28f3a0d8ddf</anchor>
      <arglist>(Sound **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a1e4eecd523bbdeb14ad7960be052ece9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a0541df0bea26b9f9f17d73b996d23aa6</anchor>
      <arglist>(const SoundBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a59f89544f5a6b184f8b19a53a7477000</anchor>
      <arglist>(const Sound &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sound *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a9ec3756dbe60a666478daf5e2d0a17d8</anchor>
      <arglist>(const Sound &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a023bb75371ded2019f650dfa8b6e03f6</anchor>
      <arglist>(Sound *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a41494cb822b91e70ec894f8eb2bfdd54</anchor>
      <arglist>(Sound &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a77826080c397a43ac8c78967aeea33f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a5e12f6636f376b32d2c8111348db08cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a646fac583099c08c0c4b8f6bea667ba6</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a9e7e19a78ee4e0bcdc9e5e7c3d7a7f67</anchor>
      <arglist>(const Sound &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a5292abe9fa05e3809af27839e05e146e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>a579238f2638337c0a221b636577a9a5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Sound &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>aeaf2801406eac8f11345eb664816e61d</anchor>
      <arglist>(const Sound &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldSound</name>
      <anchorfile>classnjli_1_1_sound.html</anchorfile>
      <anchor>ae0be99489b1d41e4e52d3692b0d9cab2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SoundBuilder</name>
    <filename>classnjli_1_1_sound_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a72976424fae00fb3220e82634ccb8a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>ade7840ed06c1858a341701c876b82d9a</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>ad4c84ef8bc68af39b2c5c98244b9e9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>afdebffb655601f61975dcd60f0aa1e50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a255ff51b756b20aa40f629fa9af253d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a9da2dacca2839dca4fc180a4bd7b01a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoundBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>aa467d7463364f288e2112b4dc49842c5</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>ab7d9d7b0f1239801eb2b4822326a5e0a</anchor>
      <arglist>(SoundBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoundBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>ac8f14144f6c578259789d003647e006c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SoundBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a99b6adfe180d217ad5076f53dce2462a</anchor>
      <arglist>(const SoundBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>abdaa0b9dc2013c0ea003a113c510667e</anchor>
      <arglist>(SoundBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a082deb7455a25765004e778baae296b1</anchor>
      <arglist>(SoundBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>ae0834b181129d3880db67232fa56580a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoundBuilder</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a8528324a8c0aaf4d7f92dcaf55529869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SoundBuilder</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a5a0fda44d88783ea23ff9149c1ceb5e2</anchor>
      <arglist>(const SoundBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a29c0f9da4d66868dc0c5e7ceb55cc78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SoundBuilder</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>a98b3aace77fe18026337d4cdd4882e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SoundBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>aee21a4c3543eea9b267ce20d3dfe7dd3</anchor>
      <arglist>(const SoundBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sound_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sprite2D</name>
    <filename>classnjli_1_1_sprite2_d.html</filename>
    <base>njli::Geometry</base>
    <class kind="class">njli::Sprite2D::SpriteQuad</class>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a4151be6ec53acfacc209ec1a0755a671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae372ea409ac67b1585e7928bffe5f502</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a6e82261effc23589cca219ddb5c90851</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a57e7a9f75af0208001c075120f1ece3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a565b51d4b11b9d35f6ca7e54fbf7fb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5f7f2c09006d809bce2914d86e3350d6</anchor>
      <arglist>(LevelOfDetail *geometry, btVector3 **vertices, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a96d489e0131032c64a150cd1629fd0e5</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ac17cc53c2a39003e8459e990102a23fb</anchor>
      <arglist>(LevelOfDetail *geometry, btVector4 **colorVertices, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2ecb47d5889333f482406230fe470e34</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ac1e43c1713d68560888fbfdaaff7128c</anchor>
      <arglist>(LevelOfDetail *geometry, btVector2 **textureCoordinates, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u64</type>
      <name>getNumberOfTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a68ba69857ee4bb27dbf9072da12046ab</anchor>
      <arglist>(LevelOfDetail *geometry, Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>abf2ee9acb5cd301b5a4029181be7b155</anchor>
      <arglist>(Node *node, f32 opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHidden</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a67ddaace4a3a936408068657d617a64f</anchor>
      <arglist>(Node *node, bool hidden=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a875c4e8392568fdd347c9730aedde9a4</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a357c517b9064bf729722e3cff9312dd0</anchor>
      <arglist>(Node *node, const btTransform &amp;transfrom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a9faa5df865ca871af37dea98682a52a2</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transformTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a61249eccaef1845855b6c1165bb1d1cf</anchor>
      <arglist>(Node *node, const btTransform &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0ff724f572e6768e9d1b20b6898af095</anchor>
      <arglist>(Node *node, const f32 &amp;xoffset, const f32 &amp;yoffset, const f32 &amp;xdim, const f32 &amp;ydim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a925843b85976cb7df479f7ffc8635d5b</anchor>
      <arglist>(Node *node, const btVector2 &amp;offset, const btVector2 &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>adfdcb93f490645ae11398c033df8235f</anchor>
      <arglist>(Node *node, const Rect &amp;dimension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>af4869e2abefd5adc60b997628ec02a09</anchor>
      <arglist>(Node *node, SpriteFrameAtlas *atlas, const char *frameName, bool matchDimension=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpriteAtlasFrame</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a17b3bca9c69dda742fbf86a6853204ee</anchor>
      <arglist>(Node *node, SpriteFrameAtlas *atlas, int frameIndex, bool matchDimension=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDimensions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a1df32861ec578642d7e92c77f6b886f2</anchor>
      <arglist>(Node *node, const btVector2 &amp;dimensions, const btVector2 &amp;spritePivotPoint=btVector2(0.5f, 0.5f))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>shouldApplyShape</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7815fc6f5a2174a560721310fa4bd92f</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getDimensions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aad011d8c6bf03d3575ceb5a562766e98</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAabb</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>add0a0f16202c5e62dfff65e08570316d</anchor>
      <arglist>(Node *node, btVector3 &amp;aabbMin, btVector3 &amp;aabbMax) const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getPivotPoint</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aa9356cd4e3fbbaab5a28131ebc04844e</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureOffsets</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a4d706d6c031c824764e933233829e63a</anchor>
      <arglist>(Node *node, const btVector2 &amp;textureCoordOffset, const btVector2 &amp;textureCoordDimensions)</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getTextureCoordinateOffsets</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aafa4ef49eb61ed83868554ea44de348b</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>getTextureCoordinateDimensions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ab58d425fdb3e71e2d76dc472690f5ba3</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0e06bbf2ab717c55c8ec8483ab6d8157</anchor>
      <arglist>(Node *node, const btVector4 &amp;bottomLeft, const btVector4 &amp;bottomRight, const btVector4 &amp;topLeft, const btVector4 &amp;topRight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ad8e90cd6c323796e293a883b10a67681</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorBottomLeft</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a8b4da784e9772e4f1baf564e95ea4410</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorBottomRight</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a3fc2e3e49e24b362374b6c37fafb1e08</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorTopLeft</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a3169787ff63114afbe97b82176f6b4a7</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function">
      <type>btVector4</type>
      <name>getColorTopRight</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7a62c9b64700de73af3ba3609a764e93</anchor>
      <arglist>(Node *node) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfVertices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae13602610a36e2636c0416a500847dc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfIndices</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aadc09bc806fa16ad2b4dbe2e9cfba24e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVertexPositions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7265065dfeb76dc5e8ecf5f708469841</anchor>
      <arglist>(Node *node, const btVector2 &amp;bottomLeft, const btVector2 &amp;bottomRight, const btVector2 &amp;topLeft, const btVector2 &amp;topRight)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a75bf99fa3eeaff0c3ce8b526da172690</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a4b91a7652df3f55fe8ce1c309c273438</anchor>
      <arglist>(Sprite2D **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a93ea0b2082fb0be44e226f0a75cb1280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a36d602af7f4cc35c181e5cd89aeaf1e5</anchor>
      <arglist>(const Sprite2DBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a74e12714eebdca602203dc3f1570c307</anchor>
      <arglist>(const Sprite2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2D *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a8a4d39bc4949de3339c0cc9adb584a12</anchor>
      <arglist>(const Sprite2D &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7ee4f6b5135262c0ea30f46a51b3c7a8</anchor>
      <arglist>(Sprite2D *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aba38ac28f9b1b82a4afeb04c088c212d</anchor>
      <arglist>(Sprite2D &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2a55a0a9a9d32af30b6bf0c7f52d146e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae1afa39b1a31b063b987d75cb2cebb9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0f243b6919f6ce210a53dbf5429b1609</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae9006247411dd22ca34f98cfe3f54f0c</anchor>
      <arglist>(const Sprite2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5ad2cf93a7f76fa359afeee9b4b7cccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>af0fcfd6f7e33f5147bd0d2749af11071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Sprite2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a37931c43c6f6cd71930c4c09186742ef</anchor>
      <arglist>(const Sprite2D &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>applyShape</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ae5133dcfd1e31e9686c1240e86feb7d4</anchor>
      <arglist>(Node *node, PhysicsShape *physicsShape)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexPositions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a1eb18ee4456f637f49d4f8af92c26d21</anchor>
      <arglist>(const u64 spriteIndex, const btVector2 &amp;bottomLeft, const btVector2 &amp;bottomRight, const btVector2 &amp;topLeft, const btVector2 &amp;topRight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexPositions</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a51e7da9615ab1a4896eb0a7d6a26dc33</anchor>
      <arglist>(const u64 spriteIndex, btVector2 &amp;bottomLeft, btVector2 &amp;bottomRight, btVector2 &amp;topLeft, btVector2 &amp;topRight) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a2616b43af1538ab520962098e76372be</anchor>
      <arglist>(const u64 spriteIndex, const btVector2 &amp;bottomLeft, const btVector2 &amp;bottomRight, const btVector2 &amp;topLeft, const btVector2 &amp;topRight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexTextureCoordinates</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>aa4ffca63ade5288e0426e70c67035f00</anchor>
      <arglist>(const u64 spriteIndex, btVector2 &amp;bottomLeft, btVector2 &amp;bottomRight, btVector2 &amp;topLeft, btVector2 &amp;topRight) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a9e9b884bf7160977a67dc9e714827188</anchor>
      <arglist>(const u64 spriteIndex, const btVector4 &amp;bottomLeft, const btVector4 &amp;bottomRight, const btVector4 &amp;topLeft, const btVector4 &amp;topRight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getVertexColors</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>afe5ae51437a7830eba4d733895e3b165</anchor>
      <arglist>(const u64 spriteIndex, btVector4 &amp;bottomLeft, btVector4 &amp;bottomRight, btVector4 &amp;topLeft, btVector4 &amp;topRight) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>afe5dc58f98c20568da4bb48cc2ade19f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7d6d0369dd3cd6552d3a188aa323a088</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>swapVertexData</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a310321527886b81f468aa818812a3347</anchor>
      <arglist>(const size_t idx1, const size_t idx2)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getArrayBuffer</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7cac9e09519030700347f1b803a3084e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getArrayBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a7ce47c8c15d233418ebc5f012291a2d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const void *</type>
      <name>getElementArrayBuffer</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a87994e01a64d5c6c72c98434f7147a08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual s64</type>
      <name>getElementArrayBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a214b06be63b407db77a24bd639b39b60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a318f37bf46314d96ce9c70794cf6125a</anchor>
      <arglist>(Node *node, const btVector3 &amp;position, const f32 halfSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a5b32ecafaa923c27662db4ae37286815</anchor>
      <arglist>(Node *node, const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>hideGeometry</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a4a0be33f855fcef2b8ab1ebed8b09652</anchor>
      <arglist>(Node *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SpriteQuad *</type>
      <name>m_Sprite2D</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a0fad1694353e933dcd9793b071ff126b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16 *</type>
      <name>m_Indexes</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ad95a14aca71071fb7bca74a1320cd5f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_SpritePivots</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>a11de2ec387edcd23e7b0508e00e4266b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool *</type>
      <name>m_changedDimensionArray</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>ad79c244e39d2c124fc790b15474035e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite2_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sprite2DBuilder</name>
    <filename>classnjli_1_1_sprite2_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ac26bca06d2e4c266c65f8f7255f7e5a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a22b346d352d04147e8341b16a012ae0b</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a5d998e1a0923159ff1545adffcbe9a60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ac8758df00e11e876e1181a325dd072f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a708d8ea5fa85721c46de45ca9a5f9c54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a61638422c15f960617b72a22dab99af5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2DBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a63a3840175f91013b143deb9873d61bd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a7b2e0f8407cf1456c5d67c76b5f44b45</anchor>
      <arglist>(Sprite2DBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2DBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>aacf13bcd07b7ae227754dc774967be8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sprite2DBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ae1bafb46b2edf1d64ff578d99bf1c3ed</anchor>
      <arglist>(const Sprite2DBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a685094b311445e1054f92720b6629dae</anchor>
      <arglist>(Sprite2DBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a22c448719aa48d5724640684b6b3b4b6</anchor>
      <arglist>(Sprite2DBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a7804c520fd7ccac9d391bb95ae5cc1c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a2e85b174d6ad697a903b0f4fb3cd1f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>ad2651a7e1fa270afeb471fff17074f4c</anchor>
      <arglist>(const Sprite2DBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a3cb3a2562d320aeb02a16b5ca981f9e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a81aeb417544a413ce9345f14268c6c80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Sprite2DBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>a22eb97bc2d4dc995d5a7c0269da32ac4</anchor>
      <arglist>(const Sprite2DBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite2_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SpriteFrameAtlas</name>
    <filename>classnjli_1_1_sprite_frame_atlas.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acaa7d503f10f50c8c02d00a5d452d704</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a6eb5c74fba5bfbe51278d58eee374922</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a8c65d9841be00711e2313fab7b356fbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a65d153f3e642f3fc07c8cd428bcedf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a21d364411123d55f6dc3e0ee37c30c3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSourceFilename</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acdb8abdcb12a78faaba9bc8bb03b1813</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSheetContentWidth</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a13cf0c784936ff97ddffbce245df1c9c</anchor>
      <arglist>(const u32 width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSheetContentHeight</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a3ad6be6edaad4035f39bc4f2f992d424</anchor>
      <arglist>(const u32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a029155ea70b98a96833a1c27d6ce530a</anchor>
      <arglist>(Rect rect)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a9febd69e673836a7ec521c26f63df543</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function">
      <type>const Rect &amp;</type>
      <name>getFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a05db5e5a525a1c9824dc2c59fbd1f57e</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function">
      <type>const Rect &amp;</type>
      <name>getFrame</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>af1b18ca67a6237830f17df7ba9aa9b33</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSourceFilename</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a5cc4b4e987a852f650fc1b85df38309e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u32</type>
      <name>numberOfFrames</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a214363a5b72eab0d51e349927ed65da6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>contentDimension</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a9b95722e49128c1e1fef2e82152b9c84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>abd9a8d6350ab19df8121b22e85493e4c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>ab9893ed4aa85eff7606c50b581f6986f</anchor>
      <arglist>(SpriteFrameAtlas **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a898fa8f023efd9cbe6c0e7f4fd6a4215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a93ad01950173257f50571aafa6c5e502</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a71916140cfa625adfe7fed64338dfdd8</anchor>
      <arglist>(const SpriteFrameAtlas &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlas *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>aa25dd2508eaee217ff393475a736f76e</anchor>
      <arglist>(const SpriteFrameAtlas &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>aa585303baeeb8d6df78d1ae1acc61c20</anchor>
      <arglist>(SpriteFrameAtlas *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a59d90a34b45854c28cfd4e6cdd66990d</anchor>
      <arglist>(SpriteFrameAtlas &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a58bec088ea6c0f9b140dcee287826007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a596bc53daef8f1de21fb018c04b5b71e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a15a8fe9a69c63d560897562decfc55e2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a425671e7ea1cc989dd59d60865ec4792</anchor>
      <arglist>(const SpriteFrameAtlas &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a79e815f85949f9e26a982b87344b94b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>ab7e30efc622bb0b8d25e04ab41d1023c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SpriteFrameAtlas &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a6b06945cf5b35035f89f032a784c7c63</anchor>
      <arglist>(const SpriteFrameAtlas &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static s32</type>
      <name>countParameters</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a8e1e4a08c88fe319fccddd4e34043016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static njli::Rect</type>
      <name>rect</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a85cbbab899666861a829c1cb06a03f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_SourceFilename</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>a3b74d61cf8f45bdb16b7d17eacc9ec47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_ContentDimension</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acbe7fbc410b99d7a736dd06b56c9a1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; Rect &gt;</type>
      <name>m_Frames</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>aa93f565817540b4d7d18f3a39cda90ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SpriteFrameAtlasBuilder</name>
    <filename>classnjli_1_1_sprite_frame_atlas_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a5e8916db46dc8e1e125c140b5bdaeaca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>af3f07049fa7006d2bc598661aead34c0</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ae0ec0c5ec24e4d3c33f80caab2d09c82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ab9727608e426483e33c4c8d11ad3dc67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ae452aafd5f7b3bec5944662ffbce3741</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a862143bc3fff5439c99fabad8259da2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlasBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a406c0a0878ee1a16d22bed1ff0d72a2d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a5c55b6ead0735374e555a30a1c52d3bb</anchor>
      <arglist>(SpriteFrameAtlasBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlasBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ad4e9ac86b040e0e7213f548325a1d420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpriteFrameAtlasBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ab67505f778002fc04c16abc632a67647</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a844af7ae09c217f0af71bbf998d8af10</anchor>
      <arglist>(SpriteFrameAtlasBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a1a712251b63be506616c6d23eaf8d0df</anchor>
      <arglist>(SpriteFrameAtlasBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>afa4a71dfece90df012bf601ab30e4548</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>abec86e9a21df3c99e6377874d7c1e191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>ae2fe8b7db6cf2781d147fee0a88ef81d</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a71d987eef7b62ec6e6e92a6557412d6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>aab2e26cb12c81c82a7e43c5d12815b52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SpriteFrameAtlasBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>a7ede2fb5ac211101e11c848c5ccacc19</anchor>
      <arglist>(const SpriteFrameAtlasBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_sprite_frame_atlas_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Sprite2D::SpriteQuad</name>
    <filename>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</filename>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>a34d7a2ea6b0b129abe89f2f6fd37a5a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpriteQuad &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>a97bb5f82275fdce50e4352eab0e14e6c</anchor>
      <arglist>(const SpriteQuad &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>bl</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>ae0ffef0622181dcc734b02cef8f45075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>br</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>aa7033cec9b83bad9dfcadb89f29dcf94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>tl</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>aecfbaa6fa13750f9fa1347cf36d12f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TexturedColoredVertex</type>
      <name>tr</name>
      <anchorfile>classnjli_1_1_sprite2_d_1_1_sprite_quad.html</anchorfile>
      <anchor>a0eb387285104214c4b47b616a923d48d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehavior</name>
    <filename>classnjli_1_1_steering_behavior.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>abbc461d853c1b225cfde5b79d96d11bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>aa8494cb4a327c0040f64cfe8b393786e</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>abb58d6982dc295fc3e90f096f51b0ef8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ae82bca8468d41aff8c22b76fd359fe9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>acd7af46e42a8a3fc1208a47f50836ac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a9720953de1268f658636213946d76ed3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getCurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a4e79ade4c061f79de526f05a529317d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>addTarget</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>aa197011275830165605ced9e47250b72</anchor>
      <arglist>(Node *emitter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTarget</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a54b6a2a46d2918d0941475f0e75d84ab</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllTargets</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a607058ee31eae853823c0ecd1cf5b81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>numberOfTargets</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a068ffa3f1d80389b134c22955695f800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTargets</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>acfac4925fbaa4c6e9a76efea3b015fa7</anchor>
      <arglist>(std::vector&lt; Node *&gt; &amp;targets) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getTargetIndex</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>aa8e882405b1cbeb62abeb154084dfccf</anchor>
      <arglist>(Node *object) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getTarget</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a693361a80cba3b7beb75a2dcf0bd63dd</anchor>
      <arglist>(const u32 index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Node *</type>
      <name>getTarget</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a7c2cdca1ff34e7b4882847bd2ba6b222</anchor>
      <arglist>(const u32 index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehavior **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ac77f8ca5cacd612bc9de8e84c498df8d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>aa24a3dcd73261a34b1bbb80804a97425</anchor>
      <arglist>(SteeringBehavior **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehavior *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a41c2781070017d2faf5cd5bdabb36d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehavior *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>af58fefc1f70b9399aa6369fb19c1e0b6</anchor>
      <arglist>(const SteeringBehaviorBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehavior *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a4b924a53f5289df64d24b88340601394</anchor>
      <arglist>(const SteeringBehavior &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehavior *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a7a24f6e560057d1609da98ac353561b6</anchor>
      <arglist>(const SteeringBehavior &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ad1867854ab502ef50adba56ea4da1d84</anchor>
      <arglist>(SteeringBehavior *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a1d492f79b5486b45cf52b4c0e25a9f97</anchor>
      <arglist>(SteeringBehavior &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a3c8ce7cce8fa14d182d917d3ee4d9b13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; Node * &gt;</type>
      <name>TargetVector</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ab7a7224d97d2e392e5ae75108a6c160a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehavior</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a643a4f5e0c276d94fb5e7d130b0ef446</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehavior</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a702de6537bd43b15bd2e4c41a6ad3552</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehavior</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a52a459d7e95c05ad3dc04f7bc08bb99c</anchor>
      <arglist>(const SteeringBehavior &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>adae316d4515e5cd6c4219d09717e2cc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehavior</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>adf0866d38fe7dd3aaf8048b80911a93d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehavior &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a4b99b614e4f9ed862949fe0bbe4a374b</anchor>
      <arglist>(const SteeringBehavior &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachine *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>aac8d25429493fe07310052e7c0b07dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const SteeringBehaviorMachine *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ad9fc58487698c22d3b07c864863044d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ad99f0f1056a0a980456e107bb3305fab</anchor>
      <arglist>(const btVector3 &amp;force)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>hasOwner</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ac31b1718aa4edc52cb1598671c2ce9ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getOwnerPosition</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>ae271bdd9879d6160e187c53ac9548099</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>btVector3</type>
      <name>getAverageTargetPosition</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a7db08fdeb6eb0f065262f5ee0b1e26d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TargetVector</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a48a4deef579ab968bdd4ecf0ba0c8668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>a9148bc145f9bc1943d6c40fe263fcb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorAlignment</name>
    <filename>classnjli_1_1_steering_behavior_alignment.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a2b500b0c7cdd4c9bdecb94897749e5bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>abdbf23a5b3b54642be4ff30ff0e3edca</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a6cbba499c35513f2e890496d5e70467a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>ab5230ab61bf1d66199ad26ec0963887d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>aad8f9ac6f7ca9c4deb87a0a665aa4b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a57e0d628940b268bc9fbb5381b75c912</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignment **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a2f7ef7a5e93eb8081f7a00650cb6c5e4</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>aaa4572d52e3e9b2c3c792dbbe061e2fb</anchor>
      <arglist>(SteeringBehaviorAlignment **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignment *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a4aeea58e195226f38b2e8d22f54d01aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignment *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>aaec3d8b8e4c3eaab849953bb1352d0cc</anchor>
      <arglist>(const SteeringBehaviorAlignmentBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignment *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a1a8619aea2138978c70770837344f2b3</anchor>
      <arglist>(const SteeringBehaviorAlignment &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignment *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a3fd6800a40920454a794a1ac4e81ca5d</anchor>
      <arglist>(const SteeringBehaviorAlignment &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a4d6922da07d5042beb9d9130939ca412</anchor>
      <arglist>(SteeringBehaviorAlignment *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a23b61442bc50667c336289af4c212f3a</anchor>
      <arglist>(SteeringBehaviorAlignment &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>acad2dfa2c57e80058ac1916e5adda54e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorAlignment</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a3040f00d20496d47bda30af6a9878dc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorAlignment</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a71ecfd6cde46f132a2d16af9e13f694f</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorAlignment</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>af6172ece292e73d5d4f5ad0b9e0f1b91</anchor>
      <arglist>(const SteeringBehaviorAlignment &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>ac9f41d5cd2c2e729d0a11776dfdfa5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorAlignment</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>afdd370f7624c7af4f0240ce2984aa1de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorAlignment &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a2ebd44d4aed19a49157962658c5c49b6</anchor>
      <arglist>(const SteeringBehaviorAlignment &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>aa0ff4a6faf13f61bc0c98884ec777960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>a602bca83019d945502324777d7243dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorAlignmentBuilder</name>
    <filename>classnjli_1_1_steering_behavior_alignment_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a709481f46937533d73b1a0246ea76993</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a3cbfb826f38059003573c24a1f86b1ea</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a584466cb5cda7cddd21ee1a2ca8eb9ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a237e899522da16f145be4e755a1b0c8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>aeae4d890010be3da48f8221714d59c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>ada8a4f78156236023d2c214d25e80138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignmentBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a2b20b08ca30103ac16df269bd89fb446</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a55285efb47a45d6237e0232bb452dbab</anchor>
      <arglist>(SteeringBehaviorAlignmentBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignmentBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>acefa2b1317e3025d7d7f7124bdeec9ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorAlignmentBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>aee302479b172e0dffe63b095f2f28d2d</anchor>
      <arglist>(const SteeringBehaviorAlignmentBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a45df5ac0cb661e03d677a058783d059e</anchor>
      <arglist>(SteeringBehaviorAlignmentBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a694b9f9a03a628557b95092c8f85d029</anchor>
      <arglist>(SteeringBehaviorAlignmentBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a723346123c63ab5b229ce19e474178f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorAlignmentBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>af0586d13b11896ce361d46f8b77411e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorAlignmentBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a652bc1e8e1181455722ce9b507378018</anchor>
      <arglist>(const SteeringBehaviorAlignmentBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>aa9c359e1d4a2244d02c88ce7104607ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorAlignmentBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>a643b0576985530f5c511a1d1e0a29a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorAlignmentBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>ab2ce565d5e2d34b64c63b1998cd76a39</anchor>
      <arglist>(const SteeringBehaviorAlignmentBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_alignment_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorArrive</name>
    <filename>classnjli_1_1_steering_behavior_arrive.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a35e76ca4d74688cd292034313bffe888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>af5a5fa8bcbc51a5e18a7c92f497a4251</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a49def442c41437419d4b1934528e6d12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ad2e5b01bf3703716d07b3e49434761c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ad6d387b76e083ea4751b097eafa54ae6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ae878be98da62eef4bb606937e5e944e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArrive **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a2c5ab81118b43b5cd6c5b1f0c0820730</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ad5836ab023df75e4accd4700f4e7a4bc</anchor>
      <arglist>(SteeringBehaviorArrive **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArrive *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ab5cf89afc4d132c4558e4959c29eea7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArrive *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ae0682be1bc15506a432297ba991cba4e</anchor>
      <arglist>(const SteeringBehaviorArriveBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArrive *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>aa53741674c97533bb49a16089cd824c9</anchor>
      <arglist>(const SteeringBehaviorArrive &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArrive *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a2756ea4a6c57da84e9d76dafcd8ff0d1</anchor>
      <arglist>(const SteeringBehaviorArrive &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a866a9a6076e51f1134dd0b2891780128</anchor>
      <arglist>(SteeringBehaviorArrive *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a38a4e9e532dd6f78619005a099f25ee5</anchor>
      <arglist>(SteeringBehaviorArrive &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a773e7919cb6643e9eb5b362fc3fac97f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorArrive</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ac9499db709a2309b89510387dd152b94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorArrive</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ae328206069abff74224522ddfa56cd4d</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorArrive</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a85bc716d1f6300796e3d4f7b8eed4563</anchor>
      <arglist>(const SteeringBehaviorArrive &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a58060a9c8544488d65280d03bfc81ea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorArrive</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a99591af7c7b81ea8fa9881572357e4df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorArrive &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>ad543d29289854fae252bdac1445fc141</anchor>
      <arglist>(const SteeringBehaviorArrive &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a008d4326c190d7d9dec813de4a0aa71b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>a0e8b5e159c8ad606a7fae7e2ad67b1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorArriveBuilder</name>
    <filename>classnjli_1_1_steering_behavior_arrive_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>ac3a1c5c02af8295b4da5043b61929070</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>ab2db80fafdc9da01f1869d1cbfabef7f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>aeab31c2042c67a36fffcdff213e0d52a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a4030f557718317373ffcb0a594a0b8d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a21c8502230046aec05026a8fc761cc67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a385fb23caec31f074aa21bf99a17b206</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArriveBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a1e1038411d15323c3bc9e23d6aefe0c0</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>aeec33257b37c71fd3cb7042c534f1ff7</anchor>
      <arglist>(SteeringBehaviorArriveBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArriveBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>af00ed16ecc1b1bb202e3d787ad00c5c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorArriveBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>ae7e3789fe4109faaa52ce84f2fcf6888</anchor>
      <arglist>(const SteeringBehaviorArriveBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>ae0eb9b506082b8038336ee76ddc02d28</anchor>
      <arglist>(SteeringBehaviorArriveBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a6c39f5d65b1d2a82eceafb8e48754e34</anchor>
      <arglist>(SteeringBehaviorArriveBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a0ec3d9504d8f29944baf9e3ec5b1929e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorArriveBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>af63ec3a00832887a1110281740f19e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorArriveBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a1095c6b315af832d6af5bd757616f194</anchor>
      <arglist>(const SteeringBehaviorArriveBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a4d871dd950ccc30c600bf85fba8bf49b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorArriveBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>ac6c756f66dade352e2724c88b56baa44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorArriveBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>a5978575c7c49a72371b2b945d5794377</anchor>
      <arglist>(const SteeringBehaviorArriveBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_arrive_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorBuilder</name>
    <filename>classnjli_1_1_steering_behavior_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a4b2f826423e0bc815a6abc923ed66665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>ac94c6252483326df2f7d8a1551159858</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a290dc340ce59ecfb5a0fab8a8d93fb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a647d153d1aa7e81b7e4ee6a2ca55efd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a8c24ce33c8524273aecb7f9a5d34bd61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a8a67dc1dc042a4a59e899cb5e497425d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a9443fbf6e5f32e9c774c7cf9dafa0b87</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>aa18561a56f6e028f606423025bbfbc51</anchor>
      <arglist>(SteeringBehaviorBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>aa53852bf591603694a821a489f47887c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>aa304bf81d3f542c2c1d70361f6626ded</anchor>
      <arglist>(const SteeringBehaviorBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>aaad70995c2b65dd3e06a787bfdb8a9f5</anchor>
      <arglist>(SteeringBehaviorBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a20854519330e16a79e2ab6bd38735545</anchor>
      <arglist>(SteeringBehaviorBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a959a85a3a585926da5ce2de515ad4ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a9364e074f4aa52528eb605f243c1c6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a0dae6d4d65b59978330c17f4e8fa7eba</anchor>
      <arglist>(const SteeringBehaviorBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>acbb319618c411452675fc2efeb4f12f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a171cbfb6a137723efa40c5485a274d93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>a7b782750f974aeb6cf64b009b6120aa2</anchor>
      <arglist>(const SteeringBehaviorBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorCohesion</name>
    <filename>classnjli_1_1_steering_behavior_cohesion.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>ac7807575daa40083f0e1c648da155f93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a548183e74a5af18a73001cbb787b318e</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a72557106c655320637724465e98b1ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>aeddc5cf6f988277eafd15344c086527d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a4b4358c51b85b8c6ca8ffc61a566b35b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a67060584a15bdf7b9c367d71304965c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesion **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a8d370c8c902af821e61df18a59f4757d</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a0a5ef08843ce560e0b9af63b2fc8bcc5</anchor>
      <arglist>(SteeringBehaviorCohesion **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesion *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a5cfbb1db9c82f6517dbf6f354624a0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesion *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>ad4617cdfd7a1faea75b249091a8fd610</anchor>
      <arglist>(const SteeringBehaviorCohesionBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesion *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>ad212794313ea653c1b765366ad423543</anchor>
      <arglist>(const SteeringBehaviorCohesion &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesion *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a6685c161ed3cb8a28b47542361c2fe96</anchor>
      <arglist>(const SteeringBehaviorCohesion &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>af19446195cf0c7c8787eac2dced3ebb2</anchor>
      <arglist>(SteeringBehaviorCohesion *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>ac0a3ef2a68114c4b4a78edead64ea566</anchor>
      <arglist>(SteeringBehaviorCohesion &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>ab0d4fc92a137a32d7f82620427faf1f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorCohesion</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a13d763269bd16faa286f62929b6ed76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorCohesion</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a83a322d01518b3433f2758448dbf0bba</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorCohesion</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a33cee2f374ef4ae1bd6032325d88c7a1</anchor>
      <arglist>(const SteeringBehaviorCohesion &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>af50b98139986c71ab0ba5cc3703e07e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorCohesion</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a01d7595251a0b50be826377284e0e206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorCohesion &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a9c73dffbdbdbb311e25197caedfe2ba3</anchor>
      <arglist>(const SteeringBehaviorCohesion &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a8212107f6ae961d1466c40a031ee044e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>a1e7a72418342e530082f3477ad4f52c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorCohesionBuilder</name>
    <filename>classnjli_1_1_steering_behavior_cohesion_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ac9e90802685baa1d00dc45f5923e06e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>aa2682c7df3d8e451aeed4d52199ee540</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ae6bfb53672094a0161260e92b7fcd966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a3e53592fa685890b96123f68ee15fc3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ab6822284ca24cdb64af18303ad52e197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a02280a22f87a0463f386ae455b7ccfd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesionBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>afc983284eeaa6b00cc099d01fffb9ba9</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a38487036a881b6da1319297ba40c1844</anchor>
      <arglist>(SteeringBehaviorCohesionBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesionBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ab6f85e6d0427c05ad846f422e92930b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorCohesionBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ac8a51456192f7cbc581e5ffec74336d6</anchor>
      <arglist>(const SteeringBehaviorCohesionBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ae5df0f25d375e93748736de337e22a2d</anchor>
      <arglist>(SteeringBehaviorCohesionBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a4c104dc7915ecc396287775c5c2763d2</anchor>
      <arglist>(SteeringBehaviorCohesionBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a2269a31c758ecafce57ada527f1510c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorCohesionBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a9d5b11ed45f08075e0547a9def63b54a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorCohesionBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>ae36e72e74e00537445a1533df24da4d2</anchor>
      <arglist>(const SteeringBehaviorCohesionBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a78ae616c5d77861d88f5499dbe7aff3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorCohesionBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a9dbdf2fd25f026574cd8266876300aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorCohesionBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>a4232e2d9cd367c5ab1920945e82a265f</anchor>
      <arglist>(const SteeringBehaviorCohesionBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_cohesion_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorEvade</name>
    <filename>classnjli_1_1_steering_behavior_evade.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a15ee5391ccc2506831c1f74888d0b225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a8a2e13abe004302c0ef004cc034a2f6d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a764995d627d1735471951041885bb3dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>aea2cc17a1023812ec42851bf602ed3a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a65cb01c936a8ca1c879d260a943b16c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>aab18adfa89d35b3063f02a1fe9b22ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvade **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a522887462e45b7e35476b2974a2c8373</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>af4226a065b9afeda6de43e7642b953bb</anchor>
      <arglist>(SteeringBehaviorEvade **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvade *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ad247df2ce7f2aec0dd3a795b45bef690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvade *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ab3fd0cd8031e94cea6fd3c24d8b8d036</anchor>
      <arglist>(const SteeringBehaviorEvadeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvade *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ac1d3de65ea7d4d54de69587ca9bd46f5</anchor>
      <arglist>(const SteeringBehaviorEvade &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvade *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a8795aeeb2da4b641b3cab466a569c689</anchor>
      <arglist>(const SteeringBehaviorEvade &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a400007cd35f6b4be2c777078c27cf7dc</anchor>
      <arglist>(SteeringBehaviorEvade *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ac63d609bdeaf72751db55113f8928ffc</anchor>
      <arglist>(SteeringBehaviorEvade &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ae3512120b3fa30c75371f54e1a450ebf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorEvade</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a3b2bf55e7de5cffd95d35c5ae03b1e2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorEvade</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ab690e849c1699c0ea8f0f45a641149fa</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorEvade</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ab2f526815d1db75b34913d218834ff17</anchor>
      <arglist>(const SteeringBehaviorEvade &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>a7cced66738b3fb41e6b4b1c1a7e06984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorEvade</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ad657a3f3bee6e39ec90723cbbc524bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorEvade &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>ab21b49cd6e2615dd5052a766b3b2cbbf</anchor>
      <arglist>(const SteeringBehaviorEvade &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>abc8badd2f0463a5cf90faa1f24e02fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>acada4d21166aa029aec597546182c44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorEvadeBuilder</name>
    <filename>classnjli_1_1_steering_behavior_evade_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a0681342ce2590a57b67953310bad92de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a340a9ed97c82909286f05fdcd05b3db7</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a38506bbad92150c615a3fbec153b1410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a4ebd083f8d91c528047c2a88e1f81e23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>aae11d5b1325c0938ddb7f9b22572a48d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a55598eb3fd729ed2d06ac1b07e9331ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvadeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>af6700d938518bb5051c0d972d164f53a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a0e2d712186d55408630706dc250a0664</anchor>
      <arglist>(SteeringBehaviorEvadeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvadeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a95adf43ab644e79d5dcc53a5b2620981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorEvadeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>ac0994fe63ce131aa9d295887e9098fce</anchor>
      <arglist>(const SteeringBehaviorEvadeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>af99d88947146d4aaf51e279760d327b2</anchor>
      <arglist>(SteeringBehaviorEvadeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a4c45f5567afe5062f152933c8cac55e1</anchor>
      <arglist>(SteeringBehaviorEvadeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a7f11e366113188486e67abecb5d1fbda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorEvadeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>afb2516f8ffad2569836b838d7b9a1ca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorEvadeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>aba75b6ee3daf82833edea293db4c94bf</anchor>
      <arglist>(const SteeringBehaviorEvadeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a13120a9517352f0ce8c208e196026d42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorEvadeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a37b255513f0d7fa7c4746b9c448e97af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorEvadeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>a034d25bc4216ee1fce30eae6e1d09637</anchor>
      <arglist>(const SteeringBehaviorEvadeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_evade_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorFlee</name>
    <filename>classnjli_1_1_steering_behavior_flee.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>af688735b88770ca7e986b4f1607d7300</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a9b960243fb690e3e7273c05bae18b55c</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a95a04847e0acbf1a64df40835af28a3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>ac7e1def63e331a0ea6d59f75bfc39d22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a5f6ad77fa0c2aea0c30e248504944695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a2f2eb808d8dd3d1792e7ff2916a02ac8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFlee **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a3424227cb7b8018b59977e6936339a54</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a9ac450b31fed9a4d9a92c6b5a8dfb6f0</anchor>
      <arglist>(SteeringBehaviorFlee **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFlee *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>aeb7779c2210d42ebe0eaee865063c6c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFlee *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>aee8887a111ab2c8a08c6d31e42e8dbdb</anchor>
      <arglist>(const SteeringBehaviorFleeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFlee *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>ab1b25c046e2b7f1333762e467d822669</anchor>
      <arglist>(const SteeringBehaviorFlee &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFlee *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>aab44be6e0c476eab26a281c939af37b6</anchor>
      <arglist>(const SteeringBehaviorFlee &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a3c9d9cc3934c6c6e12f44298f5189a6f</anchor>
      <arglist>(SteeringBehaviorFlee *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a40035596d46b8133b30866e34a1e0395</anchor>
      <arglist>(SteeringBehaviorFlee &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a38a803a3d1269dd2c3ae09d1272156c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFlee</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a5977ff3cda247a544371d09f56bfa11e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFlee</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>abb0ec9839afe1503af5375fd9d4bd451</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFlee</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a1b4463554e3402c58628c5bbd5236f44</anchor>
      <arglist>(const SteeringBehaviorFlee &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>abb83f4c793fc3e70f91f8bbb231c929a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorFlee</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>acb158cd4ac7a344310ce662e3b58a104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorFlee &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>ace2e73d385a86278017967e7ab92762b</anchor>
      <arglist>(const SteeringBehaviorFlee &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>a5ea5afe63778f21ef7039f91fee2cdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>afd424808278925f423752d3ce2e7a13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorFleeBuilder</name>
    <filename>classnjli_1_1_steering_behavior_flee_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a791f984566d8698fca7b123ad2ff236a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a57e7bb2526150f02b68efbb9abb9fb50</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a670080c9d52cee1096c828e38ae2dd31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a4fa3eadb353fc868847d9237b128aea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a220154057d5925831cd3bbfb9cbe8eb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a5c6ed4df574992675eb753c0b37fae76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFleeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a3e15b86e49d246af24205b824649dcf8</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a25155ee100e076c66794a4051bbd16f8</anchor>
      <arglist>(SteeringBehaviorFleeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFleeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>ac6cc0482c2b9d77d61468ccaacf665ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFleeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a9f6f2314203a85906d3d0120e210642d</anchor>
      <arglist>(const SteeringBehaviorFleeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>ae60ff44542e4b9b7d664bef80b1f1767</anchor>
      <arglist>(SteeringBehaviorFleeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>ab8800bc9b2bfd8d9908c535c8476ea59</anchor>
      <arglist>(SteeringBehaviorFleeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a6d1d2f808813c24e3b7c74aeb707adb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFleeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a9446e8eaa67998d01e0f44918cb31833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFleeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>aa905bdd1ab0cc940d4a42af251d765a0</anchor>
      <arglist>(const SteeringBehaviorFleeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a3cf8ee61d02daed1d4b47c5ea858a07a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorFleeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>aa5cd3135980fb9ec78d330728d80ffba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorFleeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>a4e8d08bfa93cbf68e1f6ef46739edb27</anchor>
      <arglist>(const SteeringBehaviorFleeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_flee_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorFollowPath</name>
    <filename>classnjli_1_1_steering_behavior_follow_path.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>af60b873d59ffb7c5e800e2511f942978</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>abf14bd10eee78a37827fabe77217e51d</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a6281efac5e2e10796806c739692cd00b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>ac7de5e240b694c37e7eca4a5c41b94d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a0bd474599c9cb1b6dc24dfc1e481146b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>ac169340c95b5745648da76553a541708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPath **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>ab66eee2d77b84ff0bd458b2152c36ebf</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a257506416f98a717aaee51eb4e8450fe</anchor>
      <arglist>(SteeringBehaviorFollowPath **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPath *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a28a4e4320e7fe35dd1f5b8142884617b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPath *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>ab971d2cd578ee87af6e863369fd4efa8</anchor>
      <arglist>(const SteeringBehaviorFollowPathBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPath *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>afb1d08e0c6eba6d0096a0b021e58e0ed</anchor>
      <arglist>(const SteeringBehaviorFollowPath &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPath *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a7043e83acc2cb2c60764482381b6fc80</anchor>
      <arglist>(const SteeringBehaviorFollowPath &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a7f300e1c19fe1dca40bd27d539dcc694</anchor>
      <arglist>(SteeringBehaviorFollowPath *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a8c7efeb2a9c8e8793693c30ef7d299c2</anchor>
      <arglist>(SteeringBehaviorFollowPath &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>add1071a0484694e2bde97970647036b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFollowPath</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a23c6d21bb564f8dcc2e131307e5aced3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFollowPath</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a8c4fe7fcfec9e8c57f206bef9ba3d32f</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFollowPath</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a0de496b4c31a246ba106ea78c27696dd</anchor>
      <arglist>(const SteeringBehaviorFollowPath &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a1d94de6a37da4654ee94ebf7791078ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorFollowPath</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>aa848fc87cfe7536eb81bc376a2291ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorFollowPath &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>aeecda49cfcc232396ee803739ebbe1c2</anchor>
      <arglist>(const SteeringBehaviorFollowPath &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a2713eb2e2744fbdf32bfde7b93509ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>a420b4cfcf8d7956a60f915a8c1db53cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorFollowPathBuilder</name>
    <filename>classnjli_1_1_steering_behavior_follow_path_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>aba61cd2c8445bf764783323c4e1fa424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a9d6694c1eb17a4e47c0c56b4652b737e</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a50a99ba499b7302d16ab1d5f87741222</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a019563c150afe91c866de2599de0a06d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>af831b193fb89d58cc9cca762c3590392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a64c00278b66cc5c5b7c67219f97834b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPathBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a05cc13a4fe768aafab949ad750992d46</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>af65a2e1a8ad421ea99bf55b4dd1087de</anchor>
      <arglist>(SteeringBehaviorFollowPathBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPathBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a8f31ab518628db64017311fcabcefc5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorFollowPathBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>ad485a7eec809a2401a05e4d8a69ee756</anchor>
      <arglist>(const SteeringBehaviorFollowPathBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a9a44746973699b2b239d830111d45f58</anchor>
      <arglist>(SteeringBehaviorFollowPathBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a1c3b7eedc87079a4c9464b52ef2d5a44</anchor>
      <arglist>(SteeringBehaviorFollowPathBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>af658f0273f4e86148d45654eae482be1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFollowPathBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a0a0391680991754725148fd34e02f3cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorFollowPathBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a7062e338770e8a12ed1024186bf93105</anchor>
      <arglist>(const SteeringBehaviorFollowPathBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a65201420f3c7db1fb5c57164d960baae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorFollowPathBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a320f3724fcc646b892615c8cac29975b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorFollowPathBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>a4e2217746bd8711bfa714cea642fab2b</anchor>
      <arglist>(const SteeringBehaviorFollowPathBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_follow_path_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorHide</name>
    <filename>classnjli_1_1_steering_behavior_hide.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>abf96426826554e8c405a08e8a6ca07f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a6846cae09de6f06b52cc97a7ff0467f8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a219af1e998526e6e3bdd1f09aac2bc11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a61d1b4266bbd4d83f306c66e2dbfdccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>afad231266c18d212e47558624fb768f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a767a29696376d90158523d2aa5fb13d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHide **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a8fdf4ee83c8a30a75fdf06e111f621a3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a2b539ad0f2fb4f4758c56122f94f16e9</anchor>
      <arglist>(SteeringBehaviorHide **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHide *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a1ab4df55dc2a32fd856bc918efe77eed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHide *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a21d37096b86b4f1917a70bca836ff005</anchor>
      <arglist>(const SteeringBehaviorHideBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHide *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a4ba08fb5769667a6fa43d5ba3688ddd9</anchor>
      <arglist>(const SteeringBehaviorHide &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHide *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a89d2803a9d246b04c9de95b7ce9d022f</anchor>
      <arglist>(const SteeringBehaviorHide &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>ac30c8dd972afe41766a71d66298a5585</anchor>
      <arglist>(SteeringBehaviorHide *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>accb443030b5c8985fa75d30d15d34355</anchor>
      <arglist>(SteeringBehaviorHide &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a02ebee0ce5b418875b4a367cb817465d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorHide</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a596503d82f09ae0cf310d84667c1343c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorHide</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>ab3fbea854a36406b3d331886e13ae603</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorHide</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a05cb6b889f3fcd47d21ba2f31d9f53da</anchor>
      <arglist>(const SteeringBehaviorHide &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>aed997d461f2af6bd9210884904c809cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorHide</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a17620743b747dac4bcfc7a4856c04106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorHide &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>ab1411a1ed83c0ce426ce4a5933b3432a</anchor>
      <arglist>(const SteeringBehaviorHide &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a9d8827a9d2eb8b8cb059f1a920a4cc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>a6932c0546c4373a1e0b3f7d877f8123c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorHideBuilder</name>
    <filename>classnjli_1_1_steering_behavior_hide_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>ad5bf79f75acd7065d40437f5dac90fe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>aa58fb1f83e305f23906e6cadb9e7b31d</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>ab3b080cf4885df0292810ea80086bd87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a63ec8fd65ed7f2242f66a309459a7f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a12a25b19b54be304480aa0706dd87894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a1c2531e33e1870ff88d70f2def92c2ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHideBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a4d39b1c0a0217217ab35f8d12c476595</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a123b26cb4024dab53211d3b463ada206</anchor>
      <arglist>(SteeringBehaviorHideBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHideBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a33a4c0e42677f40bc2bc670f73991f46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorHideBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>ac579b37c08f1ca2cbac9f4f7215b05aa</anchor>
      <arglist>(const SteeringBehaviorHideBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a09a39860185eaed59b62223ff8fc7393</anchor>
      <arglist>(SteeringBehaviorHideBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a5b64fbc1b6b0182ae7a2d27983315e66</anchor>
      <arglist>(SteeringBehaviorHideBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a38a9fc01053815da006adef42faec3f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorHideBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a4e8243b317760698dc69916071379e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorHideBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>ad5a3939d01b55b471b0d6a7836ebc8d9</anchor>
      <arglist>(const SteeringBehaviorHideBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a6f34540770f9369867193dac2b50bd13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorHideBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>ac51c221006b31129a6cac95cd0e8c629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorHideBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>a44e381a66afa4ed7ec8efa1f4676f580</anchor>
      <arglist>(const SteeringBehaviorHideBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_hide_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorInterpose</name>
    <filename>classnjli_1_1_steering_behavior_interpose.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a8b2c4a1124d344441df7c79d75779d60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>acdbe12a685512be57fa5c01df5ef0769</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>aea1dd44a1ff29fae485fb554810f535d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a40ac76bd649350055bfb160248c48c9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>ae6a51b54d67fb4e5abb947f728eed712</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a11c5d304f4459170a42b9c95b996d739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterpose **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a7b1ea421777fb90c031b30122788bcbd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a611b45b2f46cf9fe0716c9f00b75bf38</anchor>
      <arglist>(SteeringBehaviorInterpose **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterpose *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a72a13c389235c9c38841563ece871812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterpose *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a8f3890db691eeadac43a976f51e25a68</anchor>
      <arglist>(const SteeringBehaviorInterposeBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterpose *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a1d3fd4e43052faf9f0e34bd86990e962</anchor>
      <arglist>(const SteeringBehaviorInterpose &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterpose *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a783a835d9c0bbbe7b99426667ac9afd5</anchor>
      <arglist>(const SteeringBehaviorInterpose &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>ad15b4e28b4593217f193a84ae32168bd</anchor>
      <arglist>(SteeringBehaviorInterpose *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a1697eccc9b53896e05a77d088a1dc862</anchor>
      <arglist>(SteeringBehaviorInterpose &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>ae1701ef534872d5b6bd4170a8460aab8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorInterpose</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>aa5f1edff3ea4552ec514e30855e2983c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorInterpose</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a6a427ae3226dc1caf4133c1b0be56553</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorInterpose</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>aac62d2994af0a88c8485575c30de5d5a</anchor>
      <arglist>(const SteeringBehaviorInterpose &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a2e148a46d38bc7803dfce9edb8db73f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorInterpose</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a3ba28746cb143f59dccebac34ed473de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorInterpose &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>ad0ab9efa14f816cb0f21507445c85069</anchor>
      <arglist>(const SteeringBehaviorInterpose &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>a49bf6ea1ffa7177f33017f9ce2afe350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>ab3b1b3d85102e5a29b6ba57e99acb160</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorInterposeBuilder</name>
    <filename>classnjli_1_1_steering_behavior_interpose_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>aa7089c006b41f518739b42c8a78a8b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a4927cfcb08181544485f060ea16620b8</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a799a873e35c8a789604bd26428c21e62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a4d5aca1336d985272b14bf3d79526fa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a9562aa01ebf6d4c86f248bb3e1b8b035</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>abf05e0eda6a4f1f235e1fa258c42fdf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterposeBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a497220c9d37e14cf1979d85abdf45d01</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>aab0057888dbb1106bddda16f4a8ac1f9</anchor>
      <arglist>(SteeringBehaviorInterposeBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterposeBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a4fe8d861e5eb67fc6c7f0367da73d2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorInterposeBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a1358912326273917e2654b1b8a6923ad</anchor>
      <arglist>(const SteeringBehaviorInterposeBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a5ef4cd3991f5e1dc151aa7f48c05e64e</anchor>
      <arglist>(SteeringBehaviorInterposeBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>ac3bb5b08cfd011aab3d8f8750301d248</anchor>
      <arglist>(SteeringBehaviorInterposeBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>aea9a5c0db93808fbf297db37b071535d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorInterposeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a3d97296b442d37648eb04b6dac78a7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorInterposeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>ad184ae7393bb51642efa7a07ca469d56</anchor>
      <arglist>(const SteeringBehaviorInterposeBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>acb4d13b2b25b578a3ecf419c5de5ff15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorInterposeBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>af8bf90bcf455ae7f7001e9dd8969ed1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorInterposeBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>a252a00f1a3e50c2f49760b2288159630</anchor>
      <arglist>(const SteeringBehaviorInterposeBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_interpose_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachine</name>
    <filename>classnjli_1_1_steering_behavior_machine.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>af6540438929773c0376faff7c1f908c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a1fbec43b76f0612ed5b0d2492bb4b6df</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a62b8ba5c3e2b9f63eb146721c03d37a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a9daddfcf84380483cd2643c15d0497a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a08dc60d265fe55badc0137c1a4427343</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>aa140509a8a5dcf389594c014ef1e779b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ab60292961503180cfb1f67e04f6a3dd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateSteeringForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>aea431466acb4ef73220206bbcd515a9a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getCalculatedForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a7d757fe3a0e36bcd3606f660025e1529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setHeuristic</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>afeba19775abc7b530aa0997e1e8cad9c</anchor>
      <arglist>(SteeringBehavior *steeringBehavior, f32 heuristic)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getHeuristic</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a577fa9c6dcf0b5f5b742db4304792436</anchor>
      <arglist>(SteeringBehavior *steeringBehavior) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addSteeringBehavior</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>aea8d4a3f11d710510a6362acc5e37f8d</anchor>
      <arglist>(SteeringBehavior *steeringBehavior, f32 heuristic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSteeringBehavior</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a8a14a3f6b951ddcf05a27256c3d21efe</anchor>
      <arglist>(SteeringBehavior *steeringBehavior)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllSteeringBehaviors</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ac480ec6e9f11918adee87d95167b9b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>numberOfSteeringBehaviors</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>abc8ac2f926c76602a5413baa12ba6f7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSteeringBehaviors</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a5f16284442c65dd387dce41393b30c4d</anchor>
      <arglist>(std::vector&lt; SteeringBehavior *&gt; &amp;steeringBehaviors) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSpeed</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>afefbffc1177c86516257201bdd649566</anchor>
      <arglist>(const f32 speed)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxSpeed</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ac28ff247a7d7dab66bc3a9bbb28a4375</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a26bf31bf1fe4baf5baeac3062e4c797f</anchor>
      <arglist>(const f32 speed)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getMaxForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ad31815b6939f2cd6c4a39803198fcf3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const btVector3 &amp;</type>
      <name>getHeadingVector</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>aac2de411738725c7e4347097327da51e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>af97628764337e956f6c6ffe1d21eff30</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a9cf768db1c04513184ada83d420af23e</anchor>
      <arglist>(SteeringBehaviorMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ab8fe4150d2324d83d50a413d35d16ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a8c449bcdcb6b82b7258ad5e418d6c430</anchor>
      <arglist>(const SteeringBehaviorMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a2f36fb5b2930a51164b442b399b2e414</anchor>
      <arglist>(const SteeringBehaviorMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a63326be519b9ee6d77687f90c6304697</anchor>
      <arglist>(const SteeringBehaviorMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a7e50f455b9d1a543c98bcb463f312647</anchor>
      <arglist>(SteeringBehaviorMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a3826fef1020cad7acb80436f7c9a71bd</anchor>
      <arglist>(SteeringBehaviorMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ab193f59f5f0a3ba81703678bd9b14e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; SteeringBehavior *, f32 &gt;</type>
      <name>SteeringPair</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a1a02a6c877a13e3d51d91e0636cfff97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; SteeringBehavior *, f32 &gt;</type>
      <name>SteeringMap</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a4140175f3174e6e8d22e977a72220b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a4ee69ac7ff9a845f31f488a94b3e4a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a9019174adb7e588dc03a3656fb546c21</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ad55d19c8bdcc34048021f613b0503437</anchor>
      <arglist>(const SteeringBehaviorMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ae9872ddbb50d792d826fd85059f96507</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a95670a6b33019e1945dfd4425479a157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a666d87bb4e80a99fd5125102bf8f3064</anchor>
      <arglist>(const SteeringBehaviorMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>f32</type>
      <name>getMaxForce2</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>acc1ec6529032eeb45aae2be40949304d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCalculatedForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ae8765d78cf8e8df73c72fdf9448d587e</anchor>
      <arglist>(const btVector3 &amp;force)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SteeringMap</type>
      <name>m_SteeringBehaviorMap</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>acc24af246957e8392f0fb59d4fd3bd20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculate</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>ac00a02f9f9e37129e300c60fabf23e69</anchor>
      <arglist>(f32 timestep)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a2a8706604ab27ba5ca57be349a18a216</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentVelocity</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a935ea15268f11582c9fbcdc350ddab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_HeadingVector</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a2df53aa5964dab7b6212f12eefdba0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_MaxSpeed</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a666e277daf2c8273fe3166e0416d9744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_MaxForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a30aa17a8097bbc87c6b1b613cbb4dffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_MaxForce2</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>af664462dba2acbda423df91209f8ce93</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachineBuilder</name>
    <filename>classnjli_1_1_steering_behavior_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a0e58242742971d09f8951c4b4337c7d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>aea21ad5a6fa0c1ed9decd6501e16751d</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a9a321d9d64bc49d4a63322819773c9bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>afd597391c6cf466f377abb59d8166155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a0cd739ed2ab0de74addadc632a0184fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a12c5a54271fd9f10010908a59fced890</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a60d1b7890a0bcca4aa4e02ee2873083a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>abaf463e018aa0fed6453cc828945b91c</anchor>
      <arglist>(SteeringBehaviorMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>ac7ee8b61a32009690b6a09b2f654c846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a16ab8af15f21b7d376fec378f5741193</anchor>
      <arglist>(const SteeringBehaviorMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>ad07f36443d63f799dcea45529984f592</anchor>
      <arglist>(SteeringBehaviorMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>ae4cc741faa94a42df2bd7c12e20d416d</anchor>
      <arglist>(SteeringBehaviorMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>ac68b89458678051ae996b1a006511425</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a66a63f7b31b5a648cc2a274b41dd1926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a5d7599ea78a2b81221de58191012ec23</anchor>
      <arglist>(const SteeringBehaviorMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a1225fb014a8c7de9525d2e3c4c75a0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachineBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>a5d23afb83c798107a0ede58b5283e0d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>ae526bfd3d7dff97423afc16b9057a498</anchor>
      <arglist>(const SteeringBehaviorMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachineDithered</name>
    <filename>classnjli_1_1_steering_behavior_machine_dithered.html</filename>
    <base>njli::SteeringBehaviorMachine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a72434033db333ed95de03c579eb96c15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>afabe12bcb2005f23bd4f7a79bd758cf2</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a3262e6d95dbb37c00fcc3436b1e48233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a5c38478d79cba8bc3069eac4e24acc0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>aa23bb3e4de991237c1e5ad172d08ca21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateSteeringForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a9523006f50dc2ba0e2d6e3063c054ec4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDithered **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a42e026ffce4751ecc02a859067698190</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a8b50147d7efe72e24c8508272db0ec16</anchor>
      <arglist>(SteeringBehaviorMachineDithered **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDithered *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a114f4f4f9fd40f9470450091d7b05a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDithered *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a033a7447b22988087a4b6c97f9421d6f</anchor>
      <arglist>(const SteeringBehaviorMachineDitheredBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDithered *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>ae37b36577ae4e6649fe03dc38ba8cda8</anchor>
      <arglist>(const SteeringBehaviorMachineDithered &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDithered *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a67fd94a3edce2e3f8b0aa18fc918333b</anchor>
      <arglist>(const SteeringBehaviorMachineDithered &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a47e6bda038144ca774b2228e6c7a9599</anchor>
      <arglist>(SteeringBehaviorMachineDithered *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>ab93199c4190ab5d21bbae89df461ae6a</anchor>
      <arglist>(SteeringBehaviorMachineDithered &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a010e9f5b4f86832a6bcfedc724720582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineDithered</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a5b4e9c96c351d5c3c131794e212eca17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineDithered</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a2d2e873e8bd71450633d17f69dfc3e88</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineDithered</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a43bbbc191a14382c38e3dd594e4de2ce</anchor>
      <arglist>(const SteeringBehaviorMachineDithered &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>aabbb92a21b17dc5896e68c4e853d39e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachineDithered</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a86ff4716635f7bca2ab38fd25d3ca9f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachineDithered &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>a3e17391fe96d97e1731163912db7f941</anchor>
      <arglist>(const SteeringBehaviorMachineDithered &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachineDitheredBuilder</name>
    <filename>classnjli_1_1_steering_behavior_machine_dithered_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a3a7280ffa7198b34164e73d280578f54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>aa0a6e2d4c927b58257fb72e9b10736ed</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>ade764e05d0adf7b39718660fc61f8478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a55ddd9357c21d013c041001b298f999e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a836f48abd9a02c81331b4edf8a2ffe0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>ab5e1174628702255c567b6a7025dd2ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDitheredBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>af8c396516d167e3e7f7f1395383e9dcd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>aba963cab1835b0dc0d8af1fecb0dcfb1</anchor>
      <arglist>(SteeringBehaviorMachineDitheredBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDitheredBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>acd55bdeaaf63d843f4d266a382c62938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineDitheredBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>abd47eb891a9e5279d5ed04081e6e95f5</anchor>
      <arglist>(const SteeringBehaviorMachineDitheredBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a371e2462dc60bbbe246cdf090a0bc793</anchor>
      <arglist>(SteeringBehaviorMachineDitheredBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>ab3d90dc5f4447cafd8e0baac86566724</anchor>
      <arglist>(SteeringBehaviorMachineDitheredBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>ad8dda734039220b56819c987b5258ce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineDitheredBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a29bc90ef13db454cffcf4b17bc37146f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineDitheredBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a8b66fc8de59df45aa4b21389d9edd7af</anchor>
      <arglist>(const SteeringBehaviorMachineDitheredBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a5ecdd6db8b4cac94fcb865f7f6524edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachineDitheredBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>ae62c84c297f2f954420e04f3ea51d6d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachineDitheredBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>a57a306e8528bdc367b1b0b7a6e7526dd</anchor>
      <arglist>(const SteeringBehaviorMachineDitheredBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_dithered_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachinePrioritized</name>
    <filename>classnjli_1_1_steering_behavior_machine_prioritized.html</filename>
    <base>njli::SteeringBehaviorMachine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>aa05ec0e843f46f25b03794f0a9a9f483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a2f3fa591ca198f2d45b1d49d73173b65</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a0688707312da3b16368bbe4a8ed28462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>adbf4f6b3ea233a5ae575d366b977d630</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a3268888171ef4efd85513b14616f47a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateSteeringForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a3260a17ae2fe1f5fb128915e3d2ab1b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritized **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>aa0bbfb3b91471a27b5c892fd437d2c09</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a8d2c77293eaf78e3b039be7848113845</anchor>
      <arglist>(SteeringBehaviorMachinePrioritized **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritized *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a941f586892a65e7cd31603a12203a307</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritized *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a0e75da87a00d1c8feb82a444eedb599d</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritizedBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritized *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a5b86567620dab0bd1a238c222efcfd63</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritized &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritized *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a639b1ed7827dcf456f205d635632ae5f</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritized &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a45cfd44a2c65038473e7ac18a4971585</anchor>
      <arglist>(SteeringBehaviorMachinePrioritized *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a0c4e4d6d59c41b7869041ccc973c3aca</anchor>
      <arglist>(SteeringBehaviorMachinePrioritized &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a3ca6a1a70276d06bb904a80bfae2110e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachinePrioritized</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>aa3fcf9e42273167b43484a37544a2f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachinePrioritized</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a23c42d4f9fbcffe31c1be3a9a03c827d</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachinePrioritized</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>abc12f2ca02c5f5e10da3532541492589</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritized &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>ab9a73097dc6fbabab96552a89e2f92be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachinePrioritized</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>a1c099f3b2fcf92ddc92c6aa1898af538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachinePrioritized &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>ae26142263f740261904ec19c71ca2f19</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritized &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachinePrioritizedBuilder</name>
    <filename>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a63fa1fbe88e54769e6182d0c978e6465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>abf6aca6a9c6afde88d4d3c7947563e8a</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>aff6da14dae45d6bcebe4fa80f2af2959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a678f55d2f2c28d4a7b01a32187e49314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a35da261aa788fdb9153c11e323996552</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a54a2962aefac477a798797c3e99dc1ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritizedBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>ad4cf91f79d4584cabf80a94ce5577eec</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>af2ed77dcd5f7ce585d1d82b8c5d75c46</anchor>
      <arglist>(SteeringBehaviorMachinePrioritizedBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritizedBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>aecab02d27de311aea38bebc4f35ebea1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachinePrioritizedBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a4d7150d424e3dd59787eefcd1e173b84</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritizedBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a421191e002bd0e57fb5db748dc0b9f19</anchor>
      <arglist>(SteeringBehaviorMachinePrioritizedBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a2673c76594a6d5678564c5f53e061902</anchor>
      <arglist>(SteeringBehaviorMachinePrioritizedBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a9338ef234a4a9529a53e496e955eff6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachinePrioritizedBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a923792b58a6c8c24f33a6656eec1cabd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachinePrioritizedBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a2f60d20caa00c606f02de03c6950bf56</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritizedBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a1645a7651ebc5c50b7b5e515f0a6b811</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachinePrioritizedBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>a68402a48edc8abe30c17b83342ad2963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachinePrioritizedBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>aea975281872eada31c4494df16f3471c</anchor>
      <arglist>(const SteeringBehaviorMachinePrioritizedBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_prioritized_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachineWeighted</name>
    <filename>classnjli_1_1_steering_behavior_machine_weighted.html</filename>
    <base>njli::SteeringBehaviorMachine</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a7e689fadcc5631e53fe3b9ec972ad70e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a384f337048a8483eeb7189f8fef0b664</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a96746378cde3e401742eda55cbe5b23c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a4d9fcf0548dc29c760dad537716c645e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>aa36b0042df33a2e63ec790e5a29ee183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateSteeringForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a14497ce93400f5c851a4ff412f2e050a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeighted **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>af2d0b54091e028661f775b07e77b97e1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a5d91176f80ad5e3dd7a5d56383f9d013</anchor>
      <arglist>(SteeringBehaviorMachineWeighted **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeighted *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a5f1fa8d36411ff094b1444fdac9d39b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeighted *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a631f5e5e58812c839466527b768a3d6a</anchor>
      <arglist>(const SteeringBehaviorMachineWeightedBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeighted *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>ad1c677f04a95b4a56df14ff847bbe161</anchor>
      <arglist>(const SteeringBehaviorMachineWeighted &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeighted *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>ac488695d16aadd9726218938e9be5fa9</anchor>
      <arglist>(const SteeringBehaviorMachineWeighted &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a63d165fd5d27159273375cc07efb3e7b</anchor>
      <arglist>(SteeringBehaviorMachineWeighted *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>adfde67f6ffcdc0241c4415afb53d3bf9</anchor>
      <arglist>(SteeringBehaviorMachineWeighted &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a695be63ffdee7fbf65aa90a7e0ceeb56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineWeighted</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>ac119f176d0a5f0d95253f2e192ac847b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineWeighted</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a9856a0e4220b43e1c38d4b771e69d301</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineWeighted</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>afaa410dfd1bc2fae9ee6376a9e98ebd7</anchor>
      <arglist>(const SteeringBehaviorMachineWeighted &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>a1a19361ce0c0c4a674ad8c043e08968c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachineWeighted</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>aec90ccedb6481d8eab81a37b4aaf4e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachineWeighted &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>aae65f51800847fc35a641eb6c76d0de8</anchor>
      <arglist>(const SteeringBehaviorMachineWeighted &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorMachineWeightedBuilder</name>
    <filename>classnjli_1_1_steering_behavior_machine_weighted_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a01e0a799f25f332ebcbb642a4d39b9ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>ae5bca162b52a56eb8369e770e2af4c31</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a7aa7a8620c6f8990966ca4076e1cbffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a76a5cedafd99c9c5b238f59de83e7e2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>acb1572c7c6a1b2775f27af36a57eae0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>aae53f09dd583f236b455f9e262e208a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeightedBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a187542b0a31cc014a355dfd77f7f56a5</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>afd40caa65c110c3c5183e1bae7e2ffe9</anchor>
      <arglist>(SteeringBehaviorMachineWeightedBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeightedBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a8ddc9325c307cf5fc3f337bd26449fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorMachineWeightedBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a94bd181b23d367f3f3925f6d3371a315</anchor>
      <arglist>(const SteeringBehaviorMachineWeightedBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a3681cb76419a3a9bbef5f883f3a96c56</anchor>
      <arglist>(SteeringBehaviorMachineWeightedBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a413e48f02cae5ce70d2e1ed5cb54cde5</anchor>
      <arglist>(SteeringBehaviorMachineWeightedBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a2199932c63e8817d99734ba34d6107e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineWeightedBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>aa347e80a7d046c3862a41cb8dd9ac97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorMachineWeightedBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a52d99f004ac2cf6cd965048da4a1fdb6</anchor>
      <arglist>(const SteeringBehaviorMachineWeightedBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a032bf841e9af32853511fb365dc0d2e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorMachineWeightedBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a4bf3deea6e63ce32e6faac04cafa21c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorMachineWeightedBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>a85ba138993f1c1e1c4acd808e21e0716</anchor>
      <arglist>(const SteeringBehaviorMachineWeightedBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_machine_weighted_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorObstacleAvoidance</name>
    <filename>classnjli_1_1_steering_behavior_obstacle_avoidance.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>ac449ac3fda8bf254ce14238e3098a8d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a24d56edf67f8dc605dcc7897f5ba87e8</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a4d8d5d43a2561ac4ea95e8c7a8e67630</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>ae16f998663452ff03bf42c7df3da7f14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a84c212466f63945ab7218146f3adc365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>addb96c5e33caceca8b524f9986090a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidance **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a8ea948f8b9b36f9cc9842595bf5a1913</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>aa410ec99d4715bfd40e7b644c93583b8</anchor>
      <arglist>(SteeringBehaviorObstacleAvoidance **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidance *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a365bf7d036f2784e9b8fb9b0f2c48373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidance *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a6adc72d7ab3697d4da65cbd1d549b3c0</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidanceBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidance *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a6318f5b60c6217c7f40555436f452ffd</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidance &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidance *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a6b8a5f67dc84edfa9ebd0bbb82806155</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidance &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>ac71d0e1386a71fec11787e0efc174f60</anchor>
      <arglist>(SteeringBehaviorObstacleAvoidance *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a00fc511232349f65efc748a71938e996</anchor>
      <arglist>(SteeringBehaviorObstacleAvoidance &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>ab5b0285af090b09dbc9e26105a4f7a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>adad91d1481840efe2a068f51e8153c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>afb7233b928e792ad233f31d3df58fdcb</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a89e724ab07864170b8f232120ed5172a</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidance &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a26cd4fa32497194145cc2f1a931019d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>ac9be3aa16312cbfb6dc7632d66834fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorObstacleAvoidance &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>aee0cca003e0d184762ef89d4adda8278</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidance &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a0da00761f1753d9fcadf6870cb70ebfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>a31b86ef77f3be59af3613d48b8ed073b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorObstacleAvoidanceBuilder</name>
    <filename>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a893a6e8acffb0e70a142f7a339f77668</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a13ef8e5066f276bb2ef1d14cf85234f7</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a8dc9e8fb3607fadbcda02aec50d0a94d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a993b8b48be00564264eee0e58bd0bbd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a3ebfe2578e02d2d3384c4fe9a8da77dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a3b201a2ae4dc678d0b9948ef4ce9abd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidanceBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a1804ba7112f1b99ce664e0a011038865</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>aee8bf156a385d71d1568c84adaf054b9</anchor>
      <arglist>(SteeringBehaviorObstacleAvoidanceBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidanceBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>ad122d39203a8b5e26325b35f7d7b839b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorObstacleAvoidanceBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>aaf913b46a7f73b5b7979b574f9da2d73</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidanceBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a7f2e82b1b5459411bc9082a812e53809</anchor>
      <arglist>(SteeringBehaviorObstacleAvoidanceBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a51471778f358264a1c49efcac6da28a6</anchor>
      <arglist>(SteeringBehaviorObstacleAvoidanceBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a381b8adffc534976447306e64afbba18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorObstacleAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a13fe56fc366a4f5c956ca66534adab44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorObstacleAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a94fc09ddb4d1b1aaf6e69193272b1167</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidanceBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>a7b1727d4efc7a695e271d2b93bee4b8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorObstacleAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>af11f994bd10c90902989e82ba0e0d916</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorObstacleAvoidanceBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>ac74b5307c5c048bc54d1bbba15e8b055</anchor>
      <arglist>(const SteeringBehaviorObstacleAvoidanceBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_obstacle_avoidance_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorOffsetPursuit</name>
    <filename>classnjli_1_1_steering_behavior_offset_pursuit.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a1cf848834e750bb2a43bf2c4f2fde6d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a25cd6f2c3bbc1098c019477a27e836e3</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a0d864ea6805844cfc1de92f2c15493e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>acafec56dc840745c2fa9039c9a7c8507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>aa0266d0f37251d241f0365b24bf37458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>ada03ab32f7f5b138d513da180af6213d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuit **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a8f03204a3a873f88951a7c508fa9a399</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a3947ab185513f8d580139a61d53f1a05</anchor>
      <arglist>(SteeringBehaviorOffsetPursuit **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuit *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a90ed1a4648b504840f9666c35c83f7af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuit *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a0b3f8be430c7cb2f5b82e80c0f3c06d0</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuitBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuit *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a480c07a4694dcc7dbefbb698d5d22a76</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuit &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuit *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a37e95a44ceacb1e5cbcf2b496743db3f</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuit &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>abe5f7e51560e93559d731e707a5603ad</anchor>
      <arglist>(SteeringBehaviorOffsetPursuit *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>afc6402dae3350adee0ea1e0a3380c573</anchor>
      <arglist>(SteeringBehaviorOffsetPursuit &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a23f3c1239ab265f2bb615d87fae18189</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorOffsetPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a924f95fb19b7a44bd5f0a566d9daef2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorOffsetPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a3e00c08af75f69ea9ca48a2c34a51c15</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorOffsetPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a4d3d1a7568dd997cb24103c7e0f022ad</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuit &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>aea059995e83200c15db5377238df76b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorOffsetPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a132a1d0265dd9a89ddda7640fb064064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorOffsetPursuit &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a7f492f13e8e82c49ef536638b28e339c</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuit &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>afab51511b8d5a398b424da30723ce1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>a4b74fabcf3d8ef81079735964251b081</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorOffsetPursuitBuilder</name>
    <filename>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>ae4cdd2d031be57550b1e0fc763013558</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a5d798873d91fc0a4d987b816e79e2cdd</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a3cd3001a77bb55273675797565071b04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a49be76d9201bf181af5e96ae368e90e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>afebe863fcc6d4ea34b66d03a149eb51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>aefb4cd79488a32db5dd634a85dff6525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuitBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a8d8beab0ad8ff0ef55f0cb3e3904d97c</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a06985bc631aceb9ffaadbcdbe3fca0a2</anchor>
      <arglist>(SteeringBehaviorOffsetPursuitBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuitBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>abe51855a818a72218385ae592ca05a80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorOffsetPursuitBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>ac17b77c260ac5c1b03ff2cafc215bd3b</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuitBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a0d9c714c1aed28d8cb6b5285e5196d2b</anchor>
      <arglist>(SteeringBehaviorOffsetPursuitBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a804f4cc91a9c6b0845b7cb34d2a09840</anchor>
      <arglist>(SteeringBehaviorOffsetPursuitBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a375489c6cd998b80d1283fa838384f12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorOffsetPursuitBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a6b7dd170b5569e4f8b4be14cba4506dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorOffsetPursuitBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a84051fdecb12b3f2cde2862a0ce45ab9</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuitBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>abb4bc8254cf3cdf48d341da959ffdeac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorOffsetPursuitBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>aebb501537022ad2d45040542e5653694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorOffsetPursuitBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>a1d878fffed3543bd244225ed8f8f40ae</anchor>
      <arglist>(const SteeringBehaviorOffsetPursuitBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_offset_pursuit_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorPursuit</name>
    <filename>classnjli_1_1_steering_behavior_pursuit.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a5aab9694bf662d9f1cd8ad242b66d954</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a10a5320c1971fc7ab685b996d5e39fa2</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>ab2c6df1f5f3cd71c736cb01db13af9fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a3921ed320793fa7e5efb3125b7a23569</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a353d8fbc26d4ac8af1c907c9ede49324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a8b7df550e112b795f0e076873a99a86d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuit **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a7778636233f52befa9417ffea537535a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>ada097ed44a5a94d9ca39f15b60ee01ef</anchor>
      <arglist>(SteeringBehaviorPursuit **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuit *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a2503bd77be53a0648fd2e0d1f7c2f8c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuit *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>aa20d6fa6c0a7017b155268fe441098e0</anchor>
      <arglist>(const SteeringBehaviorPursuitBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuit *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a8d2ade5faa2fa7dfc18470fd020902c6</anchor>
      <arglist>(const SteeringBehaviorPursuit &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuit *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a14a800efdbe7cbad41db3d56d0a1b22e</anchor>
      <arglist>(const SteeringBehaviorPursuit &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a4c966886f73de91d80ec621875c27ad0</anchor>
      <arglist>(SteeringBehaviorPursuit *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a6ca9631b6899e6b51e58d943535650cd</anchor>
      <arglist>(SteeringBehaviorPursuit &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a82fda2fba164704e2c00b11cd7692751</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a35adf5e8a85c284ff1f3afb291b82666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a15c95eec77532033d4570c06ee164125</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a9a7c7c7fdb68f649b9cc906eb73eec7a</anchor>
      <arglist>(const SteeringBehaviorPursuit &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a140094403224ba19587b7b7467957f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorPursuit</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>af7de364c675ab4f8ba192366f29efd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorPursuit &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a6bc580bff0689c9ec9c1426483d7a07c</anchor>
      <arglist>(const SteeringBehaviorPursuit &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a2a725fd2767f95c9dec91c145a3ff9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>a283043aaa5ea2a7998baf38565fca847</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorPursuitBuilder</name>
    <filename>classnjli_1_1_steering_behavior_pursuit_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>abf877265993bd817fd6275657a66f2e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a48a1fc54034465e647ca7e05c8638d8f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a7020e317295e8b44e54ef39a3480b15d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>ab927fa55b0237f4383347c00f61dc9e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a7cce21b1009ed33ab95c8dd9b8f34451</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a3cae6988f26d361753f429d8a653de32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuitBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>ad8703df1b50866be041606e627ed9d84</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>afb5b797e2ee050335cbfe421e4211669</anchor>
      <arglist>(SteeringBehaviorPursuitBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuitBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a1205f423c04365cb699013f9aad38e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorPursuitBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>ad502722e4a43b00f7272aa6f162c7628</anchor>
      <arglist>(const SteeringBehaviorPursuitBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a6ae203825f37b0dc68bd04a5356ae9cd</anchor>
      <arglist>(SteeringBehaviorPursuitBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a75adf4a9ed10d8bc8ee9ad39c2336c8c</anchor>
      <arglist>(SteeringBehaviorPursuitBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>aea1c43fc5260530b4ec5fe127450112d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorPursuitBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a2449bb6dbdf296176b92e01350963253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorPursuitBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>addd48e49a7ed72114a72bf0db9240dfd</anchor>
      <arglist>(const SteeringBehaviorPursuitBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>ac09510e3c97a0ab54592b1ba76b2491d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorPursuitBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a9f3d39541fe0374be1eb7e60ac26e89a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorPursuitBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>a87802787e16b91ed772cb6297b40f86a</anchor>
      <arglist>(const SteeringBehaviorPursuitBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_pursuit_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorSeek</name>
    <filename>classnjli_1_1_steering_behavior_seek.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>aecc44b5c250eae468afe04cfbccf73a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>aa6b4f5010360d6a5d99177cd8ccae178</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a9bb4813f6247ada457c2fcf36ceeeece</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>af2f037a05124681d1c73ca801a0d4d71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a2231d1ba0d0fe3c22116966a403e1408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a513e5b0f1e677cae6af2446485a80c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeek **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>ac9ad7111b7a6ca096d65cb545482738e</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a3a1aee136c7396be018e2a59a53aa300</anchor>
      <arglist>(SteeringBehaviorSeek **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeek *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a7e7c207db9cc51c0f8b659fa6fe970fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeek *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>af048f29143c4223cbe17b27ecc98c244</anchor>
      <arglist>(const SteeringBehaviorSeekBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeek *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>ae9baeaddd6dff6b7caa469e4343f9295</anchor>
      <arglist>(const SteeringBehaviorSeek &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeek *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a3cde3f5461f45f3576059a1ed679ff9e</anchor>
      <arglist>(const SteeringBehaviorSeek &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a16ed9e922ca030f1c3bd27c04133cf8f</anchor>
      <arglist>(SteeringBehaviorSeek *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a5a32ccc98ee9030ea757ea01b85385a0</anchor>
      <arglist>(SteeringBehaviorSeek &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a4182ef705cad2a292e63e87223b8a036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeek</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>ae54f6222ce8599dbc60558269d809528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeek</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>ad41808a92e0dc2ad419989b8207cb015</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeek</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a435d9a81b4d904919f4e0f85969aa58c</anchor>
      <arglist>(const SteeringBehaviorSeek &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>ae5227878a02961a95ee1e7e26ea0d543</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorSeek</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>aa7709ae66857d3b412e8d7b951451fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorSeek &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a97b14bd488e252cbf0b31d8ed7b6b25f</anchor>
      <arglist>(const SteeringBehaviorSeek &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a0c7b5158b2734da4d1e529c26a465eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>a76ef2bc86a59cbbba22ab57c0d0ffce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorSeekBuilder</name>
    <filename>classnjli_1_1_steering_behavior_seek_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>ac33d9f089b01a2fc7f5339151d552a21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>afacd2ae174e22259bb5b8b1cdc6b690f</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a67b69c5df3080e047ef80b0730b2a354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>aef230103bd57064629e51d1375c27e68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>aed95b1cfbded96558a4d9d884b478af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a4b947ba8adc5f1dc5219ebfa44ea2595</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeekBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>aeaf14539fae2b3b3a15d65a89f1397aa</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a79ba169b4b13e84e880349e0a3508355</anchor>
      <arglist>(SteeringBehaviorSeekBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeekBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>aaf0279e7ceda4c6356b1d7fc6fe19b51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeekBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>ae08c8e0be2dd37e201a1b0a4414df8f0</anchor>
      <arglist>(const SteeringBehaviorSeekBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>abf073de73ba17537c5d3c6b7e6a0a125</anchor>
      <arglist>(SteeringBehaviorSeekBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a4656eb59c3684a9a2294f58c2b75c0c9</anchor>
      <arglist>(SteeringBehaviorSeekBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a01230b068e5944f1dc0370be7982c499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeekBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a8326b60a5c1fd204cd2beeac30576d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeekBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>ad9b3c75175af3ca6b6cc36be732ccbb7</anchor>
      <arglist>(const SteeringBehaviorSeekBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a772f5212e2beb259e42bb27c15e7cfad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorSeekBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a2e1c772dbd24926f2ddbb12fa78ff269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorSeekBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>a7b8b7c1de730a2bfb15a6cca0069ebab</anchor>
      <arglist>(const SteeringBehaviorSeekBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_seek_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorSeparation</name>
    <filename>classnjli_1_1_steering_behavior_separation.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a48e1a87903d1827801778137043d52d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>ac784949adb0c8903b1c30fd89c92e5d1</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a054f3b8439ed7b93dfa03f71310758ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a682b4beac8d2750bae905e45efedb52b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a2aff6f1cc106f529a580d0812b4545d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>ae969e8f68dcc47f17e67d096b19db4f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparation **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a4385da20f00d15b89fcb288f7b4fc275</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>adc9ee8ea5b10f393f864292018b15196</anchor>
      <arglist>(SteeringBehaviorSeparation **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparation *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>ad8c345240a621873391015e2791acbeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparation *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>aa6421180da4f429f8957cc69cc6e94b9</anchor>
      <arglist>(const SteeringBehaviorSeparationBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparation *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a2053f3c1a9fe4f8d65bce940be50a7fd</anchor>
      <arglist>(const SteeringBehaviorSeparation &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparation *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a8156a2c0a0ad40dba25f82d3cd1afea9</anchor>
      <arglist>(const SteeringBehaviorSeparation &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a428498bb04b212eda0dddf634004121d</anchor>
      <arglist>(SteeringBehaviorSeparation *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>ae6d57ed70a1c86a82bacc4adccc6fddd</anchor>
      <arglist>(SteeringBehaviorSeparation &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>ab8ccfe7e3fd366d5e3d5dd4786cc2736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeparation</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a4c004ddd7e64f40c43389d30921287a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeparation</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a0feb8acf50740970a75ea3fffe7fb8a2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeparation</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a3fe4124040fb2f1d40bdfb9f1a1b20ab</anchor>
      <arglist>(const SteeringBehaviorSeparation &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a2765217f2a60c2c185aa7672ed96fa6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorSeparation</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a07ec904e8f8602e7a45d7d3bd379f902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorSeparation &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>ab1903a1f26ca1d21e21f5610432cd94e</anchor>
      <arglist>(const SteeringBehaviorSeparation &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>afb1844caaca319b85261cbd06671a4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>a06801f704eb22a588613cbc1e5fc51a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorSeparationBuilder</name>
    <filename>classnjli_1_1_steering_behavior_separation_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a70235857b545f56d073ce1a60d034e88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a9c0a0f625cc3d56732df15284472ca89</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>abe06bf7685fc4a11087eab052bdd6345</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>ad48a83519ff8f327eb065e1eb8394a6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a8861f7768cbb12272e099439641885cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a478c5777dc02809c78aa44e0453be2d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparationBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>aa14d337599a98b074a65c021acea4b18</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a80448ab44df7279df4931818952d37b3</anchor>
      <arglist>(SteeringBehaviorSeparationBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparationBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a4152138e4606ac9a637c931a3847cf0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorSeparationBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>af167db158a4fe186515d03c84e49351c</anchor>
      <arglist>(const SteeringBehaviorSeparationBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>ab4820fd7274ab4bd325f84bba418f63e</anchor>
      <arglist>(SteeringBehaviorSeparationBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a5ef3795529670dd6020071f837c1a530</anchor>
      <arglist>(SteeringBehaviorSeparationBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a5e77abdfe51a525207cd6aca7d741994</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeparationBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a1ff76fa4048a30de2b1ce3bb23ecca19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorSeparationBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>abf8842b058d78b8ba58f1e4a662063e8</anchor>
      <arglist>(const SteeringBehaviorSeparationBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>aea0ec5f2ae49c4e8746da2f76bdfb384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorSeparationBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a55840eb31dc03f0b206fd18caddfa395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorSeparationBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>a51689c329131ef5119e3c0c0d96a2c4a</anchor>
      <arglist>(const SteeringBehaviorSeparationBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_separation_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorWallAvoidance</name>
    <filename>classnjli_1_1_steering_behavior_wall_avoidance.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>ae2c2f21709b8618e6bd984e00a982bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a3a442f51bc80974e2ee203561370002a</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>aba07d63c5ecfc79ef1b33d6b4f17dbe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a9673759d2e88ddf33de1316966d7ba67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>aca10b42d39af7c023f2ff45ec6d93891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>af699ece0ed7df8fb52274ff1bb74993a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidance **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a484146269c83bea7aa24c1bd454c53b6</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>ad0611cffe1596661f9ac36ccca8226fb</anchor>
      <arglist>(SteeringBehaviorWallAvoidance **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidance *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>aa7933927d90b5a7d016a930bd2c2f53d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidance *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a08f48cf4170880875c3c32e8ffd28136</anchor>
      <arglist>(const SteeringBehaviorWallAvoidanceBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidance *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>accb95d70a5fba8e9146076074815253b</anchor>
      <arglist>(const SteeringBehaviorWallAvoidance &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidance *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a2be7e595c37e5c401ea81e32e37cf81f</anchor>
      <arglist>(const SteeringBehaviorWallAvoidance &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>af95d1f2642c824237b27c65e5526d7f5</anchor>
      <arglist>(SteeringBehaviorWallAvoidance *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>aaf692e31ae1a20bfd815e3640fa06eeb</anchor>
      <arglist>(SteeringBehaviorWallAvoidance &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a09b82f632fc82a4a7bb076ca7c4ae47d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWallAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a6ba7e1aa0e5d8a88e90fb504bc255c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWallAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>acdd632f82a1fb41c8b223edc9f3ec650</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWallAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a816426cb250cd64a44e396e9626c5371</anchor>
      <arglist>(const SteeringBehaviorWallAvoidance &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a4bf956f11a8db11181693d6e77c6df08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorWallAvoidance</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a28a2d45db65b347684537f4b2e889563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorWallAvoidance &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>ab6800def5ef3a2c5c560e0bb535116f6</anchor>
      <arglist>(const SteeringBehaviorWallAvoidance &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>a95c8cb5753a9f8256fd1edf39be296c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>ab4d5409727efe6c76c7b19834187f117</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorWallAvoidanceBuilder</name>
    <filename>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>ac7188fa4580e7f9e302f54bc3e6ce63a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a784cb4aaf2b005480cf1b398f87a04ed</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a5156840678be5d63230262338d8bf755</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a949132ba8e4c910935763c0d14ad5656</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a3e69a1c879c2bb98778cbb779a9ee4e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a070082058461628d11195f06f8f3b8a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidanceBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a8bbb6ee79f62ba5abaadc712668ccccc</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a1791f5ae92b1b157383493d65dfef923</anchor>
      <arglist>(SteeringBehaviorWallAvoidanceBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidanceBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>af4e1862c16f0f5fd4023554874861517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWallAvoidanceBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a94e0a55627424bb4e7aca4868c35ab62</anchor>
      <arglist>(const SteeringBehaviorWallAvoidanceBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a8aec21f1e7af52a4635b0a14a8b93760</anchor>
      <arglist>(SteeringBehaviorWallAvoidanceBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a3e8c4a7660a4deed1f4f527a6d8b61ea</anchor>
      <arglist>(SteeringBehaviorWallAvoidanceBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>aaddd874a7c8b297e77bff4ff61a19da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWallAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>afd6b4c56b44f74204a8918f9b9d7049d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWallAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>ad795fcd3aa7a7550cc8891544317737f</anchor>
      <arglist>(const SteeringBehaviorWallAvoidanceBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>ada7666070204285c674bc8b854acfe46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorWallAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>ad8b4bebddd0b4b1ece07fd5f825490fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorWallAvoidanceBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>a9191cc6dd8ba06051c04e13cac80283f</anchor>
      <arglist>(const SteeringBehaviorWallAvoidanceBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_wall_avoidance_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorWander</name>
    <filename>classnjli_1_1_steering_behavior_wander.html</filename>
    <base>njli::SteeringBehavior</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a15f9d5931b6d72abb1305cb018edbd3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>af095b146581b167cfec14ef42bd2a32a</anchor>
      <arglist>(void *dataBuffer, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a5970ae94b72e1d962643faa34029d0de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>afc8c0a5a0d045370ce1a86d192b2b06d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>abcdb8947569af12d7ff3e6bb53a0ed95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const btVector3 &amp;</type>
      <name>calculateForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>ae21123cbd677526e9860730511798f1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWander **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a37ab46366d8e544c61aa6120012c7861</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>ae55c6adb6bde81015b70986049ffece2</anchor>
      <arglist>(SteeringBehaviorWander **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWander *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a57dab62e80c4236d2fba9a6cab78ae7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWander *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>ae2796d13bfc81d2081d5cd06d1852647</anchor>
      <arglist>(const SteeringBehaviorWanderBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWander *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>ad42ad6cdb3eb7e6b479f6faa314cb991</anchor>
      <arglist>(const SteeringBehaviorWander &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWander *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a2ef150a85308d6b6ad785ab7295785c9</anchor>
      <arglist>(const SteeringBehaviorWander &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a1f94bb03833a999228808fbc8f1f2bbc</anchor>
      <arglist>(SteeringBehaviorWander *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a9e92e32839672b023087658f6ee9c703</anchor>
      <arglist>(SteeringBehaviorWander &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a14852ea888647b0acb1a587e9baad28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWander</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a9df7b2411d18d7a36adc9066f57f9afe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWander</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>aef91f057e2256d6500e9eebe31a012af</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWander</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a010a454d671b60eba4f5e2586c8391e6</anchor>
      <arglist>(const SteeringBehaviorWander &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a4f08dec3c9c5281c17d60b446f314594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorWander</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a7af63b5ca579d707815a2a55fc6625ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorWander &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a0b02a386b0acaa1e2af9fdefc149cf4d</anchor>
      <arglist>(const SteeringBehaviorWander &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector3 *</type>
      <name>m_CurrentForce</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a8a1de347d2e1ed7fff87b6599e27a655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Node * &gt;</type>
      <name>m_TargetList</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>a23de8191e1cbf049343510609f059702</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::SteeringBehaviorWanderBuilder</name>
    <filename>classnjli_1_1_steering_behavior_wander_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ac535056b1648203c76b788c9c1e7bea3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ae0ffb4d9dc1e7d4aea3113ec3cf5df4c</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>aa814427a170e48aea2a8876a2882e6eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>aca98c095d79ec38cec510f9e5082ebd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>a639444775e61a75036b1ae87af84d049</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>a5f4adf5a0b8133134bc8b6b23f1d33b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWanderBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ab1bed63bdaff471963e8a73365ff031b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>af5a2a240a478b5ea5f5a27e73fc27004</anchor>
      <arglist>(SteeringBehaviorWanderBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWanderBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ace6ff70bccb471890aff7eb404e91c73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SteeringBehaviorWanderBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>a3cbf7454690383954fdeefb6a05a563e</anchor>
      <arglist>(const SteeringBehaviorWanderBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>a0392fb6f7aa53083408c6ece75b00c60</anchor>
      <arglist>(SteeringBehaviorWanderBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ac6ed8b850486ea0d0ee71afb3bbf29ec</anchor>
      <arglist>(SteeringBehaviorWanderBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ad033c4651eb9c3a2969a73b4970e139e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWanderBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>a199d560226c74ab95100c70cdc8e503e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SteeringBehaviorWanderBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>a9ca5ddaca643131e91820af9808b5f1f</anchor>
      <arglist>(const SteeringBehaviorWanderBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>aebd948a1abbf2256e73b424779a746c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~SteeringBehaviorWanderBuilder</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>abea1ef7c6a62f1c32db456e4cbce355e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SteeringBehaviorWanderBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>ae2dbbe26cf42c66996087e60458fab70</anchor>
      <arglist>(const SteeringBehaviorWanderBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_steering_behavior_wander_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::StopWatch</name>
    <filename>classnjli_1_1_stop_watch.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractClock</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a72e1052a6525fe6d6887bd985b1ef8d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ae0d61d085799cf5f132cf92c65b48cdc</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a70283751febb463682cf4126c970aaa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a9f6f6c44d2c6137a8bb38720e2ccbfbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a841749dbe95a638802a2e7d69e0388c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a0ab1925582a66c67c1db0bf9f731f4cc</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a86c10437140b1a885228b17dca3697d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getMilliseconds</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aa18f65d2873cb83258cca59d2e9e600f</anchor>
      <arglist>(s32 index=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a611f4cc1cd65b7099db654f1052c6910</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a63dc587580584f4574df3830c84b1da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lap</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a94fa6e3e6b10171d826141c1c5c6dd50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearLaps</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a190d183506dce6ce0497fd339e1891a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>u64</type>
      <name>numberOfLaps</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a4c1ef7d5831b366836689566ac084d69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ab3ca2ba06be2e649b3d68e3582a24606</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a606c409e3940aea9d90bca5037eb2227</anchor>
      <arglist>(StopWatch **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a017e60bda148ff2282d0947b2181a4f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ae55b126fe41dfe7274b2bec706993738</anchor>
      <arglist>(const StopWatchBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a89592642454c69b7de06a272f56a8dd3</anchor>
      <arglist>(const StopWatch &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatch *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a828bdc3414c97fa1537416548dffc803</anchor>
      <arglist>(const StopWatch &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aebb1a654fc268b038e1f48649e796fd7</anchor>
      <arglist>(StopWatch *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>af8576ae6a5bfa890c35c6cddedd62e57</anchor>
      <arglist>(StopWatch &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ae0c8a96a7465847dd0b739f307ca71c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>ac094097f357ce5be29c99163839b69e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>aebfc9a72bddb3b3be0e32ede9aad6c81</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a9417fb532a505e9bffc6833cab50c4fc</anchor>
      <arglist>(const StopWatch &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>acbfde61e615ca5f35cfb60307576015f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~StopWatch</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a255e775e661935059ed46c68a8109d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StopWatch &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a5cb9c0f427eff50c366fc724bd5c36d6</anchor>
      <arglist>(const StopWatch &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned long int &gt;</type>
      <name>m_Laps</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a8a743a402f3b3196e5d1821c15a7a567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btClock *</type>
      <name>m_CurrentClock</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>abf7f6282ed8ff446622b56da25d5dbfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsStopped</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a4e9ad8912f5c1d4246a5cda677f6d585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned long int</type>
      <name>m_StoppedMilliseconds</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>a90f72afdaba0072fc81c3d11953e0a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_stop_watch.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::StopWatchBuilder</name>
    <filename>classnjli_1_1_stop_watch_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a90aa404feeff480b3ca1e7fedd18ada8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a4d6eef341617c4aaef84da6353c06774</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>aabc8d1041bab20e0b6b5618be2713096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a186409ee0a19e75489cdab4bcf580d3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a1be64d37292e7b7a889faf7f4fc4c713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a3cc00b5e50e5b6b4548a1bdc8bd58fff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatchBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a3e543a079e8abb2c0b92b6b088e74049</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a0c128e2e33b479212c00e15620755e0f</anchor>
      <arglist>(StopWatchBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatchBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a40572c1eb3a01561754a0df0174a57b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StopWatchBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a8185811ff452b95bd4e21e38a820c9b5</anchor>
      <arglist>(const StopWatchBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a78ee75c8ee0f8318eb12e20263549e76</anchor>
      <arglist>(StopWatchBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>acc218740a6af51fc7e288e4928492773</anchor>
      <arglist>(StopWatchBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>ada9b01fe52740d133e80132cc492828f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a7b5b92f163586f62f8d7c545f54e361a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a0affbfac16041e1e96a30c41df34db1a</anchor>
      <arglist>(const StopWatchBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>a1bd5b633e5412e45bd1a002163295f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>ad73828ec0de3915b40c5c9532229bcf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>StopWatchBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>ad3650557eb0211a3630c68582fef4721</anchor>
      <arglist>(const StopWatchBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_stop_watch_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>stringtable</name>
    <filename>structstringtable.html</filename>
    <member kind="variable">
      <type>TString **</type>
      <name>hash</name>
      <anchorfile>structstringtable.html</anchorfile>
      <anchor>a9df803a7c6c84f39218c95ca34c21f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nuse</name>
      <anchorfile>structstringtable.html</anchorfile>
      <anchor>a557fecd2a88632f53ac14bb5f933590a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>size</name>
      <anchorfile>structstringtable.html</anchorfile>
      <anchor>a10674affaad79ff819b6aa3b4618b94e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_cast_info</name>
    <filename>structswig__cast__info.html</filename>
    <member kind="variable">
      <type>swig_type_info *</type>
      <name>type</name>
      <anchorfile>structswig__cast__info.html</anchorfile>
      <anchor>a1c9023a301c8d6806209f4e10df6e9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_converter_func</type>
      <name>converter</name>
      <anchorfile>structswig__cast__info.html</anchorfile>
      <anchor>aa630fddfbb1bf9c97a03f9479ba32f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_cast_info *</type>
      <name>next</name>
      <anchorfile>structswig__cast__info.html</anchorfile>
      <anchor>ae79c6fa058a9d908bbdac14db0c9db5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_cast_info *</type>
      <name>prev</name>
      <anchorfile>structswig__cast__info.html</anchorfile>
      <anchor>afc685bcf38a5a06c6601775138c5999c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_attribute</name>
    <filename>structswig__lua__attribute.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structswig__lua__attribute.html</anchorfile>
      <anchor>a693d9481784dfd89e0d9ed3aadf51b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>getmethod</name>
      <anchorfile>structswig__lua__attribute.html</anchorfile>
      <anchor>ab18a92c81433b7b3de23856cda4b89b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>setmethod</name>
      <anchorfile>structswig__lua__attribute.html</anchorfile>
      <anchor>a0b88e38d5417453e7718f7090b797b06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_class</name>
    <filename>structswig__lua__class.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>abefc5d1a37e06e1c9305d3456a59f2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>fqname</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a3c6469ebd6d312208ff380f8e8eff165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_type_info **</type>
      <name>type</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a139831b0d9b661d6e64c1f902d63142d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>constructor</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>aac6eb9dc9a5e0b5f2c9d31a97ce0282e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>destructor</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a19ebe1411a51b4d1ef82432e76353854</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_method *</type>
      <name>methods</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>ae0d9f30a8114623b1185b5907fc60719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_attribute *</type>
      <name>attributes</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a3061adc91d7cb1a16967927e8d4a7261</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_namespace *</type>
      <name>cls_static</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a41b17587e0b26e2112200adfffb22730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_method *</type>
      <name>metatable</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a7c56e45895444992b6a42c60ba6a17e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_lua_class **</type>
      <name>bases</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a468e2d019d6cff6bbe8fefc8f572420b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char **</type>
      <name>base_names</name>
      <anchorfile>structswig__lua__class.html</anchorfile>
      <anchor>a25f24829385c30c59cec92c91fceca23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_const_info</name>
    <filename>structswig__lua__const__info.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structswig__lua__const__info.html</anchorfile>
      <anchor>a1c9ffb014aea4d37c1b73e0a446c9be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structswig__lua__const__info.html</anchorfile>
      <anchor>aeab9027ebc600cf479ee0f977fd748b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>lvalue</name>
      <anchorfile>structswig__lua__const__info.html</anchorfile>
      <anchor>a0f4d6393367808867778882594520a44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dvalue</name>
      <anchorfile>structswig__lua__const__info.html</anchorfile>
      <anchor>ac50e848b2a6a628fa1eeb4924f608cee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>pvalue</name>
      <anchorfile>structswig__lua__const__info.html</anchorfile>
      <anchor>a54637f2603b1179d4996c06e82e3f23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_type_info **</type>
      <name>ptype</name>
      <anchorfile>structswig__lua__const__info.html</anchorfile>
      <anchor>a0557056988d98840029075f204d2bf59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_namespace</name>
    <filename>structswig__lua__namespace.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structswig__lua__namespace.html</anchorfile>
      <anchor>a5ac77da56177f2221e7b4383d08289ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_method *</type>
      <name>ns_methods</name>
      <anchorfile>structswig__lua__namespace.html</anchorfile>
      <anchor>a37c8e142ef569ca010f1a5ced9d32446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_attribute *</type>
      <name>ns_attributes</name>
      <anchorfile>structswig__lua__namespace.html</anchorfile>
      <anchor>a3f3aabc0b901e923d739c5b5bce0770d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_lua_const_info *</type>
      <name>ns_constants</name>
      <anchorfile>structswig__lua__namespace.html</anchorfile>
      <anchor>aa6dee03944121832fcbd7a939d096d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_lua_class **</type>
      <name>ns_classes</name>
      <anchorfile>structswig__lua__namespace.html</anchorfile>
      <anchor>a6497c3aceb8de15113fb214a74a3e019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_lua_namespace **</type>
      <name>ns_namespaces</name>
      <anchorfile>structswig__lua__namespace.html</anchorfile>
      <anchor>ae8c454726d38da0b31becead391fef5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_rawdata</name>
    <filename>structswig__lua__rawdata.html</filename>
    <member kind="variable">
      <type>swig_type_info *</type>
      <name>type</name>
      <anchorfile>structswig__lua__rawdata.html</anchorfile>
      <anchor>a935edef9803f54e65acaa0ecf8c81ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>own</name>
      <anchorfile>structswig__lua__rawdata.html</anchorfile>
      <anchor>ac52566bcb4a7b4d8421c17d182048924</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>data</name>
      <anchorfile>structswig__lua__rawdata.html</anchorfile>
      <anchor>acbba29d10dcd1b96ba3b8d255b777749</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_userdata</name>
    <filename>structswig__lua__userdata.html</filename>
    <member kind="variable">
      <type>swig_type_info *</type>
      <name>type</name>
      <anchorfile>structswig__lua__userdata.html</anchorfile>
      <anchor>aed83344d96f9da7bf57f9bb604cb1d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>own</name>
      <anchorfile>structswig__lua__userdata.html</anchorfile>
      <anchor>a12970d19b437f84b1e7fba18ede882cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>structswig__lua__userdata.html</anchorfile>
      <anchor>a2d3be052ee0b81986ab31ef5dc08fd25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_lua_var_info</name>
    <filename>structswig__lua__var__info.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structswig__lua__var__info.html</anchorfile>
      <anchor>a59daefcace30c1ffb1f58bd7829f8449</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>get</name>
      <anchorfile>structswig__lua__var__info.html</anchorfile>
      <anchor>a56fb0b689f37015e340b35c6d7ee0b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>set</name>
      <anchorfile>structswig__lua__var__info.html</anchorfile>
      <anchor>aea961df3cc15877e8354cb535bef2c1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_module_info</name>
    <filename>structswig__module__info.html</filename>
    <member kind="variable">
      <type>swig_type_info **</type>
      <name>types</name>
      <anchorfile>structswig__module__info.html</anchorfile>
      <anchor>abda310ff2462f8a1ebfc8dc7552206f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structswig__module__info.html</anchorfile>
      <anchor>aaf8907cf8509ee0464af8c9dfd909042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_module_info *</type>
      <name>next</name>
      <anchorfile>structswig__module__info.html</anchorfile>
      <anchor>ac177d150b85ab77122089acf1f06d9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_type_info **</type>
      <name>type_initial</name>
      <anchorfile>structswig__module__info.html</anchorfile>
      <anchor>af5e826d0f0c1698f7404543a7d5b258a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_cast_info **</type>
      <name>cast_initial</name>
      <anchorfile>structswig__module__info.html</anchorfile>
      <anchor>a281dac542d1af6af141b8366ecc4de92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>clientdata</name>
      <anchorfile>structswig__module__info.html</anchorfile>
      <anchor>a9fb6e461fcaf14c209049adfae4e9754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>swig_type_info</name>
    <filename>structswig__type__info.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structswig__type__info.html</anchorfile>
      <anchor>a90a9c6a25aa3e923978005ecbe23ad60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>structswig__type__info.html</anchorfile>
      <anchor>abbe7cc58a083feb4329b748643324064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>swig_dycast_func</type>
      <name>dcast</name>
      <anchorfile>structswig__type__info.html</anchorfile>
      <anchor>a07df4bedf85be77b23756b531b60e0dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct swig_cast_info *</type>
      <name>cast</name>
      <anchorfile>structswig__type__info.html</anchorfile>
      <anchor>a3ee3f7ef20e965b6c798d79723a96f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>clientdata</name>
      <anchorfile>structswig__type__info.html</anchorfile>
      <anchor>a19bdd65dceb89cd54befd3ded06558b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>owndata</name>
      <anchorfile>structswig__type__info.html</anchorfile>
      <anchor>a93c25d5903cbfcb82208eea7227c32bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_buffer_</name>
    <filename>structt__buffer__.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>birthday</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>ab9b5dacf06699ce334e010fda861aec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>sent</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>ae7f5894faebc0f1e6e70ee08ce2482f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>received</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>a05fd133bb026592a290a2186d648c22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>p_io</type>
      <name>io</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>aca6dcb9f74a1961970793c8d26a6ac71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>p_timeout</type>
      <name>tm</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>a74d3d91cf9497182e7ed31cb87a4f94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>first</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>a00d076d950aadc3d22bb650af8b04b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>last</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>a72c79e811f848f3b030cef3306df481f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>data</name>
      <anchorfile>structt__buffer__.html</anchorfile>
      <anchor>abb5ba3ca78f979f8cfb299fb84c309e1</anchor>
      <arglist>[BUF_SIZE]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_io_</name>
    <filename>structt__io__.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>ctx</name>
      <anchorfile>structt__io__.html</anchorfile>
      <anchor>a9e14078a7226960b118f7cfebe31959a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>p_send</type>
      <name>send</name>
      <anchorfile>structt__io__.html</anchorfile>
      <anchor>aac06a3d2f07c4aad936d918a76578177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>p_recv</type>
      <name>recv</name>
      <anchorfile>structt__io__.html</anchorfile>
      <anchor>a9504593ec81575751f9257415769965b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>p_error</type>
      <name>error</name>
      <anchorfile>structt__io__.html</anchorfile>
      <anchor>ae40f21eb2c5972466390ed9ba7275a76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_opt</name>
    <filename>structt__opt.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structt__opt.html</anchorfile>
      <anchor>a271290d2b5aa7895ba092a57735fc9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>func</name>
      <anchorfile>structt__opt.html</anchorfile>
      <anchor>a8614fcd12db2326c70a1f39125969132</anchor>
      <arglist>)(lua_State *L, p_socket ps)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_tcp_</name>
    <filename>structt__tcp__.html</filename>
    <member kind="variable">
      <type>t_socket</type>
      <name>sock</name>
      <anchorfile>structt__tcp__.html</anchorfile>
      <anchor>a0f43f270088ab7b9dda225511b03f9e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_io</type>
      <name>io</name>
      <anchorfile>structt__tcp__.html</anchorfile>
      <anchor>a9efeb372eaaf0599030c5ed0a3301b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_buffer</type>
      <name>buf</name>
      <anchorfile>structt__tcp__.html</anchorfile>
      <anchor>a34573e30b30dd24f796e9ada2a83cb9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_timeout</type>
      <name>tm</name>
      <anchorfile>structt__tcp__.html</anchorfile>
      <anchor>af28a52de319c7fa82d2f329a0d733468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>family</name>
      <anchorfile>structt__tcp__.html</anchorfile>
      <anchor>a53c99556c43a29394784485051dfe330</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_timeout_</name>
    <filename>structt__timeout__.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>block</name>
      <anchorfile>structt__timeout__.html</anchorfile>
      <anchor>a20b7d0dbb73019231e8d85098358f140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>total</name>
      <anchorfile>structt__timeout__.html</anchorfile>
      <anchor>aec00415385150f2edb60393b3626b89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>start</name>
      <anchorfile>structt__timeout__.html</anchorfile>
      <anchor>ad4e668f073b3a46e38f1409af51e7425</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_udp_</name>
    <filename>structt__udp__.html</filename>
    <member kind="variable">
      <type>t_socket</type>
      <name>sock</name>
      <anchorfile>structt__udp__.html</anchorfile>
      <anchor>a6f7396faf598b7eed606ee05fe94faee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_timeout</type>
      <name>tm</name>
      <anchorfile>structt__udp__.html</anchorfile>
      <anchor>a943ffdcebbd1ccda867272f113b7bf42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>family</name>
      <anchorfile>structt__udp__.html</anchorfile>
      <anchor>ab46dd43f4e4a87d12dd8dd026e6613d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>t_unix_</name>
    <filename>structt__unix__.html</filename>
    <member kind="variable">
      <type>t_socket</type>
      <name>sock</name>
      <anchorfile>structt__unix__.html</anchorfile>
      <anchor>ae045663b67a4e8c527241bbbdcd6e753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_io</type>
      <name>io</name>
      <anchorfile>structt__unix__.html</anchorfile>
      <anchor>a37b71102fd7efbf17ac4da34b9c8bb0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_buffer</type>
      <name>buf</name>
      <anchorfile>structt__unix__.html</anchorfile>
      <anchor>a6add4cad78d973c4a75fff7401a616cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>t_timeout</type>
      <name>tm</name>
      <anchorfile>structt__unix__.html</anchorfile>
      <anchor>a8f68b972701e29d80c59bbfdde4fc788</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Table</name>
    <filename>struct_table.html</filename>
    <member kind="variable">
      <type></type>
      <name>CommonHeader</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>aeceeffe77c9ef26aeca656183fc50110</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>flags</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a643cf38ebbab9e5af99ff8a980ffbae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>lsizenode</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>aed057d880ebe0f38f65e626f646adf6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>sizearray</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a7460a3646ffbcaed5d36daeb940f75f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TValue *</type>
      <name>array</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a36bebd30ab45163c31feb821c936e160</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>node</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a519f179c707cb4e93bb66d09151c89e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>lastfree</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a3c072f13eb5ce9103526b4aa83c284be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Table *</type>
      <name>metatable</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a99c20fa696fb6a4e89890efa3819ebdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GCObject *</type>
      <name>gclist</name>
      <anchorfile>struct_table.html</anchorfile>
      <anchor>a1b6f3d76efed2011a36ee7c78f65aa70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Telegram</name>
    <filename>classnjli_1_1_telegram.html</filename>
    <member kind="function">
      <type></type>
      <name>Telegram</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>aa11c66843172eabb2329c15a4d7ebe05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Telegram</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>ab4334c9796b4c8a8bbc3727061059c3d</anchor>
      <arglist>(f32 time, AbstractFactoryObject *sender, AbstractFactoryObject *receiver, s32 msg, void *info=NULL)</arglist>
    </member>
    <member kind="variable">
      <type>AbstractFactoryObject *</type>
      <name>Sender</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>ac8d9684f9beb98cdbfb912cefb18f036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AbstractFactoryObject *</type>
      <name>Receiver</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>aa2811ae30fb5bcbdb6dfd89bd1305b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>s32</type>
      <name>Msg</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>a5b15d94b15ff8de3637c94f93744b26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>DispatchTime</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>ad3624ff53bc492416a0b19f39107bfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>ExtraInfo</name>
      <anchorfile>classnjli_1_1_telegram.html</anchorfile>
      <anchor>a2248c08d1f6bd31106010ec55c7c0818</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::TextboxHUD</name>
    <filename>classnjli_1_1_textbox_h_u_d.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <base>njli::AbstractFrameBufferObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a770a618174161243eaded9c652e31fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a0d9380b019b96de234c7a098ddbf5c7b</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a72f4534b34d0ba712ec4ecd604bda84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a2772cd4442dd8c315ca383b598c22be9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ae1257bff3f09f789d694cee09e95ff9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a0d83157abc6c7cd42cc13fa0b3c946f1</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ad3449d4687ff3cce19b3aaa5e6d415b0</anchor>
      <arglist>(TextboxHUD **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a12780be5e88bf1829b91df685121d068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ab9ba8a1697760d225f60832f188c0310</anchor>
      <arglist>(const TextboxHUDBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a449d54db2ec81d190030f89307d79f8b</anchor>
      <arglist>(const TextboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUD *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a761b8b5f3efea690284284784fea9581</anchor>
      <arglist>(const TextboxHUD &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a1d75f71707ec7b6bfb42c774ef29bfca</anchor>
      <arglist>(TextboxHUD *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>af9804b35ec8560a6c9abd80e9bc78165</anchor>
      <arglist>(TextboxHUD &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ab31dc92abf94cdd2dbce4ac4d968b01c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a9a0ce975431d7930d46a0406bf82bffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a72ea32640b49facfc173d4bce0154059</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a2c12dbf9d897e48706af201df9e01cb2</anchor>
      <arglist>(const TextboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a75cfd14dba59041431b7363277633168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TextboxHUD</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a916afbb16ab51854f231640c145b8a12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextboxHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a9d253eccffd7f570e70c436ebb823e14</anchor>
      <arglist>(const TextboxHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderFunction</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a6daa89a33de35e6cf85b56970447a3a8</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_dimensions</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a3fdbfd3f2db11b4a118fdc82a7bc1c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_position</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a27b131699bb7dcf4fc947bd6b00bb7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientStartColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a380d4290dada0dc4d473607232c40583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_gradientEndColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a858485f108bca319bc515277ed761b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerRadius</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a48c6372c4c026a947fab4171e35a4e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_cornerFeather</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>ab28ef6131914c9b7a70c546ab8f8f4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_borderColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>aec80fd8dffdf0020e7c87cee649627ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_fontSize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a01079b7367a5e9e86893c53ec5db32d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_fontFace</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a424e4e0af8b1edca7a9c25987e83ea1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_fontColor</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a92f502e47b78d0ad705d2c38d657e2df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_align</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a1bbc7f330620b73ffb42494271a304d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_text</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>a60d9bc72cf0a7f5307dc3a65f6b15a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::TextboxHUDBuilder</name>
    <filename>classnjli_1_1_textbox_h_u_d_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>addfefe2e0a180026b142ddc56c122287</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a948c1bf9ffa6f87cb52e737f85933a74</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a00dc3fc1a82bfd340d01e5602dd9316d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>adb69c0f10b0407353d8cf9e8fe4d1d1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a1315e4e00afa00b120cc44ac304c51e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>adfc50a6a259d8d57c0e0d7be1264b5b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUDBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a9bfdc5e1e870ef42663fd7d8a85bcfe7</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>abd9e00950d569b8a887bbac1ee1356de</anchor>
      <arglist>(TextboxHUDBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUDBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a31b502c61f888b033d195d5a9f9e0ad9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextboxHUDBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a3470cc221f74b8d1e03d52a948ebae83</anchor>
      <arglist>(const TextboxHUDBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a51889c0d7cc39582491aa0a6773c896b</anchor>
      <arglist>(TextboxHUDBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>ae77874c2e0d495bdc02682f7f9d6faf2</anchor>
      <arglist>(TextboxHUDBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>ae56de0f25a73f5126f1f133943c42464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a28ac1b244ed9cdc522094f7a21179705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a3cd77b395d1e5a1f5d98702b3c5aa8b9</anchor>
      <arglist>(const TextboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>a6eb96d9b8d9d5e9fc8122b43739c4a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>addb6ef583f79683307283cda1aa39c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TextboxHUDBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>af73289cced2b3da90c4de8801d5c2246</anchor>
      <arglist>(const TextboxHUDBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_textbox_h_u_d_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Geometry::TexturedColoredVertex</name>
    <filename>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>TexturedColoredVertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a9981d5820df41bf186e25f16fa856d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TexturedColoredVertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>ab9fb6f1e0a5a679e666072a8ee0a4c41</anchor>
      <arglist>(const btVector3 vertex, const btVector4 color, const btVector2 texture, const f32 opacity, const f32 hidden)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a15c9426d82becac2545bf4533c91d6c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TexturedColoredVertex &amp;</type>
      <name>operator=</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a50ea2a8262cb361b75f65a2a8b2d1006</anchor>
      <arglist>(const TexturedColoredVertex &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>vertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>ab49b5720f1cdbf1c63e62681db8f090f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>color</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a79e6bb9cb0daa0307eac09b828e4d993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector2</type>
      <name>texture</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a933ff52f4cd0a7768836e458f1a1218c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>opacity</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a8c7d91ac68083909b5116f7d130c39ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>f32</type>
      <name>hidden</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_colored_vertex.html</anchorfile>
      <anchor>a506ec1fdd64c4b0530a33a53d075c3d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::Geometry::TexturedNormaledColoredVertex</name>
    <filename>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</filename>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>a2da687ece7a0358e65dd8fbe00551127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>vertex</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>ae6a6ce74752e418ca7ae6fd3511c4515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector3</type>
      <name>normal</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>af51b64c482f53d1b668dead055e37bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector2</type>
      <name>texture</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>a10525c570e5870adc1eff1e07a9cda0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>btVector4</type>
      <name>color</name>
      <anchorfile>structnjli_1_1_geometry_1_1_textured_normaled_colored_vertex.html</anchorfile>
      <anchor>aed1b3ebbaf3b59beb3a04d40e977bb15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Thread</name>
    <filename>classnjli_1_1_thread.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>aa3b2e7df4ade1f690d8325d788c67bef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ae1acf75828f1ab2ee4a0f818dc849292</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a212e294b12cb653e82d9e4ab96ebf006</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a38cbb608d012da083fd9d35ed87ba277</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ad44cbca3ce255ac199d745ea3bd072de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a644871703e3eaa5f500f8ee9d38e64b9</anchor>
      <arglist>(const std::string &amp;luaFunctionName, int _priority)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>add29f8799756f141a64f8b559445aa72</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ab0d4353d5fbca34da213eb4cbeb8bfe3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a337a98642b6c61d7af26ecc942b7d12c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a14bd06414dc70facee0ec6840ab52c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a30ca432834fe539f3560b9964f789a0f</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>abfca36fb1618366c5c196a2c7076c245</anchor>
      <arglist>(Thread **array, const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a1d5d960366afef7d49c9798d2ee7e6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>afc6765a4e6e64e05e28013bdbc2dd38c</anchor>
      <arglist>(const ThreadBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a704923b90ea123659acaa4545b76c8b3</anchor>
      <arglist>(const Thread &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Thread *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ae4597841975827e25aaeea32f4e465fa</anchor>
      <arglist>(const Thread &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a9fa49919c924343758d9148294ad8e6e</anchor>
      <arglist>(Thread *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>abf32abdd7ee4778ae166033b2295e444</anchor>
      <arglist>(Thread &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ae805bd8ca1582bfe6da7c73516c76d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a317e23ba8f0ced14960249e4c54c6090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a0c051d119b52f3daec20229275c5f889</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ab2c08ff55a50001e1da7e03b2a91f59f</anchor>
      <arglist>(const Thread &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>afb0a6e67e331179054954ece61fc0b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>aa7d7a6a932929386936089618d4d7e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Thread &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a6de32ea344863fe165a1200e36b36dc4</anchor>
      <arglist>(const Thread &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ad6f6f4cf48168e85787ad3c0d91f4d3d</anchor>
      <arglist>(JLIthreadcallback *_JLIthreadcallback, void *_userdata, int _priority)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned char</type>
      <name>m_state</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a71f3ffb5bb782ea51fc7965a73d26228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_priority</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ad565b076bed5d905b4c8b55446106515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>pthread_t</type>
      <name>m_thread</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a585b618ef3f37b59ed87b9a260b75316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>m_thread_hdl</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ac9a03c44d01aaa3103b179edf04ba488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>JLIthreadcallback *</type>
      <name>m_JLIthreadcallback</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>ac180ff8a9b724385c44beafb47988a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>void *</type>
      <name>m_userdata</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a402f192eba9cdf6c041e050b9dd1a5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>wrap</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a4e3bf95b63db6ec0ddadd05ed67dde6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_thread.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::ThreadBuilder</name>
    <filename>classnjli_1_1_thread_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a8103920282811ae5b15a0a4bafd68da8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a62c78b29c46d7df9b7716240d0cbeaec</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>aadf8787251238303ea4ed66d3646720c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>ad7ee70d967c641bed56ed5e5c4b1eed7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a204ebecd17055ed8c61a4728e289d329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a8214e20ec29fe1e71f97b9916497f775</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a602cd7eca7d3c71df536c32e430cadaf</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a3206de9874c908cc6c0700781f04d5d0</anchor>
      <arglist>(ThreadBuilder **array, const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>af9d34834b3e1c597062aa8ba3cc9202a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ThreadBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a6accf6a772f344091930e2004ea4038d</anchor>
      <arglist>(const ThreadBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a7165d5e0c4523d1174d7d660d8701081</anchor>
      <arglist>(ThreadBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a9812137b110eb6b877466ee36ce134bd</anchor>
      <arglist>(ThreadBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a648198257fe14369e1868a420e1bab47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadBuilder</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a9227bab7e740e9493bc07a7fbfd705ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadBuilder</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>a887f0a70d7ad02680d18fa7d60300f8b</anchor>
      <arglist>(const ThreadBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>af26adc22112326d0e02b78f5aa52b3a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadBuilder</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>ad9458b68332b469230ed9f58095d94bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ThreadBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>af415f719c34b3251f66a2de69a7456ac</anchor>
      <arglist>(const ThreadBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_thread_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Timer</name>
    <filename>classnjli_1_1_timer.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a329822765b1177b2cead8b24ef7b34e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a12146561a9d2406251a2f6cda1833bb7</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a6a6519d8ec6e61474342ee6ead61fa6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ad83006f62efbd2da2155e28ea15072f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ac9cead3fa2f8c9c15a18ef9684f0dbaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>tick</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a3ae16ee82dd08e6584913ffc4c55793a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a7b6b18b762f9037a0c45683f45961f5f</anchor>
      <arglist>(unsigned long int totalMilliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ab7f75a80b1152e200a086f09ce1817c4</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a7184d3e27ef45550fbc07bb2580bb075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFinished</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a29750c69a007f00c7ecaf180b4fed52b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long int</type>
      <name>getTimeMillisecondsLeft</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a84efdb170831202bb478521f3c65a55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a81575fdeccaa12739eab0ed19d82af6a</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a22efffd5f7d3bd9789d6397fd2f30093</anchor>
      <arglist>(Timer **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>afff5d216db54e7a2230efe06e940b036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a7034ba015773d310f422673a84b868fc</anchor>
      <arglist>(const TimerBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a8e41dc40fb85189351121e8de88dd77d</anchor>
      <arglist>(const Timer &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a3929a946ac20c6d0e68602bba1d66583</anchor>
      <arglist>(const Timer &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a26931f44e8a19f4396743871d159db86</anchor>
      <arglist>(Timer *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>acad9695415047e980e802f6048aefe6d</anchor>
      <arglist>(Timer &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>ad373f359bc83bdfe91103ecda0c6fad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>afcd00947fc6d6c3a3a956ed57b4cd18b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a3cc6b1b2968ae74823383e0cd84c5d78</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a9cfd12bef5e562a48bc5e5ca033c6a7c</anchor>
      <arglist>(const Timer &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a982eac44a0cf0e6f3423de427d6035b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a9f546ad77cbaa48c45c69dff850e2f8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Timer &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a237da5742e5491edf681e2dda94a02d9</anchor>
      <arglist>(const Timer &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btClock *</type>
      <name>m_Clock</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a4ffbc32862501214a88aaa1bb74612a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>long int</type>
      <name>m_CurrentTime</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a1ae3795457187736970ee2af90ae3a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_IsPaused</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>a41a4f6b6f65df4beef065232a19b45d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_timer.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::TimerBuilder</name>
    <filename>classnjli_1_1_timer_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ab66a27424ab969d7055d0976f8c438fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a63d4de855d09f3ade6e13a4d07fab127</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>aa55f6d594d7c37f66b1c0e6d9d75a298</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ab904ab539708d20ec75bb79b257220be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a94721644d15adc821fae771bcd968063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a68c360b6393cbd01fbac84762e48c93b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a716e86de4e5e8be3e464bd39ed625da3</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a51422a93b6453f976ed1aecc64aaf11d</anchor>
      <arglist>(TimerBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>aa867a59bcb49a6af4a26b4f384a01f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimerBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a9277607c63adf64e917626ff30aaf3ac</anchor>
      <arglist>(const TimerBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a3602b82600cf60b9ef389ecc77e9ec93</anchor>
      <arglist>(TimerBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a7570d49424feec501a456a19cfdbe827</anchor>
      <arglist>(TimerBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a13a97322d239136b0302a73a92d4ef01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimerBuilder</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a1e8b826dc7c0a51493c510658bb716f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TimerBuilder</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>ae5692fe6e38891da25c76bf325f1d58d</anchor>
      <arglist>(const TimerBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a19766dc135d3a03774036d99e4065818</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~TimerBuilder</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a19779297f54975c639c4625501be0194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TimerBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>a9767b4b54e47e49aa3d7bd377fd50499</anchor>
      <arglist>(const TimerBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_timer_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>TKey</name>
    <filename>union_t_key.html</filename>
    <member kind="variable">
      <type></type>
      <name>TValuefields</name>
      <anchorfile>union_t_key.html</anchorfile>
      <anchor>a7cf5ea47ba9fb319a0f0d8d4a208d8de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>next</name>
      <anchorfile>union_t_key.html</anchorfile>
      <anchor>a497dbe63310539554e33e055a0c1060c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct TKey::@4</type>
      <name>nk</name>
      <anchorfile>union_t_key.html</anchorfile>
      <anchor>aa27b66fb71a594e3bf64b11af152b27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TValue</type>
      <name>tvk</name>
      <anchorfile>union_t_key.html</anchorfile>
      <anchor>a55dd2ab1845f9cda12742e54e5185eba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Token</name>
    <filename>struct_token.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>token</name>
      <anchorfile>struct_token.html</anchorfile>
      <anchor>a92d1dfeae343659449f1bc29d6731c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SemInfo</type>
      <name>seminfo</name>
      <anchorfile>struct_token.html</anchorfile>
      <anchor>a87067a25b1e511befc45d56cf535ef59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>TString</name>
    <filename>struct_t_string.html</filename>
    <member kind="variable">
      <type></type>
      <name>CommonHeader</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>a46677057221656f98fa80eb77089de45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>extra</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>a11878b0fae7367ad203a0c470ee54fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>shrlen</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>a5bdf17ca1288eb1e62ef72be9af6505f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>hash</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>a57f69ac2b4c4eb34f5521ffd68d90b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>lnglen</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>a25f3ee23e67e10eba379fa4f31dec5d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct TString *</type>
      <name>hnext</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>adb99ad67b6bc67f62fac7d69b88f07fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union TString::@3</type>
      <name>u</name>
      <anchorfile>struct_t_string.html</anchorfile>
      <anchor>ae658dbb2c596f3c696e14f44d2cda624</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Udata</name>
    <filename>struct_udata.html</filename>
    <member kind="variable">
      <type></type>
      <name>CommonHeader</name>
      <anchorfile>struct_udata.html</anchorfile>
      <anchor>aaa6ffd32850e8506f6fa4c441702d374</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>ttuv_</name>
      <anchorfile>struct_udata.html</anchorfile>
      <anchor>a9fdd1a9a90f62edd226601f1731b7036</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct Table *</type>
      <name>metatable</name>
      <anchorfile>struct_udata.html</anchorfile>
      <anchor>a39f828bdcf3f046e285ffbecfcaea56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>struct_udata.html</anchorfile>
      <anchor>abc467c0c1ec8511376150eb728514dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union Value</type>
      <name>user_</name>
      <anchorfile>struct_udata.html</anchorfile>
      <anchor>a2aa7928a5dfc71680d6f41bc7e2dee1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>UpVal</name>
    <filename>struct_up_val.html</filename>
    <member kind="variable">
      <type>TValue *</type>
      <name>v</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>aeb2c6e23d98883dd7f117de69de23e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_mem</type>
      <name>refcount</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>adf1ab74a0b5e7efe9a7145cf277c59dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>UpVal *</type>
      <name>next</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>a96c97bb937ea82be649e15a1a466ca09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>touched</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>a02d10999834aa8077bd55cb306a6d9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct UpVal::@1::@2</type>
      <name>open</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>abe59e9c44523829c57370aa6cd482557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TValue</type>
      <name>value</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>abc22d06bbcaf3f197af9c6069c562505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union UpVal::@1</type>
      <name>u</name>
      <anchorfile>struct_up_val.html</anchorfile>
      <anchor>adc9399eb8ffb2e28f40f0b02aed7090a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Upvaldesc</name>
    <filename>struct_upvaldesc.html</filename>
    <member kind="variable">
      <type>TString *</type>
      <name>name</name>
      <anchorfile>struct_upvaldesc.html</anchorfile>
      <anchor>a8870289fbc6611275d093ef1c08cf9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>instack</name>
      <anchorfile>struct_upvaldesc.html</anchorfile>
      <anchor>a1e5182ac7b8b72848ed71b7b4844e3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lu_byte</type>
      <name>idx</name>
      <anchorfile>struct_upvaldesc.html</anchorfile>
      <anchor>a8478ecca9cb593200c562a0837aedfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>UTString</name>
    <filename>union_u_t_string.html</filename>
    <member kind="variable">
      <type>L_Umaxalign</type>
      <name>dummy</name>
      <anchorfile>union_u_t_string.html</anchorfile>
      <anchor>a1db3811d290edb617bc292dd264c4584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TString</type>
      <name>tsv</name>
      <anchorfile>union_u_t_string.html</anchorfile>
      <anchor>a2436c7e655624840b96019bd5bdcd989</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>UUdata</name>
    <filename>union_u_udata.html</filename>
    <member kind="variable">
      <type>L_Umaxalign</type>
      <name>dummy</name>
      <anchorfile>union_u_udata.html</anchorfile>
      <anchor>ad355e4f932e0aca2435791aef7a9b621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Udata</type>
      <name>uv</name>
      <anchorfile>union_u_udata.html</anchorfile>
      <anchor>a5baf8d56af573ad1d67674f3e4c848f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>Value</name>
    <filename>union_value.html</filename>
    <member kind="variable">
      <type>GCObject *</type>
      <name>gc</name>
      <anchorfile>union_value.html</anchorfile>
      <anchor>afc72971d7fb256f8286b0a763be3e543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>p</name>
      <anchorfile>union_value.html</anchorfile>
      <anchor>aa001f39a25c7d85a27cbdbab2d386ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>b</name>
      <anchorfile>union_value.html</anchorfile>
      <anchor>a121086ae65144dd506451da395cfa6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_CFunction</type>
      <name>f</name>
      <anchorfile>union_value.html</anchorfile>
      <anchor>acc94eaa63b3acf650541fcd09025f2ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Integer</type>
      <name>i</name>
      <anchorfile>union_value.html</anchorfile>
      <anchor>a0d6f6bd1f2576b712e95aaffa0f87bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Number</type>
      <name>n</name>
      <anchorfile>union_value.html</anchorfile>
      <anchor>ae8663f45c016d5fbf827cb308b2f3df8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Vardesc</name>
    <filename>struct_vardesc.html</filename>
    <member kind="variable">
      <type>short</type>
      <name>idx</name>
      <anchorfile>struct_vardesc.html</anchorfile>
      <anchor>ac32e21dd30359d44b9944038cef986b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>WAV_CHUNK</name>
    <filename>struct_w_a_v___c_h_u_n_k.html</filename>
    <member kind="variable">
      <type>u8</type>
      <name>id</name>
      <anchorfile>struct_w_a_v___c_h_u_n_k.html</anchorfile>
      <anchor>ae56ae53081b52ccf0a672ba3e22f3910</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>size</name>
      <anchorfile>struct_w_a_v___c_h_u_n_k.html</anchorfile>
      <anchor>a202ff2b47df8f3e2bbae459b4e3180fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>WAV_DESC</name>
    <filename>struct_w_a_v___d_e_s_c.html</filename>
    <member kind="variable">
      <type>u8</type>
      <name>riff</name>
      <anchorfile>struct_w_a_v___d_e_s_c.html</anchorfile>
      <anchor>aa676949c26175b9ce912be73c0f41fb3</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>size</name>
      <anchorfile>struct_w_a_v___d_e_s_c.html</anchorfile>
      <anchor>ae6ad2ec7f877cb64c6b89961e209bdde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u8</type>
      <name>wave</name>
      <anchorfile>struct_w_a_v___d_e_s_c.html</anchorfile>
      <anchor>aba4d38d3f00975867e3f36d3d11ca8b9</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>wav_file</name>
    <filename>structwav__file.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>f</name>
      <anchorfile>structwav__file.html</anchorfile>
      <anchor>a6c9f1ab95d2d33cd281db66512fa8132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>curPtr</name>
      <anchorfile>structwav__file.html</anchorfile>
      <anchor>a9c297f2327634372cd6018b327908fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>filePtr</name>
      <anchorfile>structwav__file.html</anchorfile>
      <anchor>a1d05305462c7031096e5a57cba20a329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>fileSize</name>
      <anchorfile>structwav__file.html</anchorfile>
      <anchor>a8607accef1ceb2d143e91e4468e1ca47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>processedSize</name>
      <anchorfile>structwav__file.html</anchorfile>
      <anchor>ac0b004bf1255fa2ea5d4a41316a4253d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>WAV_FORMAT</name>
    <filename>struct_w_a_v___f_o_r_m_a_t.html</filename>
    <member kind="variable">
      <type>u8</type>
      <name>id</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>af7e4d036ae594f619322a763fc446ff7</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>size</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>aa74155b8a7752c37742f87257f00c8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u16</type>
      <name>format</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>ac134cc6cea6c862472878750b8a58071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u16</type>
      <name>channels</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>a770422b2ee3c7cd4088f7ab1a39e5d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>sampleRate</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>a5dc7fe93937eb8425a426c9850cbf8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u64</type>
      <name>byteRate</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>adbd0c076fe11a16cd50a2a5d35073ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u16</type>
      <name>blockAlign</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>a0b8b6e4f20ab7c230636ebe3dd89bed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>u16</type>
      <name>bitsPerSample</name>
      <anchorfile>struct_w_a_v___f_o_r_m_a_t.html</anchorfile>
      <anchor>a4daa49634140cfc7ba5a88222380551e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::World</name>
    <filename>classnjli_1_1_world.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type>WorldFactory *</type>
      <name>getWorldFactory</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a28299874538b8a714bcbae908760a364</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldFactory *</type>
      <name>getWorldFactory</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abfd08290519a0525e79f8961cff41c33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldResourceLoader *</type>
      <name>getWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a094d454c35f0afea279bb5fbb39c196a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldResourceLoader *</type>
      <name>getWorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a78357165d6bc4ef06ef774d4e0606bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldClock *</type>
      <name>getWorldClock</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a00797432cd913a07ad852e703cbf7278</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldClock *</type>
      <name>getWorldClock</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7edeaa8b2caed5240128952e85ea5b12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldLuaVirtualMachine *</type>
      <name>getWorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6ebccef746ad4e44455bae7698839e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldLuaVirtualMachine *</type>
      <name>getWorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a82f0b1f8d27a311ec99b67d778e121a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldSocket *</type>
      <name>getWorldSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a245f64dbfb8ac4b9aa405c05c58a77e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldSocket *</type>
      <name>getWorldSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a58cd945663087fae147a88f76a984f83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldInput *</type>
      <name>getWorldInput</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9b8a2755f4643d169d54e047554ba8f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldInput *</type>
      <name>getWorldInput</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aefbda7b9bf38ace818503473814d8b18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldSound *</type>
      <name>getWorldSound</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aeafce2408df830b6d0d4f4cc70a502f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldSound *</type>
      <name>getWorldSound</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aa0df2fe274aae44a7c3f4df0bfc2b2c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a779f9ee41d7e73e013654dcdb1d83cf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldStateMachine *</type>
      <name>getStateMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aa78f8be7d30ab1d38cea248c3017f0a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>WorldDebugDrawer *</type>
      <name>getDebugDrawer</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abd9b6751260b5e6c28fa9cfd874cfaad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const WorldDebugDrawer *</type>
      <name>getDebugDrawer</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a88ce760cdc314298a58f96af3ef9d492</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a027fc2766ebe49b79f974e7e808610f8</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a1b2be462f5455b01856968eea7ee96bb</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a19b6222b4d9eaa0f83ab74f555ed6e68</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a456be839bfe441022745d2790ac44942</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aa1bc8ac0264f93580c6629d41dbd00b3</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9d64d3a8310bba9935bf998ec9d341e8</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a625c469136089b896cc94c7f151ec8e6</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a484e8c77cd1ed5613189c503326a310b</anchor>
      <arglist>(const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4f3f72ae362ffc3aa5636d30dd84224e</anchor>
      <arglist>(const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6c13bee0e9fca64f619dd92b927f948a</anchor>
      <arglist>(const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyUp</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ad64c93b5f93db6e9df3ce7b9869d12d4</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyDown</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6fc507c345272128f64cd5c6d4e6ca08</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardShow</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abd97ee22f8fbfa29ace0f4859b16d6e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardCancel</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5ecc9ab5fe1c940ae021489d5574edf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardReturn</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6e7f30cb39fb2cc23148a3765d0fed3e</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getViewPort</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab816a3e089fafc8fe7723723fb201bee</anchor>
      <arglist>(s32 *viewPort) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createScript</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a32797f128d963f99839c12faf4b4dc12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyScript</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ad27af4cf142639c3436f4163d0526442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a248c324a0a97b0f286eaedf8f997688e</anchor>
      <arglist>(f32 timeStep, const u32 numSubSteps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a3e7f68f7467d421971e13dfcc5e2100e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a04acd6d056b32f996c165d2d9a8ee34d</anchor>
      <arglist>(s32 x, s32 y, s32 width, s32 height, s32 orientation)</arglist>
    </member>
    <member kind="function">
      <type>const btVector2 &amp;</type>
      <name>getViewportDimensions</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0d888d6664fed006bde6e9fd806bc41c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>getAspectRatio</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4f3d49c5cc8e3a3a2c2439e663a9c60b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2811263a084944cded212cd714a165cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a35e88a33b35fa6de44f10e3a93a62468</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2a892d17f7e21b51784e45ecc4aa642e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a80c42c94ab3fbf4242f3d9b5e7866379</anchor>
      <arglist>(Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aabf2a07e2fab640f5800357ad1fd7717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scene *</type>
      <name>getScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aacef8d7932cbc6df28524a15b30b50f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scene *</type>
      <name>getScene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a007a67243897e4dd1448e97b6b860389</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ad67785776209cbbaa6140fcc90b4913a</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4894e4a53f692a503661a7836bf7713f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5b67da9acd56cec605ad0dccc2b957cd</anchor>
      <arglist>(u8 n0, u8 n1, u8 n2, u8 n3, u16 port=2223)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac4b819fe8d34e6661d8f47138c318ff5</anchor>
      <arglist>(u16 port=2223)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSocketEnabled</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a776f8bf7c461ecac1db1b485828f6894</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7d217f38577d72d349e2df64761dc4c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSocketAddress</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac65ea60b2f5033c2e8a7504820d59ac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>u16</type>
      <name>getSocketPort</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af108b41273b0ff7abbf88fa6e311304e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundAlpha</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7eebf55a7920061d87e5dc03feb692da</anchor>
      <arglist>(const f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a011db5e9383aa6628892cd431c3657a5</anchor>
      <arglist>(const btVector3 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab7bbd4dee42bec416fb2b64e9843ddf1</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9f1b7c924b237316f9529a319c2ca055</anchor>
      <arglist>(f32 red, f32 green, f32 blue)</arglist>
    </member>
    <member kind="function">
      <type>const btVector4 &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7805d9b4c5ef0943a5c1c32b507d2151</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDeviceName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5ddb30abad714d14694863bb89af14b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeviceName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5c9cc63ac7cb847e6d581a867614e47d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePauseAnimation</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a41b67b3dea3196afa6ff1b0d961b39d2</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPaused</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac84f5b1da4bbd124829f30b7a3fbd4d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePauseGame</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ae8f238cc0f23ce6b8a05ad5a3da555f7</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPausedGame</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abfbc1b055160d3c6a6ccd4f1ec784b0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDebug</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a6470e58e64be02c4bf71a201417bcbbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>runJavascript</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a72aa272f2e66633642e069106f09c9e9</anchor>
      <arglist>(const char *script)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a7e31e4dff9169bd82c24e69ff29b53b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a3bddccf6aeb57d953f358a2e66fc2c00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static World *</type>
      <name>getInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a17a72893105bc732fdf5751a2a23b6d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasInstance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9c8ccd2a51131b026b1ee6c9135eea8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>processMessage</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4118fbcbb82b872369b235bbc7cde67f</anchor>
      <arglist>(const std::string &amp;msg, const std::string delimeter=&quot;root&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>handleSocketMessage</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a322956de68eb15d43bfb39083942edee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRayCollision</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9e884bc811dcdf6821f2d5a2edccf669</anchor>
      <arglist>(DeviceTouch **touches, const char *code, bool disableNodeTouched=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRayCollision</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a3e3cfdf16d875d3fc64c7428c07d23d7</anchor>
      <arglist>(const DeviceTouch &amp;touch, const char *code, bool disableNodeTouched=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkRayCollision</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ae023b659a2be3ea9dd38ff1fdef93bd6</anchor>
      <arglist>(const DeviceMouse &amp;mouse, const char *code, bool disableNodeTouched=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af01e96219aea73e611ba28179b3532ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual</type>
      <name>~World</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aaf74d0ac73e1bf62d7b26bf7fdb6b5cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>abf9c0b24c17244baf76d760e81974cfe</anchor>
      <arglist>(const World &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>World &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a2fe83dc2d899a91ef21ac20220e2ada4</anchor>
      <arglist>(const World &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btAlignedObjectArray&lt; njli::PhysicsRayContact * &gt;</type>
      <name>m_RayContacts</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a96897049ea6e799e334d53f8e8735e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldFactory *</type>
      <name>m_WorldFactory</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ae50678873f637941aa87ec45c33e9a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldResourceLoader *</type>
      <name>m_WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a4ebb658eba80c17e930b96881d3a4e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldClock *</type>
      <name>m_WorldClock</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aacebc8d861e42a409cf1a875972da641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldLuaVirtualMachine *</type>
      <name>m_WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab3878c3df6c61327dfd7a08864e567a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldStateMachine *</type>
      <name>m_stateMachine</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a14412bd1ed14fca506732c0234db2b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector2 *</type>
      <name>m_ViewPortDimensions</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0ac18bfa72f55b16c00703e1035a0af7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Scene *</type>
      <name>m_Scene</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9c9279cbbb77ef973cb7d003198789b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldSocket *</type>
      <name>m_WorldSocket</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a0f6ea126555fa904aa246baba084c9de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldHUD *</type>
      <name>m_WorldHUD</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a922a3ec1f96ac87f97faee6329f39686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldInput *</type>
      <name>m_WorldInput</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a87601ddb30dead7b8b0bd05bcc1f7ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldSound *</type>
      <name>m_WorldSound</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a004cd4a3a730b83733b3ff91bfaedce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WorldDebugDrawer *</type>
      <name>m_WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aa92f105e6f53c7d8c30b8e453e1181c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_enableDebugDraw</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ac9ab0b237e486a28bd08adf913b3908c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_DebugDrawCamera</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5ae1a42d02339871c60b45ecacc92753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Material *</type>
      <name>m_DebugDrawMaterial</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a180a3f557467c6bb6d88cf05b691a6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_SocketEnabled</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>ab701cb678bcb47262db407e4684608a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_SocketAddress</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a51c1d3b5047c2e10c2850faf137efa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u16</type>
      <name>m_SocketPort</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>aafbdf669fc3dbc91c2b746b653ac4f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>btVector4 *</type>
      <name>m_BackgroundColor</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>acf0b94b1d7cba8d62158065b03de9012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_DeviceName</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a9dc158249ba20ca7b1523cce0d8d309f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_AnimationPaused</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>a5a261c335c55b2fd0e678e815a6cc85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_GamePaused</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>af387313aec7a62f3792e76d9610b70a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static World *</type>
      <name>s_Instance</name>
      <anchorfile>classnjli_1_1_world.html</anchorfile>
      <anchor>afbef76d7d011571721a36b2eb625e997</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldClock</name>
    <filename>classnjli_1_1_world_clock.html</filename>
    <base>njli::AbstractClock</base>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldClock</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>abc95e23fc5d9c28884e4775c2c61e232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldClock</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>aac4a9a1501e69c88ef720b01564c9d4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a3d049ae0564d07c40cc0f9a3d5ccf20e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>ada98188afadfa5dc712d96a0d12f56a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a0ebeaf0636f48e20734bf05dee514ff3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f64</type>
      <name>totalMilliseconds</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a0594a3ed72d610082cc4ad00bb2d0e42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>timeStep</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a756caa9141b7e68da86d65050552102d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>ae68c432422e175aaa52746b99c57f843</anchor>
      <arglist>(f64 milliseconds)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldClock</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a7980edaac13345c4a1589542a699d53e</anchor>
      <arglist>(const WorldClock &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldClock &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a4e158b42fd4835209dce260ffe490420</anchor>
      <arglist>(const WorldClock &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32</type>
      <name>m_TimeStep</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>aa727682fd2ee70cbfba4e78813e8f730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f64</type>
      <name>m_TotalMilliseconds</name>
      <anchorfile>classnjli_1_1_world_clock.html</anchorfile>
      <anchor>a2fccbd5a2216651b2614cf5b0d960046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldDebugDrawer</name>
    <filename>classnjli_1_1_world_debug_drawer.html</filename>
    <member kind="function">
      <type></type>
      <name>WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab55308c80918b35de864ddf762be9415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldDebugDrawer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a741f540999f852b736db76368719e2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a08488c8e987f18b7186d5ca50650db99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a151c4b9f151d90e03df92f412346e876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ad8b4bbf6151d5f233dce54b012d9f395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginDraw</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a058930605d9a5adbf095701584dededf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endDraw</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ad0f3fbe3f3f062800792178a1b83318e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPointList</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aa840ccc55092f26d9ed20ca1ceae1670</anchor>
      <arglist>(const dd::DrawVertex *, int, bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLineList</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab4547ab7ddab242ff2a402c691ce7c72</anchor>
      <arglist>(const dd::DrawVertex *, int, bool)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawGlyphList</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a902a5a10ef3b87d602cd87e2cd37c3e4</anchor>
      <arglist>(const dd::DrawVertex *, int, dd::GlyphTextureHandle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyGlyphTexture</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a7d7fc930e719f3fd0715c860df1cbca7</anchor>
      <arglist>(dd::GlyphTextureHandle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dd::GlyphTextureHandle</type>
      <name>createGlyphTexture</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a33c8ba0bbcc08aefc27850aecbbfaeea</anchor>
      <arglist>(int, int, const void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLine</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a09b33cb0a07320fc6c10890abbf1e3b5</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, const btVector3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawContactPoint</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a5469fad4a1de098b62a2e9ecc3bcc291</anchor>
      <arglist>(const btVector3 &amp;PointOnB, const btVector3 &amp;normalOnB, btScalar distance, int lifeTime, const btVector3 &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reportErrorWarning</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a283f65c1bc27f601271909a35ffac38d</anchor>
      <arglist>(const char *warningString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw3dText</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a76cbaf34350fd41f5fd929e97df5c9a3</anchor>
      <arglist>(const btVector3 &amp;location, const char *textString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDebugMode</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a47497517ec5023b6ea53286eb6381510</anchor>
      <arglist>(int debugMode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getDebugMode</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ace4ad17af606db8195712e15a42782b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aac2655edc06413745b2ff3ff13572a2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unInit</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>af34071bc860e89b151d779ee1c6acbbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a52ac5a94b12639e5450f77690ab8f5bc</anchor>
      <arglist>(Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>point</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a9de791d9497b36d0f19980cf301d05f6</anchor>
      <arglist>(const btVector3 &amp;pos, const btVector3 &amp;color, float size=1.0f, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>line</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab8577e1631222c8a64ba370b4e62daa6</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, const btVector3 &amp;color, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>screenText</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a014bce3199ffded2f0577eb3c9a8bf19</anchor>
      <arglist>(ddStrParam str, const btVector3 &amp;pos, const btVector3 &amp;color, float scaling=1.0f, int durationMillis=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectedText</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>acac1c29c7c13b5afb9553c38f304af47</anchor>
      <arglist>(ddStrParam str, const btVector3 &amp;pos, const btVector3 &amp;color, float scaling=1.0f, int durationMillis=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arrow</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a247723d82e67043e246c9cf601e9a5e4</anchor>
      <arglist>(const btVector3 &amp;from, const btVector3 &amp;to, const btVector3 &amp;color, float size, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cross</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>afaf93a608f1cbda884f660ef626d7891</anchor>
      <arglist>(const btVector3 &amp;center, float length, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circle</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>adec61e26c61222671eeaae5818750ee2</anchor>
      <arglist>(const btVector3 &amp;center, const btVector3 &amp;planeNormal, const btVector3 &amp;color, float radius, float numSteps, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>plane</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a7a947904ddfe6665fc69fc9d04017f23</anchor>
      <arglist>(const btVector3 &amp;center, const btVector3 &amp;planeNormal, const btVector3 &amp;planeColor, const btVector3 &amp;normalVecColor, float planeScale, float normalVecScale, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sphere</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>af5b08f142be7d2061437d20bfdfb12a4</anchor>
      <arglist>(const btVector3 &amp;center, const btVector3 &amp;color, float radius, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cone</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a3e6834506d31a8111699f184ef75c6ad</anchor>
      <arglist>(const btVector3 &amp;apex, const btVector3 &amp;dir, const btVector3 &amp;color, float baseRadius, float apexRadius, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>box</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ac47f08694cdd1b36a2b0a89238ef9927</anchor>
      <arglist>(const btVector3 &amp;center, const btVector3 &amp;color, float width, float height, float depth, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>aabb</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ae4c968319278e639f0372948fdf16729</anchor>
      <arglist>(const btVector3 &amp;mins, const btVector3 &amp;maxs, const btVector3 &amp;color, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertexNormal</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a36d81cb34d46d4e853a44e3477dba202</anchor>
      <arglist>(const btVector3 &amp;origin, const btVector3 &amp;normal, float length, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tangentBasis</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a3e46b0af228eb9e8f112ad7e6d8007f0</anchor>
      <arglist>(const btVector3 &amp;origin, const btVector3 &amp;normal, const btVector3 &amp;tangent, const btVector3 &amp;bitangent, float lengths, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xzSquareGrid</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a42fda06cd30581136e0e39f6682b71bd</anchor>
      <arglist>(float mins, float maxs, float y, float step, const btVector3 &amp;color, int durationMillis=0, bool depthEnabled=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processSdlEvent</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a6472cecf79ae2d4b76fcb5e363019fbd</anchor>
      <arglist>(SDL_Event *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectSynergyServer</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ad39a48517294969c215ab0d02439768c</anchor>
      <arglist>(const std::string serverName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupShaderPrograms</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a909649fb3b8e4eab5b8b76370b0e66d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupVertexBuffers</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ad67f8074167c127eb49596c6d2d813a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compileShader</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a48de01f1761e56a8511925468f6a802a</anchor>
      <arglist>(const GLuint shader)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>linkProgram</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a9f85884fc0612b81a189fa42b28c6707</anchor>
      <arglist>(const GLuint program)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initImgui</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>aed4000f5c9f1a4b5be0fdd6b48e9d68e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unInitImgui</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a0c68d5133dbbebd5e9f7cf46d8e9e12f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>renderImgui</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a303d644236ffcfe2216a0ce445b0e74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>newFrameImgui</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>afa1b4bf7b377c085e4ed2a5b41b13adb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>m_DebugMode</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a1531502ece9afabebbf772bcc25f2811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>glm::mat4</type>
      <name>m_mvpMatrix</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a376335d093590f91c0458df22c9bb866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>linePointProgram</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ada80b31b5782b0bf85943e0d5c075c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLint</type>
      <name>linePointProgram_MvpMatrixLocation</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>ab439977d5e3cfe2efc6f3b5445e0fd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>textProgram</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a0d63f957bea4ad8e5306d680bb2ea8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLint</type>
      <name>textProgram_GlyphTextureLocation</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a2b7b2612853759b92ad26de37ebe8dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLint</type>
      <name>textProgram_ScreenDimensions</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a8afce071c7a5a29b378bb807f1dbdf3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>linePointVAO</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a61e7e986d55c6348ba96b60406e6d3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>linePointVBO</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a731ef5fbc59334c0bf3f0a0ee4ce88ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>textVAO</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a8a7f7e44c3a3ba9a1bca6c2d660f3a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>textVBO</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a1911a5f2cdd6f0b66480883d9880ba42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uSynergyContext</type>
      <name>_synergyCtx</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>af0a344a583a5abb91c30d1f52c96673a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::thread</type>
      <name>_synergyQueue</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a0fe703f5587c30d9c14f56825b4ff2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>_serverName</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a5292bcdbc98ce4e3de53521e043d3f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>_synergyActive</name>
      <anchorfile>classnjli_1_1_world_debug_drawer.html</anchorfile>
      <anchor>a9babc2b6fae8b80dc8b1161dcaafbf42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldFactory</name>
    <filename>classnjli_1_1_world_factory.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="typedef">
      <type>std::vector&lt; AbstractFactoryObject * &gt;</type>
      <name>ObjectList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a987ddbccec6101d2a0ca72f9ecfc0249</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; AbstractFactoryObject ** &gt;</type>
      <name>ObjectArrayList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0b1357052d11887d1561fbd882acd177</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; u64, s32 &gt;</type>
      <name>ObjectDuplicatePair</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af17ac95ff692d4a098f82e45d135281f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; u64, s32 &gt;</type>
      <name>ObjectDuplicateMap</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a15eec8c4710c8ec66e7cd06dd2327be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>has</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5ba361b0dc1aff668f113172667981c4</anchor>
      <arglist>(AbstractFactoryObject *object) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyAll</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2ab6116ee5ff90d27f7661c6e211620a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>size</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad5d3fc4509c0939fd64f5d8473e915d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>numberOfReferences</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aad74e165dafe9781f2578dc3d29a1d07</anchor>
      <arglist>(AbstractFactoryObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>get</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8f9aeb468fce2ee2c0c4adf50824db1a</anchor>
      <arglist>(const u32) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getAll</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af184be71213aee7dc980e6088b498c79</anchor>
      <arglist>(std::vector&lt; AbstractFactoryObject *&gt; &amp;objects) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>index</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abfb139b97c6ed43ae5f25c80cc1fdf94</anchor>
      <arglist>(AbstractFactoryObject *object) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af107111eceb194bc9ca7623c09f617d6</anchor>
      <arglist>(btSerializer *serializer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4b6bea9cdcaa93916dc53f8d710be9a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad3bdc94fc0ef8cafada8f7d0796a77f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9a199d5c17a90ab9b15246e7f3f3d394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3d793e4bc22b7a72b733d62c6241c62f</anchor>
      <arglist>(u32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collectGarbage</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8a119571be5748f45d525cfed1b66b6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s64</type>
      <name>collectGarbageSize</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3c8e3ff7af8014d3b52483251bc0661e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>collectGarbage_GPU</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0f79c06f6add6fb56e77b4ee93d92574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s64</type>
      <name>collectGarbage_GPUSize</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5a9f7e79b05e4b8ff73de592d2b96490</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae5012fbab296d02bd57b4bf660bc9cac</anchor>
      <arglist>(const u32 type, const u32 size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a750b2aa5e4b856d72c629f381e671166</anchor>
      <arglist>(const u32 type)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab146b0b572a8f4806637ebf25b2df26a</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a33abb985f896e35cea6e4913826c6a47</anchor>
      <arglist>(const AbstractFactoryObject &amp;, bool=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a89cd6287f3762e13a950c01032639c04</anchor>
      <arglist>(AbstractFactoryObject *, bool array=false)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2a3ae9f5b93cd70b470de9ed3e1edb05</anchor>
      <arglist>(AbstractFactoryObject **, const u32, bool isRenderObject=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a726158c2c7cfe4b1f1311e2c15c37f07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldFactory</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad87dd40a3b3a963164477d74b5c001ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a20a56f43a616363546d43fc1e90c6f08</anchor>
      <arglist>(const u32 &amp;size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject **</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1bdcf046664e630474e71c6ca48a54c5</anchor>
      <arglist>(const u32 &amp;idx, u32 size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5646bfc3148c2e87ecf1bab41a933674</anchor>
      <arglist>(const njli::AbstractBuilder &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual AbstractFactoryObject *</type>
      <name>ctor</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a313445ddb5ed04a442bda2af7a6a1287</anchor>
      <arglist>(const AbstractFactoryObject &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractFactoryObject *</type>
      <name>create_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a125d628843dd041a05fad61340caaad6</anchor>
      <arglist>(const u32)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractFactoryObject *</type>
      <name>create_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a675390383c1fff886cc069b2266b7568</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>AbstractFactoryObject *</type>
      <name>clone_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3cd8d98774b84a2c968436d083f2c05e</anchor>
      <arglist>(const AbstractFactoryObject &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>numberOfObjects_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa6f99c4fde05aa13eaf11c4cb1b8bc94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2e3f3c897e12187b0413ed58b85fba9b</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adda8260e8e970db55234fd12f13ce093</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>numberOfArrayObjects_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a38a7c0c129af416254dc132a613d19a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeArrayObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afceced94230870133427e27148963c58</anchor>
      <arglist>(AbstractFactoryObject **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addArrayObject_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab9fb791c31f5fda79de73949e32fd65a</anchor>
      <arglist>(AbstractFactoryObject **)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>s32</type>
      <name>numberOfReferences_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3adffe81b38fb2a57d28405f5b299211</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeReference_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a739d97d5e0c332971564768bfa5e12c5</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addReference_Internal</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aadfd67f947c9ff8159f20fb3b6a893b0</anchor>
      <arglist>(AbstractFactoryObject *)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectList</type>
      <name>m_ObjectList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad8c7adb588d481784128249f971d0bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectArrayList</type>
      <name>m_ObjectArrayList</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0502a6e72721c46c66ce443e5d051085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectDuplicateMap</type>
      <name>m_ObjectDuplicateMap</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1adb9a8f15198258dd3bbe3bedd2de2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject * &gt;</type>
      <name>m_ObjectsToDelete</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad703b2808e6be7e94ba5b61211c949c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject ** &gt;</type>
      <name>m_ArrayObjectsToDelete</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a821440f3468d369e02db2c330a8a7f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject * &gt;</type>
      <name>m_ObjectsToDelete_GPU</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>acca9a185d035f2608b88c7b9c23251cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFactoryObject ** &gt;</type>
      <name>m_ArrayObjectsToDelete_GPU</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a86927dab3f098606f3ccdc8e6c1c341d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>AbstractFactoryObject</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a59f5fcb165066624f68fb5417aa3586e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Action</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2df56bce875115e30eee589571642e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ActionBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6a5fbb3d9afc8ecdda801eb0baa72618</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a19c07f330269ab1d6555234c92605d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ButtonHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8c026aede787124ffee5dfcadef572ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Camera</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad8bd9afbbd7af19d996da80e9d25890d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CameraBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7752fee1bd2b982e8f23fedc42a80a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0aab48d603790a3ca2c4d7dd7ab9e519</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CheckboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a218892def884e56259183e1a5999c6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Clock</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5ae5b1616a53c84525df7446cb4014e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ClockBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>acb9ae88f448a010684fe7bda1f015d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CollisionResponse</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aada10170113bd62fd216e56e169c30bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CollisionResponseBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2c7af76413a94496eea595a1640f050f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Cube</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8faee6be39d1c71eee071a7874631653</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CubeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a662086a007f158ad6a1a9cd4968b6f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aff628788b98fce5e2ba538f3d1548af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DropdownHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ace95ee82bd9b0868dca558d191db23fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Font</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad564b94b59dc295de3dfc4415d95cca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FontBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa1571d8b2e1c2d040a767ed3b23f5e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9aca7b7350e6ffa0e2d6320834ad1857</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5d6b29a75202aeeaef335faca9eb55e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ImageBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6e4a3b87650c7e051e932fc81e2b2ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>JsonJLI</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1c7fea89e4146ea859f344c20bf17ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>JsonJLIBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afbd2803f566fe8f3d08650c15f61b2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa8844d2831cd99e31cc82dd81b171f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LabelHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abcd9b8ad9755b1de56dd38ef4a89037f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Light</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a27862a9fe512b352f98ec1c054680edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LightBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8cd2216c776d440c957f9961ce19b1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelOfDetail</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a30b1a5fe07be473df6700c36c640ed17</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelOfDetailBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a719da6b5d45b216585e173af095bb963</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Lua</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a92273d66fac956d168c3dcbd891ae6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LuaBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6ff54f81b70b57898d3cb747e0ad258d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Material</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa1212b6e372a0f45d2c01f3cd203af77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaterialBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab38588cd27b640aa96c8788441852561</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaterialProperty</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae7c7f3376b81514442fbc2a5fe2f5ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaterialPropertyBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aba999bd8688594614e940d994d71b864</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Node</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6db9d28bd448a131448276ee03de1e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3698ada19fa4946ec1b589a2b23e695f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeState</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adfdd1242f00ef4da9a9a01d996fc292c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeStateBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab5f35f6c48aabf3adba3148d9e5017b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeStateMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a37124479a38545f4b2bec91d7f6acda0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NodeStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa0337fe62ed48d71c7fb641e4588d796</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ParticleEmitter</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a82b374d797a09668286ac5cf26f539f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ParticleEmitterBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4663c75ff33f5066276a2beef9a10b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBody</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5602338bf4d8e0e6baa58d3daa8dc90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyGhost</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a75e9d5e413912c976f8b366674be6676</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyGhostBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a36d224b713bd19fb758d964b8111182a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyRigid</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ada345e4f9c2a87f06868b74d30e94ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodyRigidBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac3d9efde8beb285372a9042d055c738a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodySoft</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8aab1bff165cf88cf8e13fb00b2b5f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsBodySoftBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af4691e69bff78222d4abfff307c0bcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsCloseContact</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aedf5835c05d4fe2aa76acfe736c1b9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsCloseContactBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aae9fd5c0211139108faab6d7ccf95c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraint</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa59c958a66870f0d251ec0dd477d2eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aed3f799c6061225153a01b5eb7141786</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintHinge</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0117dac2d3ca1ac4ebe089ac8c258560</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintHingeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aaf6a85f39db8c1e31e6aa37c65e1a674</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPoint</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a06afcd7f1b1822af8e15e045e77eed2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae8bb8accca080bd60527bc8d691149a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintSlider</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6b9fa11eb22d1cb30e2d4fc2247e9afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintSliderBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6b751cf38f887ce08753757be0cccc26</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwist</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2ccf10571ac5c97189a4c7d1fe3831ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a80d4d8b5e97b1f9310737e5230e0ca67</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintFixed</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a684f5ece6d7d44c2b9f689e76458a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintFixedBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2740ddc13d801da4128c33e9a5b9b492</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6Dof</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1d2185bf07a23cc48cd8f9d4271f3e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aca6d04b7c0d4627405b54ec4ec7af313</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af32c447e4cf588410ecc1a6106157f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a933373e183ecd046f268e1b69038a02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsContact</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af82a8eac76d39e47206a7eb1917e53f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsContactBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa61adc7648e4c29d071f44e17614316c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsField</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8216afecc63791c1d19b902232c886b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsFieldBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a09c097cb47fc1f3568d827cf0536b6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsRayContact</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a2fb3e6c99ae1c2204a36f0e83adab75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsRayContactBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a51efff0009aa2c9c621486a310037129</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShape</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a726223aef7972f289c4a01ccfd23d5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBox</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa594c185e502e1b87c998e01dd17a50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBoxBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a32f571aedc28d4347ba0d3a2a9acc7fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBox2D</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae9fdb8cf9943dbfd76910301cb0ac1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBox2DBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9300c5f6d79ededa841d102672c1abed</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeSphere</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aedad28d3885a187a21a94756dd00263c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeSphereBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afc061546bfa689988558e8bb36979312</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCylinder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa2e59a26c135fb52f13d19f1f09b6880</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCylinderBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1df6e91827326ced519104ee8edcafb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCapsule</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a08be67d95b7957ebd88a3944ff9a7afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCapsuleBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a47391e36c657b268fe97217194bf713e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeCone</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1e046c5bc3ad2999646274d22417d017</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a18107e28deb5ee79a2fd4d512772d7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeMultiSphere</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6d8dd0dab37f03d905eb3066b816ae30</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a71dcdde15201e2df59abaa1bde57e73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexHull</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a894f78151e6b10ffb19539384b946e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexHullBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad33a0bea05e9549fd9950ac4a1acbfa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a12f965e3d87c71370f0288e42f12a4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abf5b0c4f21459fff5c6ed5cb9fcd96c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4dc6a23ee90da790604a65d9e0e504d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a14ad61e7f0d93976b4a05ddf2bcccf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af5f61f67c01c8aa161044e2f7669b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0d9797805600b9e2c132b57950ea7926</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeStaticPlane</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af4b40469a84199477879e33321c6f02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a04aa4ba3952aae7bb7bd4c31ad24a705</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsWorld</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abd7959b8cbcd7c25bc6c0c8b1ea26ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PhysicsWorldBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab5ea5e632e260cb2f092d2423645bc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Plane</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a89c71bac3ec153ca700e1cd69900b6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>PlaneBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abcb05c23b1eab15866956ae243491395</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af744eb288828f7c98d57adeb8603027a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneState</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ace13a6b81a7cce08dd6f9d0c1c00af04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneStateBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab8cb8ab88a21ac3720ea996ba7e6aa9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneStateMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0554623d5c61159d79d55a1d5a0f3c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SceneStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4d92e8ea8141a3032ed9fcc2a7451218</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ShaderProgram</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aef20119bde6aff11ffd23f3ea2131b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ShaderProgramBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a95d0213badfc8214cbfd42122b313cef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Skinner</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7d2180162b18e72eaec14e87269710da</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SkinnerBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a389430808fadd843bcbe0e688a805990</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a601e2cab15ade2e7f8e72cd6b68c3b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SliderHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abf1112100157e104cac60cd5134cb52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a50914f77c7cf4fb97616c898c5291f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SoundBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae2f1c8c3b6e1df88a207c6189f601fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Sprite2D</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac1e5ab02d2359e991783010c562791e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Sprite2DBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a426536e3f63ba8c46a268e2fc01dc6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SpriteFrameAtlas</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a83269c8e3483e24989223393adfe4cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SpriteFrameAtlasBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9a77a7ee21b233ff37780fdba5ff2655</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehavior</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad5ca69736262ac0a4426bf1db26782c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a331a672189b9f56521adf39cc0817dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorAlignment</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a91f44afa8cf5820363fcba6eea3f4b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorAlignmentBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adf57a6be2aac43ce9580d621186471d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorArrive</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8f0655358bab63860fdd0b8556b03474</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorArriveBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab36977bc87279e54b2d2ef998a03feed</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorCohesion</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>af0dc08bdc007e78d18eb2917a1156f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorCohesionBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a8b6634ffab3c50f822b0c2532e0a4e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorEvade</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5ad7aa81fd7daa690f8bc3463ce6f1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorEvadeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a74e13c4f0e41e02b705eb9bdb76d0d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorFlee</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abe5b6c2976b9a4af7cc42cfdce07f49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorFleeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1c3bbcf291250eea89b6635de85e1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorFollowPath</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a18bd9aa0161c5192e06fd1f7e84f9629</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorFollowPathBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a325a06eb71c68e6ac19169f195f01e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorHide</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afea71c0f910d2c882f65eeb22ec21151</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorHideBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac9e1b81187f3470e505334b0a1beaef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorInterpose</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a86b9d6c674361a8596e3b0fbb0f1f0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorInterposeBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a073d777b292e30fef8f545cc8a12defe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1c0f500fc05cc445717c07bc3f03d675</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa9eb0844824d2963ab7caeaab5b8b385</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachineDithered</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a483b5ee717dc5d467348d1a320f4914c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachineDitheredBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a43b5786c14f6970b98e4d107557a9b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachinePrioritized</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>afd17df6bd59c939f0d8de6be28d4ccfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachinePrioritizedBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ac177594af60da258dc536355f811ff9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachineWeighted</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aaeb3835c39cd27bb5d7a81e9091ba8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorMachineWeightedBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abedd9c47f3cd4fbf1a04bd6c644140e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a1da7ab3cfd5a6711ca76774954b3a096</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorObstacleAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ad8731e644336210104f9631702ea93d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorOffsetPursuit</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a54892f2ace29aabcbb239f16f6d729d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorOffsetPursuitBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7d246dd92c1f696f053c52a5b28d6523</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorPursuit</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a75514aa5f0adbcd2fae7b6b32e750f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorPursuitBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ae2adf47370adb0997eccd93936d58e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorSeek</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa2cc41a75c2f9745d0b127905dae2fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorSeekBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9243219c83467ad2e6db865d4348b292</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorSeparation</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a60b1336339ae5d4c34ff42a23552dfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorSeparationBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab698696e5d1087b1b4e0af8c48997c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorWallAvoidance</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aa4041a2cd5bedbbe30352a5659dff090</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorWallAvoidanceBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>aad2b8165e983170b96433d4ec36ec52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorWander</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a605d290e322fcfa680bf59e1e43f802b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SteeringBehaviorWanderBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a5276bdd24efda2c3b2f5f807766cd833</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>StopWatch</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a9cfe516a7abece038bff141a1bbe49f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>StopWatchBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a0c05537ccc765fccea6bc44fdd1c27fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a043f6c225e4e72e1152c60f8c442fdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TextboxHUDBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a750965b3f8531f8610b0ed8fe05c00e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Timer</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a50de43af5bed41f30c071d8cce0e81bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>TimerBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a4bf1b31126e9d45534b120a6e4af0c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Thread</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>adbc148eaddd341d7ae4d07c9e9e33bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ThreadBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a96c37036c1767736e6aa216fd68b62a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a59cdb6fe5b378389e35b8b2a2f4e990e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a3d8dab2e937d753e7ddb14442e9acdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a737b3b9af90a96d9da0b4f27196f97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>abe950a299dceab3248d0732737858b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a6da91779d499b1ad3035fe196aecd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>XmlBuilder</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>ab51c8e735775c191a627d07f8ca5890d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_factory.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldHUD</name>
    <filename>classnjli_1_1_world_h_u_d.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aaa03dd572c9d1a44922a1c200d4192fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5c610e5e8a9c478d241b0a484a672de7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const s8 *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a77e75b1900ecb22d4e07a46b430f29d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2e73bd1fd7956213af66dd0bb4692761</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0125b46badab61261aa8240b0255d171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a642375ec9d4204c4e30ecd1c514db7a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a9eb79412a9e58ed635026ea42ce3b56e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a53e9e3898ebb81ba221c710380b554c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokeColor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aec50b89dcd5f2d5d43248e67419e7665</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokePaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa348c8907633ae02aff28a856f75cb45</anchor>
      <arglist>(JLIPaint paint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillColor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acb11035d988c1f295e3923682a6bbced</anchor>
      <arglist>(const btVector4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aff3e8d583cecd7baaea183fe160b9853</anchor>
      <arglist>(JLIPaint paint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>miterLimit</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7d25dd7849d6f12f614d1382fd00f0c0</anchor>
      <arglist>(f32 limit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strokeWidth</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af219f2c63d6a6bdd85f6871e113be598</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineCap</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abe7199ca318efbb7fdd54b914ab4e224</anchor>
      <arglist>(njliHUDLineCap cap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineJoin</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad146f303482641516e66066115bcb19e</anchor>
      <arglist>(njliHUDLineCap join)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalAlpha</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2b1d005bd81d9e0b42a404c48ceb7cf9</anchor>
      <arglist>(f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTransform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7f21364c34dbacfbf206e440c4774dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a9e1891dc9cb350ab8c1a7a8e265694b8</anchor>
      <arglist>(const btMatrix3x3 &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8c859db03b1586bd440c30bade8a3bdd</anchor>
      <arglist>(const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa54f2be918db534977909d80a5801158</anchor>
      <arglist>(f32 angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skewX</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab0a05d76b5251719b228fed812d69ff7</anchor>
      <arglist>(f32 angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skewY</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac354c68e141696172bd0b1fc07d89f28</anchor>
      <arglist>(f32 angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7db32bf294c4d55958d43188457bd866</anchor>
      <arglist>(const btVector2 &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTransform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aaadec4b47522d9b7390d3e84ee8a5356</anchor>
      <arglist>(btMatrix3x3 &amp;xform)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>createImage</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a06961a0e927da93914ff9f3cb069e778</anchor>
      <arglist>(const s8 *filename, njliHUDImageFlags imageFlags)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>createImageRGBA</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aab3c3c6a761de7f285b7a99f8a73dc04</anchor>
      <arglist>(const Image &amp;image, njliHUDImageFlags imageFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateImage</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4e1dcdcdbaf62f4b9fd0412cf5ee23da</anchor>
      <arglist>(s32 imageHandle, const Image &amp;image)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageSize</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0ee16fbf9fd6ae61ca0a1a220d1eaa90</anchor>
      <arglist>(s32 imageHandle, s32 &amp;w, s32 &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteImage</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ade08fde0f318b4ffad0ce0345cd34396</anchor>
      <arglist>(s32 imageHandle)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>linearGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1fca57ce05261de86c129c921b9c5223</anchor>
      <arglist>(const btVector2 &amp;startPos, const btVector2 &amp;endPos, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>boxGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a28cd9f803c36c1ed117941319f6de586</anchor>
      <arglist>(const Rect &amp;rect, f32 radius, f32 feather, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>radialGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ade8b232c106dea30004091edd418ab20</anchor>
      <arglist>(const btVector2 &amp;center, f32 innerRadius, f32 outerRadius, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>imagePattern</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a339bb4c0ca3e2a5fff0f7696644abaed</anchor>
      <arglist>(const btVector2 &amp;startPos, const btVector2 &amp;endPos, f32 angle, s32 imageHandle, f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a40f16dae5cfeec69081899c6e9e251f2</anchor>
      <arglist>(const Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectScissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a36707f986c16c94edb030110e9958d1f</anchor>
      <arglist>(const Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetScissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1510b2540e17040abc985f2b3485ea71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPath</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab5d63556e0d0e28e4458bb146e751b64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae93e5164ed89c2404f759efba1282383</anchor>
      <arglist>(const btVector2 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aba89dd5d668b6f7de9b943d13411961f</anchor>
      <arglist>(const btVector2 &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a579fd8f82fda136d3bb2f916bbf767b3</anchor>
      <arglist>(const btVector2 &amp;controlPoint1, const btVector2 &amp;controlPoint2, const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8cefd17fd4ee43b393810cf5b6f92c3a</anchor>
      <arglist>(const btVector2 &amp;controlPoint, const btVector2 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a71d2a7e98e92f02d75f80947ca93157f</anchor>
      <arglist>(const btVector2 &amp;pos1, const btVector2 &amp;pos2, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closePath</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a83640be06ba258db7a44297d561364e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pathWinding</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab8e986fe57556113de8902cd91e58725</anchor>
      <arglist>(njliHUDWinding dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a09909494112f37d1ae3b3729e505769d</anchor>
      <arglist>(const btVector2 &amp;center, f32 radius, f32 fromAngle, f32 toAngle, njliHUDWinding dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4183aaaf55fabccdf9d1f9b7614f02a4</anchor>
      <arglist>(const Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roundedRect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a30d1f93d6d2fe68ccf1bb1ce56e279c8</anchor>
      <arglist>(const Rect &amp;rect, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ellipse</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af1b141d1009fc9a9c8de94c4709edf65</anchor>
      <arglist>(const btVector2 &amp;center, const btVector2 &amp;radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circle</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a3170986b281a79fc800322102ab17f51</anchor>
      <arglist>(const btVector2 &amp;center, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a14544b181d0c45c47843a562ed4b029a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stroke</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae4774f72db77fef1dbf4c6b7adc2e357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>createFont</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a06b9f9f91b0a3429f728a9064dd5e2c7</anchor>
      <arglist>(const s8 *name, const s8 *filename)</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>findFont</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5e016ba34d85a2bbdba535129d4fdc6a</anchor>
      <arglist>(const s8 *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontSize</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac51e71d915cdf53232247d7786fa883c</anchor>
      <arglist>(f32 size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontBlur</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac2e332b4befffbab6b44e2ea61ad0911</anchor>
      <arglist>(f32 blur)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textLetterSpacing</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae618850d43566bb0e3d28e18a1b36037</anchor>
      <arglist>(f32 spacing)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textLineHeight</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4aefcaeea459b42c7727d301db80ed4c</anchor>
      <arglist>(f32 lineHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textAlign</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2e6124ce2225018131836b7eafd1d571</anchor>
      <arglist>(njliHUDAlign align)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontFaceId</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa6e14180c1643291e14b129eee1a6be3</anchor>
      <arglist>(s32 fontHandle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fontFace</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2e000d08f0aacae74231570760f0c7d9</anchor>
      <arglist>(const s8 *font)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>text</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0bab9dfc4848ec90b66fb3757c51f4b2</anchor>
      <arglist>(const btVector2 &amp;position, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBox</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a586a73295c4bf59ffe62642155b96a18</anchor>
      <arglist>(const btVector2 &amp;position, f32 breakRowWidth, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>textBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1e5d4bd2375c309bd3d0450ae2cd6781</anchor>
      <arglist>(const btVector2 &amp;position, Rect &amp;bounds, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBoxBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5f0b515da70d4597cb5ee69b9ccd4783</anchor>
      <arglist>(const btVector2 &amp;position, f32 breakRowWidth, Rect &amp;bounds, const s8 *string, const s8 *end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textGlyphPositions</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2c3d54d2d74dcf511031a7dfbb0e05ec</anchor>
      <arglist>(const btVector2 &amp;position, const s8 *string, const s8 *end, btAlignedObjectArray&lt; JLIGlyphPosition &gt; &amp;glyphPositions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textMetrics</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1c2fe58e99ad361f25745a1a7abfb1aa</anchor>
      <arglist>(btMatrix3x3 &amp;ascender, btMatrix3x3 &amp;descender, btMatrix3x3 &amp;lineh)</arglist>
    </member>
    <member kind="function">
      <type>btAlignedObjectArray&lt; JLITextRow &gt;</type>
      <name>textBreakLines</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1546740cf3833b9f121451af58261bc4</anchor>
      <arglist>(const s8 *string, const s8 *end, f32 breakRowWidth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abf39159728f0defe021310b5ee195388</anchor>
      <arglist>(f32 scaleX, f32 skewY, f32 skewX, f32 scaleY, f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abd989561682767b35d557221124e4883</anchor>
      <arglist>(f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a14be92646f0a40e08b738dd0a3492329</anchor>
      <arglist>(f32 scalex, f32 scaley)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>linearGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aefa0dd5d84a7571fd9228e2d2b25eb46</anchor>
      <arglist>(f32 startx, f32 starty, f32 endx, f32 endy, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>boxGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7263a3a9af4c3db96bdd1d8755bb6d88</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height, f32 radius, f32 feather, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>radialGradient</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a912072b46da8889ca18c84e05c8ac7e4</anchor>
      <arglist>(f32 centerx, f32 centery, f32 innerRadius, f32 outerRadius, const btVector4 &amp;startColor, const btVector4 &amp;endColor)</arglist>
    </member>
    <member kind="function">
      <type>JLIPaint</type>
      <name>imagePattern</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8ce1541f60418d89a0cde6918de0a304</anchor>
      <arglist>(f32 startx, f32 starty, f32 endx, f32 endy, f32 angle, s32 imageHandle, f32 alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a200ca0f916219703e5c3e25c3c0a6533</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectScissor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acc63b50dcb447279fd04118edd742aba</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ae6e492a62f645f4cf375849b97a0c4b8</anchor>
      <arglist>(f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a95cafc21277f080c5a19d56ec051010e</anchor>
      <arglist>(f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bezierTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>add9f4191577fa2242f116aabb111ba03</anchor>
      <arglist>(f32 controlPoint1x, f32 controlPoint1y, f32 controlPoint2x, f32 controlPoint2y, f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a02ccb67d2aa481caeeb396ced6f9a8a1</anchor>
      <arglist>(f32 controlPointx, f32 controlPointy, f32 x, f32 y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a898dd5908a3cf3ff0927f816e92bffa5</anchor>
      <arglist>(f32 pos1x, f32 pos1y, f32 pos2x, f32 pos2y, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2cb355cc0abb9f9906f415ee8a06ddc8</anchor>
      <arglist>(f32 centerx, f32 centery, f32 radius, f32 fromAngle, f32 toAngle, njliHUDWinding dir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ace6d5af98edbb9a27175baaf03b6581a</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roundedRect</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a93df3aa8aa9eac57d15b721b8763a31b</anchor>
      <arglist>(f32 x, f32 y, f32 width, f32 height, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ellipse</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab9865a7ca65ce8e64f79983e6558fac3</anchor>
      <arglist>(f32 centerx, f32 centery, f32 radiusx, f32 radiusy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>circle</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acd63e699e6d794d6a404c5e84fa0972d</anchor>
      <arglist>(f32 centerx, f32 centery, f32 radius)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>text</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4b7cf2022ede55dd9b9b043f6a3f20f2</anchor>
      <arglist>(f32 x, f32 y, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBox</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af0189937dc328cde8b98fe3322b4c4b1</anchor>
      <arglist>(f32 x, f32 y, f32 breakRowWidth, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>f32</type>
      <name>textBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad67518f90c4ae95749b99ed3c050f1d8</anchor>
      <arglist>(f32 x, f32 y, Rect &amp;bounds, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textBoxBounds</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5d656a3f17364a405cacb8e348d7789a</anchor>
      <arglist>(f32 x, f32 y, f32 breakRowWidth, Rect &amp;bounds, const s8 *string, const s8 *end=NULL)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>textGlyphPositions</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4d1a7a9ba1a48de79a88272be7b842ec</anchor>
      <arglist>(f32 x, f32 y, const s8 *string, const s8 *end, btAlignedObjectArray&lt; JLIGlyphPosition &gt; &amp;glyphPositions)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>getCamera</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abf86a4d4100ba69abb8426ff0d9fb06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static s8 *</type>
      <name>cpToUTF8</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac3d6f31e35e126ffb9af9f16f286b708</anchor>
      <arglist>(s32 cp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgb</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a057b36c3804580659d26ae95e2d1ea15</anchor>
      <arglist>(u8 r, u8 g, u8 b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgbf</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af703ccb0ab75c3910a7c23830920a652</anchor>
      <arglist>(f32 r, f32 g, f32 b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgba</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a22066a9b3240694ba4fb8d5c7c26ac06</anchor>
      <arglist>(u8 r, u8 g, u8 b, u8 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>rgbaf</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad4c434cddbeba1a62562585c012a8693</anchor>
      <arglist>(f32 r, f32 g, f32 b, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>lerpRGBA</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab754f469fe9aa8facaa81537f51d5c9a</anchor>
      <arglist>(const btVector4 &amp;c0, const btVector4 &amp;c1, f32 u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>transRGBA</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a62ce15067e1954e3c1a1d861bf1f3ca6</anchor>
      <arglist>(const btVector4 &amp;c0, u8 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>transRGBAf</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a6b41d149bb7c30b7a2cb0d49c23d35ab</anchor>
      <arglist>(const btVector4 &amp;c0, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>hsl</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa8eef5943b4d463a8567351856430131</anchor>
      <arglist>(f32 h, f32 s, f32 l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static btVector4</type>
      <name>hsla</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abdb6027ff19dfffaf2c93870fa8f0902</anchor>
      <arglist>(f32 h, f32 s, f32 l, u8 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformIdentity</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac7c83a1711e1dd159cb726413a23d690</anchor>
      <arglist>(btMatrix3x3 &amp;floats)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformTranslate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>abc1f08b9511cee6d0642bcb2aac75ce0</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btVector2 &amp;translatePos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformScale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a3bfccd760729d7c98a7e9e623cbcedc7</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btVector2 &amp;scale)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformRotate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a1bbc160b9aeb8c7706993f8656fe1d13</anchor>
      <arglist>(btMatrix3x3 &amp;floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewX</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a90c3fce67d0ee9de281a6411aa2a10da</anchor>
      <arglist>(btMatrix3x3 &amp;floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewY</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a3d6e9ec19d114e055f265f1dfcf52a52</anchor>
      <arglist>(btMatrix3x3 &amp;floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformMultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5420b08725cf40282afa2d1b68d02c3d</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btMatrix3x3 &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPremultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a40e8fc1b423372f8998589a47ad339e7</anchor>
      <arglist>(btMatrix3x3 &amp;floats, const btMatrix3x3 &amp;src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPoint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ad78b88b75910673697709669c9683524</anchor>
      <arglist>(btMatrix3x3 &amp;dstx, btMatrix3x3 &amp;dsty, btMatrix3x3 &amp;xform, const btVector2 &amp;sourcePos)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformIdentity</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a955b40e9d22eec4542d89d1f4d9b054b</anchor>
      <arglist>(f32 *floats)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformTranslate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a64d5d8707fd3ed3f9df794e55a3fb4af</anchor>
      <arglist>(f32 *floats, f32 tx, f32 ty)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformScale</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>adbae8989f55badf21f7e57436737d001</anchor>
      <arglist>(f32 *floats, f32 sx, f32 sy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformRotate</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab3b5c6780f1136e327b308197aba9908</anchor>
      <arglist>(f32 *floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewX</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab8f44613e057b3fd9cbcdd157e1b5c8b</anchor>
      <arglist>(f32 *floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformSkewY</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a60dd37a1e941ec7fb4de80d9715454d2</anchor>
      <arglist>(f32 *floats, f32 a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformMultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac7d1eaae232be02562435aab386470f9</anchor>
      <arglist>(f32 *floats, f32 *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPremultiply</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8c043563ce563a2579c2bd2c8be20b70</anchor>
      <arglist>(f32 *floats, f32 *src)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>transformPoint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab9769a6bdebbe227d5f81177a71d443a</anchor>
      <arglist>(f32 *dstx, f32 *dsty, f32 *xform, f32 srcx, f32 srcy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>degToRad</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a2b5ee48baf5aabe897cfc96d39927749</anchor>
      <arglist>(f32 deg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static f32</type>
      <name>radToDeg</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a429103045bb7a99da0335bbf315ead7a</anchor>
      <arglist>(f32 rad)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>renderFBOs</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a93c0a1a56854f78c78fc1f3bfb5d91e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>render</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a71d1e7e224fd723fae0bb65cbdd235c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NVGcontext *</type>
      <name>getContext</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac4de9e7e89d1d14b047e16f3fc3ba86a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addFBO</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>af9a191868f90ef56bcfabf2b9367264c</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFBO</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4baeb3d5641693f60c61f5b982cb159b</anchor>
      <arglist>(AbstractFrameBufferObject *fbo)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>btVector4ToNVGcolor</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aabaa1466701198abf39dd94cb9109b2f</anchor>
      <arglist>(NVGcolor &amp;color, const btVector4 &amp;vColor)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGcolorTobtVector4</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0f4a1e7b62c85ee6176e90963abc3dc3</anchor>
      <arglist>(btVector4 &amp;color, const NVGcolor &amp;vColor)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>JLIPaintToNVGPaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ac3b9b4cf14d03ba84789791fe171513e</anchor>
      <arglist>(NVGpaint &amp;nvgPaint, const JLIPaint &amp;njliPaint)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGPaintToJLIPaint</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a85633ec6492ef69686611f75c7453659</anchor>
      <arglist>(JLIPaint &amp;njliPaint, const NVGpaint &amp;nvgPaint)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>JLIGlyphPositionToNVGglyphPosition</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>acb08db72dc0fc77fdc5b5ba97d7861b6</anchor>
      <arglist>(NVGglyphPosition &amp;nvgGlyphPos, const JLIGlyphPosition &amp;njliGlyphPos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGglyphPositionToJLIGlyphPosition</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a13e6d9af851da8945d118b874eb5ab94</anchor>
      <arglist>(JLIGlyphPosition &amp;njliGlyphPos, const NVGglyphPosition &amp;nvgGlyphPos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>JLITextRowToNVGtextRow</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a63de1c69b918742522b6035270b6e635</anchor>
      <arglist>(NVGtextRow &amp;nvgTextRow, const JLITextRow &amp;njliTextRow)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGtextRowToJLITextRow</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a4ab78ad7055377d623e1cd28a4aca545</anchor>
      <arglist>(JLITextRow &amp;njliTextRow, const NVGtextRow &amp;nvgTextRow)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>NVGaffineTobtMatrix3x3</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a8a6886fa7797f7da9a84e61ec538a86d</anchor>
      <arglist>(btMatrix3x3 &amp;mtx, f32 *floats)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>btMatrix3x3ToNVGaffine</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>ab29244172f9d3cfeee6f7e1483ce7300</anchor>
      <arglist>(f32 *floats, const btMatrix3x3 &amp;mtx)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5d7db06d3f35981665798e3dd5f1ddb6</anchor>
      <arglist>(const WorldHUD &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldHUD &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a231ab1b0c3b57e374b906f55d4b5f5b7</anchor>
      <arglist>(const WorldHUD &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NVGcontext *</type>
      <name>m_NVGContext</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a08dbc205077c567128a8bc9c3d56fc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>f32 *</type>
      <name>m_matrixBuffer</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a35f13368cab9b866ea08ad9f0dc6cc13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; s32 &gt;</type>
      <name>m_images</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a5c267043670cc05af3e1b391af18cc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; AbstractFrameBufferObject * &gt;</type>
      <name>m_FBOvector</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a40102c8e6ba84985645c942f75481197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Camera *</type>
      <name>m_Camera</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a6ea154c63235e96fbd240cdd9c49dbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ButtonHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a19c07f330269ab1d6555234c92605d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>CheckboxHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a0aab48d603790a3ca2c4d7dd7ab9e519</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DropdownHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aff628788b98fce5e2ba538f3d1548af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LabelHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>aa8844d2831cd99e31cc82dd81b171f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SliderHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a601e2cab15ade2e7f8e72cd6b68c3b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TextboxHUD</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a043f6c225e4e72e1152c60f8c442fdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AbstractFrameBufferObject</name>
      <anchorfile>classnjli_1_1_world_h_u_d.html</anchorfile>
      <anchor>a74840235021f469fe6da7ae7d24c95ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldInput</name>
    <filename>classnjli_1_1_world_input.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldInput</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a89828d16ae9ac53f0eefb12449aafe52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldInput</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a742332c1db757e346d72bc5f71b9f1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a52568419faf8a25092f2261640598d63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ab2554a67aa2c53446395db34315a4d2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a69448c86610047b676f79439d7e57662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFinger</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a83e48cc5f90259fad76fe07d3a0fa908</anchor>
      <arglist>(int touchDevId, int pointerFingerId, int eventType, float x, float y, float dx, float dy, float pressure)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleFingers</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a18d58988cf07800960c5952e1f18d64c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleMouse</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a6c7011e9f8635a33b34afe24a8bc5b08</anchor>
      <arglist>(int button, int eventType, float x, float y, int clicks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleKeyUp</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>aa63d0257cecc72faedd01402d9f1df9c</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>handleKeyDown</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>acf44c953918ba64ec4aa0973fcc16ce2</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardShow</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ab184e4e367239a869380a20df466317b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardCancel</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>aebf5ac94a3d6c07fb30cad466c01a8c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyboardReturn</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a6eaa672bdd98abede6e8caa2faa0e61c</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a453864260fa99d407de3453e3bea109b</anchor>
      <arglist>(const s32 orientation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPortraitOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a07a0e30b12ae436d0cfecdedfedac7de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLandscapeOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a779e7f72cc5681b9500a1fbd8004109b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>s32</type>
      <name>getOrientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a416f740cf8583f2d03a682a2ddce46b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showKeyboard</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a903fab91e0b94cb0be9444b3095d0b28</anchor>
      <arglist>(const char *currentText)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DeviceTouch *</type>
      <name>popNextTouch</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>aa8e794dd446367b3130469c0a79a5e1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recycleTouch</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ad60c4859e00c667566906dbaeefd99b0</anchor>
      <arglist>(DeviceTouch *touch)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldInput</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a246e576e4b9214d96493fbb7ffd51455</anchor>
      <arglist>(const WorldInput &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldInput &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a2264836ad331a16cd3a729f3979020fb</anchor>
      <arglist>(const WorldInput &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; int, DeviceTouch * &gt;</type>
      <name>m_FingerDownMap</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ab84a5dd501740fc57be6241b4f3f0167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; int, DeviceTouch * &gt;</type>
      <name>m_FingerUpMap</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ac561e0ce2eda4b5a85599f93103b3094</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::unordered_map&lt; int, DeviceTouch * &gt;</type>
      <name>m_FingerMoveMap</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a10c8c7d66c9c87244aa93b058b91b748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DeviceMouse *</type>
      <name>m_Mouse</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a874f516fde66adeb88ed1af5f5d480ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DeviceTouch **</type>
      <name>m_TouchBuffer</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>a51dd3d566354398abd60c94fa040e208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_Orientation</name>
      <anchorfile>classnjli_1_1_world_input.html</anchorfile>
      <anchor>ae4e2eea7b14113c53cab85a63d44b985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldLuaVirtualMachine</name>
    <filename>classnjli_1_1_world_lua_virtual_machine.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aa8699ef660c3378db4bfbcc1914fc95a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a688270d6bda8e9da30ce87cdba0b83bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a8c957eaa6dffc96baccfa2d02e3f9bcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a59bdb7db8ae46e9bac0f928cb5115499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a2103a96c08471f07dda2d3b118780018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStack</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a64ad43f3f5c5ce88f83a399116be7851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadFile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>adc172de3b59b78472ff5867f5e16041c</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadString</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ab7d712b7c1b78da1f32e70791adc1ac2</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doFile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a859edc6a83d71fec3722ad76313eef43</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>doString</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a56e072d74d6c9810533e395ae44ec49c</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a267ae71c6d3064e2baf0ac9e48e4ec24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a5d04b69a8ca98a5e77ec1a03abd6ece1</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af9efb7780458024e60c886b5c30cc594</anchor>
      <arglist>(const char *code, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a1e20adef1ec977bc52e3343320ac7ff6</anchor>
      <arglist>(const char *code, s32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a8e4cfb46cfc326f39c95f87abf1ed570</anchor>
      <arglist>(const char *code, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a063c843476fae634bfa3b37341bf6bc7</anchor>
      <arglist>(const char *code, const Telegram &amp;tele, bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a2bf26f519cdd10cded878aeb2bdf1f98</anchor>
      <arglist>(const char *code, Scene *scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af9efd06a3f45642e82f7f5089518a4d1</anchor>
      <arglist>(const char *code, Scene *scene, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a6fa89f17cc97432e1bbbad2a94d93eb8</anchor>
      <arglist>(const char *code, Scene *scene, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a5f84df3f3b820cf49bd362285adb5d7c</anchor>
      <arglist>(const char *code, Scene *scene, const Telegram &amp;tele, bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aeaf2624365c5c37dd5d90d7c9ab6d6a4</anchor>
      <arglist>(const char *code, Node *node)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af224a80d62b53a01e22e64a9813af3c9</anchor>
      <arglist>(const char *code, Node *node, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a1ffc2b1e696b6c1a2d5955eaeca22d48</anchor>
      <arglist>(const char *code, Node *node, const Telegram &amp;tele, bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aa8c117a3268c12bee71d31be64a877d9</anchor>
      <arglist>(const char *code, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>afd80dd6a43e8f7579ee9cd91ab2dc5e2</anchor>
      <arglist>(const char *code, DeviceKey **keys)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ab0a3f94a9fe51d41d8c8cef35c6295e5</anchor>
      <arglist>(const char *code, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ae307c15aca8546f2df15a38514073b58</anchor>
      <arglist>(const char *code, const DeviceMouse &amp;mouse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aae3f6a29e70b136722d01b316220bee8</anchor>
      <arglist>(const char *code, Scene *pEntity, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a2ea566a1d2d4ad3c6b817e5e2d408b8f</anchor>
      <arglist>(const char *code, Scene *pEntity, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a30f05b73d451fc58e5e64263a4de58f7</anchor>
      <arglist>(const char *code, Scene *pEntity, const DeviceMouse &amp;mouse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a21227c3230633061ac2cc99a05c41e4e</anchor>
      <arglist>(const char *code, Node *node, Node *node2, const btManifoldPoint &amp;mani)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a2b0155a6ae5dc65eea24fef0bac79821</anchor>
      <arglist>(const char *code, Node *node, Node *node2, const btDispatcherInfo &amp;mani)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a0c9cac6960558de8c59c03f331c00afc</anchor>
      <arglist>(const char *code, const PhysicsRayContact &amp;rayContact)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af58e380cbfb31f9b0628dacbd528a10f</anchor>
      <arglist>(const char *code, const btAlignedObjectArray&lt; njli::PhysicsRayContact *&gt; &amp;rayContacts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a104f43ff49f5478040eb592686cca9fa</anchor>
      <arglist>(const char *code, s32 width, s32 height, s32 orientation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a02bcf617fdf1b7958846e585e870506e</anchor>
      <arglist>(const char *code, Action *action)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a4fce503e637d2425c53e9e6afd486e02</anchor>
      <arglist>(const char *code, Action *action, f32 num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a177236bafc9183342e861ac9595c05be</anchor>
      <arglist>(const char *code, Node *pEntity, DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a5482e7a538b9456f67d247df309093e9</anchor>
      <arglist>(const char *code, Node *pEntity, const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a3e51d4df76d364b8affa254b1cce2ee6</anchor>
      <arglist>(const char *code, Node *pEntity, const DeviceMouse &amp;mouse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ad12a6636f0f41cdf9bff6b5db1862f8d</anchor>
      <arglist>(const char *code, Node *node, const char *str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ad0fbb36053be2f50906af392d3d3f378</anchor>
      <arglist>(const char *code, const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ad08f708d623dbd72a3a57768c2857eaa</anchor>
      <arglist>(const char *code, Node *pEntity, const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>execute</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a5a4a0d3957888c3095c691a7a4731599</anchor>
      <arglist>(const char *code, Scene *pEntity, const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMaxNumber</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aec42f43252d57dc00fa8a40ea18ebdfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinNumber</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a4674a9aa6bfac9659dde91c205fe5f11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>adafe224987a62685972c4ee97a3e9ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compileString</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aa1e76cc8b225a56fc59f095ca08cedc5</anchor>
      <arglist>(const char *code)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compileFile</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a6a254a4bfca013863e429cc0189145c9</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af42ee292e12ae835a77eee13a1fb4c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unInit</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>af32f979aa34ff932fc1a358e3fcd44c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>error</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aec9489519647fa9080f40a233ed03b70</anchor>
      <arglist>(const char *description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getError</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a3656304f995527d8888ad13d98770108</anchor>
      <arglist>(const char *code, int error)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>lua_State *</type>
      <name>m_lua_State</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>abe1c0bd72cd6dc032a3c52886bf3f920</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldLuaVirtualMachine</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ae1cb82578d5b11df857c605468bb539f</anchor>
      <arglist>(const WorldLuaVirtualMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldLuaVirtualMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aad84aef1b87d168be779005926e412d7</anchor>
      <arglist>(const WorldLuaVirtualMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>lstop</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>abd4e5bf538e5f1a0ad8d6309b199d4a4</anchor>
      <arglist>(lua_State *L, lua_Debug *ar)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>laction</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a84c29e3d8208c634419d1974c63ad245</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>msghandler</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a3bf7729fa29a8e83715d34aa2332bdfd</anchor>
      <arglist>(lua_State *L)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>docall</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a0a8abcf8b42eec41fa76dcaba191fbda</anchor>
      <arglist>(lua_State *L, int narg, int nres)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>l_message</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>aec5b70c9d15f38ca79a5f2a803152196</anchor>
      <arglist>(const char *pname, const char *msg)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static std::string</type>
      <name>m_previousMessage</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>ac786f57d118424a273a1e04f9a0d6c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static lua_State *</type>
      <name>globalL</name>
      <anchorfile>classnjli_1_1_world_lua_virtual_machine.html</anchorfile>
      <anchor>a510bd0513272a37d5837555719f658de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldResourceLoader</name>
    <filename>classnjli_1_1_world_resource_loader.html</filename>
    <base>njli::AbstractObject</base>
    <class kind="struct">njli::WorldResourceLoader::FileData</class>
    <class kind="struct">njli::WorldResourceLoader::ImageFileData</class>
    <member kind="function">
      <type></type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a0bdde94c5d76a1bba1f91980a5e81582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a47f64f7498c3620740efb3e15ba89a92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ab568027aba2b36f2bdf12db437b5500a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a71de9ddba0101505458834f0fffba6b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aceb532e164be0cf0cc7d6ec6e96dcaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>dataPtrSize</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a3f3751b55c4da00b6ec0fc6cad5cae9c</anchor>
      <arglist>(const char *filePath) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ada8da80bfd97fbec5be2f0ba1efe0fa0</anchor>
      <arglist>(const char *filePath, Image *image)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aeeb978f3bd043a6647584f223776525c</anchor>
      <arglist>(const char *file, ParticleEmitter *emitter)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ac1a793a4a100afaf8a2a1e8c09809b06</anchor>
      <arglist>(const char *vertexFile, const char *fragmentFile, ShaderProgram *shader)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ae4ae9a2915ebddbabfd72cf927b0afee</anchor>
      <arglist>(const char *file, Sound *sound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5e5f9156810ac9bad5e76a81868f29d8</anchor>
      <arglist>(const char *file, Light *light)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a9a65176315945a2201c160ca0df35edd</anchor>
      <arglist>(const char *file, Geometry *geo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aace00d44c99e64510a75ac65a19178aa</anchor>
      <arglist>(const char *file, Font *font)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5841d6c7619db6821d2bad70dc34bd2b</anchor>
      <arglist>(const char *file, Xml *xml)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>af27a57867941d659a2b497656b3e6b42</anchor>
      <arglist>(const char *file, JsonJLI *json)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a8ea241bd485254b9edf6d3a32b1532db</anchor>
      <arglist>(const char *file, Material *material)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a97c72c0dc49dc9be8ec668fbbfbcf9a0</anchor>
      <arglist>(const char *file, Skinner *skinner)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a46e21edb3dd2513f4fb06c2ccce908e5</anchor>
      <arglist>(const char *file, Camera *camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aec886dbf078e7880babb4b678a31d030</anchor>
      <arglist>(const char *filePath, std::string *content)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unLoad</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a565f073cdac67831e15fa9020da10012</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unLoadAll</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a86cdad587fb6ef372c4dcac741a5fa73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileData *</type>
      <name>loadFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a4904946c60cf5f1dc54b98b902d72f0a</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImageFileData *</type>
      <name>loadImageFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aba1ff910a058021bf41018e8c27d4bc4</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLoaded</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a1a1d58baf3b8d4fa094d565a795265f7</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>njliFileType</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a1b95c427bca6bf7cbaf0ae7ee083d744</anchor>
      <arglist>(const char *file) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileData *</type>
      <name>addFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>afbb6af85a0262734c5fd0b78461bde82</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ImageFileData *</type>
      <name>addImageFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a7b630b94f3d5b5ee3b599e1585e51dea</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileData *</type>
      <name>createFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a0563ad167a4c6552f0535ae191e6e2a0</anchor>
      <arglist>(const char *filePath, const void *buffer, s32 size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ac3a031dc592f5907a2e7579c4a98739f</anchor>
      <arglist>(const char *filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FileData *</type>
      <name>getFileData</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>ab2be064bf5d8defdf6838737ee54ac57</anchor>
      <arglist>(const char *filePath) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; std::string, FileData * &gt;</type>
      <name>FileDataMap</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5a3b461a48cb2119251464a5e117533d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; std::string, FileData * &gt;</type>
      <name>FileDataPair</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a4c3e96bc649a040e1c74c71e5fab3b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldResourceLoader</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>aca0a853c5159760d6d37cad0bbad7363</anchor>
      <arglist>(const WorldResourceLoader &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldResourceLoader &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a1c317a6c19a9bbd4e578a1bc70784d51</anchor>
      <arglist>(const WorldResourceLoader &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FileDataMap</type>
      <name>m_FileDataMap</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5ad02c4c153927307e320b0634b8e989</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Image</name>
      <anchorfile>classnjli_1_1_world_resource_loader.html</anchorfile>
      <anchor>a5d6b29a75202aeeaef335faca9eb55e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldSocket</name>
    <filename>classnjli_1_1_world_socket.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldSocket</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a48206691f6d67e6d2cadd5871236e688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldSocket</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a11a9b35e1abfa429eaf2797ebcc5e06e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a5a98ed3511ee0c2784ad14e36a6a6fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a497c7bba3a7001fb1ad2f8c98768d9eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a6a0a48963031efd27782ea8c6d256663</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>connectJLI</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a9fa97067d750876046d8a0b79eaa2708</anchor>
      <arglist>(const char *ip, u16 port)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a72f3fbc4ed89cd5fc2c98e02e85577a0</anchor>
      <arglist>(const std::string &amp;delimeter=&quot;root&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ae4161c8d9db7f9b53dd855c0313b5d18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>popMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ab748f606af5d49786785a5d9f3b9fa97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendMessage</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>aeb35c51f861acc84da71dd68a09fd2c2</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnectJLI</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>af3e1664b23b7ded9a695c51140a8c209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ae3c8b6487d5edb322a93bf9204c287a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>socketSetOpt</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ae15dc1f2db17e7ef5faccc4e6ad335e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>WorldSocket</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a6c5aa4b415b1260606c4c81f2aad03e6</anchor>
      <arglist>(const WorldSocket &amp;)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>WorldSocket &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a1a085ac09dc8bd9504fa4c03b1f4d86d</anchor>
      <arglist>(const WorldSocket &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s32</type>
      <name>m_sck</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a6535269e736f06ed9464a85e1ee94ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct sockaddr_in</type>
      <name>m_sck_addr</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ab8eaf650ed60181c5984c50190967952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>s8 *</type>
      <name>m_buffer</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>a20a56b50c5086151d1ceb67034ae4cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>m_isConnected</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>afc58ced137ddce637734bb7b67a8accb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>m_SocketData</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>ad139dd74c61b2663bfb08861cc51f1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::queue&lt; std::string &gt;</type>
      <name>m_MessageQueue</name>
      <anchorfile>classnjli_1_1_world_socket.html</anchorfile>
      <anchor>adb76e0e0966e72716f105875633a727a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldSound</name>
    <filename>classnjli_1_1_world_sound.html</filename>
    <base>njli::AbstractObject</base>
    <member kind="function">
      <type></type>
      <name>WorldSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>aed4012c3031f6f1b8fdf0c3f9ebc37b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WorldSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a2fb62ddebed62016ca546b1f496bac17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const s8 *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>af737672a862c91dee7158f09ee646549</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>afa9fb24ca771bb477fdc673668c110c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a13ce9a50994719130f8492017f82b887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePause</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a48829ae6317cd2476854d36417f09b5c</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a97885caaa2588661c1339788d8196d89</anchor>
      <arglist>(const char *path, Sound &amp;sound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a548876efce189ddf088d503e41d6e7f6</anchor>
      <arglist>(const char *fileContent, u32 file_size, Sound &amp;sound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unLoadSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a7911347b81467da066b5f8f21767a7f7</anchor>
      <arglist>(const Sound &amp;sound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a30ef05c01a98642bb0b86f77c86a46b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>playSound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a6d5b69217a2ad24faca15ade9c7b5c63</anchor>
      <arglist>(Sound &amp;sound, bool isPaused=false)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Sound</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a50914f77c7cf4fb97616c898c5291f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_sound.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldState</name>
    <filename>classnjli_1_1_world_state.html</filename>
    <base>AbstractState&lt; void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a0f6f93f94e50e06abc16b65c5e92ecef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ae671bdd4b655e47482bc5d418e51b097</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>af6ff6a2f1813d2727014c3632be42add</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a4253a21b944bca8de133d3a4cad0112e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ab33fef32f2cdf0e1a99bc94939f17e03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enter</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ad126287c45283df721b113c6a08a00f9</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a7390c8af937d9be5f95e33e300321171</anchor>
      <arglist>(void *, f32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>exit</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a567bac6ea9dc0445e0cb7a14a8a2e271</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>onMessage</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a945df2e0dac944feb4023987b9bbe874</anchor>
      <arglist>(void *, const Telegram &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a965f7226e2cbe97c315cdab6000ad181</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a62fe7209ccfa24f32533ba66463532bd</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ab63260d4fe164df5218bb069bb0a70c1</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a22b207cf794a74c4cccb41c5ba893a26</anchor>
      <arglist>(DeviceTouch **touches)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchDown</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a9b50810d0cb3f5d756957b549c160729</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchUp</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a2fdcb6959ad9805488ebb591919945bb</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchMove</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>aed77904328c681d57276d53b1fecaaae</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a0c9dd24bf1092050da27555c22419f8b</anchor>
      <arglist>(const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseUp</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a1e23ffe831eee64602947829de91db74</anchor>
      <arglist>(const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseMove</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a98672e3be284b2d67ec16f6584b2b397</anchor>
      <arglist>(const DeviceMouse &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyUp</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>aae2e57b0dc2729fea3a20359deea8279</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>keyDown</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a92e70a36e927a44a8eefc6039505ed24</anchor>
      <arglist>(const char *keycodeName, bool withCapsLock, bool withControl, bool withShift, bool withAlt, bool withGui)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>touchCancelled</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a2c8b22b216dc3652fe8f5185365a6a20</anchor>
      <arglist>(const DeviceTouch &amp;touch)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a1db73165c58d1b8d509129c18346b457</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ae8c65d0545df866ff59c6f197aa42707</anchor>
      <arglist>(WorldState **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a4314a91c41dcb4b3418cc6e077c9b191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a863bd5c20a3d3f9f62844ecf2c911099</anchor>
      <arglist>(const WorldStateBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a4ba8555951541584e30d1017f3f67a6c</anchor>
      <arglist>(const WorldState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldState *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a626f51bba8f527cfeaafdfa39ad02a5e</anchor>
      <arglist>(const WorldState &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a0dda0636635a1086b85a04bba007e6e2</anchor>
      <arglist>(WorldState *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ad8dd1637df165f9886d11c3e8b6d1cb7</anchor>
      <arglist>(WorldState &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a2180d81af9c682241e46530078272537</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>aa79b71b3516c96515eef6af9b8606286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>afc6c9395d05e594f76653bbeb2f7071b</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a25d2acb92950ac2f0e2aa0a1db1ead88</anchor>
      <arglist>(const WorldState &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>ab1d6ddaa5a0e87c155772346996e167a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldState</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a71ed8f1180c5c6c0fe0f7f827f150d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldState &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>a512bad5b9134e2e54361f6fadd3781ed</anchor>
      <arglist>(const WorldState &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldStateBuilder</name>
    <filename>classnjli_1_1_world_state_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a926bf582811a70861ca6e1f1ffc673f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>ad4dc15a533f9829df174aacd4f7283b2</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>ad66b2b539e4c464ab42f933f7ee377eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>abc990ca34261391470dcde9253746cc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>ae6385f56dc9da2bc22ba5016b7010b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a465920e65ffdad6b25ba5b17c2f7cf5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a5acea112eba6514219c5be05ea03664b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a7204d3b1c14985240e80902f4a701412</anchor>
      <arglist>(WorldStateBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a171cf071f02204ca6a87eb6a417da4f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>aa5ab40b1e0b5fbb41fa8d418dac235a9</anchor>
      <arglist>(const WorldStateBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>acfd409fa70a10bdcd8d7d9525fe98574</anchor>
      <arglist>(WorldStateBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a44a7c4e10e661e24bef7997e927af8ad</anchor>
      <arglist>(WorldStateBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a8aa60769d6ddf964215171b23ac08d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a493f158507353962abf95cc07ae4b415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>a36d3be2c287ef79a893d1edd703f32d9</anchor>
      <arglist>(const WorldStateBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>aa3dd8d7b48312dfa0baf6f6b6acf4746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateBuilder</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>aff9a1a80e2ef199ccb713b81a5539bc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldStateBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>adbe45926b43aca70c642a3ac818c0783</anchor>
      <arglist>(const WorldStateBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldStateMachine</name>
    <filename>classnjli_1_1_world_state_machine.html</filename>
    <base>AbstractStateMachine&lt; void &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a9ac2e728f8e172cf1f81dfea5870343d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a5c007981ac52707f7474e22b0b59c29a</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a4a0b8431c122f5cb325b3f4e1d4a10cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ab2179e3368a673e88709790a0a6e4bc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a5649cb43e236e28b9f3c87e8325e96c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a9cd827ef35493760200956179fd35bcd</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a45ee6a98dd7369769fede029d6e09e96</anchor>
      <arglist>(WorldStateMachine **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a2ea736b13cbb1aa35788809869a480d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>aa57a3c28f3c169d27affa3a515539734</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>abea6c586a4d932fcecfb18ac6aa657ca</anchor>
      <arglist>(const WorldStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachine *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a5681a372a589ecaa3fb096b9fdcafc2e</anchor>
      <arglist>(const WorldStateMachine &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ab9dd49b28f0217cb0d67f30b88c692e6</anchor>
      <arglist>(WorldStateMachine *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a7d998f8840f82b74deaa564aa89d7d44</anchor>
      <arglist>(WorldStateMachine &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a89f24e7eea9edc502aa7a91549c72adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a80041da9020fb96c011424d51348f32e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a9b37c82c6bd19265ec08cfacdc6d91b2</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>af9a9e52e10ffa0e657cd2a3a7f5f6660</anchor>
      <arglist>(const WorldStateMachine &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>ab6b55bb83f3296f134b5855287782d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateMachine</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>aa943f77c31d49ba58aa92499086502d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldStateMachine &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a53e7a9082c4e0beff0f9c9e62f3b666f</anchor>
      <arglist>(const WorldStateMachine &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>World</name>
      <anchorfile>classnjli_1_1_world_state_machine.html</anchorfile>
      <anchor>a7b4bcdf992c21ae83363f25df05b1d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WorldStateMachineBuilder</name>
    <filename>classnjli_1_1_world_state_machine_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>aa86c5d3ef13e1cfc652b69ef927ce1e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a46fce2e29eb63256187533c4abb4bb53</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>adc1828ed4b64977e2c892fa1559e5f3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a23c20795eb84296c30fc813cb901f8e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a6e030fedf2c31bc287545aacc226dce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a276290caadbb9b04f1e27665a19c9e69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachineBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a885f1bf64c1b4478218598e3a36d3061</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a90956bf0dd6e90e79fe29336335a75bf</anchor>
      <arglist>(WorldStateMachineBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachineBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>ac2aed386f8ffef5a860894d455b0b9e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static WorldStateMachineBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a13011cd872e644fcf3982f21a59bbd5f</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>aca5fe85bd19979148c33b16f7b69c811</anchor>
      <arglist>(WorldStateMachineBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>ac0acd638fc8a471e9553a1b9cbedc2aa</anchor>
      <arglist>(WorldStateMachineBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a0306d9106c572c98b3adca2850d6e528</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a335dc89d4e7d99ba9c8bb4eb83b0d690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a8af3314f1c7bbb35ffc91fcca6fb98a3</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a87c06b98978431b165f3e5d2a95a86d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~WorldStateMachineBuilder</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>ae8e190fa3a0a4e749f7f1b9ae9280c12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>WorldStateMachineBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>a33cabbf4b869f923dbb385a99ef8bf9f</anchor>
      <arglist>(const WorldStateMachineBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_world_state_machine_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>njli::wrap</name>
    <filename>structnjli_1_1wrap.html</filename>
    <member kind="function">
      <type></type>
      <name>wrap</name>
      <anchorfile>structnjli_1_1wrap.html</anchorfile>
      <anchor>a2d6762e15815bb762e1da6ac8c4299c2</anchor>
      <arglist>(const Thread &amp;f)</arglist>
    </member>
    <member kind="variable">
      <type>Thread</type>
      <name>ins</name>
      <anchorfile>structnjli_1_1wrap.html</anchorfile>
      <anchor>a642a7dd725d24a5c0a540c8d6158bbb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WrapperOgg</name>
    <filename>classnjli_1_1_wrapper_ogg.html</filename>
    <base>njli::ISoundFileWrapper</base>
    <member kind="function">
      <type></type>
      <name>WrapperOgg</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a48f5522a7407346d58fa69c57ffbd369</anchor>
      <arglist>(int minDecompressLengthAtOnce=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WrapperOgg</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a0ca14ff5c8de2e1b024081cd4ee36900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFromMemory</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a3ba50f99487d489f0b495cfe7fa77811</anchor>
      <arglist>(char *data, int dataSize, SoundInfo *soundInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFromFile</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a315af49a4e484e1cb8689a11dfe9db2f</anchor>
      <arglist>(FILE *f, SoundInfo *soundInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DecompressStream</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a47dbddbb35d013d8250adc8e666c4fdd</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer, bool inLoop=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DecompressAll</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>ad33e7975379d1e4f5c15944370a4cf47</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ResetStream</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a28d1964b0a03208ebeb30e09ef625c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Seek</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>adc4b8116a89e8eb48f65276ec46e8dd2</anchor>
      <arglist>(size_t pos, SEEK_POS start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>GetCurrentStreamPos</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a90e11afb177a4085c5925af77436cd91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>GetTime</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a0fdf09ad6e5bde3de915140c39698a97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>GetTotalTime</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>adb921d96c9d60b6539fbc05e08989ffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OggVorbis_File *</type>
      <name>ov</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a295c445a708ee989fdc9e4baaf8aa998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ogg_file</type>
      <name>t</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a38f58ccb93324aaf7aca3aa77c810efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>bufArray</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>aa353b7ba5e112e1160689397d0a90de1</anchor>
      <arglist>[OGG_BUFFER_SIZE]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minDecompressLengthAtOnce</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>ae96fb224e50879ef50c3021fa09ea890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>seekable</name>
      <anchorfile>classnjli_1_1_wrapper_ogg.html</anchorfile>
      <anchor>a51417abb4c7c95e860b92a95146e7b2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WrapperRaw</name>
    <filename>classnjli_1_1_wrapper_raw.html</filename>
    <base>njli::ISoundFileWrapper</base>
    <member kind="function">
      <type></type>
      <name>WrapperRaw</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>ad512917755c10182cb00cb0f398e58ff</anchor>
      <arglist>(SoundInfo info, int minDecompressLengthAtOnce=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WrapperRaw</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a495e13205f68e27f66c6bcc3ff3ec0b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFromMemory</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>aca473a80ec7a02e3df6a74b171c2d1fb</anchor>
      <arglist>(char *data, int dataSize, SoundInfo *soundInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFromFile</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a9286adcc339118eac5d143ad73b646a7</anchor>
      <arglist>(FILE *f, SoundInfo *soundInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DecompressStream</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a25b25679205b828a096535b40f3082be</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer, bool inLoop=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DecompressAll</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>aa3e0d88a80c5af562903e445ed2a863e</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ResetStream</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>ab48755f1c7d217737288bfe4c6320c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Seek</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a9ffac2e6ec0dca3b9592fba9e29ba3f4</anchor>
      <arglist>(size_t pos, SEEK_POS start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>GetCurrentStreamPos</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a66e31271020e3b7e7c48ecda73ed0351</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>GetTime</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a1b236f8ef4b7bffe5b5a68d29c855cf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>GetTotalTime</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a2aa8be2aa5e292b3375c1a92f007592c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReadData</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a0cb793500d35360b2c404e2d8f20ced4</anchor>
      <arglist>(void *dst, size_t size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>raw_file</type>
      <name>t</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a7ba78d8632dbe232fd0daa2e95b4aa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>bufArray</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a3ab92988abb19e2d2c7ec7adf6766829</anchor>
      <arglist>[RAW_BUFFER_SIZE]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minProcesssLengthAtOnce</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a3e14e31378663644b64aba5e9c70de89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SoundInfo</type>
      <name>info</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a777c10f85fa37e26f01338e5fa8bf938</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curBufSize</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>ab031228efdb332e48e741564b47c962e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>u64</type>
      <name>remainDataSize</name>
      <anchorfile>classnjli_1_1_wrapper_raw.html</anchorfile>
      <anchor>a99823dc02d8302ee759a206ac3263a6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::WrapperWav</name>
    <filename>classnjli_1_1_wrapper_wav.html</filename>
    <base>njli::ISoundFileWrapper</base>
    <member kind="function">
      <type></type>
      <name>WrapperWav</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a53dde3ca2091dae93b2153f32dba6c4d</anchor>
      <arglist>(int minDecompressLengthAtOnce=-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WrapperWav</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a8b4fecfd6d212c0df75bf5fa34239c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFromMemory</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a93b83be038f6d2bc269720b0fa91d841</anchor>
      <arglist>(char *data, int dataSize, SoundInfo *soundInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>LoadFromFile</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a43b8306e554b224968ef436020416765</anchor>
      <arglist>(FILE *f, SoundInfo *soundInfo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DecompressStream</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>aa84e533c55261000594f1889f60d1ef5</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer, bool inLoop=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>DecompressAll</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a530b83b423d29c785889f9783ab08b9b</anchor>
      <arglist>(std::vector&lt; char &gt; &amp;decompressBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>ResetStream</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>ab24f4e589680e0abe321e105f01468bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>Seek</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>aa75e013ec22ca84b54ee33428dcd3d09</anchor>
      <arglist>(size_t pos, SEEK_POS start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>GetCurrentStreamPos</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>ac7f741a2d2db3126eec69b64eb2cacfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>GetTime</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a0cfe149e0e1089f153401f3c80a222df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>GetTotalTime</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>ae281e2ac23707e6eb2c1f2e7fcb58881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>ReadData</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a8e5df03af7dc8f841c9e316caa00a13d</anchor>
      <arglist>(void *dst, size_t size)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>wav_file</type>
      <name>t</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>ad32ca04f4229e8b702a427dca72b9957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>bufArray</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a9b66f4b65280f952349f526c7012e9b8</anchor>
      <arglist>[WAV_BUFFER_SIZE]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>minProcesssLengthAtOnce</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a89b4f2b0d96ed110de07c17f395b40b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WAV_DESC</type>
      <name>desc</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>abcaa318c09e942ca3a3bad1e34187d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WAV_FORMAT</type>
      <name>format</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a7ae72bc3d456ddcf99ed6e78d05c6ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>WAV_CHUNK</type>
      <name>curChunk</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>af0615f38310011eed743fbeab3356f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>curBufSize</name>
      <anchorfile>classnjli_1_1_wrapper_wav.html</anchorfile>
      <anchor>a4915a4654f047eedb569dbe03b73f1f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::Xml</name>
    <filename>classnjli_1_1_xml.html</filename>
    <base>njli::AbstractFactoryObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a369cf0f26ac1c8e18faafca9e66e60bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a02b1771a550fcb07c7f0e887033dd7e4</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>abc7ce0d0b196b029860dc0ef23b452ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a45d39d1ce5352ecd046a4bc2ab44895c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ad48a08ea1d2977ea2da45afc3e04d78d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a458f6f226b134cee2bd70e3592a0988b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>aee3fb8e0b6eb5c7c9d520713d54756c0</anchor>
      <arglist>(Xml **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a63ccb1a4b1a10e343a5a32786ff57fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a6c1601d45fcec911477a41f2288d3729</anchor>
      <arglist>(const XmlBuilder &amp;builder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ac52e78b6e638a84fd79179d4d27371f8</anchor>
      <arglist>(const Xml &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Xml *</type>
      <name>copy</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>adc452dbd5211848fb2c09086d0ba9af3</anchor>
      <arglist>(const Xml &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a1ee896e383ff9e96241ceada752a8324</anchor>
      <arglist>(Xml *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>abb4d1b9b986a184ce29d4d9a00269f27</anchor>
      <arglist>(Xml &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ad75f9b9d5bc5bce8a721b9aa550b7bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a15ff5ffe5ebd69a06625f9fefcc02ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a8986e8e3e9835d76295a9834a66a58fa</anchor>
      <arglist>(const AbstractBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>abda0af05e4c99f0c0826e2b4684a21f2</anchor>
      <arglist>(const Xml &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>ac73a8aacfe51e9bf35daca96d5bbf11f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Xml</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a521d51fdb074abffaa1b1627a034b59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Xml &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>a27ce4467c6b7fde48d622df0f1bb9c8e</anchor>
      <arglist>(const Xml &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_xml.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>njli::XmlBuilder</name>
    <filename>classnjli_1_1_xml_builder.html</filename>
    <base>njli::AbstractBuilder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>calculateSerializeBufferSize</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a79be4a310c8f7c50a0155da4623d74b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>serialize</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>acddd1c911701604cf5f7ea135243f182</anchor>
      <arglist>(void *, btSerializer *) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual u32</type>
      <name>getObjectType</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>ac067a387404bdbbe3229104d06c990ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>abc73a585be6b58a8e7d066bb513eee8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual s32</type>
      <name>getType</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a1ae06385e2b3ad8ba50faf83aa907805</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a0e61c0c42fa7c15f6f9f698a2aab5b1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlBuilder **</type>
      <name>createArray</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>aed042470b666dc03e23109134351b06b</anchor>
      <arglist>(const u32 size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyArray</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a40786e323c4f939eeb024002bad0e156</anchor>
      <arglist>(XmlBuilder **array, const u32 size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlBuilder *</type>
      <name>create</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a826d245450f9ea12dac8e1ebabefcb3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlBuilder *</type>
      <name>clone</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>adf09f255cd5bbee5c8d44162c18fc9f9</anchor>
      <arglist>(const XmlBuilder &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroy</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a93f26e2678915d16446b560854d104ce</anchor>
      <arglist>(XmlBuilder *object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>load</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a8d562b0880419cbca7768aff257bd07e</anchor>
      <arglist>(XmlBuilder &amp;object, lua_State *L, int stack_index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static u32</type>
      <name>type</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>ae82ac8b0e656f4f212d447ef1e9c3526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>XmlBuilder</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>aa62b57286a7d073acc7e14c92fd976e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>XmlBuilder</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a94c70f4b615a9665c1ee0311b1e1f107</anchor>
      <arglist>(const XmlBuilder &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BT_DECLARE_ALIGNED_ALLOCATOR</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>ab4670b7871d43bdbbd5e1c63f8d54b58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~XmlBuilder</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>a25ead09286e4f9b32867bdeb24b77665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>XmlBuilder &amp;</type>
      <name>operator=</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>aced0185f989f50ba3dcfdea93818dcd2</anchor>
      <arglist>(const XmlBuilder &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>WorldFactory</name>
      <anchorfile>classnjli_1_1_xml_builder.html</anchorfile>
      <anchor>acb96ebb09abe8f2a37a915a842babfac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Zio</name>
    <filename>struct_zio.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>n</name>
      <anchorfile>struct_zio.html</anchorfile>
      <anchor>a7e086aa8f8c620f46c4697dc14c186ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>p</name>
      <anchorfile>struct_zio.html</anchorfile>
      <anchor>a14ac73a363603164c07329d14063221b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_Reader</type>
      <name>reader</name>
      <anchorfile>struct_zio.html</anchorfile>
      <anchor>a543c6a2239f478a708e4549ee4453b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>struct_zio.html</anchorfile>
      <anchor>a78d84c6b39ee04b43be6638f2887915d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lua_State *</type>
      <name>L</name>
      <anchorfile>struct_zio.html</anchorfile>
      <anchor>a605b7ca7868887491196af34d9b7d765</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ImGuizmo</name>
    <filename>namespace_im_guizmo.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>OPERATION</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRANSLATE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1a87d39725b76eb0cdd7d8803632faba68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROTATE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1a002a0a905af7f2fd542df7d6e34c1d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SCALE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a3559e88fd6409ce121ee4d9847867cd1a17ec357fe247a9aa2d1f368353690fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MODE</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a555eafa3970d08a1afb7b47bce89d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a555eafa3970d08a1afb7b47bce89d05aaf0baed0c04cc42cc097e385019888fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORLD</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a555eafa3970d08a1afb7b47bce89d05aa0db6bcb67dbf7b93b609e4d142320421</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BeginFrame</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a2dfada1eb84fda54a892be444caf0588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsOver</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a258cf4380b3da155f7eb721542b50f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsUsing</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>ac9bdd0b810d82ed4fa06e0dd2d1f3cc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Enable</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a849497d6fd8adb2569adfa18c2841d77</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DecomposeMatrixToComponents</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a8cc3ef9e0b149b8276fe69817360ee25</anchor>
      <arglist>(const float *matrix, float *translation, float *rotation, float *scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>RecomposeMatrixFromComponents</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a70bc9423194e2ab58e351ea881126b17</anchor>
      <arglist>(const float *translation, const float *rotation, const float *scale, float *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DrawCube</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>acc60c99158253466671e9aac426f52f2</anchor>
      <arglist>(const float *view, const float *projection, float *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Manipulate</name>
      <anchorfile>namespace_im_guizmo.html</anchorfile>
      <anchor>a6b1cb04f6a6cacb5029c1163848a510e</anchor>
      <arglist>(const float *view, const float *projection, OPERATION operation, MODE mode, float *matrix, float *deltaMatrix=0, float *snap=0, float *localBounds=NULL, float *boundsSnap=NULL)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>njli</name>
    <filename>namespacenjli.html</filename>
    <class kind="class">njli::AbstractActionable</class>
    <class kind="class">njli::AbstractBuilder</class>
    <class kind="class">njli::AbstractClock</class>
    <class kind="class">njli::AbstractDecorator</class>
    <class kind="class">njli::AbstractFactoryObject</class>
    <class kind="class">njli::AbstractFrameBufferObject</class>
    <class kind="class">njli::AbstractObject</class>
    <class kind="class">njli::AbstractState</class>
    <class kind="class">njli::AbstractStateMachine</class>
    <class kind="class">njli::AbstractTransform</class>
    <class kind="class">njli::Action</class>
    <class kind="class">njli::ActionBuilder</class>
    <class kind="class">njli::ButtonHUD</class>
    <class kind="class">njli::ButtonHUDBuilder</class>
    <class kind="class">njli::Camera</class>
    <class kind="class">njli::CameraBuilder</class>
    <class kind="class">njli::CheckboxHUD</class>
    <class kind="class">njli::CheckboxHUDBuilder</class>
    <class kind="class">njli::Clock</class>
    <class kind="class">njli::ClockBuilder</class>
    <class kind="class">njli::CollisionResponse</class>
    <class kind="class">njli::CollisionResponseBuilder</class>
    <class kind="class">njli::ColorUtil</class>
    <class kind="class">njli::Cube</class>
    <class kind="class">njli::CubeBuilder</class>
    <class kind="class">njli::DeviceInputTime</class>
    <class kind="class">njli::DeviceKey</class>
    <class kind="class">njli::DeviceMouse</class>
    <class kind="class">njli::DeviceTouch</class>
    <class kind="class">njli::DropdownHUD</class>
    <class kind="class">njli::DropdownHUDBuilder</class>
    <class kind="class">njli::Font</class>
    <class kind="class">njli::FontBuilder</class>
    <class kind="class">njli::GameClock</class>
    <class kind="class">njli::Geometry</class>
    <class kind="class">njli::Image</class>
    <class kind="class">njli::ImageBuilder</class>
    <class kind="class">njli::ISoundFileWrapper</class>
    <class kind="struct">njli::JLIGlyphPosition</class>
    <class kind="struct">njli::JLIPaint</class>
    <class kind="struct">njli::JLITextRow</class>
    <class kind="class">njli::JsonJLI</class>
    <class kind="class">njli::JsonJLIBuilder</class>
    <class kind="class">njli::LabelHUD</class>
    <class kind="class">njli::LabelHUDBuilder</class>
    <class kind="class">njli::LevelOfDetail</class>
    <class kind="class">njli::LevelOfDetailBuilder</class>
    <class kind="class">njli::Light</class>
    <class kind="class">njli::LightBuilder</class>
    <class kind="class">njli::Material</class>
    <class kind="class">njli::MaterialBuilder</class>
    <class kind="class">njli::MaterialProperty</class>
    <class kind="class">njli::MaterialPropertyBuilder</class>
    <class kind="class">njli::NJLIGameEngine</class>
    <class kind="class">njli::Node</class>
    <class kind="class">njli::NodeBuilder</class>
    <class kind="class">njli::NodeState</class>
    <class kind="class">njli::NodeStateBuilder</class>
    <class kind="class">njli::NodeStateMachine</class>
    <class kind="class">njli::NodeStateMachineBuilder</class>
    <class kind="class">njli::ParticleEmitter</class>
    <class kind="class">njli::ParticleEmitterBuilder</class>
    <class kind="class">njli::PhysicsBody</class>
    <class kind="class">njli::PhysicsBodyGhost</class>
    <class kind="class">njli::PhysicsBodyGhostBuilder</class>
    <class kind="class">njli::PhysicsBodyRigid</class>
    <class kind="class">njli::PhysicsBodyRigidBuilder</class>
    <class kind="class">njli::PhysicsBodySoft</class>
    <class kind="class">njli::PhysicsBodySoftBuilder</class>
    <class kind="class">njli::PhysicsCloseContact</class>
    <class kind="class">njli::PhysicsCloseContactBuilder</class>
    <class kind="class">njli::PhysicsConstraint</class>
    <class kind="class">njli::PhysicsConstraintBuilder</class>
    <class kind="class">njli::PhysicsConstraintConeTwist</class>
    <class kind="class">njli::PhysicsConstraintConeTwistBuilder</class>
    <class kind="class">njli::PhysicsConstraintFixed</class>
    <class kind="class">njli::PhysicsConstraintFixedBuilder</class>
    <class kind="class">njli::PhysicsConstraintGeneric6Dof</class>
    <class kind="class">njli::PhysicsConstraintGeneric6DofBuilder</class>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpring</class>
    <class kind="class">njli::PhysicsConstraintGeneric6DofSpringBuilder</class>
    <class kind="class">njli::PhysicsConstraintHinge</class>
    <class kind="class">njli::PhysicsConstraintHingeBuilder</class>
    <class kind="class">njli::PhysicsConstraintPointToPoint</class>
    <class kind="class">njli::PhysicsConstraintPointToPointBuilder</class>
    <class kind="class">njli::PhysicsConstraintSlider</class>
    <class kind="class">njli::PhysicsConstraintSliderBuilder</class>
    <class kind="class">njli::PhysicsContact</class>
    <class kind="class">njli::PhysicsContactBuilder</class>
    <class kind="class">njli::PhysicsField</class>
    <class kind="class">njli::PhysicsFieldBuilder</class>
    <class kind="class">njli::PhysicsRayContact</class>
    <class kind="class">njli::PhysicsRayContactBuilder</class>
    <class kind="class">njli::PhysicsShape</class>
    <class kind="class">njli::PhysicsShapeBox</class>
    <class kind="class">njli::PhysicsShapeBox2D</class>
    <class kind="class">njli::PhysicsShapeBox2DBuilder</class>
    <class kind="class">njli::PhysicsShapeBoxBuilder</class>
    <class kind="class">njli::PhysicsShapeBvhTriangleMesh</class>
    <class kind="class">njli::PhysicsShapeBvhTriangleMeshBuilder</class>
    <class kind="class">njli::PhysicsShapeCapsule</class>
    <class kind="class">njli::PhysicsShapeCapsuleBuilder</class>
    <class kind="class">njli::PhysicsShapeCone</class>
    <class kind="class">njli::PhysicsShapeConeBuilder</class>
    <class kind="class">njli::PhysicsShapeConvexHull</class>
    <class kind="class">njli::PhysicsShapeConvexHullBuilder</class>
    <class kind="class">njli::PhysicsShapeConvexTriangleMesh</class>
    <class kind="class">njli::PhysicsShapeConvexTriangleMeshBuilder</class>
    <class kind="class">njli::PhysicsShapeCylinder</class>
    <class kind="class">njli::PhysicsShapeCylinderBuilder</class>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrain</class>
    <class kind="class">njli::PhysicsShapeHeightfieldTerrainBuilder</class>
    <class kind="class">njli::PhysicsShapeMultiSphere</class>
    <class kind="class">njli::PhysicsShapeMultiSphereBuilder</class>
    <class kind="class">njli::PhysicsShapeSphere</class>
    <class kind="class">njli::PhysicsShapeSphereBuilder</class>
    <class kind="class">njli::PhysicsShapeStaticPlane</class>
    <class kind="class">njli::PhysicsShapeStaticPlaneBuilder</class>
    <class kind="class">njli::PhysicsWorld</class>
    <class kind="class">njli::PhysicsWorldBuilder</class>
    <class kind="class">njli::Plane</class>
    <class kind="class">njli::PlaneBuilder</class>
    <class kind="class">njli::Rect</class>
    <class kind="class">njli::Scene</class>
    <class kind="class">njli::SceneBuilder</class>
    <class kind="class">njli::SceneState</class>
    <class kind="class">njli::SceneStateBuilder</class>
    <class kind="class">njli::SceneStateMachine</class>
    <class kind="class">njli::SceneStateMachineBuilder</class>
    <class kind="class">njli::ShaderProgram</class>
    <class kind="class">njli::ShaderProgramBuilder</class>
    <class kind="class">njli::Skinner</class>
    <class kind="class">njli::SkinnerBuilder</class>
    <class kind="class">njli::SliderHUD</class>
    <class kind="class">njli::SliderHUDBuilder</class>
    <class kind="class">njli::Sound</class>
    <class kind="class">njli::SoundBuilder</class>
    <class kind="class">njli::Sprite2D</class>
    <class kind="class">njli::Sprite2DBuilder</class>
    <class kind="class">njli::SpriteFrameAtlas</class>
    <class kind="class">njli::SpriteFrameAtlasBuilder</class>
    <class kind="class">njli::SteeringBehavior</class>
    <class kind="class">njli::SteeringBehaviorAlignment</class>
    <class kind="class">njli::SteeringBehaviorAlignmentBuilder</class>
    <class kind="class">njli::SteeringBehaviorArrive</class>
    <class kind="class">njli::SteeringBehaviorArriveBuilder</class>
    <class kind="class">njli::SteeringBehaviorBuilder</class>
    <class kind="class">njli::SteeringBehaviorCohesion</class>
    <class kind="class">njli::SteeringBehaviorCohesionBuilder</class>
    <class kind="class">njli::SteeringBehaviorEvade</class>
    <class kind="class">njli::SteeringBehaviorEvadeBuilder</class>
    <class kind="class">njli::SteeringBehaviorFlee</class>
    <class kind="class">njli::SteeringBehaviorFleeBuilder</class>
    <class kind="class">njli::SteeringBehaviorFollowPath</class>
    <class kind="class">njli::SteeringBehaviorFollowPathBuilder</class>
    <class kind="class">njli::SteeringBehaviorHide</class>
    <class kind="class">njli::SteeringBehaviorHideBuilder</class>
    <class kind="class">njli::SteeringBehaviorInterpose</class>
    <class kind="class">njli::SteeringBehaviorInterposeBuilder</class>
    <class kind="class">njli::SteeringBehaviorMachine</class>
    <class kind="class">njli::SteeringBehaviorMachineBuilder</class>
    <class kind="class">njli::SteeringBehaviorMachineDithered</class>
    <class kind="class">njli::SteeringBehaviorMachineDitheredBuilder</class>
    <class kind="class">njli::SteeringBehaviorMachinePrioritized</class>
    <class kind="class">njli::SteeringBehaviorMachinePrioritizedBuilder</class>
    <class kind="class">njli::SteeringBehaviorMachineWeighted</class>
    <class kind="class">njli::SteeringBehaviorMachineWeightedBuilder</class>
    <class kind="class">njli::SteeringBehaviorObstacleAvoidance</class>
    <class kind="class">njli::SteeringBehaviorObstacleAvoidanceBuilder</class>
    <class kind="class">njli::SteeringBehaviorOffsetPursuit</class>
    <class kind="class">njli::SteeringBehaviorOffsetPursuitBuilder</class>
    <class kind="class">njli::SteeringBehaviorPursuit</class>
    <class kind="class">njli::SteeringBehaviorPursuitBuilder</class>
    <class kind="class">njli::SteeringBehaviorSeek</class>
    <class kind="class">njli::SteeringBehaviorSeekBuilder</class>
    <class kind="class">njli::SteeringBehaviorSeparation</class>
    <class kind="class">njli::SteeringBehaviorSeparationBuilder</class>
    <class kind="class">njli::SteeringBehaviorWallAvoidance</class>
    <class kind="class">njli::SteeringBehaviorWallAvoidanceBuilder</class>
    <class kind="class">njli::SteeringBehaviorWander</class>
    <class kind="class">njli::SteeringBehaviorWanderBuilder</class>
    <class kind="class">njli::StopWatch</class>
    <class kind="class">njli::StopWatchBuilder</class>
    <class kind="class">njli::Telegram</class>
    <class kind="class">njli::TextboxHUD</class>
    <class kind="class">njli::TextboxHUDBuilder</class>
    <class kind="class">njli::Thread</class>
    <class kind="class">njli::ThreadBuilder</class>
    <class kind="class">njli::Timer</class>
    <class kind="class">njli::TimerBuilder</class>
    <class kind="class">njli::World</class>
    <class kind="class">njli::WorldClock</class>
    <class kind="class">njli::WorldDebugDrawer</class>
    <class kind="class">njli::WorldFactory</class>
    <class kind="class">njli::WorldHUD</class>
    <class kind="class">njli::WorldInput</class>
    <class kind="class">njli::WorldLuaVirtualMachine</class>
    <class kind="class">njli::WorldResourceLoader</class>
    <class kind="class">njli::WorldSocket</class>
    <class kind="class">njli::WorldSound</class>
    <class kind="class">njli::WorldState</class>
    <class kind="class">njli::WorldStateBuilder</class>
    <class kind="class">njli::WorldStateMachine</class>
    <class kind="class">njli::WorldStateMachineBuilder</class>
    <class kind="struct">njli::wrap</class>
    <class kind="class">njli::WrapperOgg</class>
    <class kind="class">njli::WrapperRaw</class>
    <class kind="class">njli::WrapperWav</class>
    <class kind="class">njli::Xml</class>
    <class kind="class">njli::XmlBuilder</class>
    <member kind="typedef">
      <type>void(*</type>
      <name>ghostCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a1fa129854a8e7752403465871495fc68</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliImageType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba8ff0450751411797422b34c8359ab88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_JPEG</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0baa663b1e8f053ef637e5fbab26f3d62ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PNG</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba1bce22b2205898667daf43a32d4dcc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_BMP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba6c077185b17a5ad1bb4b521162306c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_GIF</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba369c6c877fedaeac85b1fd0e7c86eca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PSD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba44567b6e9384a453ce67c6185f23b8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PIC</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0bad40e11586edea130d1763cb3cb5a2cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_HDR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0baf7370a388c8d303d6acfdfcf184f4b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_TGA</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0bab549f4c12f970bff516a48d261358db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_PVR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0bafb27762a5d22577b3112f0a91707abf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_IMAGE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a709a24b63b768ce1cdff54f7f48d3c0ba23a54cca0a7ae8917159f1e7649e4020</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliActionTimingMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824ba0cdba41a676d719a944fdc44d3e62899</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824baa92e26f10321c835d6ea436a5fa0264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_EASEIN</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824ba08be3eb3f43ae177aa8fd4b34e2407ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_EASEOUT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824bacce80ae1388691ac76b7dc4949c9f51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_EASEINEASEOUT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824ba6676cf1fcd9e34bd15ba1964f4272bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_ACTION_TIMING_MODE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>affc383078a5935be1509062828a1824badb523c2202cc055b57f6d532b99ddfa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDSolidity</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168aeb5dc4f5a237799007ff5bdd20f67bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_SOLID</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168acdbd067f1e3199418e7885a29809b615</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_HOLE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168a34496e0246306fde58f04dfdb06e4b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_SOLIDITY_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adcb6d335a391e792ea49e55a2b394168ac14fdd6428c153de3bc72c7d87cac7f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDAlign</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa02251518523afeae7e2518357c9ed740</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_LEFT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aabca0f32318ac2d51572301aec394e197</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_CENTER</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa7d908bb153a34beba1f7bee78c0eb816</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_RIGHT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aac282d13f684acc7548a5ab1cb20dd320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_TOP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa1c5d6081bfdda06807fee808bdc2db74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_MIDDLE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa7d73746235b128ed755b9dfcfac6a656</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_BOTTOM</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa7b572a046852b7b767e7835ec7a790f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_BASELINE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aa733d6c4140a16ec2ece918ffede38d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_ALIGN_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a376c3102aef4710f2b54a545bf0e2b3aae3dfe44a943f8d1a42832e991d81f0a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDWinding</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456a06a1267bcbee6a7d982be897f3f3deca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_CCW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456a1853c6b1a27c59cf3203ad13555929d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_CW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456a87eb938f9a0d3e093c23b40739b2a689</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_WINDING_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>adfddace364f1f59d370037cf6f934456ad6d17a18f249cc31829f0d0ed78a7c82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDImageFlags</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a3d832b917bcf971e6af7fc247315f3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_GENERATE_MIPMAPS</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14ab8ac62fa7584d10bb808169208ee3414</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_REPEATX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a52bcf7a4cf76ac843f7767be374febfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_REPEATY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a36d0da535a374881276f12c35219419a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_FLIPY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a1d6a4cb89637785d117a25bc46ed4236</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_PREMULTIPLIED</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a5c5b0641a587235772732d12a3199c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_IMAGE_FLAGS_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3c5203f27f547353dd9e29345d747b14a1d866118aee61252ba1f3508cad3c6a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliHUDLineCap</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da5ef9ad168f47092744d6d57081bd0e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_BUTT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30dad49dbfbb891cd63ba78b52da305a3cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_ROUND</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da1e4712382b16f7b35cba94e5e7bc6350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_SQUARE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da1fcafdc1feeb8b65e2184c2eddd3e0a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_BEVEL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da43a1475f8a9f7f2f313c4319af6b1c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_MITER</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da57226e560ec12b6c1be0260f6b0413be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_HUD_LINECAP_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae73ef7aff697689e327df8c62325f30da8d7d7f71e1e08b9d03be703f74408cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureCubeSides</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda3bea084621e0484ccc91c8b3d4f1cbcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NEGATIVE_X</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda34f1245eaa63bff16c9f6ada016740d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NEGATIVE_Y</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda16d69c236577d4b031e1510bd23d60b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_NEGATIVE_Z</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9ddadaa75d2aa4c00ca10f3e3577882be1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_POSITIVE_X</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9ddac262fc24049942a6ca96d879772af572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_POSITIVE_Y</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9ddab6624025aed4665069454c5330256cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_POSITIVE_Z</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda09208eee0557dce797c555e8162c4f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURECUBE_SIDE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3287657f79ee806953cdf2a3e719a9dda9a4b5db0e6256704f1419ad72f2836b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fbab5e739e2d62a00c06335ad4eb96bd7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_2D</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fba1fc3a248edc8a6093efb9ed946de3915</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_CUBEMAP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fba244d1d6419307868899f3607854a6a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a90fea397e2267cd1b01c163319db48fbacab660ca2ecd47a3ad29fb4b2285aa7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMinificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bacab1e637b05fcb08d5e58eae389fc2ec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca0e5f9c0de2d17ebab337536717a866ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512bacabcef37117765fdc950d66b500660e7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NEAREST_MIPMAP_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca735e4154e8e5c3b7b6ed4fce8415dfd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_NEAREST_MIPMAP_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca54fe6ca3122ab5e3bbb4a9304c50d347</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_LINEAR_MIPMAP_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca0a51cd436376fc2d072017822a1588ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_LINEAR_MIPMAP_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca39d8ea38f0a6031c6aee61dbfef742b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MINIFICATION_VALUE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a980b62f11da3b7143a525012cb512baca839e6bf7ffee928b16c3aa23e5634441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureMagnificationValueType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a9bbe31a40306010625d26211f98dbfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_NEAREST</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a644ebd1fbf4af394c0cbdb13530f2c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_LINEAR</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a04d90ce3c66bf6b57b9cddeba4e70653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_MAGNIFICATION_VALUE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a9fe7a080d946c5be3afc71d834dc7902a4165ad4c110f6ae5c1b66999c225eb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTextureWrapType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62a296f0d1e443927d32fb4a27b46c8beca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_REPEAT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62ab58ae1597dfeae81513738000bae9d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_CLAMP_TO_EDGE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62a9c3a6d8a352dd0e3e03f5f696104c433</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_MIRRORED_REPEAT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62ab31ed901512b1f9b718e4e8f61f0645f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TEXTURE_WRAP_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6e9496d4850ec7151f04a220e1979b62a1afaa558d0a910feeca532a934f8f2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliShaderType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbda359cca691366bd9b00991c1ba19dbbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_VERTEX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbda2b0d4740bfc8bf1f47d35fbede6cc6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_FRAGMENT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbda446314814389da25bab90e8855a6d3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_SHADER_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a8f2b6cfac9213576c34bcf711ac39fbdacb23a15dc0db4135eafa2ae034658564</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliFileType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106addcfb55aa16f2679fc7f33255e300d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_XML</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a08c56908bba0862d4aaa2a41f8e3e181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_JSON</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a1304d2a37e7bc9bdbaa82c4da90dedc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_LUA</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106af77f57b3b98c8d64e9314b10ca860858</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_ZIP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a2881cacf18969fe8b4283e7f3d3bf303</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_PARTICLE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a72c8b342c078506a133751a7cdb83c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_SOUND_WAV</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a32c3ebe3a14c79fc617c710843ebd857</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_IMAGE_PNG</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a5a3690a9a85ada0c5ae89bbd779c523a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_IMAGE_TGA</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106acbb84d2c588f4cd07dd330a01689effe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_SHADER_VERTEX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a93b7f63dc05cd6b4c909308689c142c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_SHADER_FRAGMENT</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106a8fc389ed5916535109817251145c3711</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_FILE_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a3699b2e13e71094f00d7f0141e131106ace7c895ebca9587626e22e57914c9f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliPhysicsType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83da0e2cec62028cea9b741b85f27c16cbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_Static</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83da5a2d85916f9bc2ccd65950cec856e9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_Dynamic</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83dadb14b0bcd262551a09de40aed7cc9ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_Kinematic</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83da7752eb033d5277c2716329a0ba25c9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_PHYSICS_TYPE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a60ba626f4609f81870c92d042c6bc83daa31c43643127eda16677fad48c2048a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliTransparencyMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9a65e84f8b6e3a2868dffdc1363ab4c610</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_AlphaOne</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9a7c5b36a42714d149bb6f16f3be80fd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_RGBZero</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9af60d1604dbcb6086de7de3508bab15eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_TRANSPARENCY_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>ae6563db51402a0e02a3e55ef556afdd9a38811a33f05351ead6c53b1c66bc0cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliCullMode</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8a0ed241aa52ddf23fe7df9a6e601075da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_Front</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8a1468fb816881c98261f8b3b96a256cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_Back</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8a45096d6a80396c7d05b5c8a0dbb62084</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_CULLMODE_MAX</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2247adafa5de18bc18550918b4ed48d8ad400392e1eebc023e18b265a8a534d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliBitCategories</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_NONE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a15709fea205003b1b4a1371e200d5106</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_1</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a1da809e831d98cad963fe1ccc7370c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_2</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a762f93d4e8df59d32c9bd980b6ea0533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_3</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5a6923d8fc8e63480f08a026010d11eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_4</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a8b59e2da539d514a74989e1b72604f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_5</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a2d73340d456dbb8e4b5f3bdbeec0e237</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_6</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a707bae927c434ae4fb87de77e9d69736</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_7</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974ada9456d5fffcf4bbea867668c96fd4e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_8</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974addf70f3367b7d2093837ff379b56398d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_9</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a347a26e81e47a261cbecbb3556d4a305</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_10</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974ad5d8f1b552eb1a5d446a37faf80fead6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_11</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a4fd041d3c5ae95d02352aa877767a27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_12</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a19674e0101e1235442ed901fe031b157</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_13</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aba9d16c9a5df181e2dbb835cc34a8e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_14</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a2d7ecda189782b6933487816a2ea44bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_15</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a175e6ca922a1e6afca6c33fec1155590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_16</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a72b5df5dbeb5615eaa4adbe5e7fed49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_17</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aef9cd723f3fdeae9a2c6e77c4e199b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_18</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a28469478d5918d029fcbe01a5a2990b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_19</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a82dafd9a1de879d0394866293a10974f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_20</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aa637214a69fb2cc01445b70b7c694a3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_21</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974ac2f8ef0a3cefe88e4309896138685f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_22</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a56adffc605eaa40acfa770dcb64ffff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_23</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a27ca11b4078a686a3f2ac0c784a974b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_24</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a16d8757a3ba4644d33982a1dd068a754</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_25</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aa2575f4ef85bdb59a07170493011dbcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_26</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974acbb07dc454f52be708ece7bdf448ae81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_27</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aa1b71b6679656132b47f5e488010cec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_28</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a8fb1200221f4a16560a198778eb0de24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_29</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a9220767239da4e6f3f280c42fb5b011e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_30</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a9f28f3fe3e89e50f1eaebe49c8365209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_31</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974aff51240e9dc87aa802eaaad8ea14f2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_ALL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5346e1c0c35ccc30a90bc2d15c531591</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_DefaultFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a53b33337014e199f56e752574f36981e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_StaticFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5fc6148cb03f12dc376273ffa516163d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_KinematicFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974abe2b526b04665757528464a85a0484ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_DebrisFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a9927ed54cec6c01b1adc76547240a391</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_SensorTrigger</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a95f7a2b44182a986ab43990e62ce56db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_CharacterFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a5dd354e999e7363281a2b6e10d591845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_BIT_CATEGORY_AllFilter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>af7b302a2b48bb644f85c88080925c974a0fba80cad161dda96de5cbda9091cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>njliObjectEnumType</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_None</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a897e3c9cbacf6a503528adb0ad512687</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_World</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aaf9ee384b16306d1c78feadbc2a67b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldFacebook</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa062e8c7c2f0adac770d82ca09a0e8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldFactory</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a155fe1dc231c0d5477adb939916a0752</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldLuaVirtualMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4d50f8c946191bd8bb69363a62e0c970</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldPythonVirtualMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aeeadc4f5bf71c8aef4c494aaecddee74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldResourceLoader</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2da5eb7bbda95f42bb4e971e8aca84cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldSocket</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a962226bcbb2b3811e46ed9bc89d9fb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a51c975667c78cbdf8f1cb6af1af7c57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldInput</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a16afc580db51ec596613657ae610892d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldClock</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a63d5840200ab10516fd6d7584da2700f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldSound</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aec82ab14a72ccb6cde7dff9d48fb7d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldDebugDrawer</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae351a75c61f9709ce5b879e43d4078ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_DeviceTouch</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0e472f28e4e4c659c2dcf6a8aac9714d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Geometry</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab0e14bf6ac78cbc5f936f1deff92254e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShape</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a17dd33005b333e06232098ec8139457e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Action</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444affacb5d8e686c41f6b9593da93c2fb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ActionBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac27f63190721e8e50ea957ef50d5feb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ButtonHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a62110b03da1994b0e37ca24dd2b03f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ButtonHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a24f3abae4380331c9e4fc0e6dd98d990</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Camera</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a584b5378242583bfb37a7dc963809cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CameraBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1bf94aa0f345c5e503277edd7e9a3639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CheckboxHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aeea430e40ffbf6287e6f45b92283f5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CheckboxHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a30766bd9b3a037c8cdf8b8ee28f19b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Clock</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a767c5c9686befe91336f8f4f6f29e260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ClockBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a485adc2590e096485b63286c788a8c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CollisionResponse</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af8ce52738a5eaa88f7a9d117c0f540b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CollisionResponseBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aca96e33eb2a43c80baafa6b3eda76e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Cube</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444adbf14f548d0deb2a84a8a1b3d09bd154</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_CubeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af701d97c06bbbed74b71cf411a0603a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_DropdownHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a3968716659c91fd4e987e9457e406438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_DropdownHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab9cc17fc8fcfbe7309f0406fe69a94b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Font</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7c098ff563bd0f745a222f1c38d52156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_FontBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5e35bb12a3036c88f6296758787c0b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Image</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a09495040dd94be9914a21e6c6d4e9a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ImageBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acf74028d2f297bab038e3ef5fd78c546</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_JsonJLI</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af7bfdf2cd0273bc42d0dd68f7a5ccdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_JsonJLIBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acc4baa24fbb55b5e43aa181b847ba262</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LabelHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9a4c53a9a498a581983b05d487d9fa3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LabelHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1b744496170b08bd5e21cf8ad09fa9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Light</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad7db3595f7272df0b4f9d01f2eec308b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LightBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6f47081705420a4e91ee86ffd5748f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LevelOfDetail</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aeb75dbe890906fbc20ba22a490daf8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_LevelOfDetailBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a082cb0381e2ba760f1bc22ccc09689af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Material</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6ac84b76c50d1269976e3a7ef341e8f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_MaterialBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7f7180f9dddec568a8f8ef8595058909</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_MaterialProperty</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2d9e3b74b508d63b45116354d4777d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_MaterialPropertyBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab6c9abc4ed5a32ac46c04ada21f10139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Node</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a078b58bdb2d20fe4a3fe7203a2aa25a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a143ed7af74b73ee3a4aff4ce7d166276</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeState</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad1e8b653ae3a0a8d8feb2a705bcdcd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeStateBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab4a7ce463eaf980a613fe2df777ff6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeStateMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a29c7365c2c16e80d2ed7ee4f6668e15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NodeStateMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aee798bb81ac3b1aa118b4bc89cca4e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ParticleEmitter</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0aab6d0a92dc47d92d453bd0d48528d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ParticleEmitterBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9fda2cd33ae3e2e41f358cbb5358dfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBody</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae65052637b1299f88373298becce64bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyGhost</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7de12a8fc85326d6d9412989ea52c296</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyGhostBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a611365dccd0786c1006e55e2f5046761</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyRigid</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab485691f93126ae256b6e88acc6268c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodyRigidBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a57c1c38bbc964e3244e5c47b395a236d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodySoft</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a31f3cdb937056c1927866bb5a6565908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsBodySoftBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa8f4b51caa8046885e018fd729a8b162</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraint</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a510ff85c220ba48c3f227ebd30a2078d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad2fbdb1df3083f3c582567cece92f511</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintHinge</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac3c75cd492cc1fba614e2851c332220d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintHingeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5f8cc7969ddb7de442685466342f3d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintPointToPoint</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0e67e880dd423e76642d36f2fd40f1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintPointToPointBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acb7dd3eef2f916bdb7ab153e4dc6ec56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintSlider</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6a7c70e1372b79d9b3105fcfce52f033</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintSliderBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444abc9ee150387b351148f450dea351512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintConeTwist</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a40e44c4e7b4d13076b643e569a63a350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintConeTwistBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a62739a7a2007006ba1fde0db9bcd73e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintFixed</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9789d2b072ff7710d51fbf9406163975</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintFixedBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6d8f591805f54af681b74dee6c1c846b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6Dof</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5149a83507667667e84b113e78529cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6DofBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8ab3c130238d63bc31105dccd1375acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6DofSpring</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8c3f25125ebf6314314fbb0923163e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsConstraintGeneric6DofSpringBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac0d10efd09a2d1e269af9c8c3b522db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsContact</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a3c7e2ca128207d9f821ae47b8ace8b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsContactBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7dcb3257dd1a77063e3ef9c2e15bb1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsCloseContact</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a226b64ff870ea637c0316c09f416b249</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsCloseContactBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2b0c8c9c2632a668cdc459457dcc2104</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsField</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2752ef6e53e1bcfa8704c2e3f7815c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsFieldBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad97d52663b698eca329ade99182c03ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsRayContact</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9ff87602d405d1b18c20d2bc6645b639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsRayContactBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7625048d00ed70e09e02d98eb7950696</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBox</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a928a72d79828f59158b0c8ec166ee001</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBoxBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac0cd2f461992f268a3652aed53ff1330</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBox2D</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae68612d60428ec8a104053d57754d9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBox2DBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6a592fcc3b7ce43cdcd37ce1d72640fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeSphere</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9b5fdd65d1ec1734fce1c64fa0c2dc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeSphereBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9d41ced00c77b02bb257530b59a1b2fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCylinder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a178007e15296eccc25b9602c1f2a9f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCylinderBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444add2c79d085ed5776077871b8bc280204</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCapsule</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aff48184530376f3723f7f09301608f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCapsuleBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6da38428a49ecdcdff1c71fe7d2ccebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeCone</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a91c37fbbf9083c53a2a8354b9e70ebfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a20e3698a8a88dd00bd8a1fb3efd62f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeMultiSphere</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444abd3f8753d211741594da6e64d38b433f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeMultiSphereBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2eb0f869b0f71a386302f903fb965fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexHull</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab77b0553c701df22963e8e69f169f742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexHullBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aabf3a6ad363f0b347a569f0c709b0556</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexTriangleMesh</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a618d3de353555744920b05b8eb806125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeConvexTriangleMeshBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab9cc9c112f7a53d0d31fc366fd340ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBvhTriangleMesh</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a46fbd4ecdb7613c10a9d279a57f79638</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeBvhTriangleMeshBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9566922f6aed87f8897da75430f07460</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeHeightfieldTerrain</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa4746c51c849b53ec9dcbe461b76e138</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeHeightfieldTerrainBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a49bbc14897f0615b33c0ce6cbc864dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeStaticPlane</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a69bd909ded4e0e4171d034ddebe0cf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsShapeStaticPlaneBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4c7f5cc3ead65995d70da08aab7e9029</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsWorld</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa2a35b548ed9b3b2dff2f5ab33f949ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PhysicsWorldBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa0a216e28a5de7dabccee732eccb99d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Plane</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a73b5b10a77c6e746f173f03b66c05452</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_PlaneBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a965748a48832125428d946a1b0201bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Scene</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6dc36dba9d483c432ccbc88d5b7ee7fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afb5f240d9d7c0767765244294dac3962</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneState</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a32e34fa3e3639cdda2e64680d5def9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneStateBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a648a878cfdc412de15bcd0116921ed0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneStateMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9d8eeb6715ea8e032f567fff981b3021</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SceneStateMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a780d05309d85588de675847a1a8818c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ShaderProgram</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afc5c1e38c907b27cd79b8a154aa1f021</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ShaderProgramBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4cddb91744b04635478da2fc4e8f5059</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Skinner</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa836a2cbedd8f5fbcb94cda58d4472d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SkinnerBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8de53302fea09b281262471e64b67820</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SliderHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af64e688481302082f6f47dbc35a3fe76</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SliderHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ace531648ee82cafd2a91ffcf493f9bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Sound</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afa72f4ef2201548791e65b9b29144b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SoundBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae872062926d4d51fc2625741619ab25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Sprite2D</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1c45612513be6377931cb97d659ec8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Sprite2DBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ab2651c8d5f919ce0a7056a3549f070c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SpriteFrameAtlas</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0a15fb116280a1dfea4e3b214df1a48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SpriteFrameAtlasBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a70ca4c5b691e286c318b68ff54457f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehavior</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afb988c15c8acfa41ed67870d385f92d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444adc585b2deaac7f48656b5979d77d88c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorAlignment</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af6d51f3796c8cf559ba2eb1f5fd9ef91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorAlignmentBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444afddfa8e2cdb983f1df414fc562eda404</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorArrive</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444acd54ff18795b7270f44dfa963f2955ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorArriveBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5fba043af3f36aabdae637978dc08cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorCohesion</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a6298862ed617f9410c0bfe57b76dce5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorCohesionBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9ba2a788fe8f0fcbe22e372e58fb3e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorEvade</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a4afde8f4cb4c4089bb47a4824fdfdd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorEvadeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0017bece3b05aaca5de3a0178d4c183a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFlee</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad8f55b1005e041f03a207f3681934f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFleeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a38dbdf18105275cdc40705d292043cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFollowPath</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a962c0bb9b5505d9b35ea4e0a2787b8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorFollowPathBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a466c76db47db8b5c31a0072e355d46ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorHide</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8c33b85812fff3133ea671c7ed10db94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorHideBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a570ae3260203dd9c759c46ccdaebe1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorInterpose</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aff0e49c53b9391645f902c423f286665</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorInterposeBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444af61186785348e8a45b867976b5427ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a817bec1230cf61d85cde086e80971d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aff0448d58179523ec1b7b7c1542ce8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineDithered</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac77dededa73b417607c942ec991ce045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineDitheredBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad1cb2a434e28d6aacaed539768cfea58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachinePrioritized</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a9276f434de93792934f0d7af6fa41597</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachinePrioritizedBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a68d4c35aa5b0285b647cfe17dd8cba4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineWeighted</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae4d04019caa0d5dc392200c1e78ce8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorMachineWeightedBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aee26265d84971c058fc5ec438ce925d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorObstacleAvoidance</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0d10857a9faf274e5f399d970cffab54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorObstacleAvoidanceBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8db2ac2e3bf1b4b54e8eef5ec82bb31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorOffsetPursuit</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8f02954dcc21dfbdac47ad78d3fde3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorOffsetPursuitBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad7d8d479d51b4382207ab5d998aa3cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorPursuit</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a367d51e7c5cf64bc1d4c933291d7b38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorPursuitBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a5714a07f3cc466b9f07fdb194d885d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeek</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a715c36c3ae37b11295f735a932ffd577</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeekBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a1a9041dbd8559ce4c692394596594002</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeparation</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a181868273499396a4865002154f6dde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorSeparationBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a910745b128673320d7bb577b48bda724</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWallAvoidance</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ae2b3447851b7ac75116251170282dbc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWallAvoidanceBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a8ec8e7414459952bb93962003e257328</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWander</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ad509ed837897d1936482eed231b4380f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_SteeringBehaviorWanderBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a388556f711c9388292a53cf5cedba35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_StopWatch</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac0fa0a9dbb9d90ae8dc50821c7a3de13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_StopWatchBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a2e8e7d5d98c53a5f9f66f8685d3f4df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_TextboxHUD</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0383038e50246903540ca9e04d416302</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_TextboxHUDBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a0675c3573f15fab7335f67aed34c4e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Thread</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aa7d7f13f89da44fa96bf4664a0dc43a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_ThreadBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444aedd31df53cf0a5a3e8ed438d10902927</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Timer</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444ac1dc8091d10d7ba28a1ea747c687f16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_TimerBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a06fbb602895b7f1669b0a67aa93218b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldState</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444adbd175560c2bf0cbbfa4efade7b67150</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldStateBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a78136c2e89e2b894b844f5b794fb97a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldStateMachine</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a7d26d655b0e253886193da06295bb3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_WorldStateMachineBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a392ad80c75641027d0d84a646180194b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_Xml</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a08c8ffe863dd89d0a164a2a2f4d2da59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_XmlBuilder</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a785d967f7b8dd63c33284300e1711ef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JLI_OBJECT_TYPE_NumberOfTypes</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a6d56d4fbaf89fcf3e3d32839df05b444a38ea00cb8212b1d00a88582f123b439f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_THREAD_PRIORITY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_VERY_LOW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aa835a0386724239439dda616d1787e87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_LOW</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aa2b4e524af29ebc09a0de7eb236333196</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_NORMAL</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aaacd042e327263f640ce7c87c50e868a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_HIGH</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aaf334987028f6fb3c99daa775393010d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_THREAD_PRIORITY_VERY_HIGH</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>afafb6e52d47a71ae588f26e10f72e41aa8bcaf8d75832437cf6097181b6a9c177</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SIO2_STATE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_STOP</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555ab124aca454a99bef1a989eaacbcecec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_PLAY</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555a9cb6f1b7593469f350b47bc71a1dc19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIO2_PAUSE</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a2673f291a7156cb10a3c304580196555ad5a618c3425abc7e4dfd9b1567e4e615</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPreTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a198074fecee1ecd3469a9eb42d3b1672</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DefaultCustomPostTickCallback</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a805528e68206342abc780b53e418030d</anchor>
      <arglist>(btDynamicsWorld *world, btScalar timeStep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>run_main</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a763b51626ae6d3f240198aa15876fbf1</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="function">
      <type>btVector2</type>
      <name>SCREEN</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a7cd195555cbed7b1657e1d48aa0070f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const u32</type>
      <name>njliRenderCategoryValues</name>
      <anchorfile>namespacenjli.html</anchorfile>
      <anchor>a65d693b7c5879aee9e181234f22b7b2a</anchor>
      <arglist>[32]</arglist>
    </member>
  </compound>
</tagfile>
