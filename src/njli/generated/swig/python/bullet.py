# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_bullet')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_bullet')
    _bullet = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bullet', [dirname(__file__)])
        except ImportError:
            import _bullet
            return _bullet
        try:
            _mod = imp.load_module('_bullet', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _bullet = swig_import_helper()
    del swig_import_helper
else:
    import _bullet
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

BT_BULLET_VERSION = _bullet.BT_BULLET_VERSION

def btGetVersion():
    """btGetVersion() -> int"""
    return _bullet.btGetVersion()
BT_LARGE_FLOAT = _bullet.BT_LARGE_FLOAT

def btSqrt(y):
    """btSqrt(btScalar y) -> btScalar"""
    return _bullet.btSqrt(y)

def btFabs(x):
    """btFabs(btScalar x) -> btScalar"""
    return _bullet.btFabs(x)

def btCos(x):
    """btCos(btScalar x) -> btScalar"""
    return _bullet.btCos(x)

def btSin(x):
    """btSin(btScalar x) -> btScalar"""
    return _bullet.btSin(x)

def btTan(x):
    """btTan(btScalar x) -> btScalar"""
    return _bullet.btTan(x)

def btAcos(x):
    """btAcos(btScalar x) -> btScalar"""
    return _bullet.btAcos(x)

def btAsin(x):
    """btAsin(btScalar x) -> btScalar"""
    return _bullet.btAsin(x)

def btAtan(x):
    """btAtan(btScalar x) -> btScalar"""
    return _bullet.btAtan(x)

def btAtan2(x, y):
    """btAtan2(btScalar x, btScalar y) -> btScalar"""
    return _bullet.btAtan2(x, y)

def btExp(x):
    """btExp(btScalar x) -> btScalar"""
    return _bullet.btExp(x)

def btLog(x):
    """btLog(btScalar x) -> btScalar"""
    return _bullet.btLog(x)

def btPow(x, y):
    """btPow(btScalar x, btScalar y) -> btScalar"""
    return _bullet.btPow(x, y)

def btFmod(x, y):
    """btFmod(btScalar x, btScalar y) -> btScalar"""
    return _bullet.btFmod(x, y)
BT_ONE = _bullet.BT_ONE
BT_ZERO = _bullet.BT_ZERO
BT_TWO = _bullet.BT_TWO
BT_HALF = _bullet.BT_HALF

def btAtan2Fast(y, x):
    """btAtan2Fast(btScalar y, btScalar x) -> btScalar"""
    return _bullet.btAtan2Fast(y, x)

def btFuzzyZero(x):
    """btFuzzyZero(btScalar x) -> bool"""
    return _bullet.btFuzzyZero(x)

def btEqual(a, eps):
    """btEqual(btScalar a, btScalar eps) -> bool"""
    return _bullet.btEqual(a, eps)

def btGreaterEqual(a, eps):
    """btGreaterEqual(btScalar a, btScalar eps) -> bool"""
    return _bullet.btGreaterEqual(a, eps)

def btIsNegative(x):
    """btIsNegative(btScalar x) -> int"""
    return _bullet.btIsNegative(x)

def btRadians(x):
    """btRadians(btScalar x) -> btScalar"""
    return _bullet.btRadians(x)

def btDegrees(x):
    """btDegrees(btScalar x) -> btScalar"""
    return _bullet.btDegrees(x)

def btFsel(a, b, c):
    """btFsel(btScalar a, btScalar b, btScalar c) -> btScalar"""
    return _bullet.btFsel(a, b, c)

def btMachineIsLittleEndian():
    """btMachineIsLittleEndian() -> bool"""
    return _bullet.btMachineIsLittleEndian()

def btSelect(condition, valueIfConditionNonZero, valueIfConditionZero):
    """btSelect(unsigned int condition, float valueIfConditionNonZero, float valueIfConditionZero) -> float"""
    return _bullet.btSelect(condition, valueIfConditionNonZero, valueIfConditionZero)

def btSwapEndian(val):
    """btSwapEndian(int val) -> unsigned int"""
    return _bullet.btSwapEndian(val)

def btSwapEndianFloat(d):
    """btSwapEndianFloat(float d) -> unsigned int"""
    return _bullet.btSwapEndianFloat(d)

def btUnswapEndianFloat(a):
    """btUnswapEndianFloat(unsigned int a) -> float"""
    return _bullet.btUnswapEndianFloat(a)

def btSwapEndianDouble(d, dst):
    """btSwapEndianDouble(double d, unsigned char * dst)"""
    return _bullet.btSwapEndianDouble(d, dst)

def btUnswapEndianDouble(src):
    """btUnswapEndianDouble(unsigned char const * src) -> double"""
    return _bullet.btUnswapEndianDouble(src)

def btLargeDot(a, b, n):
    """btLargeDot(btScalar const * a, btScalar const * b, int n) -> btScalar"""
    return _bullet.btLargeDot(a, b, n)

def btNormalizeAngle(angleInRadians):
    """btNormalizeAngle(btScalar angleInRadians) -> btScalar"""
    return _bullet.btNormalizeAngle(angleInRadians)
class btTypedObject(_object):
    """Proxy of C++ btTypedObject class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedObject, name)
    __repr__ = _swig_repr

    def __init__(self, objectType):
        """__init__(btTypedObject self, int objectType) -> btTypedObject"""
        this = _bullet.new_btTypedObject(objectType)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_objectType"] = _bullet.btTypedObject_m_objectType_set
    __swig_getmethods__["m_objectType"] = _bullet.btTypedObject_m_objectType_get
    if _newclass:
        m_objectType = _swig_property(_bullet.btTypedObject_m_objectType_get, _bullet.btTypedObject_m_objectType_set)

    def getObjectType(self):
        """getObjectType(btTypedObject self) -> int"""
        return _bullet.btTypedObject_getObjectType(self)

    __swig_destroy__ = _bullet.delete_btTypedObject
    __del__ = lambda self: None
btTypedObject_swigregister = _bullet.btTypedObject_swigregister
btTypedObject_swigregister(btTypedObject)
cvar = _bullet.cvar
btVector3Zero = cvar.btVector3Zero


def btAlignedAllocInternal(size, alignment):
    """btAlignedAllocInternal(size_t size, int alignment) -> void *"""
    return _bullet.btAlignedAllocInternal(size, alignment)

def btAlignedFreeInternal(ptr):
    """btAlignedFreeInternal(void * ptr)"""
    return _bullet.btAlignedFreeInternal(ptr)

def btAlignedAllocSetCustom(allocFunc, freeFunc):
    """btAlignedAllocSetCustom(btAllocFunc * allocFunc, btFreeFunc * freeFunc)"""
    return _bullet.btAlignedAllocSetCustom(allocFunc, freeFunc)

def btAlignedAllocSetCustomAligned(allocFunc, freeFunc):
    """btAlignedAllocSetCustomAligned(btAlignedAllocFunc * allocFunc, btAlignedFreeFunc * freeFunc)"""
    return _bullet.btAlignedAllocSetCustomAligned(allocFunc, freeFunc)
btVector3DataName = _bullet.btVector3DataName

def btDot(v1, v2):
    """btDot(btVector3 const & v1, btVector3 const & v2) -> btScalar"""
    return _bullet.btDot(v1, v2)

def btDistance2(v1, v2):
    """btDistance2(btVector3 const & v1, btVector3 const & v2) -> btScalar"""
    return _bullet.btDistance2(v1, v2)

def btDistance(v1, v2):
    """btDistance(btVector3 const & v1, btVector3 const & v2) -> btScalar"""
    return _bullet.btDistance(v1, v2)

def btCross(v1, v2):
    """btCross(btVector3 const & v1, btVector3 const & v2) -> btVector3"""
    return _bullet.btCross(v1, v2)

def btTriple(v1, v2, v3):
    """btTriple(btVector3 const & v1, btVector3 const & v2, btVector3 const & v3) -> btScalar"""
    return _bullet.btTriple(v1, v2, v3)

def lerp(v1, v2, t):
    """lerp(btVector3 const & v1, btVector3 const & v2, btScalar const & t) -> btVector3"""
    return _bullet.lerp(v1, v2, t)

def btSwapScalarEndian(sourceVal, destVal):
    """btSwapScalarEndian(btScalar const & sourceVal, btScalar & destVal)"""
    return _bullet.btSwapScalarEndian(sourceVal, destVal)

def btSwapVector3Endian(sourceVec, destVec):
    """btSwapVector3Endian(btVector3 const & sourceVec, btVector3 & destVec)"""
    return _bullet.btSwapVector3Endian(sourceVec, destVec)

def btUnSwapVector3Endian(vector):
    """btUnSwapVector3Endian(btVector3 & vector)"""
    return _bullet.btUnSwapVector3Endian(vector)
class btVector3FloatData(_object):
    """Proxy of C++ btVector3FloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector3FloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector3FloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = _bullet.btVector3FloatData_m_floats_set
    __swig_getmethods__["m_floats"] = _bullet.btVector3FloatData_m_floats_get
    if _newclass:
        m_floats = _swig_property(_bullet.btVector3FloatData_m_floats_get, _bullet.btVector3FloatData_m_floats_set)

    def __init__(self):
        """__init__(btVector3FloatData self) -> btVector3FloatData"""
        this = _bullet.new_btVector3FloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btVector3FloatData
    __del__ = lambda self: None
btVector3FloatData_swigregister = _bullet.btVector3FloatData_swigregister
btVector3FloatData_swigregister(btVector3FloatData)

class btVector3DoubleData(_object):
    """Proxy of C++ btVector3DoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector3DoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector3DoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = _bullet.btVector3DoubleData_m_floats_set
    __swig_getmethods__["m_floats"] = _bullet.btVector3DoubleData_m_floats_get
    if _newclass:
        m_floats = _swig_property(_bullet.btVector3DoubleData_m_floats_get, _bullet.btVector3DoubleData_m_floats_set)

    def __init__(self):
        """__init__(btVector3DoubleData self) -> btVector3DoubleData"""
        this = _bullet.new_btVector3DoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btVector3DoubleData
    __del__ = lambda self: None
btVector3DoubleData_swigregister = _bullet.btVector3DoubleData_swigregister
btVector3DoubleData_swigregister(btVector3DoubleData)

btVector2DataName = _bullet.btVector2DataName

def distance2(v1, v2):
    """distance2(btVector2 const & v1, btVector2 const & v2) -> btScalar"""
    return _bullet.distance2(v1, v2)

def distance(v1, v2):
    """distance(btVector2 const & v1, btVector2 const & v2) -> btScalar"""
    return _bullet.distance(v1, v2)
class btVector2FloatData(_object):
    """Proxy of C++ btVector2FloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector2FloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector2FloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xy_"] = _bullet.btVector2FloatData_xy__set
    __swig_getmethods__["xy_"] = _bullet.btVector2FloatData_xy__get
    if _newclass:
        xy_ = _swig_property(_bullet.btVector2FloatData_xy__get, _bullet.btVector2FloatData_xy__set)

    def __init__(self):
        """__init__(btVector2FloatData self) -> btVector2FloatData"""
        this = _bullet.new_btVector2FloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btVector2FloatData
    __del__ = lambda self: None
btVector2FloatData_swigregister = _bullet.btVector2FloatData_swigregister
btVector2FloatData_swigregister(btVector2FloatData)

class btVector2DoubleData(_object):
    """Proxy of C++ btVector2DoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVector2DoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVector2DoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xy_"] = _bullet.btVector2DoubleData_xy__set
    __swig_getmethods__["xy_"] = _bullet.btVector2DoubleData_xy__get
    if _newclass:
        xy_ = _swig_property(_bullet.btVector2DoubleData_xy__get, _bullet.btVector2DoubleData_xy__set)

    def __init__(self):
        """__init__(btVector2DoubleData self) -> btVector2DoubleData"""
        this = _bullet.new_btVector2DoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btVector2DoubleData
    __del__ = lambda self: None
btVector2DoubleData_swigregister = _bullet.btVector2DoubleData_swigregister
btVector2DoubleData_swigregister(btVector2DoubleData)

BOX_SHAPE_PROXYTYPE = _bullet.BOX_SHAPE_PROXYTYPE
TRIANGLE_SHAPE_PROXYTYPE = _bullet.TRIANGLE_SHAPE_PROXYTYPE
TETRAHEDRAL_SHAPE_PROXYTYPE = _bullet.TETRAHEDRAL_SHAPE_PROXYTYPE
CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE = _bullet.CONVEX_TRIANGLEMESH_SHAPE_PROXYTYPE
CONVEX_HULL_SHAPE_PROXYTYPE = _bullet.CONVEX_HULL_SHAPE_PROXYTYPE
CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE = _bullet.CONVEX_POINT_CLOUD_SHAPE_PROXYTYPE
CUSTOM_POLYHEDRAL_SHAPE_TYPE = _bullet.CUSTOM_POLYHEDRAL_SHAPE_TYPE
IMPLICIT_CONVEX_SHAPES_START_HERE = _bullet.IMPLICIT_CONVEX_SHAPES_START_HERE
SPHERE_SHAPE_PROXYTYPE = _bullet.SPHERE_SHAPE_PROXYTYPE
MULTI_SPHERE_SHAPE_PROXYTYPE = _bullet.MULTI_SPHERE_SHAPE_PROXYTYPE
CAPSULE_SHAPE_PROXYTYPE = _bullet.CAPSULE_SHAPE_PROXYTYPE
CONE_SHAPE_PROXYTYPE = _bullet.CONE_SHAPE_PROXYTYPE
CONVEX_SHAPE_PROXYTYPE = _bullet.CONVEX_SHAPE_PROXYTYPE
CYLINDER_SHAPE_PROXYTYPE = _bullet.CYLINDER_SHAPE_PROXYTYPE
UNIFORM_SCALING_SHAPE_PROXYTYPE = _bullet.UNIFORM_SCALING_SHAPE_PROXYTYPE
MINKOWSKI_SUM_SHAPE_PROXYTYPE = _bullet.MINKOWSKI_SUM_SHAPE_PROXYTYPE
MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE = _bullet.MINKOWSKI_DIFFERENCE_SHAPE_PROXYTYPE
BOX_2D_SHAPE_PROXYTYPE = _bullet.BOX_2D_SHAPE_PROXYTYPE
CONVEX_2D_SHAPE_PROXYTYPE = _bullet.CONVEX_2D_SHAPE_PROXYTYPE
CUSTOM_CONVEX_SHAPE_TYPE = _bullet.CUSTOM_CONVEX_SHAPE_TYPE
CONCAVE_SHAPES_START_HERE = _bullet.CONCAVE_SHAPES_START_HERE
TRIANGLE_MESH_SHAPE_PROXYTYPE = _bullet.TRIANGLE_MESH_SHAPE_PROXYTYPE
SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE = _bullet.SCALED_TRIANGLE_MESH_SHAPE_PROXYTYPE
FAST_CONCAVE_MESH_PROXYTYPE = _bullet.FAST_CONCAVE_MESH_PROXYTYPE
TERRAIN_SHAPE_PROXYTYPE = _bullet.TERRAIN_SHAPE_PROXYTYPE
GIMPACT_SHAPE_PROXYTYPE = _bullet.GIMPACT_SHAPE_PROXYTYPE
MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE = _bullet.MULTIMATERIAL_TRIANGLE_MESH_PROXYTYPE
EMPTY_SHAPE_PROXYTYPE = _bullet.EMPTY_SHAPE_PROXYTYPE
STATIC_PLANE_PROXYTYPE = _bullet.STATIC_PLANE_PROXYTYPE
CUSTOM_CONCAVE_SHAPE_TYPE = _bullet.CUSTOM_CONCAVE_SHAPE_TYPE
CONCAVE_SHAPES_END_HERE = _bullet.CONCAVE_SHAPES_END_HERE
COMPOUND_SHAPE_PROXYTYPE = _bullet.COMPOUND_SHAPE_PROXYTYPE
SOFTBODY_SHAPE_PROXYTYPE = _bullet.SOFTBODY_SHAPE_PROXYTYPE
HFFLUID_SHAPE_PROXYTYPE = _bullet.HFFLUID_SHAPE_PROXYTYPE
HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE = _bullet.HFFLUID_BUOYANT_CONVEX_SHAPE_PROXYTYPE
INVALID_SHAPE_PROXYTYPE = _bullet.INVALID_SHAPE_PROXYTYPE
MAX_BROADPHASE_COLLISION_TYPES = _bullet.MAX_BROADPHASE_COLLISION_TYPES
class btBroadphaseProxy(_object):
    """Proxy of C++ btBroadphaseProxy class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseProxy, name)
    __repr__ = _swig_repr
    DefaultFilter = _bullet.btBroadphaseProxy_DefaultFilter
    StaticFilter = _bullet.btBroadphaseProxy_StaticFilter
    KinematicFilter = _bullet.btBroadphaseProxy_KinematicFilter
    DebrisFilter = _bullet.btBroadphaseProxy_DebrisFilter
    SensorTrigger = _bullet.btBroadphaseProxy_SensorTrigger
    CharacterFilter = _bullet.btBroadphaseProxy_CharacterFilter
    AllFilter = _bullet.btBroadphaseProxy_AllFilter
    __swig_setmethods__["m_clientObject"] = _bullet.btBroadphaseProxy_m_clientObject_set
    __swig_getmethods__["m_clientObject"] = _bullet.btBroadphaseProxy_m_clientObject_get
    if _newclass:
        m_clientObject = _swig_property(_bullet.btBroadphaseProxy_m_clientObject_get, _bullet.btBroadphaseProxy_m_clientObject_set)
    __swig_setmethods__["m_collisionFilterGroup"] = _bullet.btBroadphaseProxy_m_collisionFilterGroup_set
    __swig_getmethods__["m_collisionFilterGroup"] = _bullet.btBroadphaseProxy_m_collisionFilterGroup_get
    if _newclass:
        m_collisionFilterGroup = _swig_property(_bullet.btBroadphaseProxy_m_collisionFilterGroup_get, _bullet.btBroadphaseProxy_m_collisionFilterGroup_set)
    __swig_setmethods__["m_collisionFilterMask"] = _bullet.btBroadphaseProxy_m_collisionFilterMask_set
    __swig_getmethods__["m_collisionFilterMask"] = _bullet.btBroadphaseProxy_m_collisionFilterMask_get
    if _newclass:
        m_collisionFilterMask = _swig_property(_bullet.btBroadphaseProxy_m_collisionFilterMask_get, _bullet.btBroadphaseProxy_m_collisionFilterMask_set)
    __swig_setmethods__["m_uniqueId"] = _bullet.btBroadphaseProxy_m_uniqueId_set
    __swig_getmethods__["m_uniqueId"] = _bullet.btBroadphaseProxy_m_uniqueId_get
    if _newclass:
        m_uniqueId = _swig_property(_bullet.btBroadphaseProxy_m_uniqueId_get, _bullet.btBroadphaseProxy_m_uniqueId_set)
    __swig_setmethods__["m_aabbMin"] = _bullet.btBroadphaseProxy_m_aabbMin_set
    __swig_getmethods__["m_aabbMin"] = _bullet.btBroadphaseProxy_m_aabbMin_get
    if _newclass:
        m_aabbMin = _swig_property(_bullet.btBroadphaseProxy_m_aabbMin_get, _bullet.btBroadphaseProxy_m_aabbMin_set)
    __swig_setmethods__["m_aabbMax"] = _bullet.btBroadphaseProxy_m_aabbMax_set
    __swig_getmethods__["m_aabbMax"] = _bullet.btBroadphaseProxy_m_aabbMax_get
    if _newclass:
        m_aabbMax = _swig_property(_bullet.btBroadphaseProxy_m_aabbMax_get, _bullet.btBroadphaseProxy_m_aabbMax_set)

    def getUid(self):
        """getUid(btBroadphaseProxy self) -> int"""
        return _bullet.btBroadphaseProxy_getUid(self)


    def __init__(self, *args):
        """
        __init__(btBroadphaseProxy self) -> btBroadphaseProxy
        __init__(btBroadphaseProxy self, btVector3 const & aabbMin, btVector3 const & aabbMax, void * userPtr, int collisionFilterGroup, int collisionFilterMask) -> btBroadphaseProxy
        """
        this = _bullet.new_btBroadphaseProxy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isPolyhedral(proxyType):
        """isPolyhedral(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isPolyhedral(proxyType)

    isPolyhedral = staticmethod(isPolyhedral)

    def isConvex(proxyType):
        """isConvex(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isConvex(proxyType)

    isConvex = staticmethod(isConvex)

    def isNonMoving(proxyType):
        """isNonMoving(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isNonMoving(proxyType)

    isNonMoving = staticmethod(isNonMoving)

    def isConcave(proxyType):
        """isConcave(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isConcave(proxyType)

    isConcave = staticmethod(isConcave)

    def isCompound(proxyType):
        """isCompound(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isCompound(proxyType)

    isCompound = staticmethod(isCompound)

    def isSoftBody(proxyType):
        """isSoftBody(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isSoftBody(proxyType)

    isSoftBody = staticmethod(isSoftBody)

    def isInfinite(proxyType):
        """isInfinite(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isInfinite(proxyType)

    isInfinite = staticmethod(isInfinite)

    def isConvex2d(proxyType):
        """isConvex2d(int proxyType) -> bool"""
        return _bullet.btBroadphaseProxy_isConvex2d(proxyType)

    isConvex2d = staticmethod(isConvex2d)
    __swig_destroy__ = _bullet.delete_btBroadphaseProxy
    __del__ = lambda self: None
btBroadphaseProxy_swigregister = _bullet.btBroadphaseProxy_swigregister
btBroadphaseProxy_swigregister(btBroadphaseProxy)

def btBroadphaseProxy_isPolyhedral(proxyType):
    """btBroadphaseProxy_isPolyhedral(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isPolyhedral(proxyType)

def btBroadphaseProxy_isConvex(proxyType):
    """btBroadphaseProxy_isConvex(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isConvex(proxyType)

def btBroadphaseProxy_isNonMoving(proxyType):
    """btBroadphaseProxy_isNonMoving(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isNonMoving(proxyType)

def btBroadphaseProxy_isConcave(proxyType):
    """btBroadphaseProxy_isConcave(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isConcave(proxyType)

def btBroadphaseProxy_isCompound(proxyType):
    """btBroadphaseProxy_isCompound(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isCompound(proxyType)

def btBroadphaseProxy_isSoftBody(proxyType):
    """btBroadphaseProxy_isSoftBody(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isSoftBody(proxyType)

def btBroadphaseProxy_isInfinite(proxyType):
    """btBroadphaseProxy_isInfinite(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isInfinite(proxyType)

def btBroadphaseProxy_isConvex2d(proxyType):
    """btBroadphaseProxy_isConvex2d(int proxyType) -> bool"""
    return _bullet.btBroadphaseProxy_isConvex2d(proxyType)

class btBroadphasePair(_object):
    """Proxy of C++ btBroadphasePair class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphasePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphasePair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btBroadphasePair self) -> btBroadphasePair
        __init__(btBroadphasePair self, btBroadphasePair other) -> btBroadphasePair
        __init__(btBroadphasePair self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> btBroadphasePair
        """
        this = _bullet.new_btBroadphasePair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_pProxy0"] = _bullet.btBroadphasePair_m_pProxy0_set
    __swig_getmethods__["m_pProxy0"] = _bullet.btBroadphasePair_m_pProxy0_get
    if _newclass:
        m_pProxy0 = _swig_property(_bullet.btBroadphasePair_m_pProxy0_get, _bullet.btBroadphasePair_m_pProxy0_set)
    __swig_setmethods__["m_pProxy1"] = _bullet.btBroadphasePair_m_pProxy1_set
    __swig_getmethods__["m_pProxy1"] = _bullet.btBroadphasePair_m_pProxy1_get
    if _newclass:
        m_pProxy1 = _swig_property(_bullet.btBroadphasePair_m_pProxy1_get, _bullet.btBroadphasePair_m_pProxy1_set)
    __swig_setmethods__["m_algorithm"] = _bullet.btBroadphasePair_m_algorithm_set
    __swig_getmethods__["m_algorithm"] = _bullet.btBroadphasePair_m_algorithm_get
    if _newclass:
        m_algorithm = _swig_property(_bullet.btBroadphasePair_m_algorithm_get, _bullet.btBroadphasePair_m_algorithm_set)
    __swig_destroy__ = _bullet.delete_btBroadphasePair
    __del__ = lambda self: None
btBroadphasePair_swigregister = _bullet.btBroadphasePair_swigregister
btBroadphasePair_swigregister(btBroadphasePair)

class btBroadphasePairSortPredicate(_object):
    """Proxy of C++ btBroadphasePairSortPredicate class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphasePairSortPredicate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphasePairSortPredicate, name)
    __repr__ = _swig_repr

    def __call__(self, a, b):
        """__call__(btBroadphasePairSortPredicate self, btBroadphasePair a, btBroadphasePair b) -> bool"""
        return _bullet.btBroadphasePairSortPredicate___call__(self, a, b)


    def __init__(self):
        """__init__(btBroadphasePairSortPredicate self) -> btBroadphasePairSortPredicate"""
        this = _bullet.new_btBroadphasePairSortPredicate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBroadphasePairSortPredicate
    __del__ = lambda self: None
btBroadphasePairSortPredicate_swigregister = _bullet.btBroadphasePairSortPredicate_swigregister
btBroadphasePairSortPredicate_swigregister(btBroadphasePairSortPredicate)

class btBroadphaseAabbCallback(_object):
    """Proxy of C++ btBroadphaseAabbCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseAabbCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseAabbCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btBroadphaseAabbCallback
    __del__ = lambda self: None

    def process(self, proxy):
        """process(btBroadphaseAabbCallback self, btBroadphaseProxy proxy) -> bool"""
        return _bullet.btBroadphaseAabbCallback_process(self, proxy)

btBroadphaseAabbCallback_swigregister = _bullet.btBroadphaseAabbCallback_swigregister
btBroadphaseAabbCallback_swigregister(btBroadphaseAabbCallback)

class btBroadphaseRayCallback(btBroadphaseAabbCallback):
    """Proxy of C++ btBroadphaseRayCallback class."""

    __swig_setmethods__ = {}
    for _s in [btBroadphaseAabbCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseRayCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseAabbCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseRayCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_rayDirectionInverse"] = _bullet.btBroadphaseRayCallback_m_rayDirectionInverse_set
    __swig_getmethods__["m_rayDirectionInverse"] = _bullet.btBroadphaseRayCallback_m_rayDirectionInverse_get
    if _newclass:
        m_rayDirectionInverse = _swig_property(_bullet.btBroadphaseRayCallback_m_rayDirectionInverse_get, _bullet.btBroadphaseRayCallback_m_rayDirectionInverse_set)
    __swig_setmethods__["m_signs"] = _bullet.btBroadphaseRayCallback_m_signs_set
    __swig_getmethods__["m_signs"] = _bullet.btBroadphaseRayCallback_m_signs_get
    if _newclass:
        m_signs = _swig_property(_bullet.btBroadphaseRayCallback_m_signs_get, _bullet.btBroadphaseRayCallback_m_signs_set)
    __swig_setmethods__["m_lambda_max"] = _bullet.btBroadphaseRayCallback_m_lambda_max_set
    __swig_getmethods__["m_lambda_max"] = _bullet.btBroadphaseRayCallback_m_lambda_max_get
    if _newclass:
        m_lambda_max = _swig_property(_bullet.btBroadphaseRayCallback_m_lambda_max_get, _bullet.btBroadphaseRayCallback_m_lambda_max_set)
    __swig_destroy__ = _bullet.delete_btBroadphaseRayCallback
    __del__ = lambda self: None
btBroadphaseRayCallback_swigregister = _bullet.btBroadphaseRayCallback_swigregister
btBroadphaseRayCallback_swigregister(btBroadphaseRayCallback)

class btBroadphaseInterface(_object):
    """Proxy of C++ btBroadphaseInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBroadphaseInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBroadphaseInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btBroadphaseInterface
    __del__ = lambda self: None

    def createProxy(self, aabbMin, aabbMax, shapeType, userPtr, collisionFilterGroup, collisionFilterMask, dispatcher):
        """createProxy(btBroadphaseInterface self, btVector3 const & aabbMin, btVector3 const & aabbMax, int shapeType, void * userPtr, int collisionFilterGroup, int collisionFilterMask, btDispatcher dispatcher) -> btBroadphaseProxy"""
        return _bullet.btBroadphaseInterface_createProxy(self, aabbMin, aabbMax, shapeType, userPtr, collisionFilterGroup, collisionFilterMask, dispatcher)


    def destroyProxy(self, proxy, dispatcher):
        """destroyProxy(btBroadphaseInterface self, btBroadphaseProxy proxy, btDispatcher dispatcher)"""
        return _bullet.btBroadphaseInterface_destroyProxy(self, proxy, dispatcher)


    def setAabb(self, proxy, aabbMin, aabbMax, dispatcher):
        """setAabb(btBroadphaseInterface self, btBroadphaseProxy proxy, btVector3 const & aabbMin, btVector3 const & aabbMax, btDispatcher dispatcher)"""
        return _bullet.btBroadphaseInterface_setAabb(self, proxy, aabbMin, aabbMax, dispatcher)


    def getAabb(self, proxy, aabbMin, aabbMax):
        """getAabb(btBroadphaseInterface self, btBroadphaseProxy proxy, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btBroadphaseInterface_getAabb(self, proxy, aabbMin, aabbMax)


    def rayTest_const_const(self, *args):
        """rayTest_const_const(btBroadphaseInterface self, btVector3 const & rayFrom, btVector3 const & rayTo, btBroadphaseRayCallback rayCallback, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btBroadphaseInterface_rayTest_const_const(self, *args)


    def rayTest_const(self, *args):
        """rayTest_const(btBroadphaseInterface self, btVector3 const & rayFrom, btVector3 const & rayTo, btBroadphaseRayCallback rayCallback, btVector3 const & aabbMin)"""
        return _bullet.btBroadphaseInterface_rayTest_const(self, *args)


    def rayTest(self, *args):
        """rayTest(btBroadphaseInterface self, btVector3 const & rayFrom, btVector3 const & rayTo, btBroadphaseRayCallback rayCallback)"""
        return _bullet.btBroadphaseInterface_rayTest(self, *args)


    def aabbTest(self, aabbMin, aabbMax, callback):
        """aabbTest(btBroadphaseInterface self, btVector3 const & aabbMin, btVector3 const & aabbMax, btBroadphaseAabbCallback callback)"""
        return _bullet.btBroadphaseInterface_aabbTest(self, aabbMin, aabbMax, callback)


    def calculateOverlappingPairs(self, dispatcher):
        """calculateOverlappingPairs(btBroadphaseInterface self, btDispatcher dispatcher)"""
        return _bullet.btBroadphaseInterface_calculateOverlappingPairs(self, dispatcher)


    def getOverlappingPairCache(self, *args):
        """
        getOverlappingPairCache(btBroadphaseInterface self) -> btOverlappingPairCache
        getOverlappingPairCache(btBroadphaseInterface self) -> btOverlappingPairCache
        """
        return _bullet.btBroadphaseInterface_getOverlappingPairCache(self, *args)


    def getBroadphaseAabb(self, aabbMin, aabbMax):
        """getBroadphaseAabb(btBroadphaseInterface self, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btBroadphaseInterface_getBroadphaseAabb(self, aabbMin, aabbMax)


    def resetPool(self, dispatcher):
        """resetPool(btBroadphaseInterface self, btDispatcher dispatcher)"""
        return _bullet.btBroadphaseInterface_resetPool(self, dispatcher)


    def printStats(self):
        """printStats(btBroadphaseInterface self)"""
        return _bullet.btBroadphaseInterface_printStats(self)

btBroadphaseInterface_swigregister = _bullet.btBroadphaseInterface_swigregister
btBroadphaseInterface_swigregister(btBroadphaseInterface)

BT_USE_PLACEMENT_NEW = _bullet.BT_USE_PLACEMENT_NEW
class btCollisionAlgorithmConstructionInfo(_object):
    """Proxy of C++ btCollisionAlgorithmConstructionInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionAlgorithmConstructionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionAlgorithmConstructionInfo, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btCollisionAlgorithmConstructionInfo self) -> btCollisionAlgorithmConstructionInfo
        __init__(btCollisionAlgorithmConstructionInfo self, btDispatcher dispatcher, int temp) -> btCollisionAlgorithmConstructionInfo
        """
        this = _bullet.new_btCollisionAlgorithmConstructionInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_dispatcher1"] = _bullet.btCollisionAlgorithmConstructionInfo_m_dispatcher1_set
    __swig_getmethods__["m_dispatcher1"] = _bullet.btCollisionAlgorithmConstructionInfo_m_dispatcher1_get
    if _newclass:
        m_dispatcher1 = _swig_property(_bullet.btCollisionAlgorithmConstructionInfo_m_dispatcher1_get, _bullet.btCollisionAlgorithmConstructionInfo_m_dispatcher1_set)
    __swig_setmethods__["m_manifold"] = _bullet.btCollisionAlgorithmConstructionInfo_m_manifold_set
    __swig_getmethods__["m_manifold"] = _bullet.btCollisionAlgorithmConstructionInfo_m_manifold_get
    if _newclass:
        m_manifold = _swig_property(_bullet.btCollisionAlgorithmConstructionInfo_m_manifold_get, _bullet.btCollisionAlgorithmConstructionInfo_m_manifold_set)
    __swig_destroy__ = _bullet.delete_btCollisionAlgorithmConstructionInfo
    __del__ = lambda self: None
btCollisionAlgorithmConstructionInfo_swigregister = _bullet.btCollisionAlgorithmConstructionInfo_swigregister
btCollisionAlgorithmConstructionInfo_swigregister(btCollisionAlgorithmConstructionInfo)

class btCollisionAlgorithm(_object):
    """Proxy of C++ btCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionAlgorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btCollisionAlgorithm
    __del__ = lambda self: None

    def processCollision(self, body0Wrap, body1Wrap, dispatchInfo, resultOut):
        """processCollision(btCollisionAlgorithm self, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, btDispatcherInfo dispatchInfo, btManifoldResult resultOut)"""
        return _bullet.btCollisionAlgorithm_processCollision(self, body0Wrap, body1Wrap, dispatchInfo, resultOut)


    def calculateTimeOfImpact(self, body0, body1, dispatchInfo, resultOut):
        """calculateTimeOfImpact(btCollisionAlgorithm self, btCollisionObject body0, btCollisionObject body1, btDispatcherInfo dispatchInfo, btManifoldResult resultOut) -> btScalar"""
        return _bullet.btCollisionAlgorithm_calculateTimeOfImpact(self, body0, body1, dispatchInfo, resultOut)


    def getAllContactManifolds(self, manifoldArray):
        """getAllContactManifolds(btCollisionAlgorithm self, btManifoldArray & manifoldArray)"""
        return _bullet.btCollisionAlgorithm_getAllContactManifolds(self, manifoldArray)

btCollisionAlgorithm_swigregister = _bullet.btCollisionAlgorithm_swigregister
btCollisionAlgorithm_swigregister(btCollisionAlgorithm)

class btQuadWord(_object):
    """Proxy of C++ btQuadWord class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuadWord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuadWord, name)
    __repr__ = _swig_repr

    def getX(self):
        """getX(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_getX(self)


    def getY(self):
        """getY(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_getY(self)


    def getZ(self):
        """getZ(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_getZ(self)


    def setX(self, _x):
        """setX(btQuadWord self, btScalar _x)"""
        return _bullet.btQuadWord_setX(self, _x)


    def setY(self, _y):
        """setY(btQuadWord self, btScalar _y)"""
        return _bullet.btQuadWord_setY(self, _y)


    def setZ(self, _z):
        """setZ(btQuadWord self, btScalar _z)"""
        return _bullet.btQuadWord_setZ(self, _z)


    def setW(self, _w):
        """setW(btQuadWord self, btScalar _w)"""
        return _bullet.btQuadWord_setW(self, _w)


    def x(self):
        """x(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_x(self)


    def y(self):
        """y(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_y(self)


    def z(self):
        """z(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_z(self)


    def w(self):
        """w(btQuadWord self) -> btScalar const &"""
        return _bullet.btQuadWord_w(self)


    def btScalarPtr(self):
        """btScalarPtr(btQuadWord self) -> btScalar *"""
        return _bullet.btQuadWord_btScalarPtr(self)


    def btScalarConstPtr(self):
        """btScalarConstPtr(btQuadWord self) -> btScalar const *"""
        return _bullet.btQuadWord_btScalarConstPtr(self)


    def __eq__(self, other):
        """__eq__(btQuadWord self, btQuadWord other) -> bool"""
        return _bullet.btQuadWord___eq__(self, other)


    def __ne__(self, other):
        """__ne__(btQuadWord self, btQuadWord other) -> bool"""
        return _bullet.btQuadWord___ne__(self, other)


    def setValue(self, *args):
        """
        setValue(btQuadWord self, btScalar const & _x, btScalar const & _y, btScalar const & _z)
        setValue(btQuadWord self, btScalar const & _x, btScalar const & _y, btScalar const & _z, btScalar const & _w)
        """
        return _bullet.btQuadWord_setValue(self, *args)


    def __init__(self, *args):
        """
        __init__(btQuadWord self) -> btQuadWord
        __init__(btQuadWord self, btScalar const & _x, btScalar const & _y, btScalar const & _z) -> btQuadWord
        __init__(btQuadWord self, btScalar const & _x, btScalar const & _y, btScalar const & _z, btScalar const & _w) -> btQuadWord
        """
        this = _bullet.new_btQuadWord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setMax(self, other):
        """setMax(btQuadWord self, btQuadWord other)"""
        return _bullet.btQuadWord_setMax(self, other)


    def setMin(self, other):
        """setMin(btQuadWord self, btQuadWord other)"""
        return _bullet.btQuadWord_setMin(self, other)

    __swig_destroy__ = _bullet.delete_btQuadWord
    __del__ = lambda self: None
btQuadWord_swigregister = _bullet.btQuadWord_swigregister
btQuadWord_swigregister(btQuadWord)

btQuaternionDataName = _bullet.btQuaternionDataName

def dot(*args):
    """
    dot(btVector2 const & v1, btVector2 const & v2) -> btScalar
    dot(btQuaternion const & q1, btQuaternion const & q2) -> btScalar
    """
    return _bullet.dot(*args)

def length(q):
    """length(btQuaternion const & q) -> btScalar"""
    return _bullet.length(q)

def btAngle(*args):
    """
    btAngle(btVector3 const & v1, btVector3 const & v2) -> btScalar
    btAngle(btQuaternion const & q1, btQuaternion const & q2) -> btScalar
    """
    return _bullet.btAngle(*args)

def inverse(q):
    """inverse(btQuaternion const & q) -> btQuaternion"""
    return _bullet.inverse(q)

def slerp(q1, q2, t):
    """slerp(btQuaternion const & q1, btQuaternion const & q2, btScalar const & t) -> btQuaternion"""
    return _bullet.slerp(q1, q2, t)

def quatRotate(rotation, v):
    """quatRotate(btQuaternion const & rotation, btVector3 const & v) -> btVector3"""
    return _bullet.quatRotate(rotation, v)

def shortestArcQuat(v0, v1):
    """shortestArcQuat(btVector3 const & v0, btVector3 const & v1) -> btQuaternion"""
    return _bullet.shortestArcQuat(v0, v1)

def shortestArcQuatNormalize2(v0, v1):
    """shortestArcQuatNormalize2(btVector3 & v0, btVector3 & v1) -> btQuaternion"""
    return _bullet.shortestArcQuatNormalize2(v0, v1)
class btQuaternionFloatData(_object):
    """Proxy of C++ btQuaternionFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuaternionFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuaternionFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = _bullet.btQuaternionFloatData_m_floats_set
    __swig_getmethods__["m_floats"] = _bullet.btQuaternionFloatData_m_floats_get
    if _newclass:
        m_floats = _swig_property(_bullet.btQuaternionFloatData_m_floats_get, _bullet.btQuaternionFloatData_m_floats_set)

    def __init__(self):
        """__init__(btQuaternionFloatData self) -> btQuaternionFloatData"""
        this = _bullet.new_btQuaternionFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuaternionFloatData
    __del__ = lambda self: None
btQuaternionFloatData_swigregister = _bullet.btQuaternionFloatData_swigregister
btQuaternionFloatData_swigregister(btQuaternionFloatData)

class btQuaternionDoubleData(_object):
    """Proxy of C++ btQuaternionDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuaternionDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuaternionDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_floats"] = _bullet.btQuaternionDoubleData_m_floats_set
    __swig_getmethods__["m_floats"] = _bullet.btQuaternionDoubleData_m_floats_get
    if _newclass:
        m_floats = _swig_property(_bullet.btQuaternionDoubleData_m_floats_get, _bullet.btQuaternionDoubleData_m_floats_set)

    def __init__(self):
        """__init__(btQuaternionDoubleData self) -> btQuaternionDoubleData"""
        this = _bullet.new_btQuaternionDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuaternionDoubleData
    __del__ = lambda self: None
btQuaternionDoubleData_swigregister = _bullet.btQuaternionDoubleData_swigregister
btQuaternionDoubleData_swigregister(btQuaternionDoubleData)

class btMatrix3x3FloatData(_object):
    """Proxy of C++ btMatrix3x3FloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMatrix3x3FloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMatrix3x3FloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_el"] = _bullet.btMatrix3x3FloatData_m_el_set
    __swig_getmethods__["m_el"] = _bullet.btMatrix3x3FloatData_m_el_get
    if _newclass:
        m_el = _swig_property(_bullet.btMatrix3x3FloatData_m_el_get, _bullet.btMatrix3x3FloatData_m_el_set)

    def __init__(self):
        """__init__(btMatrix3x3FloatData self) -> btMatrix3x3FloatData"""
        this = _bullet.new_btMatrix3x3FloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMatrix3x3FloatData
    __del__ = lambda self: None
btMatrix3x3FloatData_swigregister = _bullet.btMatrix3x3FloatData_swigregister
btMatrix3x3FloatData_swigregister(btMatrix3x3FloatData)

class btMatrix3x3DoubleData(_object):
    """Proxy of C++ btMatrix3x3DoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMatrix3x3DoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMatrix3x3DoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_el"] = _bullet.btMatrix3x3DoubleData_m_el_set
    __swig_getmethods__["m_el"] = _bullet.btMatrix3x3DoubleData_m_el_get
    if _newclass:
        m_el = _swig_property(_bullet.btMatrix3x3DoubleData_m_el_get, _bullet.btMatrix3x3DoubleData_m_el_set)

    def __init__(self):
        """__init__(btMatrix3x3DoubleData self) -> btMatrix3x3DoubleData"""
        this = _bullet.new_btMatrix3x3DoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMatrix3x3DoubleData
    __del__ = lambda self: None
btMatrix3x3DoubleData_swigregister = _bullet.btMatrix3x3DoubleData_swigregister
btMatrix3x3DoubleData_swigregister(btMatrix3x3DoubleData)

class btTransformFloatData(_object):
    """Proxy of C++ btTransformFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTransformFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTransformFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_basis"] = _bullet.btTransformFloatData_m_basis_set
    __swig_getmethods__["m_basis"] = _bullet.btTransformFloatData_m_basis_get
    if _newclass:
        m_basis = _swig_property(_bullet.btTransformFloatData_m_basis_get, _bullet.btTransformFloatData_m_basis_set)
    __swig_setmethods__["m_origin"] = _bullet.btTransformFloatData_m_origin_set
    __swig_getmethods__["m_origin"] = _bullet.btTransformFloatData_m_origin_get
    if _newclass:
        m_origin = _swig_property(_bullet.btTransformFloatData_m_origin_get, _bullet.btTransformFloatData_m_origin_set)

    def __init__(self):
        """__init__(btTransformFloatData self) -> btTransformFloatData"""
        this = _bullet.new_btTransformFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTransformFloatData
    __del__ = lambda self: None
btTransformFloatData_swigregister = _bullet.btTransformFloatData_swigregister
btTransformFloatData_swigregister(btTransformFloatData)

class btTransformDoubleData(_object):
    """Proxy of C++ btTransformDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTransformDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTransformDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_basis"] = _bullet.btTransformDoubleData_m_basis_set
    __swig_getmethods__["m_basis"] = _bullet.btTransformDoubleData_m_basis_get
    if _newclass:
        m_basis = _swig_property(_bullet.btTransformDoubleData_m_basis_get, _bullet.btTransformDoubleData_m_basis_set)
    __swig_setmethods__["m_origin"] = _bullet.btTransformDoubleData_m_origin_set
    __swig_getmethods__["m_origin"] = _bullet.btTransformDoubleData_m_origin_get
    if _newclass:
        m_origin = _swig_property(_bullet.btTransformDoubleData_m_origin_get, _bullet.btTransformDoubleData_m_origin_set)

    def __init__(self):
        """__init__(btTransformDoubleData self) -> btTransformDoubleData"""
        this = _bullet.new_btTransformDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTransformDoubleData
    __del__ = lambda self: None
btTransformDoubleData_swigregister = _bullet.btTransformDoubleData_swigregister
btTransformDoubleData_swigregister(btTransformDoubleData)


def AabbExpand(aabbMin, aabbMax, expansionMin, expansionMax):
    """AabbExpand(btVector3 & aabbMin, btVector3 & aabbMax, btVector3 const & expansionMin, btVector3 const & expansionMax)"""
    return _bullet.AabbExpand(aabbMin, aabbMax, expansionMin, expansionMax)

def TestPointAgainstAabb2(aabbMin1, aabbMax1, point):
    """TestPointAgainstAabb2(btVector3 const & aabbMin1, btVector3 const & aabbMax1, btVector3 const & point) -> bool"""
    return _bullet.TestPointAgainstAabb2(aabbMin1, aabbMax1, point)

def TestAabbAgainstAabb2(aabbMin1, aabbMax1, aabbMin2, aabbMax2):
    """TestAabbAgainstAabb2(btVector3 const & aabbMin1, btVector3 const & aabbMax1, btVector3 const & aabbMin2, btVector3 const & aabbMax2) -> bool"""
    return _bullet.TestAabbAgainstAabb2(aabbMin1, aabbMax1, aabbMin2, aabbMax2)

def TestTriangleAgainstAabb2(vertices, aabbMin, aabbMax):
    """TestTriangleAgainstAabb2(btVector3 const * vertices, btVector3 const & aabbMin, btVector3 const & aabbMax) -> bool"""
    return _bullet.TestTriangleAgainstAabb2(vertices, aabbMin, aabbMax)

def btOutcode(p, halfExtent):
    """btOutcode(btVector3 const & p, btVector3 const & halfExtent) -> int"""
    return _bullet.btOutcode(p, halfExtent)

def btRayAabb2(rayFrom, rayInvDirection, raySign, bounds, tmin, lambda_min, lambda_max):
    """btRayAabb2(btVector3 const & rayFrom, btVector3 const & rayInvDirection, unsigned int const [3] raySign, btVector3 const [2] bounds, btScalar & tmin, btScalar lambda_min, btScalar lambda_max) -> bool"""
    return _bullet.btRayAabb2(rayFrom, rayInvDirection, raySign, bounds, tmin, lambda_min, lambda_max)

def btRayAabb(rayFrom, rayTo, aabbMin, aabbMax, param, normal):
    """btRayAabb(btVector3 const & rayFrom, btVector3 const & rayTo, btVector3 const & aabbMin, btVector3 const & aabbMax, btScalar & param, btVector3 & normal) -> bool"""
    return _bullet.btRayAabb(rayFrom, rayTo, aabbMin, aabbMax, param, normal)

def btTransformAabb(*args):
    """
    btTransformAabb(btVector3 const & halfExtents, btScalar margin, btTransform const & t, btVector3 & aabbMinOut, btVector3 & aabbMaxOut)
    btTransformAabb(btVector3 const & localAabbMin, btVector3 const & localAabbMax, btScalar margin, btTransform const & trans, btVector3 & aabbMinOut, btVector3 & aabbMaxOut)
    """
    return _bullet.btTransformAabb(*args)
USE_BANCHLESS = _bullet.USE_BANCHLESS

def testQuantizedAabbAgainstQuantizedAabb(aabbMin1, aabbMax1, aabbMin2, aabbMax2):
    """testQuantizedAabbAgainstQuantizedAabb(unsigned short const * aabbMin1, unsigned short const * aabbMax1, unsigned short const * aabbMin2, unsigned short const * aabbMax2) -> unsigned int"""
    return _bullet.testQuantizedAabbAgainstQuantizedAabb(aabbMin1, aabbMax1, aabbMin2, aabbMax2)
DBVT_IMPL_GENERIC = _bullet.DBVT_IMPL_GENERIC
DBVT_IMPL_SSE = _bullet.DBVT_IMPL_SSE
DBVT_USE_TEMPLATE = _bullet.DBVT_USE_TEMPLATE
DBVT_USE_INTRINSIC_SSE = _bullet.DBVT_USE_INTRINSIC_SSE
DBVT_USE_MEMMOVE = _bullet.DBVT_USE_MEMMOVE
DBVT_ENABLE_BENCHMARK = _bullet.DBVT_ENABLE_BENCHMARK
DBVT_SELECT_IMPL = _bullet.DBVT_SELECT_IMPL
DBVT_MERGE_IMPL = _bullet.DBVT_MERGE_IMPL
DBVT_INT0_IMPL = _bullet.DBVT_INT0_IMPL
class btDbvtAabbMm(_object):
    """Proxy of C++ btDbvtAabbMm class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvtAabbMm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvtAabbMm, name)
    __repr__ = _swig_repr

    def Center(self):
        """Center(btDbvtAabbMm self) -> btVector3"""
        return _bullet.btDbvtAabbMm_Center(self)


    def Lengths(self):
        """Lengths(btDbvtAabbMm self) -> btVector3"""
        return _bullet.btDbvtAabbMm_Lengths(self)


    def Extents(self):
        """Extents(btDbvtAabbMm self) -> btVector3"""
        return _bullet.btDbvtAabbMm_Extents(self)


    def Mins(self):
        """Mins(btDbvtAabbMm self) -> btVector3 const &"""
        return _bullet.btDbvtAabbMm_Mins(self)


    def Maxs(self):
        """Maxs(btDbvtAabbMm self) -> btVector3 const &"""
        return _bullet.btDbvtAabbMm_Maxs(self)


    def FromCE(c, e):
        """FromCE(btVector3 const & c, btVector3 const & e) -> btDbvtAabbMm"""
        return _bullet.btDbvtAabbMm_FromCE(c, e)

    FromCE = staticmethod(FromCE)

    def FromCR(c, r):
        """FromCR(btVector3 const & c, btScalar r) -> btDbvtAabbMm"""
        return _bullet.btDbvtAabbMm_FromCR(c, r)

    FromCR = staticmethod(FromCR)

    def FromMM(mi, mx):
        """FromMM(btVector3 const & mi, btVector3 const & mx) -> btDbvtAabbMm"""
        return _bullet.btDbvtAabbMm_FromMM(mi, mx)

    FromMM = staticmethod(FromMM)

    def FromPoints(*args):
        """
        FromPoints(btVector3 const * pts, int n) -> btDbvtAabbMm
        FromPoints(btVector3 const ** ppts, int n) -> btDbvtAabbMm
        """
        return _bullet.btDbvtAabbMm_FromPoints(*args)

    FromPoints = staticmethod(FromPoints)

    def Expand(self, e):
        """Expand(btDbvtAabbMm self, btVector3 const & e)"""
        return _bullet.btDbvtAabbMm_Expand(self, e)


    def SignedExpand(self, e):
        """SignedExpand(btDbvtAabbMm self, btVector3 const & e)"""
        return _bullet.btDbvtAabbMm_SignedExpand(self, e)


    def Contain(self, a):
        """Contain(btDbvtAabbMm self, btDbvtAabbMm a) -> bool"""
        return _bullet.btDbvtAabbMm_Contain(self, a)


    def Classify(self, n, o, s):
        """Classify(btDbvtAabbMm self, btVector3 const & n, btScalar o, int s) -> int"""
        return _bullet.btDbvtAabbMm_Classify(self, n, o, s)


    def ProjectMinimum(self, v, signs):
        """ProjectMinimum(btDbvtAabbMm self, btVector3 const & v, unsigned int signs) -> btScalar"""
        return _bullet.btDbvtAabbMm_ProjectMinimum(self, v, signs)


    def tMins(self):
        """tMins(btDbvtAabbMm self) -> btVector3 &"""
        return _bullet.btDbvtAabbMm_tMins(self)


    def tMaxs(self):
        """tMaxs(btDbvtAabbMm self) -> btVector3 &"""
        return _bullet.btDbvtAabbMm_tMaxs(self)


    def __init__(self):
        """__init__(btDbvtAabbMm self) -> btDbvtAabbMm"""
        this = _bullet.new_btDbvtAabbMm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDbvtAabbMm
    __del__ = lambda self: None
btDbvtAabbMm_swigregister = _bullet.btDbvtAabbMm_swigregister
btDbvtAabbMm_swigregister(btDbvtAabbMm)

def btDbvtAabbMm_FromCE(c, e):
    """btDbvtAabbMm_FromCE(btVector3 const & c, btVector3 const & e) -> btDbvtAabbMm"""
    return _bullet.btDbvtAabbMm_FromCE(c, e)

def btDbvtAabbMm_FromCR(c, r):
    """btDbvtAabbMm_FromCR(btVector3 const & c, btScalar r) -> btDbvtAabbMm"""
    return _bullet.btDbvtAabbMm_FromCR(c, r)

def btDbvtAabbMm_FromMM(mi, mx):
    """btDbvtAabbMm_FromMM(btVector3 const & mi, btVector3 const & mx) -> btDbvtAabbMm"""
    return _bullet.btDbvtAabbMm_FromMM(mi, mx)

def btDbvtAabbMm_FromPoints(*args):
    """
    FromPoints(btVector3 const * pts, int n) -> btDbvtAabbMm
    btDbvtAabbMm_FromPoints(btVector3 const ** ppts, int n) -> btDbvtAabbMm
    """
    return _bullet.btDbvtAabbMm_FromPoints(*args)

def Intersect(*args):
    """
    Intersect(btDbvtAabbMm a, btDbvtAabbMm b) -> bool
    Intersect(btDbvtAabbMm a, btVector3 const & b) -> bool
    """
    return _bullet.Intersect(*args)

def Proximity(a, b):
    """Proximity(btDbvtAabbMm a, btDbvtAabbMm b) -> btScalar"""
    return _bullet.Proximity(a, b)

def Select(o, a, b):
    """Select(btDbvtAabbMm o, btDbvtAabbMm a, btDbvtAabbMm b) -> int"""
    return _bullet.Select(o, a, b)

def Merge(a, b, r):
    """Merge(btDbvtAabbMm a, btDbvtAabbMm b, btDbvtAabbMm r)"""
    return _bullet.Merge(a, b, r)

def NotEqual(a, b):
    """NotEqual(btDbvtAabbMm a, btDbvtAabbMm b) -> bool"""
    return _bullet.NotEqual(a, b)

class btDbvtNode(_object):
    """Proxy of C++ btDbvtNode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvtNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvtNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["volume"] = _bullet.btDbvtNode_volume_set
    __swig_getmethods__["volume"] = _bullet.btDbvtNode_volume_get
    if _newclass:
        volume = _swig_property(_bullet.btDbvtNode_volume_get, _bullet.btDbvtNode_volume_set)
    __swig_setmethods__["parent"] = _bullet.btDbvtNode_parent_set
    __swig_getmethods__["parent"] = _bullet.btDbvtNode_parent_get
    if _newclass:
        parent = _swig_property(_bullet.btDbvtNode_parent_get, _bullet.btDbvtNode_parent_set)

    def isleaf(self):
        """isleaf(btDbvtNode self) -> bool"""
        return _bullet.btDbvtNode_isleaf(self)


    def isinternal(self):
        """isinternal(btDbvtNode self) -> bool"""
        return _bullet.btDbvtNode_isinternal(self)


    def __init__(self):
        """__init__(btDbvtNode self) -> btDbvtNode"""
        this = _bullet.new_btDbvtNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDbvtNode
    __del__ = lambda self: None
btDbvtNode_swigregister = _bullet.btDbvtNode_swigregister
btDbvtNode_swigregister(btDbvtNode)

class btDbvt(_object):
    """Proxy of C++ btDbvt class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvt, name)
    __repr__ = _swig_repr
    SIMPLE_STACKSIZE = _bullet.btDbvt_SIMPLE_STACKSIZE
    DOUBLE_STACKSIZE = _bullet.btDbvt_DOUBLE_STACKSIZE
    __swig_setmethods__["m_root"] = _bullet.btDbvt_m_root_set
    __swig_getmethods__["m_root"] = _bullet.btDbvt_m_root_get
    if _newclass:
        m_root = _swig_property(_bullet.btDbvt_m_root_get, _bullet.btDbvt_m_root_set)
    __swig_setmethods__["m_free"] = _bullet.btDbvt_m_free_set
    __swig_getmethods__["m_free"] = _bullet.btDbvt_m_free_get
    if _newclass:
        m_free = _swig_property(_bullet.btDbvt_m_free_get, _bullet.btDbvt_m_free_set)
    __swig_setmethods__["m_lkhd"] = _bullet.btDbvt_m_lkhd_set
    __swig_getmethods__["m_lkhd"] = _bullet.btDbvt_m_lkhd_get
    if _newclass:
        m_lkhd = _swig_property(_bullet.btDbvt_m_lkhd_get, _bullet.btDbvt_m_lkhd_set)
    __swig_setmethods__["m_leaves"] = _bullet.btDbvt_m_leaves_set
    __swig_getmethods__["m_leaves"] = _bullet.btDbvt_m_leaves_get
    if _newclass:
        m_leaves = _swig_property(_bullet.btDbvt_m_leaves_get, _bullet.btDbvt_m_leaves_set)
    __swig_setmethods__["m_opath"] = _bullet.btDbvt_m_opath_set
    __swig_getmethods__["m_opath"] = _bullet.btDbvt_m_opath_get
    if _newclass:
        m_opath = _swig_property(_bullet.btDbvt_m_opath_get, _bullet.btDbvt_m_opath_set)
    __swig_setmethods__["m_stkStack"] = _bullet.btDbvt_m_stkStack_set
    __swig_getmethods__["m_stkStack"] = _bullet.btDbvt_m_stkStack_get
    if _newclass:
        m_stkStack = _swig_property(_bullet.btDbvt_m_stkStack_get, _bullet.btDbvt_m_stkStack_set)

    def __init__(self):
        """__init__(btDbvt self) -> btDbvt"""
        this = _bullet.new_btDbvt()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDbvt
    __del__ = lambda self: None

    def clear(self):
        """clear(btDbvt self)"""
        return _bullet.btDbvt_clear(self)


    def empty(self):
        """empty(btDbvt self) -> bool"""
        return _bullet.btDbvt_empty(self)


    def optimizeBottomUp(self):
        """optimizeBottomUp(btDbvt self)"""
        return _bullet.btDbvt_optimizeBottomUp(self)


    def optimizeTopDown(self, bu_treshold=128):
        """
        optimizeTopDown(btDbvt self, int bu_treshold=128)
        optimizeTopDown(btDbvt self)
        """
        return _bullet.btDbvt_optimizeTopDown(self, bu_treshold)


    def optimizeIncremental(self, passes):
        """optimizeIncremental(btDbvt self, int passes)"""
        return _bullet.btDbvt_optimizeIncremental(self, passes)


    def insert(self, box, data):
        """insert(btDbvt self, btDbvtAabbMm box, void * data) -> btDbvtNode"""
        return _bullet.btDbvt_insert(self, box, data)


    def update(self, *args):
        """
        update(btDbvt self, btDbvtNode leaf, int lookahead=-1)
        update(btDbvt self, btDbvtNode leaf)
        update(btDbvt self, btDbvtNode leaf, btDbvtAabbMm volume)
        update(btDbvt self, btDbvtNode leaf, btDbvtAabbMm volume, btVector3 const & velocity, btScalar margin) -> bool
        update(btDbvt self, btDbvtNode leaf, btDbvtAabbMm volume, btVector3 const & velocity) -> bool
        update(btDbvt self, btDbvtNode leaf, btDbvtAabbMm volume, btScalar margin) -> bool
        """
        return _bullet.btDbvt_update(self, *args)


    def remove(self, leaf):
        """remove(btDbvt self, btDbvtNode leaf)"""
        return _bullet.btDbvt_remove(self, leaf)


    def write(self, iwriter):
        """write(btDbvt self, btDbvt::IWriter * iwriter)"""
        return _bullet.btDbvt_write(self, iwriter)


    def clone(self, dest, iclone=None):
        """
        clone(btDbvt self, btDbvt dest, btDbvt::IClone * iclone=None)
        clone(btDbvt self, btDbvt dest)
        """
        return _bullet.btDbvt_clone(self, dest, iclone)


    def maxdepth(node):
        """maxdepth(btDbvtNode node) -> int"""
        return _bullet.btDbvt_maxdepth(node)

    maxdepth = staticmethod(maxdepth)

    def countLeaves(node):
        """countLeaves(btDbvtNode node) -> int"""
        return _bullet.btDbvt_countLeaves(node)

    countLeaves = staticmethod(countLeaves)

    def extractLeaves(node, leaves):
        """extractLeaves(btDbvtNode node, btAlignedObjectArray< btDbvtNode const * > & leaves)"""
        return _bullet.btDbvt_extractLeaves(node, leaves)

    extractLeaves = staticmethod(extractLeaves)

    def benchmark():
        """benchmark()"""
        return _bullet.btDbvt_benchmark()

    benchmark = staticmethod(benchmark)

    def enumNodes(root, policy):
        """enumNodes(btDbvtNode root, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_enumNodes(root, policy)

    enumNodes = staticmethod(enumNodes)

    def enumLeaves(root, policy):
        """enumLeaves(btDbvtNode root, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_enumLeaves(root, policy)

    enumLeaves = staticmethod(enumLeaves)

    def collideTT(self, root0, root1, policy):
        """collideTT(btDbvt self, btDbvtNode root0, btDbvtNode root1, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_collideTT(self, root0, root1, policy)


    def collideTTpersistentStack(self, root0, root1, policy):
        """collideTTpersistentStack(btDbvt self, btDbvtNode root0, btDbvtNode root1, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_collideTTpersistentStack(self, root0, root1, policy)


    def collideTV(self, root, volume, policy):
        """collideTV(btDbvt self, btDbvtNode root, btDbvtAabbMm volume, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_collideTV(self, root, volume, policy)


    def collideTVNoStackAlloc(self, root, volume, stack, policy):
        """collideTVNoStackAlloc(btDbvt self, btDbvtNode root, btDbvtAabbMm volume, btNodeStack & stack, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_collideTVNoStackAlloc(self, root, volume, stack, policy)


    def rayTest(root, rayFrom, rayTo, policy):
        """rayTest(btDbvtNode root, btVector3 const & rayFrom, btVector3 const & rayTo, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_rayTest(root, rayFrom, rayTo, policy)

    rayTest = staticmethod(rayTest)

    def rayTestInternal(self, root, rayFrom, rayTo, rayDirectionInverse, signs, lambda_max, aabbMin, aabbMax, stack, policy):
        """rayTestInternal(btDbvt self, btDbvtNode root, btVector3 const & rayFrom, btVector3 const & rayTo, btVector3 const & rayDirectionInverse, unsigned int [3] signs, btScalar lambda_max, btVector3 const & aabbMin, btVector3 const & aabbMax, btAlignedObjectArray< btDbvtNode const * > & stack, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_rayTestInternal(self, root, rayFrom, rayTo, rayDirectionInverse, signs, lambda_max, aabbMin, aabbMax, stack, policy)


    def collideKDOP(root, normals, offsets, count, policy):
        """collideKDOP(btDbvtNode root, btVector3 const * normals, btScalar const * offsets, int count, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_collideKDOP(root, normals, offsets, count, policy)

    collideKDOP = staticmethod(collideKDOP)

    def collideOCL(root, normals, offsets, sortaxis, count, policy, fullsort=True):
        """
        collideOCL(btDbvtNode root, btVector3 const * normals, btScalar const * offsets, btVector3 const & sortaxis, int count, btDbvt::ICollide & policy, bool fullsort=True)
        collideOCL(btDbvtNode root, btVector3 const * normals, btScalar const * offsets, btVector3 const & sortaxis, int count, btDbvt::ICollide & policy)
        """
        return _bullet.btDbvt_collideOCL(root, normals, offsets, sortaxis, count, policy, fullsort)

    collideOCL = staticmethod(collideOCL)

    def collideTU(root, policy):
        """collideTU(btDbvtNode root, btDbvt::ICollide & policy)"""
        return _bullet.btDbvt_collideTU(root, policy)

    collideTU = staticmethod(collideTU)

    def nearest(i, a, v, l, h):
        """nearest(int const * i, btDbvt::sStkNPS const * a, btScalar v, int l, int h) -> int"""
        return _bullet.btDbvt_nearest(i, a, v, l, h)

    nearest = staticmethod(nearest)

    def allocate(ifree, stock, value):
        """allocate(btAlignedObjectArray< int > & ifree, btAlignedObjectArray< btDbvt::sStkNPS > & stock, btDbvt::sStkNPS const & value) -> int"""
        return _bullet.btDbvt_allocate(ifree, stock, value)

    allocate = staticmethod(allocate)
btDbvt_swigregister = _bullet.btDbvt_swigregister
btDbvt_swigregister(btDbvt)

def btDbvt_maxdepth(node):
    """btDbvt_maxdepth(btDbvtNode node) -> int"""
    return _bullet.btDbvt_maxdepth(node)

def btDbvt_countLeaves(node):
    """btDbvt_countLeaves(btDbvtNode node) -> int"""
    return _bullet.btDbvt_countLeaves(node)

def btDbvt_extractLeaves(node, leaves):
    """btDbvt_extractLeaves(btDbvtNode node, btAlignedObjectArray< btDbvtNode const * > & leaves)"""
    return _bullet.btDbvt_extractLeaves(node, leaves)

def btDbvt_benchmark():
    """btDbvt_benchmark()"""
    return _bullet.btDbvt_benchmark()

def btDbvt_enumNodes(root, policy):
    """btDbvt_enumNodes(btDbvtNode root, btDbvt::ICollide & policy)"""
    return _bullet.btDbvt_enumNodes(root, policy)

def btDbvt_enumLeaves(root, policy):
    """btDbvt_enumLeaves(btDbvtNode root, btDbvt::ICollide & policy)"""
    return _bullet.btDbvt_enumLeaves(root, policy)

def btDbvt_rayTest(root, rayFrom, rayTo, policy):
    """btDbvt_rayTest(btDbvtNode root, btVector3 const & rayFrom, btVector3 const & rayTo, btDbvt::ICollide & policy)"""
    return _bullet.btDbvt_rayTest(root, rayFrom, rayTo, policy)

def btDbvt_collideKDOP(root, normals, offsets, count, policy):
    """btDbvt_collideKDOP(btDbvtNode root, btVector3 const * normals, btScalar const * offsets, int count, btDbvt::ICollide & policy)"""
    return _bullet.btDbvt_collideKDOP(root, normals, offsets, count, policy)

def btDbvt_collideOCL(root, normals, offsets, sortaxis, count, policy, fullsort=True):
    """
    collideOCL(btDbvtNode root, btVector3 const * normals, btScalar const * offsets, btVector3 const & sortaxis, int count, btDbvt::ICollide & policy, bool fullsort=True)
    btDbvt_collideOCL(btDbvtNode root, btVector3 const * normals, btScalar const * offsets, btVector3 const & sortaxis, int count, btDbvt::ICollide & policy)
    """
    return _bullet.btDbvt_collideOCL(root, normals, offsets, sortaxis, count, policy, fullsort)

def btDbvt_collideTU(root, policy):
    """btDbvt_collideTU(btDbvtNode root, btDbvt::ICollide & policy)"""
    return _bullet.btDbvt_collideTU(root, policy)

def btDbvt_nearest(i, a, v, l, h):
    """btDbvt_nearest(int const * i, btDbvt::sStkNPS const * a, btScalar v, int l, int h) -> int"""
    return _bullet.btDbvt_nearest(i, a, v, l, h)

def btDbvt_allocate(ifree, stock, value):
    """btDbvt_allocate(btAlignedObjectArray< int > & ifree, btAlignedObjectArray< btDbvt::sStkNPS > & stock, btDbvt::sStkNPS const & value) -> int"""
    return _bullet.btDbvt_allocate(ifree, stock, value)

class btOverlappingPairCallback(_object):
    """Proxy of C++ btOverlappingPairCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOverlappingPairCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btOverlappingPairCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btOverlappingPairCallback
    __del__ = lambda self: None

    def addOverlappingPair(self, proxy0, proxy1):
        """addOverlappingPair(btOverlappingPairCallback self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> btBroadphasePair"""
        return _bullet.btOverlappingPairCallback_addOverlappingPair(self, proxy0, proxy1)


    def removeOverlappingPair(self, proxy0, proxy1, dispatcher):
        """removeOverlappingPair(btOverlappingPairCallback self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1, btDispatcher dispatcher) -> void *"""
        return _bullet.btOverlappingPairCallback_removeOverlappingPair(self, proxy0, proxy1, dispatcher)


    def removeOverlappingPairsContainingProxy(self, proxy0, dispatcher):
        """removeOverlappingPairsContainingProxy(btOverlappingPairCallback self, btBroadphaseProxy proxy0, btDispatcher dispatcher)"""
        return _bullet.btOverlappingPairCallback_removeOverlappingPairsContainingProxy(self, proxy0, dispatcher)

btOverlappingPairCallback_swigregister = _bullet.btOverlappingPairCallback_swigregister
btOverlappingPairCallback_swigregister(btOverlappingPairCallback)

class btOverlapCallback(_object):
    """Proxy of C++ btOverlapCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOverlapCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btOverlapCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btOverlapCallback
    __del__ = lambda self: None

    def processOverlap(self, pair):
        """processOverlap(btOverlapCallback self, btBroadphasePair pair) -> bool"""
        return _bullet.btOverlapCallback_processOverlap(self, pair)

btOverlapCallback_swigregister = _bullet.btOverlapCallback_swigregister
btOverlapCallback_swigregister(btOverlapCallback)

class btOverlapFilterCallback(_object):
    """Proxy of C++ btOverlapFilterCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOverlapFilterCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btOverlapFilterCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btOverlapFilterCallback
    __del__ = lambda self: None

    def needBroadphaseCollision(self, proxy0, proxy1):
        """needBroadphaseCollision(btOverlapFilterCallback self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> bool"""
        return _bullet.btOverlapFilterCallback_needBroadphaseCollision(self, proxy0, proxy1)

btOverlapFilterCallback_swigregister = _bullet.btOverlapFilterCallback_swigregister
btOverlapFilterCallback_swigregister(btOverlapFilterCallback)

class btOverlappingPairCache(btOverlappingPairCallback):
    """Proxy of C++ btOverlappingPairCache class."""

    __swig_setmethods__ = {}
    for _s in [btOverlappingPairCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOverlappingPairCache, name, value)
    __swig_getmethods__ = {}
    for _s in [btOverlappingPairCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btOverlappingPairCache, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btOverlappingPairCache
    __del__ = lambda self: None

    def getOverlappingPairArrayPtr(self, *args):
        """
        getOverlappingPairArrayPtr(btOverlappingPairCache self) -> btBroadphasePair
        getOverlappingPairArrayPtr(btOverlappingPairCache self) -> btBroadphasePair
        """
        return _bullet.btOverlappingPairCache_getOverlappingPairArrayPtr(self, *args)


    def getOverlappingPairArray(self):
        """getOverlappingPairArray(btOverlappingPairCache self) -> btBroadphasePairArray &"""
        return _bullet.btOverlappingPairCache_getOverlappingPairArray(self)


    def cleanOverlappingPair(self, pair, dispatcher):
        """cleanOverlappingPair(btOverlappingPairCache self, btBroadphasePair pair, btDispatcher dispatcher)"""
        return _bullet.btOverlappingPairCache_cleanOverlappingPair(self, pair, dispatcher)


    def getNumOverlappingPairs(self):
        """getNumOverlappingPairs(btOverlappingPairCache self) -> int"""
        return _bullet.btOverlappingPairCache_getNumOverlappingPairs(self)


    def cleanProxyFromPairs(self, proxy, dispatcher):
        """cleanProxyFromPairs(btOverlappingPairCache self, btBroadphaseProxy proxy, btDispatcher dispatcher)"""
        return _bullet.btOverlappingPairCache_cleanProxyFromPairs(self, proxy, dispatcher)


    def setOverlapFilterCallback(self, callback):
        """setOverlapFilterCallback(btOverlappingPairCache self, btOverlapFilterCallback callback)"""
        return _bullet.btOverlappingPairCache_setOverlapFilterCallback(self, callback)


    def processAllOverlappingPairs(self, arg2, dispatcher):
        """processAllOverlappingPairs(btOverlappingPairCache self, btOverlapCallback arg2, btDispatcher dispatcher)"""
        return _bullet.btOverlappingPairCache_processAllOverlappingPairs(self, arg2, dispatcher)


    def findPair(self, proxy0, proxy1):
        """findPair(btOverlappingPairCache self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> btBroadphasePair"""
        return _bullet.btOverlappingPairCache_findPair(self, proxy0, proxy1)


    def hasDeferredRemoval(self):
        """hasDeferredRemoval(btOverlappingPairCache self) -> bool"""
        return _bullet.btOverlappingPairCache_hasDeferredRemoval(self)


    def setInternalGhostPairCallback(self, ghostPairCallback):
        """setInternalGhostPairCallback(btOverlappingPairCache self, btOverlappingPairCallback ghostPairCallback)"""
        return _bullet.btOverlappingPairCache_setInternalGhostPairCallback(self, ghostPairCallback)


    def sortOverlappingPairs(self, dispatcher):
        """sortOverlappingPairs(btOverlappingPairCache self, btDispatcher dispatcher)"""
        return _bullet.btOverlappingPairCache_sortOverlappingPairs(self, dispatcher)

btOverlappingPairCache_swigregister = _bullet.btOverlappingPairCache_swigregister
btOverlappingPairCache_swigregister(btOverlappingPairCache)
BT_NULL_PAIR = cvar.BT_NULL_PAIR

class btHashedOverlappingPairCache(btOverlappingPairCache):
    """Proxy of C++ btHashedOverlappingPairCache class."""

    __swig_setmethods__ = {}
    for _s in [btOverlappingPairCache]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHashedOverlappingPairCache, name, value)
    __swig_getmethods__ = {}
    for _s in [btOverlappingPairCache]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHashedOverlappingPairCache, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btHashedOverlappingPairCache self) -> btHashedOverlappingPairCache"""
        this = _bullet.new_btHashedOverlappingPairCache()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btHashedOverlappingPairCache
    __del__ = lambda self: None

    def needsBroadphaseCollision(self, proxy0, proxy1):
        """needsBroadphaseCollision(btHashedOverlappingPairCache self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> bool"""
        return _bullet.btHashedOverlappingPairCache_needsBroadphaseCollision(self, proxy0, proxy1)


    def getOverlappingPairArrayPtr(self, *args):
        """
        getOverlappingPairArrayPtr(btHashedOverlappingPairCache self) -> btBroadphasePair
        getOverlappingPairArrayPtr(btHashedOverlappingPairCache self) -> btBroadphasePair
        """
        return _bullet.btHashedOverlappingPairCache_getOverlappingPairArrayPtr(self, *args)


    def getOverlappingPairArray(self, *args):
        """
        getOverlappingPairArray(btHashedOverlappingPairCache self) -> btBroadphasePairArray
        getOverlappingPairArray(btHashedOverlappingPairCache self) -> btBroadphasePairArray const &
        """
        return _bullet.btHashedOverlappingPairCache_getOverlappingPairArray(self, *args)


    def GetCount(self):
        """GetCount(btHashedOverlappingPairCache self) -> int"""
        return _bullet.btHashedOverlappingPairCache_GetCount(self)


    def getOverlapFilterCallback(self):
        """getOverlapFilterCallback(btHashedOverlappingPairCache self) -> btOverlapFilterCallback"""
        return _bullet.btHashedOverlappingPairCache_getOverlapFilterCallback(self)

btHashedOverlappingPairCache_swigregister = _bullet.btHashedOverlappingPairCache_swigregister
btHashedOverlappingPairCache_swigregister(btHashedOverlappingPairCache)

class btSortedOverlappingPairCache(btOverlappingPairCache):
    """Proxy of C++ btSortedOverlappingPairCache class."""

    __swig_setmethods__ = {}
    for _s in [btOverlappingPairCache]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSortedOverlappingPairCache, name, value)
    __swig_getmethods__ = {}
    for _s in [btOverlappingPairCache]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSortedOverlappingPairCache, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btSortedOverlappingPairCache self) -> btSortedOverlappingPairCache"""
        this = _bullet.new_btSortedOverlappingPairCache()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSortedOverlappingPairCache
    __del__ = lambda self: None

    def needsBroadphaseCollision(self, proxy0, proxy1):
        """needsBroadphaseCollision(btSortedOverlappingPairCache self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> bool"""
        return _bullet.btSortedOverlappingPairCache_needsBroadphaseCollision(self, proxy0, proxy1)


    def getOverlappingPairArray(self, *args):
        """
        getOverlappingPairArray(btSortedOverlappingPairCache self) -> btBroadphasePairArray
        getOverlappingPairArray(btSortedOverlappingPairCache self) -> btBroadphasePairArray const &
        """
        return _bullet.btSortedOverlappingPairCache_getOverlappingPairArray(self, *args)


    def getOverlappingPairArrayPtr(self, *args):
        """
        getOverlappingPairArrayPtr(btSortedOverlappingPairCache self) -> btBroadphasePair
        getOverlappingPairArrayPtr(btSortedOverlappingPairCache self) -> btBroadphasePair
        """
        return _bullet.btSortedOverlappingPairCache_getOverlappingPairArrayPtr(self, *args)


    def getOverlapFilterCallback(self):
        """getOverlapFilterCallback(btSortedOverlappingPairCache self) -> btOverlapFilterCallback"""
        return _bullet.btSortedOverlappingPairCache_getOverlapFilterCallback(self)

btSortedOverlappingPairCache_swigregister = _bullet.btSortedOverlappingPairCache_swigregister
btSortedOverlappingPairCache_swigregister(btSortedOverlappingPairCache)

class btNullPairCache(btOverlappingPairCache):
    """Proxy of C++ btNullPairCache class."""

    __swig_setmethods__ = {}
    for _s in [btOverlappingPairCache]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btNullPairCache, name, value)
    __swig_getmethods__ = {}
    for _s in [btOverlappingPairCache]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btNullPairCache, name)
    __repr__ = _swig_repr

    def getOverlappingPairArrayPtr(self, *args):
        """
        getOverlappingPairArrayPtr(btNullPairCache self) -> btBroadphasePair
        getOverlappingPairArrayPtr(btNullPairCache self) -> btBroadphasePair
        """
        return _bullet.btNullPairCache_getOverlappingPairArrayPtr(self, *args)


    def __init__(self):
        """__init__(btNullPairCache self) -> btNullPairCache"""
        this = _bullet.new_btNullPairCache()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btNullPairCache
    __del__ = lambda self: None
btNullPairCache_swigregister = _bullet.btNullPairCache_swigregister
btNullPairCache_swigregister(btNullPairCache)

DBVT_BP_PROFILE = _bullet.DBVT_BP_PROFILE
DBVT_BP_PREVENTFALSEUPDATE = _bullet.DBVT_BP_PREVENTFALSEUPDATE
DBVT_BP_ACCURATESLEEPING = _bullet.DBVT_BP_ACCURATESLEEPING
DBVT_BP_ENABLE_BENCHMARK = _bullet.DBVT_BP_ENABLE_BENCHMARK
class btDbvtProxy(btBroadphaseProxy):
    """Proxy of C++ btDbvtProxy class."""

    __swig_setmethods__ = {}
    for _s in [btBroadphaseProxy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvtProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseProxy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvtProxy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["leaf"] = _bullet.btDbvtProxy_leaf_set
    __swig_getmethods__["leaf"] = _bullet.btDbvtProxy_leaf_get
    if _newclass:
        leaf = _swig_property(_bullet.btDbvtProxy_leaf_get, _bullet.btDbvtProxy_leaf_set)
    __swig_setmethods__["links"] = _bullet.btDbvtProxy_links_set
    __swig_getmethods__["links"] = _bullet.btDbvtProxy_links_get
    if _newclass:
        links = _swig_property(_bullet.btDbvtProxy_links_get, _bullet.btDbvtProxy_links_set)
    __swig_setmethods__["stage"] = _bullet.btDbvtProxy_stage_set
    __swig_getmethods__["stage"] = _bullet.btDbvtProxy_stage_get
    if _newclass:
        stage = _swig_property(_bullet.btDbvtProxy_stage_get, _bullet.btDbvtProxy_stage_set)

    def __init__(self, aabbMin, aabbMax, userPtr, collisionFilterGroup, collisionFilterMask):
        """__init__(btDbvtProxy self, btVector3 const & aabbMin, btVector3 const & aabbMax, void * userPtr, int collisionFilterGroup, int collisionFilterMask) -> btDbvtProxy"""
        this = _bullet.new_btDbvtProxy(aabbMin, aabbMax, userPtr, collisionFilterGroup, collisionFilterMask)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDbvtProxy
    __del__ = lambda self: None
btDbvtProxy_swigregister = _bullet.btDbvtProxy_swigregister
btDbvtProxy_swigregister(btDbvtProxy)

class btDbvtBroadphase(btBroadphaseInterface):
    """Proxy of C++ btDbvtBroadphase class."""

    __swig_setmethods__ = {}
    for _s in [btBroadphaseInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDbvtBroadphase, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDbvtBroadphase, name)
    __repr__ = _swig_repr
    DYNAMIC_SET = _bullet.btDbvtBroadphase_DYNAMIC_SET
    FIXED_SET = _bullet.btDbvtBroadphase_FIXED_SET
    STAGECOUNT = _bullet.btDbvtBroadphase_STAGECOUNT
    __swig_setmethods__["m_sets"] = _bullet.btDbvtBroadphase_m_sets_set
    __swig_getmethods__["m_sets"] = _bullet.btDbvtBroadphase_m_sets_get
    if _newclass:
        m_sets = _swig_property(_bullet.btDbvtBroadphase_m_sets_get, _bullet.btDbvtBroadphase_m_sets_set)
    __swig_setmethods__["m_stageRoots"] = _bullet.btDbvtBroadphase_m_stageRoots_set
    __swig_getmethods__["m_stageRoots"] = _bullet.btDbvtBroadphase_m_stageRoots_get
    if _newclass:
        m_stageRoots = _swig_property(_bullet.btDbvtBroadphase_m_stageRoots_get, _bullet.btDbvtBroadphase_m_stageRoots_set)
    __swig_setmethods__["m_paircache"] = _bullet.btDbvtBroadphase_m_paircache_set
    __swig_getmethods__["m_paircache"] = _bullet.btDbvtBroadphase_m_paircache_get
    if _newclass:
        m_paircache = _swig_property(_bullet.btDbvtBroadphase_m_paircache_get, _bullet.btDbvtBroadphase_m_paircache_set)
    __swig_setmethods__["m_prediction"] = _bullet.btDbvtBroadphase_m_prediction_set
    __swig_getmethods__["m_prediction"] = _bullet.btDbvtBroadphase_m_prediction_get
    if _newclass:
        m_prediction = _swig_property(_bullet.btDbvtBroadphase_m_prediction_get, _bullet.btDbvtBroadphase_m_prediction_set)
    __swig_setmethods__["m_stageCurrent"] = _bullet.btDbvtBroadphase_m_stageCurrent_set
    __swig_getmethods__["m_stageCurrent"] = _bullet.btDbvtBroadphase_m_stageCurrent_get
    if _newclass:
        m_stageCurrent = _swig_property(_bullet.btDbvtBroadphase_m_stageCurrent_get, _bullet.btDbvtBroadphase_m_stageCurrent_set)
    __swig_setmethods__["m_fupdates"] = _bullet.btDbvtBroadphase_m_fupdates_set
    __swig_getmethods__["m_fupdates"] = _bullet.btDbvtBroadphase_m_fupdates_get
    if _newclass:
        m_fupdates = _swig_property(_bullet.btDbvtBroadphase_m_fupdates_get, _bullet.btDbvtBroadphase_m_fupdates_set)
    __swig_setmethods__["m_dupdates"] = _bullet.btDbvtBroadphase_m_dupdates_set
    __swig_getmethods__["m_dupdates"] = _bullet.btDbvtBroadphase_m_dupdates_get
    if _newclass:
        m_dupdates = _swig_property(_bullet.btDbvtBroadphase_m_dupdates_get, _bullet.btDbvtBroadphase_m_dupdates_set)
    __swig_setmethods__["m_cupdates"] = _bullet.btDbvtBroadphase_m_cupdates_set
    __swig_getmethods__["m_cupdates"] = _bullet.btDbvtBroadphase_m_cupdates_get
    if _newclass:
        m_cupdates = _swig_property(_bullet.btDbvtBroadphase_m_cupdates_get, _bullet.btDbvtBroadphase_m_cupdates_set)
    __swig_setmethods__["m_newpairs"] = _bullet.btDbvtBroadphase_m_newpairs_set
    __swig_getmethods__["m_newpairs"] = _bullet.btDbvtBroadphase_m_newpairs_get
    if _newclass:
        m_newpairs = _swig_property(_bullet.btDbvtBroadphase_m_newpairs_get, _bullet.btDbvtBroadphase_m_newpairs_set)
    __swig_setmethods__["m_fixedleft"] = _bullet.btDbvtBroadphase_m_fixedleft_set
    __swig_getmethods__["m_fixedleft"] = _bullet.btDbvtBroadphase_m_fixedleft_get
    if _newclass:
        m_fixedleft = _swig_property(_bullet.btDbvtBroadphase_m_fixedleft_get, _bullet.btDbvtBroadphase_m_fixedleft_set)
    __swig_setmethods__["m_updates_call"] = _bullet.btDbvtBroadphase_m_updates_call_set
    __swig_getmethods__["m_updates_call"] = _bullet.btDbvtBroadphase_m_updates_call_get
    if _newclass:
        m_updates_call = _swig_property(_bullet.btDbvtBroadphase_m_updates_call_get, _bullet.btDbvtBroadphase_m_updates_call_set)
    __swig_setmethods__["m_updates_done"] = _bullet.btDbvtBroadphase_m_updates_done_set
    __swig_getmethods__["m_updates_done"] = _bullet.btDbvtBroadphase_m_updates_done_get
    if _newclass:
        m_updates_done = _swig_property(_bullet.btDbvtBroadphase_m_updates_done_get, _bullet.btDbvtBroadphase_m_updates_done_set)
    __swig_setmethods__["m_updates_ratio"] = _bullet.btDbvtBroadphase_m_updates_ratio_set
    __swig_getmethods__["m_updates_ratio"] = _bullet.btDbvtBroadphase_m_updates_ratio_get
    if _newclass:
        m_updates_ratio = _swig_property(_bullet.btDbvtBroadphase_m_updates_ratio_get, _bullet.btDbvtBroadphase_m_updates_ratio_set)
    __swig_setmethods__["m_pid"] = _bullet.btDbvtBroadphase_m_pid_set
    __swig_getmethods__["m_pid"] = _bullet.btDbvtBroadphase_m_pid_get
    if _newclass:
        m_pid = _swig_property(_bullet.btDbvtBroadphase_m_pid_get, _bullet.btDbvtBroadphase_m_pid_set)
    __swig_setmethods__["m_cid"] = _bullet.btDbvtBroadphase_m_cid_set
    __swig_getmethods__["m_cid"] = _bullet.btDbvtBroadphase_m_cid_get
    if _newclass:
        m_cid = _swig_property(_bullet.btDbvtBroadphase_m_cid_get, _bullet.btDbvtBroadphase_m_cid_set)
    __swig_setmethods__["m_gid"] = _bullet.btDbvtBroadphase_m_gid_set
    __swig_getmethods__["m_gid"] = _bullet.btDbvtBroadphase_m_gid_get
    if _newclass:
        m_gid = _swig_property(_bullet.btDbvtBroadphase_m_gid_get, _bullet.btDbvtBroadphase_m_gid_set)
    __swig_setmethods__["m_releasepaircache"] = _bullet.btDbvtBroadphase_m_releasepaircache_set
    __swig_getmethods__["m_releasepaircache"] = _bullet.btDbvtBroadphase_m_releasepaircache_get
    if _newclass:
        m_releasepaircache = _swig_property(_bullet.btDbvtBroadphase_m_releasepaircache_get, _bullet.btDbvtBroadphase_m_releasepaircache_set)
    __swig_setmethods__["m_deferedcollide"] = _bullet.btDbvtBroadphase_m_deferedcollide_set
    __swig_getmethods__["m_deferedcollide"] = _bullet.btDbvtBroadphase_m_deferedcollide_get
    if _newclass:
        m_deferedcollide = _swig_property(_bullet.btDbvtBroadphase_m_deferedcollide_get, _bullet.btDbvtBroadphase_m_deferedcollide_set)
    __swig_setmethods__["m_needcleanup"] = _bullet.btDbvtBroadphase_m_needcleanup_set
    __swig_getmethods__["m_needcleanup"] = _bullet.btDbvtBroadphase_m_needcleanup_get
    if _newclass:
        m_needcleanup = _swig_property(_bullet.btDbvtBroadphase_m_needcleanup_get, _bullet.btDbvtBroadphase_m_needcleanup_set)
    __swig_setmethods__["m_rayTestStacks"] = _bullet.btDbvtBroadphase_m_rayTestStacks_set
    __swig_getmethods__["m_rayTestStacks"] = _bullet.btDbvtBroadphase_m_rayTestStacks_get
    if _newclass:
        m_rayTestStacks = _swig_property(_bullet.btDbvtBroadphase_m_rayTestStacks_get, _bullet.btDbvtBroadphase_m_rayTestStacks_set)

    def __init__(self, paircache=None):
        """
        __init__(btDbvtBroadphase self, btOverlappingPairCache paircache=None) -> btDbvtBroadphase
        __init__(btDbvtBroadphase self) -> btDbvtBroadphase
        """
        this = _bullet.new_btDbvtBroadphase(paircache)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDbvtBroadphase
    __del__ = lambda self: None

    def collide(self, dispatcher):
        """collide(btDbvtBroadphase self, btDispatcher dispatcher)"""
        return _bullet.btDbvtBroadphase_collide(self, dispatcher)


    def optimize(self):
        """optimize(btDbvtBroadphase self)"""
        return _bullet.btDbvtBroadphase_optimize(self)


    def getOverlappingPairCache(self, *args):
        """
        getOverlappingPairCache(btDbvtBroadphase self) -> btOverlappingPairCache
        getOverlappingPairCache(btDbvtBroadphase self) -> btOverlappingPairCache
        """
        return _bullet.btDbvtBroadphase_getOverlappingPairCache(self, *args)


    def performDeferredRemoval(self, dispatcher):
        """performDeferredRemoval(btDbvtBroadphase self, btDispatcher dispatcher)"""
        return _bullet.btDbvtBroadphase_performDeferredRemoval(self, dispatcher)


    def setVelocityPrediction(self, prediction):
        """setVelocityPrediction(btDbvtBroadphase self, btScalar prediction)"""
        return _bullet.btDbvtBroadphase_setVelocityPrediction(self, prediction)


    def getVelocityPrediction(self):
        """getVelocityPrediction(btDbvtBroadphase self) -> btScalar"""
        return _bullet.btDbvtBroadphase_getVelocityPrediction(self)


    def setAabbForceUpdate(self, absproxy, aabbMin, aabbMax, arg5):
        """setAabbForceUpdate(btDbvtBroadphase self, btBroadphaseProxy absproxy, btVector3 const & aabbMin, btVector3 const & aabbMax, btDispatcher arg5)"""
        return _bullet.btDbvtBroadphase_setAabbForceUpdate(self, absproxy, aabbMin, aabbMax, arg5)


    def benchmark(arg1):
        """benchmark(btBroadphaseInterface arg1)"""
        return _bullet.btDbvtBroadphase_benchmark(arg1)

    benchmark = staticmethod(benchmark)
btDbvtBroadphase_swigregister = _bullet.btDbvtBroadphase_swigregister
btDbvtBroadphase_swigregister(btDbvtBroadphase)

def btDbvtBroadphase_benchmark(arg2):
    """btDbvtBroadphase_benchmark(btBroadphaseInterface arg2)"""
    return _bullet.btDbvtBroadphase_benchmark(arg2)

class btDispatcherInfo(_object):
    """Proxy of C++ btDispatcherInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDispatcherInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDispatcherInfo, name)
    __repr__ = _swig_repr
    DISPATCH_DISCRETE = _bullet.btDispatcherInfo_DISPATCH_DISCRETE
    DISPATCH_CONTINUOUS = _bullet.btDispatcherInfo_DISPATCH_CONTINUOUS

    def __init__(self):
        """__init__(btDispatcherInfo self) -> btDispatcherInfo"""
        this = _bullet.new_btDispatcherInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_timeStep"] = _bullet.btDispatcherInfo_m_timeStep_set
    __swig_getmethods__["m_timeStep"] = _bullet.btDispatcherInfo_m_timeStep_get
    if _newclass:
        m_timeStep = _swig_property(_bullet.btDispatcherInfo_m_timeStep_get, _bullet.btDispatcherInfo_m_timeStep_set)
    __swig_setmethods__["m_stepCount"] = _bullet.btDispatcherInfo_m_stepCount_set
    __swig_getmethods__["m_stepCount"] = _bullet.btDispatcherInfo_m_stepCount_get
    if _newclass:
        m_stepCount = _swig_property(_bullet.btDispatcherInfo_m_stepCount_get, _bullet.btDispatcherInfo_m_stepCount_set)
    __swig_setmethods__["m_dispatchFunc"] = _bullet.btDispatcherInfo_m_dispatchFunc_set
    __swig_getmethods__["m_dispatchFunc"] = _bullet.btDispatcherInfo_m_dispatchFunc_get
    if _newclass:
        m_dispatchFunc = _swig_property(_bullet.btDispatcherInfo_m_dispatchFunc_get, _bullet.btDispatcherInfo_m_dispatchFunc_set)
    __swig_setmethods__["m_timeOfImpact"] = _bullet.btDispatcherInfo_m_timeOfImpact_set
    __swig_getmethods__["m_timeOfImpact"] = _bullet.btDispatcherInfo_m_timeOfImpact_get
    if _newclass:
        m_timeOfImpact = _swig_property(_bullet.btDispatcherInfo_m_timeOfImpact_get, _bullet.btDispatcherInfo_m_timeOfImpact_set)
    __swig_setmethods__["m_useContinuous"] = _bullet.btDispatcherInfo_m_useContinuous_set
    __swig_getmethods__["m_useContinuous"] = _bullet.btDispatcherInfo_m_useContinuous_get
    if _newclass:
        m_useContinuous = _swig_property(_bullet.btDispatcherInfo_m_useContinuous_get, _bullet.btDispatcherInfo_m_useContinuous_set)
    __swig_setmethods__["m_debugDraw"] = _bullet.btDispatcherInfo_m_debugDraw_set
    __swig_getmethods__["m_debugDraw"] = _bullet.btDispatcherInfo_m_debugDraw_get
    if _newclass:
        m_debugDraw = _swig_property(_bullet.btDispatcherInfo_m_debugDraw_get, _bullet.btDispatcherInfo_m_debugDraw_set)
    __swig_setmethods__["m_enableSatConvex"] = _bullet.btDispatcherInfo_m_enableSatConvex_set
    __swig_getmethods__["m_enableSatConvex"] = _bullet.btDispatcherInfo_m_enableSatConvex_get
    if _newclass:
        m_enableSatConvex = _swig_property(_bullet.btDispatcherInfo_m_enableSatConvex_get, _bullet.btDispatcherInfo_m_enableSatConvex_set)
    __swig_setmethods__["m_enableSPU"] = _bullet.btDispatcherInfo_m_enableSPU_set
    __swig_getmethods__["m_enableSPU"] = _bullet.btDispatcherInfo_m_enableSPU_get
    if _newclass:
        m_enableSPU = _swig_property(_bullet.btDispatcherInfo_m_enableSPU_get, _bullet.btDispatcherInfo_m_enableSPU_set)
    __swig_setmethods__["m_useEpa"] = _bullet.btDispatcherInfo_m_useEpa_set
    __swig_getmethods__["m_useEpa"] = _bullet.btDispatcherInfo_m_useEpa_get
    if _newclass:
        m_useEpa = _swig_property(_bullet.btDispatcherInfo_m_useEpa_get, _bullet.btDispatcherInfo_m_useEpa_set)
    __swig_setmethods__["m_allowedCcdPenetration"] = _bullet.btDispatcherInfo_m_allowedCcdPenetration_set
    __swig_getmethods__["m_allowedCcdPenetration"] = _bullet.btDispatcherInfo_m_allowedCcdPenetration_get
    if _newclass:
        m_allowedCcdPenetration = _swig_property(_bullet.btDispatcherInfo_m_allowedCcdPenetration_get, _bullet.btDispatcherInfo_m_allowedCcdPenetration_set)
    __swig_setmethods__["m_useConvexConservativeDistanceUtil"] = _bullet.btDispatcherInfo_m_useConvexConservativeDistanceUtil_set
    __swig_getmethods__["m_useConvexConservativeDistanceUtil"] = _bullet.btDispatcherInfo_m_useConvexConservativeDistanceUtil_get
    if _newclass:
        m_useConvexConservativeDistanceUtil = _swig_property(_bullet.btDispatcherInfo_m_useConvexConservativeDistanceUtil_get, _bullet.btDispatcherInfo_m_useConvexConservativeDistanceUtil_set)
    __swig_setmethods__["m_convexConservativeDistanceThreshold"] = _bullet.btDispatcherInfo_m_convexConservativeDistanceThreshold_set
    __swig_getmethods__["m_convexConservativeDistanceThreshold"] = _bullet.btDispatcherInfo_m_convexConservativeDistanceThreshold_get
    if _newclass:
        m_convexConservativeDistanceThreshold = _swig_property(_bullet.btDispatcherInfo_m_convexConservativeDistanceThreshold_get, _bullet.btDispatcherInfo_m_convexConservativeDistanceThreshold_set)
    __swig_destroy__ = _bullet.delete_btDispatcherInfo
    __del__ = lambda self: None
btDispatcherInfo_swigregister = _bullet.btDispatcherInfo_swigregister
btDispatcherInfo_swigregister(btDispatcherInfo)

BT_CONTACT_POINT_ALGORITHMS = _bullet.BT_CONTACT_POINT_ALGORITHMS
BT_CLOSEST_POINT_ALGORITHMS = _bullet.BT_CLOSEST_POINT_ALGORITHMS
class btDispatcher(_object):
    """Proxy of C++ btDispatcher class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDispatcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDispatcher, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btDispatcher
    __del__ = lambda self: None

    def findAlgorithm(self, body0Wrap, body1Wrap, sharedManifold, queryType):
        """findAlgorithm(btDispatcher self, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, btPersistentManifold sharedManifold, ebtDispatcherQueryType queryType) -> btCollisionAlgorithm"""
        return _bullet.btDispatcher_findAlgorithm(self, body0Wrap, body1Wrap, sharedManifold, queryType)


    def getNewManifold(self, b0, b1):
        """getNewManifold(btDispatcher self, btCollisionObject b0, btCollisionObject b1) -> btPersistentManifold"""
        return _bullet.btDispatcher_getNewManifold(self, b0, b1)


    def releaseManifold(self, manifold):
        """releaseManifold(btDispatcher self, btPersistentManifold manifold)"""
        return _bullet.btDispatcher_releaseManifold(self, manifold)


    def clearManifold(self, manifold):
        """clearManifold(btDispatcher self, btPersistentManifold manifold)"""
        return _bullet.btDispatcher_clearManifold(self, manifold)


    def needsCollision(self, body0, body1):
        """needsCollision(btDispatcher self, btCollisionObject body0, btCollisionObject body1) -> bool"""
        return _bullet.btDispatcher_needsCollision(self, body0, body1)


    def needsResponse(self, body0, body1):
        """needsResponse(btDispatcher self, btCollisionObject body0, btCollisionObject body1) -> bool"""
        return _bullet.btDispatcher_needsResponse(self, body0, body1)


    def dispatchAllCollisionPairs(self, pairCache, dispatchInfo, dispatcher):
        """dispatchAllCollisionPairs(btDispatcher self, btOverlappingPairCache pairCache, btDispatcherInfo dispatchInfo, btDispatcher dispatcher)"""
        return _bullet.btDispatcher_dispatchAllCollisionPairs(self, pairCache, dispatchInfo, dispatcher)


    def getNumManifolds(self):
        """getNumManifolds(btDispatcher self) -> int"""
        return _bullet.btDispatcher_getNumManifolds(self)


    def getManifoldByIndexInternal(self, index):
        """getManifoldByIndexInternal(btDispatcher self, int index) -> btPersistentManifold"""
        return _bullet.btDispatcher_getManifoldByIndexInternal(self, index)


    def getInternalManifoldPointer(self):
        """getInternalManifoldPointer(btDispatcher self) -> btPersistentManifold **"""
        return _bullet.btDispatcher_getInternalManifoldPointer(self)


    def getInternalManifoldPool(self, *args):
        """
        getInternalManifoldPool(btDispatcher self) -> btPoolAllocator
        getInternalManifoldPool(btDispatcher self) -> btPoolAllocator
        """
        return _bullet.btDispatcher_getInternalManifoldPool(self, *args)


    def allocateCollisionAlgorithm(self, size):
        """allocateCollisionAlgorithm(btDispatcher self, int size) -> void *"""
        return _bullet.btDispatcher_allocateCollisionAlgorithm(self, size)


    def freeCollisionAlgorithm(self, ptr):
        """freeCollisionAlgorithm(btDispatcher self, void * ptr)"""
        return _bullet.btDispatcher_freeCollisionAlgorithm(self, ptr)

btDispatcher_swigregister = _bullet.btDispatcher_swigregister
btDispatcher_swigregister(btDispatcher)

btQuantizedBvhDataName = _bullet.btQuantizedBvhDataName
MAX_SUBTREE_SIZE_IN_BYTES = _bullet.MAX_SUBTREE_SIZE_IN_BYTES
MAX_NUM_PARTS_IN_BITS = _bullet.MAX_NUM_PARTS_IN_BITS
class btQuantizedBvhNode(_object):
    """Proxy of C++ btQuantizedBvhNode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuantizedBvhNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuantizedBvhNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_quantizedAabbMin"] = _bullet.btQuantizedBvhNode_m_quantizedAabbMin_set
    __swig_getmethods__["m_quantizedAabbMin"] = _bullet.btQuantizedBvhNode_m_quantizedAabbMin_get
    if _newclass:
        m_quantizedAabbMin = _swig_property(_bullet.btQuantizedBvhNode_m_quantizedAabbMin_get, _bullet.btQuantizedBvhNode_m_quantizedAabbMin_set)
    __swig_setmethods__["m_quantizedAabbMax"] = _bullet.btQuantizedBvhNode_m_quantizedAabbMax_set
    __swig_getmethods__["m_quantizedAabbMax"] = _bullet.btQuantizedBvhNode_m_quantizedAabbMax_get
    if _newclass:
        m_quantizedAabbMax = _swig_property(_bullet.btQuantizedBvhNode_m_quantizedAabbMax_get, _bullet.btQuantizedBvhNode_m_quantizedAabbMax_set)
    __swig_setmethods__["m_escapeIndexOrTriangleIndex"] = _bullet.btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set
    __swig_getmethods__["m_escapeIndexOrTriangleIndex"] = _bullet.btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get
    if _newclass:
        m_escapeIndexOrTriangleIndex = _swig_property(_bullet.btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_get, _bullet.btQuantizedBvhNode_m_escapeIndexOrTriangleIndex_set)

    def isLeafNode(self):
        """isLeafNode(btQuantizedBvhNode self) -> bool"""
        return _bullet.btQuantizedBvhNode_isLeafNode(self)


    def getEscapeIndex(self):
        """getEscapeIndex(btQuantizedBvhNode self) -> int"""
        return _bullet.btQuantizedBvhNode_getEscapeIndex(self)


    def getTriangleIndex(self):
        """getTriangleIndex(btQuantizedBvhNode self) -> int"""
        return _bullet.btQuantizedBvhNode_getTriangleIndex(self)


    def getPartId(self):
        """getPartId(btQuantizedBvhNode self) -> int"""
        return _bullet.btQuantizedBvhNode_getPartId(self)


    def __init__(self):
        """__init__(btQuantizedBvhNode self) -> btQuantizedBvhNode"""
        this = _bullet.new_btQuantizedBvhNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuantizedBvhNode
    __del__ = lambda self: None
btQuantizedBvhNode_swigregister = _bullet.btQuantizedBvhNode_swigregister
btQuantizedBvhNode_swigregister(btQuantizedBvhNode)

class btOptimizedBvhNode(_object):
    """Proxy of C++ btOptimizedBvhNode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOptimizedBvhNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btOptimizedBvhNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_aabbMinOrg"] = _bullet.btOptimizedBvhNode_m_aabbMinOrg_set
    __swig_getmethods__["m_aabbMinOrg"] = _bullet.btOptimizedBvhNode_m_aabbMinOrg_get
    if _newclass:
        m_aabbMinOrg = _swig_property(_bullet.btOptimizedBvhNode_m_aabbMinOrg_get, _bullet.btOptimizedBvhNode_m_aabbMinOrg_set)
    __swig_setmethods__["m_aabbMaxOrg"] = _bullet.btOptimizedBvhNode_m_aabbMaxOrg_set
    __swig_getmethods__["m_aabbMaxOrg"] = _bullet.btOptimizedBvhNode_m_aabbMaxOrg_get
    if _newclass:
        m_aabbMaxOrg = _swig_property(_bullet.btOptimizedBvhNode_m_aabbMaxOrg_get, _bullet.btOptimizedBvhNode_m_aabbMaxOrg_set)
    __swig_setmethods__["m_escapeIndex"] = _bullet.btOptimizedBvhNode_m_escapeIndex_set
    __swig_getmethods__["m_escapeIndex"] = _bullet.btOptimizedBvhNode_m_escapeIndex_get
    if _newclass:
        m_escapeIndex = _swig_property(_bullet.btOptimizedBvhNode_m_escapeIndex_get, _bullet.btOptimizedBvhNode_m_escapeIndex_set)
    __swig_setmethods__["m_subPart"] = _bullet.btOptimizedBvhNode_m_subPart_set
    __swig_getmethods__["m_subPart"] = _bullet.btOptimizedBvhNode_m_subPart_get
    if _newclass:
        m_subPart = _swig_property(_bullet.btOptimizedBvhNode_m_subPart_get, _bullet.btOptimizedBvhNode_m_subPart_set)
    __swig_setmethods__["m_triangleIndex"] = _bullet.btOptimizedBvhNode_m_triangleIndex_set
    __swig_getmethods__["m_triangleIndex"] = _bullet.btOptimizedBvhNode_m_triangleIndex_get
    if _newclass:
        m_triangleIndex = _swig_property(_bullet.btOptimizedBvhNode_m_triangleIndex_get, _bullet.btOptimizedBvhNode_m_triangleIndex_set)
    __swig_setmethods__["m_padding"] = _bullet.btOptimizedBvhNode_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btOptimizedBvhNode_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btOptimizedBvhNode_m_padding_get, _bullet.btOptimizedBvhNode_m_padding_set)

    def __init__(self):
        """__init__(btOptimizedBvhNode self) -> btOptimizedBvhNode"""
        this = _bullet.new_btOptimizedBvhNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btOptimizedBvhNode
    __del__ = lambda self: None
btOptimizedBvhNode_swigregister = _bullet.btOptimizedBvhNode_swigregister
btOptimizedBvhNode_swigregister(btOptimizedBvhNode)

class btBvhSubtreeInfo(_object):
    """Proxy of C++ btBvhSubtreeInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBvhSubtreeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBvhSubtreeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_quantizedAabbMin"] = _bullet.btBvhSubtreeInfo_m_quantizedAabbMin_set
    __swig_getmethods__["m_quantizedAabbMin"] = _bullet.btBvhSubtreeInfo_m_quantizedAabbMin_get
    if _newclass:
        m_quantizedAabbMin = _swig_property(_bullet.btBvhSubtreeInfo_m_quantizedAabbMin_get, _bullet.btBvhSubtreeInfo_m_quantizedAabbMin_set)
    __swig_setmethods__["m_quantizedAabbMax"] = _bullet.btBvhSubtreeInfo_m_quantizedAabbMax_set
    __swig_getmethods__["m_quantizedAabbMax"] = _bullet.btBvhSubtreeInfo_m_quantizedAabbMax_get
    if _newclass:
        m_quantizedAabbMax = _swig_property(_bullet.btBvhSubtreeInfo_m_quantizedAabbMax_get, _bullet.btBvhSubtreeInfo_m_quantizedAabbMax_set)
    __swig_setmethods__["m_rootNodeIndex"] = _bullet.btBvhSubtreeInfo_m_rootNodeIndex_set
    __swig_getmethods__["m_rootNodeIndex"] = _bullet.btBvhSubtreeInfo_m_rootNodeIndex_get
    if _newclass:
        m_rootNodeIndex = _swig_property(_bullet.btBvhSubtreeInfo_m_rootNodeIndex_get, _bullet.btBvhSubtreeInfo_m_rootNodeIndex_set)
    __swig_setmethods__["m_subtreeSize"] = _bullet.btBvhSubtreeInfo_m_subtreeSize_set
    __swig_getmethods__["m_subtreeSize"] = _bullet.btBvhSubtreeInfo_m_subtreeSize_get
    if _newclass:
        m_subtreeSize = _swig_property(_bullet.btBvhSubtreeInfo_m_subtreeSize_get, _bullet.btBvhSubtreeInfo_m_subtreeSize_set)
    __swig_setmethods__["m_padding"] = _bullet.btBvhSubtreeInfo_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btBvhSubtreeInfo_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btBvhSubtreeInfo_m_padding_get, _bullet.btBvhSubtreeInfo_m_padding_set)

    def __init__(self):
        """__init__(btBvhSubtreeInfo self) -> btBvhSubtreeInfo"""
        this = _bullet.new_btBvhSubtreeInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setAabbFromQuantizeNode(self, quantizedNode):
        """setAabbFromQuantizeNode(btBvhSubtreeInfo self, btQuantizedBvhNode quantizedNode)"""
        return _bullet.btBvhSubtreeInfo_setAabbFromQuantizeNode(self, quantizedNode)

    __swig_destroy__ = _bullet.delete_btBvhSubtreeInfo
    __del__ = lambda self: None
btBvhSubtreeInfo_swigregister = _bullet.btBvhSubtreeInfo_swigregister
btBvhSubtreeInfo_swigregister(btBvhSubtreeInfo)

class btNodeOverlapCallback(_object):
    """Proxy of C++ btNodeOverlapCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btNodeOverlapCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btNodeOverlapCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btNodeOverlapCallback
    __del__ = lambda self: None

    def processNode(self, subPart, triangleIndex):
        """processNode(btNodeOverlapCallback self, int subPart, int triangleIndex)"""
        return _bullet.btNodeOverlapCallback_processNode(self, subPart, triangleIndex)

btNodeOverlapCallback_swigregister = _bullet.btNodeOverlapCallback_swigregister
btNodeOverlapCallback_swigregister(btNodeOverlapCallback)

class btQuantizedBvh(_object):
    """Proxy of C++ btQuantizedBvh class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuantizedBvh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuantizedBvh, name)
    __repr__ = _swig_repr
    TRAVERSAL_STACKLESS = _bullet.btQuantizedBvh_TRAVERSAL_STACKLESS
    TRAVERSAL_STACKLESS_CACHE_FRIENDLY = _bullet.btQuantizedBvh_TRAVERSAL_STACKLESS_CACHE_FRIENDLY
    TRAVERSAL_RECURSIVE = _bullet.btQuantizedBvh_TRAVERSAL_RECURSIVE

    def __init__(self):
        """__init__(btQuantizedBvh self) -> btQuantizedBvh"""
        this = _bullet.new_btQuantizedBvh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuantizedBvh
    __del__ = lambda self: None

    def setQuantizationValues(self, *args):
        """
        setQuantizationValues(btQuantizedBvh self, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax, btScalar quantizationMargin)
        setQuantizationValues(btQuantizedBvh self, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax)
        """
        return _bullet.btQuantizedBvh_setQuantizationValues(self, *args)


    def getLeafNodeArray(self):
        """getLeafNodeArray(btQuantizedBvh self) -> QuantizedNodeArray &"""
        return _bullet.btQuantizedBvh_getLeafNodeArray(self)


    def buildInternal(self):
        """buildInternal(btQuantizedBvh self)"""
        return _bullet.btQuantizedBvh_buildInternal(self)


    def reportAabbOverlappingNodex(self, nodeCallback, aabbMin, aabbMax):
        """reportAabbOverlappingNodex(btQuantizedBvh self, btNodeOverlapCallback nodeCallback, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btQuantizedBvh_reportAabbOverlappingNodex(self, nodeCallback, aabbMin, aabbMax)


    def reportRayOverlappingNodex(self, nodeCallback, raySource, rayTarget):
        """reportRayOverlappingNodex(btQuantizedBvh self, btNodeOverlapCallback nodeCallback, btVector3 const & raySource, btVector3 const & rayTarget)"""
        return _bullet.btQuantizedBvh_reportRayOverlappingNodex(self, nodeCallback, raySource, rayTarget)


    def reportBoxCastOverlappingNodex(self, nodeCallback, raySource, rayTarget, aabbMin, aabbMax):
        """reportBoxCastOverlappingNodex(btQuantizedBvh self, btNodeOverlapCallback nodeCallback, btVector3 const & raySource, btVector3 const & rayTarget, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btQuantizedBvh_reportBoxCastOverlappingNodex(self, nodeCallback, raySource, rayTarget, aabbMin, aabbMax)


    def quantize(self, out, point, isMax):
        """quantize(btQuantizedBvh self, unsigned short * out, btVector3 const & point, int isMax)"""
        return _bullet.btQuantizedBvh_quantize(self, out, point, isMax)


    def quantizeWithClamp(self, out, point2, isMax):
        """quantizeWithClamp(btQuantizedBvh self, unsigned short * out, btVector3 const & point2, int isMax)"""
        return _bullet.btQuantizedBvh_quantizeWithClamp(self, out, point2, isMax)


    def unQuantize(self, vecIn):
        """unQuantize(btQuantizedBvh self, unsigned short const * vecIn) -> btVector3"""
        return _bullet.btQuantizedBvh_unQuantize(self, vecIn)


    def setTraversalMode(self, traversalMode):
        """setTraversalMode(btQuantizedBvh self, btQuantizedBvh::btTraversalMode traversalMode)"""
        return _bullet.btQuantizedBvh_setTraversalMode(self, traversalMode)


    def getQuantizedNodeArray(self):
        """getQuantizedNodeArray(btQuantizedBvh self) -> QuantizedNodeArray &"""
        return _bullet.btQuantizedBvh_getQuantizedNodeArray(self)


    def getSubtreeInfoArray(self):
        """getSubtreeInfoArray(btQuantizedBvh self) -> BvhSubtreeInfoArray &"""
        return _bullet.btQuantizedBvh_getSubtreeInfoArray(self)


    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btQuantizedBvh self) -> unsigned int"""
        return _bullet.btQuantizedBvh_calculateSerializeBufferSize(self)


    def deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian):
        """deSerializeInPlace(void * i_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian) -> btQuantizedBvh"""
        return _bullet.btQuantizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian)

    deSerializeInPlace = staticmethod(deSerializeInPlace)

    def getAlignmentSerializationPadding():
        """getAlignmentSerializationPadding() -> unsigned int"""
        return _bullet.btQuantizedBvh_getAlignmentSerializationPadding()

    getAlignmentSerializationPadding = staticmethod(getAlignmentSerializationPadding)

    def calculateSerializeBufferSizeNew(self):
        """calculateSerializeBufferSizeNew(btQuantizedBvh self) -> int"""
        return _bullet.btQuantizedBvh_calculateSerializeBufferSizeNew(self)


    def serialize(self, *args):
        """
        serialize(btQuantizedBvh self, void * o_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian) -> bool
        serialize(btQuantizedBvh self, void * dataBuffer, btSerializer serializer) -> char const *
        """
        return _bullet.btQuantizedBvh_serialize(self, *args)


    def deSerializeFloat(self, quantizedBvhFloatData):
        """deSerializeFloat(btQuantizedBvh self, btQuantizedBvhFloatData quantizedBvhFloatData)"""
        return _bullet.btQuantizedBvh_deSerializeFloat(self, quantizedBvhFloatData)


    def deSerializeDouble(self, quantizedBvhDoubleData):
        """deSerializeDouble(btQuantizedBvh self, btQuantizedBvhDoubleData quantizedBvhDoubleData)"""
        return _bullet.btQuantizedBvh_deSerializeDouble(self, quantizedBvhDoubleData)


    def isQuantized(self):
        """isQuantized(btQuantizedBvh self) -> bool"""
        return _bullet.btQuantizedBvh_isQuantized(self)

btQuantizedBvh_swigregister = _bullet.btQuantizedBvh_swigregister
btQuantizedBvh_swigregister(btQuantizedBvh)

def btQuantizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian):
    """btQuantizedBvh_deSerializeInPlace(void * i_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian) -> btQuantizedBvh"""
    return _bullet.btQuantizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian)

def btQuantizedBvh_getAlignmentSerializationPadding():
    """btQuantizedBvh_getAlignmentSerializationPadding() -> unsigned int"""
    return _bullet.btQuantizedBvh_getAlignmentSerializationPadding()

class btBvhSubtreeInfoData(_object):
    """Proxy of C++ btBvhSubtreeInfoData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBvhSubtreeInfoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBvhSubtreeInfoData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rootNodeIndex"] = _bullet.btBvhSubtreeInfoData_m_rootNodeIndex_set
    __swig_getmethods__["m_rootNodeIndex"] = _bullet.btBvhSubtreeInfoData_m_rootNodeIndex_get
    if _newclass:
        m_rootNodeIndex = _swig_property(_bullet.btBvhSubtreeInfoData_m_rootNodeIndex_get, _bullet.btBvhSubtreeInfoData_m_rootNodeIndex_set)
    __swig_setmethods__["m_subtreeSize"] = _bullet.btBvhSubtreeInfoData_m_subtreeSize_set
    __swig_getmethods__["m_subtreeSize"] = _bullet.btBvhSubtreeInfoData_m_subtreeSize_get
    if _newclass:
        m_subtreeSize = _swig_property(_bullet.btBvhSubtreeInfoData_m_subtreeSize_get, _bullet.btBvhSubtreeInfoData_m_subtreeSize_set)
    __swig_setmethods__["m_quantizedAabbMin"] = _bullet.btBvhSubtreeInfoData_m_quantizedAabbMin_set
    __swig_getmethods__["m_quantizedAabbMin"] = _bullet.btBvhSubtreeInfoData_m_quantizedAabbMin_get
    if _newclass:
        m_quantizedAabbMin = _swig_property(_bullet.btBvhSubtreeInfoData_m_quantizedAabbMin_get, _bullet.btBvhSubtreeInfoData_m_quantizedAabbMin_set)
    __swig_setmethods__["m_quantizedAabbMax"] = _bullet.btBvhSubtreeInfoData_m_quantizedAabbMax_set
    __swig_getmethods__["m_quantizedAabbMax"] = _bullet.btBvhSubtreeInfoData_m_quantizedAabbMax_get
    if _newclass:
        m_quantizedAabbMax = _swig_property(_bullet.btBvhSubtreeInfoData_m_quantizedAabbMax_get, _bullet.btBvhSubtreeInfoData_m_quantizedAabbMax_set)

    def __init__(self):
        """__init__(btBvhSubtreeInfoData self) -> btBvhSubtreeInfoData"""
        this = _bullet.new_btBvhSubtreeInfoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBvhSubtreeInfoData
    __del__ = lambda self: None
btBvhSubtreeInfoData_swigregister = _bullet.btBvhSubtreeInfoData_swigregister
btBvhSubtreeInfoData_swigregister(btBvhSubtreeInfoData)

class btOptimizedBvhNodeFloatData(_object):
    """Proxy of C++ btOptimizedBvhNodeFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOptimizedBvhNodeFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btOptimizedBvhNodeFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_aabbMinOrg"] = _bullet.btOptimizedBvhNodeFloatData_m_aabbMinOrg_set
    __swig_getmethods__["m_aabbMinOrg"] = _bullet.btOptimizedBvhNodeFloatData_m_aabbMinOrg_get
    if _newclass:
        m_aabbMinOrg = _swig_property(_bullet.btOptimizedBvhNodeFloatData_m_aabbMinOrg_get, _bullet.btOptimizedBvhNodeFloatData_m_aabbMinOrg_set)
    __swig_setmethods__["m_aabbMaxOrg"] = _bullet.btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set
    __swig_getmethods__["m_aabbMaxOrg"] = _bullet.btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get
    if _newclass:
        m_aabbMaxOrg = _swig_property(_bullet.btOptimizedBvhNodeFloatData_m_aabbMaxOrg_get, _bullet.btOptimizedBvhNodeFloatData_m_aabbMaxOrg_set)
    __swig_setmethods__["m_escapeIndex"] = _bullet.btOptimizedBvhNodeFloatData_m_escapeIndex_set
    __swig_getmethods__["m_escapeIndex"] = _bullet.btOptimizedBvhNodeFloatData_m_escapeIndex_get
    if _newclass:
        m_escapeIndex = _swig_property(_bullet.btOptimizedBvhNodeFloatData_m_escapeIndex_get, _bullet.btOptimizedBvhNodeFloatData_m_escapeIndex_set)
    __swig_setmethods__["m_subPart"] = _bullet.btOptimizedBvhNodeFloatData_m_subPart_set
    __swig_getmethods__["m_subPart"] = _bullet.btOptimizedBvhNodeFloatData_m_subPart_get
    if _newclass:
        m_subPart = _swig_property(_bullet.btOptimizedBvhNodeFloatData_m_subPart_get, _bullet.btOptimizedBvhNodeFloatData_m_subPart_set)
    __swig_setmethods__["m_triangleIndex"] = _bullet.btOptimizedBvhNodeFloatData_m_triangleIndex_set
    __swig_getmethods__["m_triangleIndex"] = _bullet.btOptimizedBvhNodeFloatData_m_triangleIndex_get
    if _newclass:
        m_triangleIndex = _swig_property(_bullet.btOptimizedBvhNodeFloatData_m_triangleIndex_get, _bullet.btOptimizedBvhNodeFloatData_m_triangleIndex_set)
    __swig_setmethods__["m_pad"] = _bullet.btOptimizedBvhNodeFloatData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btOptimizedBvhNodeFloatData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btOptimizedBvhNodeFloatData_m_pad_get, _bullet.btOptimizedBvhNodeFloatData_m_pad_set)

    def __init__(self):
        """__init__(btOptimizedBvhNodeFloatData self) -> btOptimizedBvhNodeFloatData"""
        this = _bullet.new_btOptimizedBvhNodeFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btOptimizedBvhNodeFloatData
    __del__ = lambda self: None
btOptimizedBvhNodeFloatData_swigregister = _bullet.btOptimizedBvhNodeFloatData_swigregister
btOptimizedBvhNodeFloatData_swigregister(btOptimizedBvhNodeFloatData)

class btOptimizedBvhNodeDoubleData(_object):
    """Proxy of C++ btOptimizedBvhNodeDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOptimizedBvhNodeDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btOptimizedBvhNodeDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_aabbMinOrg"] = _bullet.btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set
    __swig_getmethods__["m_aabbMinOrg"] = _bullet.btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get
    if _newclass:
        m_aabbMinOrg = _swig_property(_bullet.btOptimizedBvhNodeDoubleData_m_aabbMinOrg_get, _bullet.btOptimizedBvhNodeDoubleData_m_aabbMinOrg_set)
    __swig_setmethods__["m_aabbMaxOrg"] = _bullet.btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set
    __swig_getmethods__["m_aabbMaxOrg"] = _bullet.btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get
    if _newclass:
        m_aabbMaxOrg = _swig_property(_bullet.btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_get, _bullet.btOptimizedBvhNodeDoubleData_m_aabbMaxOrg_set)
    __swig_setmethods__["m_escapeIndex"] = _bullet.btOptimizedBvhNodeDoubleData_m_escapeIndex_set
    __swig_getmethods__["m_escapeIndex"] = _bullet.btOptimizedBvhNodeDoubleData_m_escapeIndex_get
    if _newclass:
        m_escapeIndex = _swig_property(_bullet.btOptimizedBvhNodeDoubleData_m_escapeIndex_get, _bullet.btOptimizedBvhNodeDoubleData_m_escapeIndex_set)
    __swig_setmethods__["m_subPart"] = _bullet.btOptimizedBvhNodeDoubleData_m_subPart_set
    __swig_getmethods__["m_subPart"] = _bullet.btOptimizedBvhNodeDoubleData_m_subPart_get
    if _newclass:
        m_subPart = _swig_property(_bullet.btOptimizedBvhNodeDoubleData_m_subPart_get, _bullet.btOptimizedBvhNodeDoubleData_m_subPart_set)
    __swig_setmethods__["m_triangleIndex"] = _bullet.btOptimizedBvhNodeDoubleData_m_triangleIndex_set
    __swig_getmethods__["m_triangleIndex"] = _bullet.btOptimizedBvhNodeDoubleData_m_triangleIndex_get
    if _newclass:
        m_triangleIndex = _swig_property(_bullet.btOptimizedBvhNodeDoubleData_m_triangleIndex_get, _bullet.btOptimizedBvhNodeDoubleData_m_triangleIndex_set)
    __swig_setmethods__["m_pad"] = _bullet.btOptimizedBvhNodeDoubleData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btOptimizedBvhNodeDoubleData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btOptimizedBvhNodeDoubleData_m_pad_get, _bullet.btOptimizedBvhNodeDoubleData_m_pad_set)

    def __init__(self):
        """__init__(btOptimizedBvhNodeDoubleData self) -> btOptimizedBvhNodeDoubleData"""
        this = _bullet.new_btOptimizedBvhNodeDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btOptimizedBvhNodeDoubleData
    __del__ = lambda self: None
btOptimizedBvhNodeDoubleData_swigregister = _bullet.btOptimizedBvhNodeDoubleData_swigregister
btOptimizedBvhNodeDoubleData_swigregister(btOptimizedBvhNodeDoubleData)

class btQuantizedBvhNodeData(_object):
    """Proxy of C++ btQuantizedBvhNodeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuantizedBvhNodeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuantizedBvhNodeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_quantizedAabbMin"] = _bullet.btQuantizedBvhNodeData_m_quantizedAabbMin_set
    __swig_getmethods__["m_quantizedAabbMin"] = _bullet.btQuantizedBvhNodeData_m_quantizedAabbMin_get
    if _newclass:
        m_quantizedAabbMin = _swig_property(_bullet.btQuantizedBvhNodeData_m_quantizedAabbMin_get, _bullet.btQuantizedBvhNodeData_m_quantizedAabbMin_set)
    __swig_setmethods__["m_quantizedAabbMax"] = _bullet.btQuantizedBvhNodeData_m_quantizedAabbMax_set
    __swig_getmethods__["m_quantizedAabbMax"] = _bullet.btQuantizedBvhNodeData_m_quantizedAabbMax_get
    if _newclass:
        m_quantizedAabbMax = _swig_property(_bullet.btQuantizedBvhNodeData_m_quantizedAabbMax_get, _bullet.btQuantizedBvhNodeData_m_quantizedAabbMax_set)
    __swig_setmethods__["m_escapeIndexOrTriangleIndex"] = _bullet.btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set
    __swig_getmethods__["m_escapeIndexOrTriangleIndex"] = _bullet.btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get
    if _newclass:
        m_escapeIndexOrTriangleIndex = _swig_property(_bullet.btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_get, _bullet.btQuantizedBvhNodeData_m_escapeIndexOrTriangleIndex_set)

    def __init__(self):
        """__init__(btQuantizedBvhNodeData self) -> btQuantizedBvhNodeData"""
        this = _bullet.new_btQuantizedBvhNodeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuantizedBvhNodeData
    __del__ = lambda self: None
btQuantizedBvhNodeData_swigregister = _bullet.btQuantizedBvhNodeData_swigregister
btQuantizedBvhNodeData_swigregister(btQuantizedBvhNodeData)

class btQuantizedBvhFloatData(_object):
    """Proxy of C++ btQuantizedBvhFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuantizedBvhFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuantizedBvhFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bvhAabbMin"] = _bullet.btQuantizedBvhFloatData_m_bvhAabbMin_set
    __swig_getmethods__["m_bvhAabbMin"] = _bullet.btQuantizedBvhFloatData_m_bvhAabbMin_get
    if _newclass:
        m_bvhAabbMin = _swig_property(_bullet.btQuantizedBvhFloatData_m_bvhAabbMin_get, _bullet.btQuantizedBvhFloatData_m_bvhAabbMin_set)
    __swig_setmethods__["m_bvhAabbMax"] = _bullet.btQuantizedBvhFloatData_m_bvhAabbMax_set
    __swig_getmethods__["m_bvhAabbMax"] = _bullet.btQuantizedBvhFloatData_m_bvhAabbMax_get
    if _newclass:
        m_bvhAabbMax = _swig_property(_bullet.btQuantizedBvhFloatData_m_bvhAabbMax_get, _bullet.btQuantizedBvhFloatData_m_bvhAabbMax_set)
    __swig_setmethods__["m_bvhQuantization"] = _bullet.btQuantizedBvhFloatData_m_bvhQuantization_set
    __swig_getmethods__["m_bvhQuantization"] = _bullet.btQuantizedBvhFloatData_m_bvhQuantization_get
    if _newclass:
        m_bvhQuantization = _swig_property(_bullet.btQuantizedBvhFloatData_m_bvhQuantization_get, _bullet.btQuantizedBvhFloatData_m_bvhQuantization_set)
    __swig_setmethods__["m_curNodeIndex"] = _bullet.btQuantizedBvhFloatData_m_curNodeIndex_set
    __swig_getmethods__["m_curNodeIndex"] = _bullet.btQuantizedBvhFloatData_m_curNodeIndex_get
    if _newclass:
        m_curNodeIndex = _swig_property(_bullet.btQuantizedBvhFloatData_m_curNodeIndex_get, _bullet.btQuantizedBvhFloatData_m_curNodeIndex_set)
    __swig_setmethods__["m_useQuantization"] = _bullet.btQuantizedBvhFloatData_m_useQuantization_set
    __swig_getmethods__["m_useQuantization"] = _bullet.btQuantizedBvhFloatData_m_useQuantization_get
    if _newclass:
        m_useQuantization = _swig_property(_bullet.btQuantizedBvhFloatData_m_useQuantization_get, _bullet.btQuantizedBvhFloatData_m_useQuantization_set)
    __swig_setmethods__["m_numContiguousLeafNodes"] = _bullet.btQuantizedBvhFloatData_m_numContiguousLeafNodes_set
    __swig_getmethods__["m_numContiguousLeafNodes"] = _bullet.btQuantizedBvhFloatData_m_numContiguousLeafNodes_get
    if _newclass:
        m_numContiguousLeafNodes = _swig_property(_bullet.btQuantizedBvhFloatData_m_numContiguousLeafNodes_get, _bullet.btQuantizedBvhFloatData_m_numContiguousLeafNodes_set)
    __swig_setmethods__["m_numQuantizedContiguousNodes"] = _bullet.btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set
    __swig_getmethods__["m_numQuantizedContiguousNodes"] = _bullet.btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get
    if _newclass:
        m_numQuantizedContiguousNodes = _swig_property(_bullet.btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_get, _bullet.btQuantizedBvhFloatData_m_numQuantizedContiguousNodes_set)
    __swig_setmethods__["m_contiguousNodesPtr"] = _bullet.btQuantizedBvhFloatData_m_contiguousNodesPtr_set
    __swig_getmethods__["m_contiguousNodesPtr"] = _bullet.btQuantizedBvhFloatData_m_contiguousNodesPtr_get
    if _newclass:
        m_contiguousNodesPtr = _swig_property(_bullet.btQuantizedBvhFloatData_m_contiguousNodesPtr_get, _bullet.btQuantizedBvhFloatData_m_contiguousNodesPtr_set)
    __swig_setmethods__["m_quantizedContiguousNodesPtr"] = _bullet.btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set
    __swig_getmethods__["m_quantizedContiguousNodesPtr"] = _bullet.btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get
    if _newclass:
        m_quantizedContiguousNodesPtr = _swig_property(_bullet.btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_get, _bullet.btQuantizedBvhFloatData_m_quantizedContiguousNodesPtr_set)
    __swig_setmethods__["m_subTreeInfoPtr"] = _bullet.btQuantizedBvhFloatData_m_subTreeInfoPtr_set
    __swig_getmethods__["m_subTreeInfoPtr"] = _bullet.btQuantizedBvhFloatData_m_subTreeInfoPtr_get
    if _newclass:
        m_subTreeInfoPtr = _swig_property(_bullet.btQuantizedBvhFloatData_m_subTreeInfoPtr_get, _bullet.btQuantizedBvhFloatData_m_subTreeInfoPtr_set)
    __swig_setmethods__["m_traversalMode"] = _bullet.btQuantizedBvhFloatData_m_traversalMode_set
    __swig_getmethods__["m_traversalMode"] = _bullet.btQuantizedBvhFloatData_m_traversalMode_get
    if _newclass:
        m_traversalMode = _swig_property(_bullet.btQuantizedBvhFloatData_m_traversalMode_get, _bullet.btQuantizedBvhFloatData_m_traversalMode_set)
    __swig_setmethods__["m_numSubtreeHeaders"] = _bullet.btQuantizedBvhFloatData_m_numSubtreeHeaders_set
    __swig_getmethods__["m_numSubtreeHeaders"] = _bullet.btQuantizedBvhFloatData_m_numSubtreeHeaders_get
    if _newclass:
        m_numSubtreeHeaders = _swig_property(_bullet.btQuantizedBvhFloatData_m_numSubtreeHeaders_get, _bullet.btQuantizedBvhFloatData_m_numSubtreeHeaders_set)

    def __init__(self):
        """__init__(btQuantizedBvhFloatData self) -> btQuantizedBvhFloatData"""
        this = _bullet.new_btQuantizedBvhFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuantizedBvhFloatData
    __del__ = lambda self: None
btQuantizedBvhFloatData_swigregister = _bullet.btQuantizedBvhFloatData_swigregister
btQuantizedBvhFloatData_swigregister(btQuantizedBvhFloatData)

class btQuantizedBvhDoubleData(_object):
    """Proxy of C++ btQuantizedBvhDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btQuantizedBvhDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btQuantizedBvhDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bvhAabbMin"] = _bullet.btQuantizedBvhDoubleData_m_bvhAabbMin_set
    __swig_getmethods__["m_bvhAabbMin"] = _bullet.btQuantizedBvhDoubleData_m_bvhAabbMin_get
    if _newclass:
        m_bvhAabbMin = _swig_property(_bullet.btQuantizedBvhDoubleData_m_bvhAabbMin_get, _bullet.btQuantizedBvhDoubleData_m_bvhAabbMin_set)
    __swig_setmethods__["m_bvhAabbMax"] = _bullet.btQuantizedBvhDoubleData_m_bvhAabbMax_set
    __swig_getmethods__["m_bvhAabbMax"] = _bullet.btQuantizedBvhDoubleData_m_bvhAabbMax_get
    if _newclass:
        m_bvhAabbMax = _swig_property(_bullet.btQuantizedBvhDoubleData_m_bvhAabbMax_get, _bullet.btQuantizedBvhDoubleData_m_bvhAabbMax_set)
    __swig_setmethods__["m_bvhQuantization"] = _bullet.btQuantizedBvhDoubleData_m_bvhQuantization_set
    __swig_getmethods__["m_bvhQuantization"] = _bullet.btQuantizedBvhDoubleData_m_bvhQuantization_get
    if _newclass:
        m_bvhQuantization = _swig_property(_bullet.btQuantizedBvhDoubleData_m_bvhQuantization_get, _bullet.btQuantizedBvhDoubleData_m_bvhQuantization_set)
    __swig_setmethods__["m_curNodeIndex"] = _bullet.btQuantizedBvhDoubleData_m_curNodeIndex_set
    __swig_getmethods__["m_curNodeIndex"] = _bullet.btQuantizedBvhDoubleData_m_curNodeIndex_get
    if _newclass:
        m_curNodeIndex = _swig_property(_bullet.btQuantizedBvhDoubleData_m_curNodeIndex_get, _bullet.btQuantizedBvhDoubleData_m_curNodeIndex_set)
    __swig_setmethods__["m_useQuantization"] = _bullet.btQuantizedBvhDoubleData_m_useQuantization_set
    __swig_getmethods__["m_useQuantization"] = _bullet.btQuantizedBvhDoubleData_m_useQuantization_get
    if _newclass:
        m_useQuantization = _swig_property(_bullet.btQuantizedBvhDoubleData_m_useQuantization_get, _bullet.btQuantizedBvhDoubleData_m_useQuantization_set)
    __swig_setmethods__["m_numContiguousLeafNodes"] = _bullet.btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set
    __swig_getmethods__["m_numContiguousLeafNodes"] = _bullet.btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get
    if _newclass:
        m_numContiguousLeafNodes = _swig_property(_bullet.btQuantizedBvhDoubleData_m_numContiguousLeafNodes_get, _bullet.btQuantizedBvhDoubleData_m_numContiguousLeafNodes_set)
    __swig_setmethods__["m_numQuantizedContiguousNodes"] = _bullet.btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set
    __swig_getmethods__["m_numQuantizedContiguousNodes"] = _bullet.btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get
    if _newclass:
        m_numQuantizedContiguousNodes = _swig_property(_bullet.btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_get, _bullet.btQuantizedBvhDoubleData_m_numQuantizedContiguousNodes_set)
    __swig_setmethods__["m_contiguousNodesPtr"] = _bullet.btQuantizedBvhDoubleData_m_contiguousNodesPtr_set
    __swig_getmethods__["m_contiguousNodesPtr"] = _bullet.btQuantizedBvhDoubleData_m_contiguousNodesPtr_get
    if _newclass:
        m_contiguousNodesPtr = _swig_property(_bullet.btQuantizedBvhDoubleData_m_contiguousNodesPtr_get, _bullet.btQuantizedBvhDoubleData_m_contiguousNodesPtr_set)
    __swig_setmethods__["m_quantizedContiguousNodesPtr"] = _bullet.btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set
    __swig_getmethods__["m_quantizedContiguousNodesPtr"] = _bullet.btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get
    if _newclass:
        m_quantizedContiguousNodesPtr = _swig_property(_bullet.btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_get, _bullet.btQuantizedBvhDoubleData_m_quantizedContiguousNodesPtr_set)
    __swig_setmethods__["m_traversalMode"] = _bullet.btQuantizedBvhDoubleData_m_traversalMode_set
    __swig_getmethods__["m_traversalMode"] = _bullet.btQuantizedBvhDoubleData_m_traversalMode_get
    if _newclass:
        m_traversalMode = _swig_property(_bullet.btQuantizedBvhDoubleData_m_traversalMode_get, _bullet.btQuantizedBvhDoubleData_m_traversalMode_set)
    __swig_setmethods__["m_numSubtreeHeaders"] = _bullet.btQuantizedBvhDoubleData_m_numSubtreeHeaders_set
    __swig_getmethods__["m_numSubtreeHeaders"] = _bullet.btQuantizedBvhDoubleData_m_numSubtreeHeaders_get
    if _newclass:
        m_numSubtreeHeaders = _swig_property(_bullet.btQuantizedBvhDoubleData_m_numSubtreeHeaders_get, _bullet.btQuantizedBvhDoubleData_m_numSubtreeHeaders_set)
    __swig_setmethods__["m_subTreeInfoPtr"] = _bullet.btQuantizedBvhDoubleData_m_subTreeInfoPtr_set
    __swig_getmethods__["m_subTreeInfoPtr"] = _bullet.btQuantizedBvhDoubleData_m_subTreeInfoPtr_get
    if _newclass:
        m_subTreeInfoPtr = _swig_property(_bullet.btQuantizedBvhDoubleData_m_subTreeInfoPtr_get, _bullet.btQuantizedBvhDoubleData_m_subTreeInfoPtr_set)

    def __init__(self):
        """__init__(btQuantizedBvhDoubleData self) -> btQuantizedBvhDoubleData"""
        this = _bullet.new_btQuantizedBvhDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btQuantizedBvhDoubleData
    __del__ = lambda self: None
btQuantizedBvhDoubleData_swigregister = _bullet.btQuantizedBvhDoubleData_swigregister
btQuantizedBvhDoubleData_swigregister(btQuantizedBvhDoubleData)

class btSimpleBroadphaseProxy(btBroadphaseProxy):
    """Proxy of C++ btSimpleBroadphaseProxy class."""

    __swig_setmethods__ = {}
    for _s in [btBroadphaseProxy]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSimpleBroadphaseProxy, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseProxy]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSimpleBroadphaseProxy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_nextFree"] = _bullet.btSimpleBroadphaseProxy_m_nextFree_set
    __swig_getmethods__["m_nextFree"] = _bullet.btSimpleBroadphaseProxy_m_nextFree_get
    if _newclass:
        m_nextFree = _swig_property(_bullet.btSimpleBroadphaseProxy_m_nextFree_get, _bullet.btSimpleBroadphaseProxy_m_nextFree_set)

    def __init__(self, *args):
        """
        __init__(btSimpleBroadphaseProxy self) -> btSimpleBroadphaseProxy
        __init__(btSimpleBroadphaseProxy self, btVector3 const & minpt, btVector3 const & maxpt, int shapeType, void * userPtr, int collisionFilterGroup, int collisionFilterMask) -> btSimpleBroadphaseProxy
        """
        this = _bullet.new_btSimpleBroadphaseProxy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetNextFree(self, next):
        """SetNextFree(btSimpleBroadphaseProxy self, int next)"""
        return _bullet.btSimpleBroadphaseProxy_SetNextFree(self, next)


    def GetNextFree(self):
        """GetNextFree(btSimpleBroadphaseProxy self) -> int"""
        return _bullet.btSimpleBroadphaseProxy_GetNextFree(self)

    __swig_destroy__ = _bullet.delete_btSimpleBroadphaseProxy
    __del__ = lambda self: None
btSimpleBroadphaseProxy_swigregister = _bullet.btSimpleBroadphaseProxy_swigregister
btSimpleBroadphaseProxy_swigregister(btSimpleBroadphaseProxy)

class btSimpleBroadphase(btBroadphaseInterface):
    """Proxy of C++ btSimpleBroadphase class."""

    __swig_setmethods__ = {}
    for _s in [btBroadphaseInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSimpleBroadphase, name, value)
    __swig_getmethods__ = {}
    for _s in [btBroadphaseInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSimpleBroadphase, name)
    __repr__ = _swig_repr

    def __init__(self, maxProxies=16384, overlappingPairCache=None):
        """
        __init__(btSimpleBroadphase self, int maxProxies=16384, btOverlappingPairCache overlappingPairCache=None) -> btSimpleBroadphase
        __init__(btSimpleBroadphase self, int maxProxies=16384) -> btSimpleBroadphase
        __init__(btSimpleBroadphase self) -> btSimpleBroadphase
        """
        this = _bullet.new_btSimpleBroadphase(maxProxies, overlappingPairCache)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSimpleBroadphase
    __del__ = lambda self: None

    def aabbOverlap(proxy0, proxy1):
        """aabbOverlap(btSimpleBroadphaseProxy proxy0, btSimpleBroadphaseProxy proxy1) -> bool"""
        return _bullet.btSimpleBroadphase_aabbOverlap(proxy0, proxy1)

    aabbOverlap = staticmethod(aabbOverlap)

    def getOverlappingPairCache(self, *args):
        """
        getOverlappingPairCache(btSimpleBroadphase self) -> btOverlappingPairCache
        getOverlappingPairCache(btSimpleBroadphase self) -> btOverlappingPairCache
        """
        return _bullet.btSimpleBroadphase_getOverlappingPairCache(self, *args)


    def testAabbOverlap(self, proxy0, proxy1):
        """testAabbOverlap(btSimpleBroadphase self, btBroadphaseProxy proxy0, btBroadphaseProxy proxy1) -> bool"""
        return _bullet.btSimpleBroadphase_testAabbOverlap(self, proxy0, proxy1)

btSimpleBroadphase_swigregister = _bullet.btSimpleBroadphase_swigregister
btSimpleBroadphase_swigregister(btSimpleBroadphase)

def btSimpleBroadphase_aabbOverlap(proxy0, proxy1):
    """btSimpleBroadphase_aabbOverlap(btSimpleBroadphaseProxy proxy0, btSimpleBroadphaseProxy proxy1) -> bool"""
    return _bullet.btSimpleBroadphase_aabbOverlap(proxy0, proxy1)

class btActivatingCollisionAlgorithm(btCollisionAlgorithm):
    """Proxy of C++ btActivatingCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btActivatingCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btActivatingCollisionAlgorithm, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btActivatingCollisionAlgorithm
    __del__ = lambda self: None
btActivatingCollisionAlgorithm_swigregister = _bullet.btActivatingCollisionAlgorithm_swigregister
btActivatingCollisionAlgorithm_swigregister(btActivatingCollisionAlgorithm)

class btCollisionAlgorithmCreateFunc(_object):
    """Proxy of C++ btCollisionAlgorithmCreateFunc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionAlgorithmCreateFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionAlgorithmCreateFunc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_swapped"] = _bullet.btCollisionAlgorithmCreateFunc_m_swapped_set
    __swig_getmethods__["m_swapped"] = _bullet.btCollisionAlgorithmCreateFunc_m_swapped_get
    if _newclass:
        m_swapped = _swig_property(_bullet.btCollisionAlgorithmCreateFunc_m_swapped_get, _bullet.btCollisionAlgorithmCreateFunc_m_swapped_set)

    def __init__(self):
        """__init__(btCollisionAlgorithmCreateFunc self) -> btCollisionAlgorithmCreateFunc"""
        this = _bullet.new_btCollisionAlgorithmCreateFunc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionAlgorithmCreateFunc
    __del__ = lambda self: None

    def CreateCollisionAlgorithm(self, arg2, body0Wrap, body1Wrap):
        """CreateCollisionAlgorithm(btCollisionAlgorithmCreateFunc self, btCollisionAlgorithmConstructionInfo arg2, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap) -> btCollisionAlgorithm"""
        return _bullet.btCollisionAlgorithmCreateFunc_CreateCollisionAlgorithm(self, arg2, body0Wrap, body1Wrap)

btCollisionAlgorithmCreateFunc_swigregister = _bullet.btCollisionAlgorithmCreateFunc_swigregister
btCollisionAlgorithmCreateFunc_swigregister(btCollisionAlgorithmCreateFunc)

class btBox2dBox2dCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btBox2dBox2dCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBox2dBox2dCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBox2dBox2dCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btBox2dBox2dCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci) -> btBox2dBox2dCollisionAlgorithm
        __init__(btBox2dBox2dCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap) -> btBox2dBox2dCollisionAlgorithm
        """
        this = _bullet.new_btBox2dBox2dCollisionAlgorithm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBox2dBox2dCollisionAlgorithm
    __del__ = lambda self: None
btBox2dBox2dCollisionAlgorithm_swigregister = _bullet.btBox2dBox2dCollisionAlgorithm_swigregister
btBox2dBox2dCollisionAlgorithm_swigregister(btBox2dBox2dCollisionAlgorithm)

class btBoxBoxCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btBoxBoxCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBoxBoxCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBoxBoxCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btBoxBoxCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci) -> btBoxBoxCollisionAlgorithm
        __init__(btBoxBoxCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap) -> btBoxBoxCollisionAlgorithm
        """
        this = _bullet.new_btBoxBoxCollisionAlgorithm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBoxBoxCollisionAlgorithm
    __del__ = lambda self: None
btBoxBoxCollisionAlgorithm_swigregister = _bullet.btBoxBoxCollisionAlgorithm_swigregister
btBoxBoxCollisionAlgorithm_swigregister(btBoxBoxCollisionAlgorithm)

class btDiscreteCollisionDetectorInterface(_object):
    """Proxy of C++ btDiscreteCollisionDetectorInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDiscreteCollisionDetectorInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDiscreteCollisionDetectorInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btDiscreteCollisionDetectorInterface
    __del__ = lambda self: None

    def getClosestPoints(self, input, output, debugDraw, swapResults=False):
        """
        getClosestPoints(btDiscreteCollisionDetectorInterface self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw, bool swapResults=False)
        getClosestPoints(btDiscreteCollisionDetectorInterface self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw)
        """
        return _bullet.btDiscreteCollisionDetectorInterface_getClosestPoints(self, input, output, debugDraw, swapResults)

btDiscreteCollisionDetectorInterface_swigregister = _bullet.btDiscreteCollisionDetectorInterface_swigregister
btDiscreteCollisionDetectorInterface_swigregister(btDiscreteCollisionDetectorInterface)

class btBoxBoxDetector(btDiscreteCollisionDetectorInterface):
    """Proxy of C++ btBoxBoxDetector class."""

    __swig_setmethods__ = {}
    for _s in [btDiscreteCollisionDetectorInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBoxBoxDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [btDiscreteCollisionDetectorInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBoxBoxDetector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_box1"] = _bullet.btBoxBoxDetector_m_box1_set
    __swig_getmethods__["m_box1"] = _bullet.btBoxBoxDetector_m_box1_get
    if _newclass:
        m_box1 = _swig_property(_bullet.btBoxBoxDetector_m_box1_get, _bullet.btBoxBoxDetector_m_box1_set)
    __swig_setmethods__["m_box2"] = _bullet.btBoxBoxDetector_m_box2_set
    __swig_getmethods__["m_box2"] = _bullet.btBoxBoxDetector_m_box2_get
    if _newclass:
        m_box2 = _swig_property(_bullet.btBoxBoxDetector_m_box2_get, _bullet.btBoxBoxDetector_m_box2_set)

    def __init__(self, box1, box2):
        """__init__(btBoxBoxDetector self, btBoxShape box1, btBoxShape box2) -> btBoxBoxDetector"""
        this = _bullet.new_btBoxBoxDetector(box1, box2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBoxBoxDetector
    __del__ = lambda self: None

    def getClosestPoints(self, input, output, debugDraw, swapResults=False):
        """
        getClosestPoints(btBoxBoxDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw, bool swapResults=False)
        getClosestPoints(btBoxBoxDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw)
        """
        return _bullet.btBoxBoxDetector_getClosestPoints(self, input, output, debugDraw, swapResults)

btBoxBoxDetector_swigregister = _bullet.btBoxBoxDetector_swigregister
btBoxBoxDetector_swigregister(btBoxBoxDetector)

class btCollisionConfiguration(_object):
    """Proxy of C++ btCollisionConfiguration class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionConfiguration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionConfiguration, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btCollisionConfiguration
    __del__ = lambda self: None

    def getPersistentManifoldPool(self):
        """getPersistentManifoldPool(btCollisionConfiguration self) -> btPoolAllocator"""
        return _bullet.btCollisionConfiguration_getPersistentManifoldPool(self)


    def getCollisionAlgorithmPool(self):
        """getCollisionAlgorithmPool(btCollisionConfiguration self) -> btPoolAllocator"""
        return _bullet.btCollisionConfiguration_getCollisionAlgorithmPool(self)


    def getCollisionAlgorithmCreateFunc(self, proxyType0, proxyType1):
        """getCollisionAlgorithmCreateFunc(btCollisionConfiguration self, int proxyType0, int proxyType1) -> btCollisionAlgorithmCreateFunc"""
        return _bullet.btCollisionConfiguration_getCollisionAlgorithmCreateFunc(self, proxyType0, proxyType1)


    def getClosestPointsAlgorithmCreateFunc(self, proxyType0, proxyType1):
        """getClosestPointsAlgorithmCreateFunc(btCollisionConfiguration self, int proxyType0, int proxyType1) -> btCollisionAlgorithmCreateFunc"""
        return _bullet.btCollisionConfiguration_getClosestPointsAlgorithmCreateFunc(self, proxyType0, proxyType1)

btCollisionConfiguration_swigregister = _bullet.btCollisionConfiguration_swigregister
btCollisionConfiguration_swigregister(btCollisionConfiguration)


def btAabbSupport(halfExtents, supportDir):
    """btAabbSupport(btVector3 const & halfExtents, btVector3 const & supportDir) -> btVector3"""
    return _bullet.btAabbSupport(halfExtents, supportDir)
class btTransformUtil(_object):
    """Proxy of C++ btTransformUtil class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTransformUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTransformUtil, name)
    __repr__ = _swig_repr

    def integrateTransform(curTrans, linvel, angvel, timeStep, predictedTransform):
        """integrateTransform(btTransform const & curTrans, btVector3 const & linvel, btVector3 const & angvel, btScalar timeStep, btTransform & predictedTransform)"""
        return _bullet.btTransformUtil_integrateTransform(curTrans, linvel, angvel, timeStep, predictedTransform)

    integrateTransform = staticmethod(integrateTransform)

    def calculateVelocityQuaternion(pos0, pos1, orn0, orn1, timeStep, linVel, angVel):
        """calculateVelocityQuaternion(btVector3 const & pos0, btVector3 const & pos1, btQuaternion const & orn0, btQuaternion const & orn1, btScalar timeStep, btVector3 & linVel, btVector3 & angVel)"""
        return _bullet.btTransformUtil_calculateVelocityQuaternion(pos0, pos1, orn0, orn1, timeStep, linVel, angVel)

    calculateVelocityQuaternion = staticmethod(calculateVelocityQuaternion)

    def calculateDiffAxisAngleQuaternion(orn0, orn1a, axis, angle):
        """calculateDiffAxisAngleQuaternion(btQuaternion const & orn0, btQuaternion const & orn1a, btVector3 & axis, btScalar & angle)"""
        return _bullet.btTransformUtil_calculateDiffAxisAngleQuaternion(orn0, orn1a, axis, angle)

    calculateDiffAxisAngleQuaternion = staticmethod(calculateDiffAxisAngleQuaternion)

    def calculateVelocity(transform0, transform1, timeStep, linVel, angVel):
        """calculateVelocity(btTransform const & transform0, btTransform const & transform1, btScalar timeStep, btVector3 & linVel, btVector3 & angVel)"""
        return _bullet.btTransformUtil_calculateVelocity(transform0, transform1, timeStep, linVel, angVel)

    calculateVelocity = staticmethod(calculateVelocity)

    def calculateDiffAxisAngle(transform0, transform1, axis, angle):
        """calculateDiffAxisAngle(btTransform const & transform0, btTransform const & transform1, btVector3 & axis, btScalar & angle)"""
        return _bullet.btTransformUtil_calculateDiffAxisAngle(transform0, transform1, axis, angle)

    calculateDiffAxisAngle = staticmethod(calculateDiffAxisAngle)

    def __init__(self):
        """__init__(btTransformUtil self) -> btTransformUtil"""
        this = _bullet.new_btTransformUtil()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTransformUtil
    __del__ = lambda self: None
btTransformUtil_swigregister = _bullet.btTransformUtil_swigregister
btTransformUtil_swigregister(btTransformUtil)

def btTransformUtil_integrateTransform(curTrans, linvel, angvel, timeStep, predictedTransform):
    """btTransformUtil_integrateTransform(btTransform const & curTrans, btVector3 const & linvel, btVector3 const & angvel, btScalar timeStep, btTransform & predictedTransform)"""
    return _bullet.btTransformUtil_integrateTransform(curTrans, linvel, angvel, timeStep, predictedTransform)

def btTransformUtil_calculateVelocityQuaternion(pos0, pos1, orn0, orn1, timeStep, linVel, angVel):
    """btTransformUtil_calculateVelocityQuaternion(btVector3 const & pos0, btVector3 const & pos1, btQuaternion const & orn0, btQuaternion const & orn1, btScalar timeStep, btVector3 & linVel, btVector3 & angVel)"""
    return _bullet.btTransformUtil_calculateVelocityQuaternion(pos0, pos1, orn0, orn1, timeStep, linVel, angVel)

def btTransformUtil_calculateDiffAxisAngleQuaternion(orn0, orn1a, axis, angle):
    """btTransformUtil_calculateDiffAxisAngleQuaternion(btQuaternion const & orn0, btQuaternion const & orn1a, btVector3 & axis, btScalar & angle)"""
    return _bullet.btTransformUtil_calculateDiffAxisAngleQuaternion(orn0, orn1a, axis, angle)

def btTransformUtil_calculateVelocity(transform0, transform1, timeStep, linVel, angVel):
    """btTransformUtil_calculateVelocity(btTransform const & transform0, btTransform const & transform1, btScalar timeStep, btVector3 & linVel, btVector3 & angVel)"""
    return _bullet.btTransformUtil_calculateVelocity(transform0, transform1, timeStep, linVel, angVel)

def btTransformUtil_calculateDiffAxisAngle(transform0, transform1, axis, angle):
    """btTransformUtil_calculateDiffAxisAngle(btTransform const & transform0, btTransform const & transform1, btVector3 & axis, btScalar & angle)"""
    return _bullet.btTransformUtil_calculateDiffAxisAngle(transform0, transform1, axis, angle)

class btConvexSeparatingDistanceUtil(_object):
    """Proxy of C++ btConvexSeparatingDistanceUtil class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexSeparatingDistanceUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexSeparatingDistanceUtil, name)
    __repr__ = _swig_repr

    def __init__(self, boundingRadiusA, boundingRadiusB):
        """__init__(btConvexSeparatingDistanceUtil self, btScalar boundingRadiusA, btScalar boundingRadiusB) -> btConvexSeparatingDistanceUtil"""
        this = _bullet.new_btConvexSeparatingDistanceUtil(boundingRadiusA, boundingRadiusB)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getConservativeSeparatingDistance(self):
        """getConservativeSeparatingDistance(btConvexSeparatingDistanceUtil self) -> btScalar"""
        return _bullet.btConvexSeparatingDistanceUtil_getConservativeSeparatingDistance(self)


    def updateSeparatingDistance(self, transA, transB):
        """updateSeparatingDistance(btConvexSeparatingDistanceUtil self, btTransform const & transA, btTransform const & transB)"""
        return _bullet.btConvexSeparatingDistanceUtil_updateSeparatingDistance(self, transA, transB)


    def initSeparatingDistance(self, separatingVector, separatingDistance, transA, transB):
        """initSeparatingDistance(btConvexSeparatingDistanceUtil self, btVector3 const & separatingVector, btScalar separatingDistance, btTransform const & transA, btTransform const & transB)"""
        return _bullet.btConvexSeparatingDistanceUtil_initSeparatingDistance(self, separatingVector, separatingDistance, transA, transB)

    __swig_destroy__ = _bullet.delete_btConvexSeparatingDistanceUtil
    __del__ = lambda self: None
btConvexSeparatingDistanceUtil_swigregister = _bullet.btConvexSeparatingDistanceUtil_swigregister
btConvexSeparatingDistanceUtil_swigregister(btConvexSeparatingDistanceUtil)

class btConstraintRow(_object):
    """Proxy of C++ btConstraintRow class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConstraintRow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConstraintRow, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_normal"] = _bullet.btConstraintRow_m_normal_set
    __swig_getmethods__["m_normal"] = _bullet.btConstraintRow_m_normal_get
    if _newclass:
        m_normal = _swig_property(_bullet.btConstraintRow_m_normal_get, _bullet.btConstraintRow_m_normal_set)
    __swig_setmethods__["m_rhs"] = _bullet.btConstraintRow_m_rhs_set
    __swig_getmethods__["m_rhs"] = _bullet.btConstraintRow_m_rhs_get
    if _newclass:
        m_rhs = _swig_property(_bullet.btConstraintRow_m_rhs_get, _bullet.btConstraintRow_m_rhs_set)
    __swig_setmethods__["m_jacDiagInv"] = _bullet.btConstraintRow_m_jacDiagInv_set
    __swig_getmethods__["m_jacDiagInv"] = _bullet.btConstraintRow_m_jacDiagInv_get
    if _newclass:
        m_jacDiagInv = _swig_property(_bullet.btConstraintRow_m_jacDiagInv_get, _bullet.btConstraintRow_m_jacDiagInv_set)
    __swig_setmethods__["m_lowerLimit"] = _bullet.btConstraintRow_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btConstraintRow_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btConstraintRow_m_lowerLimit_get, _bullet.btConstraintRow_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btConstraintRow_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btConstraintRow_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btConstraintRow_m_upperLimit_get, _bullet.btConstraintRow_m_upperLimit_set)
    __swig_setmethods__["m_accumImpulse"] = _bullet.btConstraintRow_m_accumImpulse_set
    __swig_getmethods__["m_accumImpulse"] = _bullet.btConstraintRow_m_accumImpulse_get
    if _newclass:
        m_accumImpulse = _swig_property(_bullet.btConstraintRow_m_accumImpulse_get, _bullet.btConstraintRow_m_accumImpulse_set)

    def __init__(self):
        """__init__(btConstraintRow self) -> btConstraintRow"""
        this = _bullet.new_btConstraintRow()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConstraintRow
    __del__ = lambda self: None
btConstraintRow_swigregister = _bullet.btConstraintRow_swigregister
btConstraintRow_swigregister(btConstraintRow)

BT_CONTACT_FLAG_LATERAL_FRICTION_INITIALIZED = _bullet.BT_CONTACT_FLAG_LATERAL_FRICTION_INITIALIZED
BT_CONTACT_FLAG_HAS_CONTACT_CFM = _bullet.BT_CONTACT_FLAG_HAS_CONTACT_CFM
BT_CONTACT_FLAG_HAS_CONTACT_ERP = _bullet.BT_CONTACT_FLAG_HAS_CONTACT_ERP
BT_CONTACT_FLAG_CONTACT_STIFFNESS_DAMPING = _bullet.BT_CONTACT_FLAG_CONTACT_STIFFNESS_DAMPING
MIN_CONTACT_MANIFOLD_TYPE = _bullet.MIN_CONTACT_MANIFOLD_TYPE
BT_PERSISTENT_MANIFOLD_TYPE = _bullet.BT_PERSISTENT_MANIFOLD_TYPE
MANIFOLD_CACHE_SIZE = _bullet.MANIFOLD_CACHE_SIZE
class btPersistentManifold(btTypedObject):
    """Proxy of C++ btPersistentManifold class."""

    __swig_setmethods__ = {}
    for _s in [btTypedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPersistentManifold, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPersistentManifold, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_companionIdA"] = _bullet.btPersistentManifold_m_companionIdA_set
    __swig_getmethods__["m_companionIdA"] = _bullet.btPersistentManifold_m_companionIdA_get
    if _newclass:
        m_companionIdA = _swig_property(_bullet.btPersistentManifold_m_companionIdA_get, _bullet.btPersistentManifold_m_companionIdA_set)
    __swig_setmethods__["m_companionIdB"] = _bullet.btPersistentManifold_m_companionIdB_set
    __swig_getmethods__["m_companionIdB"] = _bullet.btPersistentManifold_m_companionIdB_get
    if _newclass:
        m_companionIdB = _swig_property(_bullet.btPersistentManifold_m_companionIdB_get, _bullet.btPersistentManifold_m_companionIdB_set)
    __swig_setmethods__["m_index1a"] = _bullet.btPersistentManifold_m_index1a_set
    __swig_getmethods__["m_index1a"] = _bullet.btPersistentManifold_m_index1a_get
    if _newclass:
        m_index1a = _swig_property(_bullet.btPersistentManifold_m_index1a_get, _bullet.btPersistentManifold_m_index1a_set)

    def __init__(self, *args):
        """
        __init__(btPersistentManifold self) -> btPersistentManifold
        __init__(btPersistentManifold self, btCollisionObject body0, btCollisionObject body1, int arg4, btScalar contactBreakingThreshold, btScalar contactProcessingThreshold) -> btPersistentManifold
        """
        this = _bullet.new_btPersistentManifold(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getBody0(self):
        """getBody0(btPersistentManifold self) -> btCollisionObject"""
        return _bullet.btPersistentManifold_getBody0(self)


    def getBody1(self):
        """getBody1(btPersistentManifold self) -> btCollisionObject"""
        return _bullet.btPersistentManifold_getBody1(self)


    def setBodies(self, body0, body1):
        """setBodies(btPersistentManifold self, btCollisionObject body0, btCollisionObject body1)"""
        return _bullet.btPersistentManifold_setBodies(self, body0, body1)


    def clearUserCache(self, pt):
        """clearUserCache(btPersistentManifold self, btManifoldPoint & pt)"""
        return _bullet.btPersistentManifold_clearUserCache(self, pt)


    def getNumContacts(self):
        """getNumContacts(btPersistentManifold self) -> int"""
        return _bullet.btPersistentManifold_getNumContacts(self)


    def setNumContacts(self, cachedPoints):
        """setNumContacts(btPersistentManifold self, int cachedPoints)"""
        return _bullet.btPersistentManifold_setNumContacts(self, cachedPoints)


    def getContactPoint(self, *args):
        """
        getContactPoint(btPersistentManifold self, int index) -> btManifoldPoint const
        getContactPoint(btPersistentManifold self, int index) -> btManifoldPoint &
        """
        return _bullet.btPersistentManifold_getContactPoint(self, *args)


    def getContactBreakingThreshold(self):
        """getContactBreakingThreshold(btPersistentManifold self) -> btScalar"""
        return _bullet.btPersistentManifold_getContactBreakingThreshold(self)


    def getContactProcessingThreshold(self):
        """getContactProcessingThreshold(btPersistentManifold self) -> btScalar"""
        return _bullet.btPersistentManifold_getContactProcessingThreshold(self)


    def setContactBreakingThreshold(self, contactBreakingThreshold):
        """setContactBreakingThreshold(btPersistentManifold self, btScalar contactBreakingThreshold)"""
        return _bullet.btPersistentManifold_setContactBreakingThreshold(self, contactBreakingThreshold)


    def setContactProcessingThreshold(self, contactProcessingThreshold):
        """setContactProcessingThreshold(btPersistentManifold self, btScalar contactProcessingThreshold)"""
        return _bullet.btPersistentManifold_setContactProcessingThreshold(self, contactProcessingThreshold)


    def getCacheEntry(self, newPoint):
        """getCacheEntry(btPersistentManifold self, btManifoldPoint const & newPoint) -> int"""
        return _bullet.btPersistentManifold_getCacheEntry(self, newPoint)


    def addManifoldPoint(self, newPoint, isPredictive=False):
        """
        addManifoldPoint(btPersistentManifold self, btManifoldPoint const & newPoint, bool isPredictive=False) -> int
        addManifoldPoint(btPersistentManifold self, btManifoldPoint const & newPoint) -> int
        """
        return _bullet.btPersistentManifold_addManifoldPoint(self, newPoint, isPredictive)


    def removeContactPoint(self, index):
        """removeContactPoint(btPersistentManifold self, int index)"""
        return _bullet.btPersistentManifold_removeContactPoint(self, index)


    def replaceContactPoint(self, newPoint, insertIndex):
        """replaceContactPoint(btPersistentManifold self, btManifoldPoint const & newPoint, int insertIndex)"""
        return _bullet.btPersistentManifold_replaceContactPoint(self, newPoint, insertIndex)


    def validContactDistance(self, pt):
        """validContactDistance(btPersistentManifold self, btManifoldPoint const & pt) -> bool"""
        return _bullet.btPersistentManifold_validContactDistance(self, pt)


    def refreshContactPoints(self, trA, trB):
        """refreshContactPoints(btPersistentManifold self, btTransform const & trA, btTransform const & trB)"""
        return _bullet.btPersistentManifold_refreshContactPoints(self, trA, trB)


    def clearManifold(self):
        """clearManifold(btPersistentManifold self)"""
        return _bullet.btPersistentManifold_clearManifold(self)

    __swig_destroy__ = _bullet.delete_btPersistentManifold
    __del__ = lambda self: None
btPersistentManifold_swigregister = _bullet.btPersistentManifold_swigregister
btPersistentManifold_swigregister(btPersistentManifold)

ACTIVE_TAG = _bullet.ACTIVE_TAG
ISLAND_SLEEPING = _bullet.ISLAND_SLEEPING
WANTS_DEACTIVATION = _bullet.WANTS_DEACTIVATION
DISABLE_DEACTIVATION = _bullet.DISABLE_DEACTIVATION
DISABLE_SIMULATION = _bullet.DISABLE_SIMULATION
class btMotionState(_object):
    """Proxy of C++ btMotionState class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMotionState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMotionState, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btMotionState
    __del__ = lambda self: None

    def getWorldTransform(self, worldTrans):
        """getWorldTransform(btMotionState self, btTransform & worldTrans)"""
        return _bullet.btMotionState_getWorldTransform(self, worldTrans)


    def setWorldTransform(self, worldTrans):
        """setWorldTransform(btMotionState self, btTransform const & worldTrans)"""
        return _bullet.btMotionState_setWorldTransform(self, worldTrans)

btMotionState_swigregister = _bullet.btMotionState_swigregister
btMotionState_swigregister(btMotionState)

btCollisionObjectDataName = _bullet.btCollisionObjectDataName
class btCollisionObject(_object):
    """Proxy of C++ btCollisionObject class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObject, name)
    __repr__ = _swig_repr
    CF_STATIC_OBJECT = _bullet.btCollisionObject_CF_STATIC_OBJECT
    CF_KINEMATIC_OBJECT = _bullet.btCollisionObject_CF_KINEMATIC_OBJECT
    CF_NO_CONTACT_RESPONSE = _bullet.btCollisionObject_CF_NO_CONTACT_RESPONSE
    CF_CUSTOM_MATERIAL_CALLBACK = _bullet.btCollisionObject_CF_CUSTOM_MATERIAL_CALLBACK
    CF_CHARACTER_OBJECT = _bullet.btCollisionObject_CF_CHARACTER_OBJECT
    CF_DISABLE_VISUALIZE_OBJECT = _bullet.btCollisionObject_CF_DISABLE_VISUALIZE_OBJECT
    CF_DISABLE_SPU_COLLISION_PROCESSING = _bullet.btCollisionObject_CF_DISABLE_SPU_COLLISION_PROCESSING
    CF_HAS_CONTACT_STIFFNESS_DAMPING = _bullet.btCollisionObject_CF_HAS_CONTACT_STIFFNESS_DAMPING
    CF_HAS_CUSTOM_DEBUG_RENDERING_COLOR = _bullet.btCollisionObject_CF_HAS_CUSTOM_DEBUG_RENDERING_COLOR
    CO_COLLISION_OBJECT = _bullet.btCollisionObject_CO_COLLISION_OBJECT
    CO_RIGID_BODY = _bullet.btCollisionObject_CO_RIGID_BODY
    CO_GHOST_OBJECT = _bullet.btCollisionObject_CO_GHOST_OBJECT
    CO_SOFT_BODY = _bullet.btCollisionObject_CO_SOFT_BODY
    CO_HF_FLUID = _bullet.btCollisionObject_CO_HF_FLUID
    CO_USER_TYPE = _bullet.btCollisionObject_CO_USER_TYPE
    CO_FEATHERSTONE_LINK = _bullet.btCollisionObject_CO_FEATHERSTONE_LINK
    CF_ANISOTROPIC_FRICTION_DISABLED = _bullet.btCollisionObject_CF_ANISOTROPIC_FRICTION_DISABLED
    CF_ANISOTROPIC_FRICTION = _bullet.btCollisionObject_CF_ANISOTROPIC_FRICTION
    CF_ANISOTROPIC_ROLLING_FRICTION = _bullet.btCollisionObject_CF_ANISOTROPIC_ROLLING_FRICTION

    def mergesSimulationIslands(self):
        """mergesSimulationIslands(btCollisionObject self) -> bool"""
        return _bullet.btCollisionObject_mergesSimulationIslands(self)


    def getAnisotropicFriction(self):
        """getAnisotropicFriction(btCollisionObject self) -> btVector3 const &"""
        return _bullet.btCollisionObject_getAnisotropicFriction(self)


    def setAnisotropicFriction(self, *args):
        """
        setAnisotropicFriction(btCollisionObject self, btVector3 const & anisotropicFriction, int frictionMode)
        setAnisotropicFriction(btCollisionObject self, btVector3 const & anisotropicFriction)
        """
        return _bullet.btCollisionObject_setAnisotropicFriction(self, *args)


    def hasAnisotropicFriction(self, *args):
        """
        hasAnisotropicFriction(btCollisionObject self, int frictionMode) -> bool
        hasAnisotropicFriction(btCollisionObject self) -> bool
        """
        return _bullet.btCollisionObject_hasAnisotropicFriction(self, *args)


    def setContactProcessingThreshold(self, contactProcessingThreshold):
        """setContactProcessingThreshold(btCollisionObject self, btScalar contactProcessingThreshold)"""
        return _bullet.btCollisionObject_setContactProcessingThreshold(self, contactProcessingThreshold)


    def getContactProcessingThreshold(self):
        """getContactProcessingThreshold(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getContactProcessingThreshold(self)


    def isStaticObject(self):
        """isStaticObject(btCollisionObject self) -> bool"""
        return _bullet.btCollisionObject_isStaticObject(self)


    def isKinematicObject(self):
        """isKinematicObject(btCollisionObject self) -> bool"""
        return _bullet.btCollisionObject_isKinematicObject(self)


    def isStaticOrKinematicObject(self):
        """isStaticOrKinematicObject(btCollisionObject self) -> bool"""
        return _bullet.btCollisionObject_isStaticOrKinematicObject(self)


    def hasContactResponse(self):
        """hasContactResponse(btCollisionObject self) -> bool"""
        return _bullet.btCollisionObject_hasContactResponse(self)


    def __init__(self):
        """__init__(btCollisionObject self) -> btCollisionObject"""
        this = _bullet.new_btCollisionObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionObject
    __del__ = lambda self: None

    def setCollisionShape(self, collisionShape):
        """setCollisionShape(btCollisionObject self, btCollisionShape collisionShape)"""
        return _bullet.btCollisionObject_setCollisionShape(self, collisionShape)


    def getCollisionShape(self, *args):
        """
        getCollisionShape(btCollisionObject self) -> btCollisionShape
        getCollisionShape(btCollisionObject self) -> btCollisionShape
        """
        return _bullet.btCollisionObject_getCollisionShape(self, *args)


    def setIgnoreCollisionCheck(self, co, ignoreCollisionCheck):
        """setIgnoreCollisionCheck(btCollisionObject self, btCollisionObject co, bool ignoreCollisionCheck)"""
        return _bullet.btCollisionObject_setIgnoreCollisionCheck(self, co, ignoreCollisionCheck)


    def checkCollideWithOverride(self, co):
        """checkCollideWithOverride(btCollisionObject self, btCollisionObject co) -> bool"""
        return _bullet.btCollisionObject_checkCollideWithOverride(self, co)


    def internalGetExtensionPointer(self):
        """internalGetExtensionPointer(btCollisionObject self) -> void *"""
        return _bullet.btCollisionObject_internalGetExtensionPointer(self)


    def internalSetExtensionPointer(self, pointer):
        """internalSetExtensionPointer(btCollisionObject self, void * pointer)"""
        return _bullet.btCollisionObject_internalSetExtensionPointer(self, pointer)


    def getActivationState(self):
        """getActivationState(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getActivationState(self)


    def setActivationState(self, newState):
        """setActivationState(btCollisionObject self, int newState)"""
        return _bullet.btCollisionObject_setActivationState(self, newState)


    def setDeactivationTime(self, time):
        """setDeactivationTime(btCollisionObject self, btScalar time)"""
        return _bullet.btCollisionObject_setDeactivationTime(self, time)


    def getDeactivationTime(self):
        """getDeactivationTime(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getDeactivationTime(self)


    def forceActivationState(self, newState):
        """forceActivationState(btCollisionObject self, int newState)"""
        return _bullet.btCollisionObject_forceActivationState(self, newState)


    def activate(self, forceActivation=False):
        """
        activate(btCollisionObject self, bool forceActivation=False)
        activate(btCollisionObject self)
        """
        return _bullet.btCollisionObject_activate(self, forceActivation)


    def isActive(self):
        """isActive(btCollisionObject self) -> bool"""
        return _bullet.btCollisionObject_isActive(self)


    def setRestitution(self, rest):
        """setRestitution(btCollisionObject self, btScalar rest)"""
        return _bullet.btCollisionObject_setRestitution(self, rest)


    def getRestitution(self):
        """getRestitution(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getRestitution(self)


    def setFriction(self, frict):
        """setFriction(btCollisionObject self, btScalar frict)"""
        return _bullet.btCollisionObject_setFriction(self, frict)


    def getFriction(self):
        """getFriction(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getFriction(self)


    def setRollingFriction(self, frict):
        """setRollingFriction(btCollisionObject self, btScalar frict)"""
        return _bullet.btCollisionObject_setRollingFriction(self, frict)


    def getRollingFriction(self):
        """getRollingFriction(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getRollingFriction(self)


    def setSpinningFriction(self, frict):
        """setSpinningFriction(btCollisionObject self, btScalar frict)"""
        return _bullet.btCollisionObject_setSpinningFriction(self, frict)


    def getSpinningFriction(self):
        """getSpinningFriction(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getSpinningFriction(self)


    def setContactStiffnessAndDamping(self, stiffness, damping):
        """setContactStiffnessAndDamping(btCollisionObject self, btScalar stiffness, btScalar damping)"""
        return _bullet.btCollisionObject_setContactStiffnessAndDamping(self, stiffness, damping)


    def getContactStiffness(self):
        """getContactStiffness(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getContactStiffness(self)


    def getContactDamping(self):
        """getContactDamping(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getContactDamping(self)


    def getInternalType(self):
        """getInternalType(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getInternalType(self)


    def getWorldTransform(self, *args):
        """
        getWorldTransform(btCollisionObject self) -> btTransform
        getWorldTransform(btCollisionObject self) -> btTransform const &
        """
        return _bullet.btCollisionObject_getWorldTransform(self, *args)


    def setWorldTransform(self, worldTrans):
        """setWorldTransform(btCollisionObject self, btTransform const & worldTrans)"""
        return _bullet.btCollisionObject_setWorldTransform(self, worldTrans)


    def getBroadphaseHandle(self, *args):
        """
        getBroadphaseHandle(btCollisionObject self) -> btBroadphaseProxy
        getBroadphaseHandle(btCollisionObject self) -> btBroadphaseProxy
        """
        return _bullet.btCollisionObject_getBroadphaseHandle(self, *args)


    def setBroadphaseHandle(self, handle):
        """setBroadphaseHandle(btCollisionObject self, btBroadphaseProxy handle)"""
        return _bullet.btCollisionObject_setBroadphaseHandle(self, handle)


    def getInterpolationWorldTransform(self, *args):
        """
        getInterpolationWorldTransform(btCollisionObject self) -> btTransform const
        getInterpolationWorldTransform(btCollisionObject self) -> btTransform &
        """
        return _bullet.btCollisionObject_getInterpolationWorldTransform(self, *args)


    def setInterpolationWorldTransform(self, trans):
        """setInterpolationWorldTransform(btCollisionObject self, btTransform const & trans)"""
        return _bullet.btCollisionObject_setInterpolationWorldTransform(self, trans)


    def setInterpolationLinearVelocity(self, linvel):
        """setInterpolationLinearVelocity(btCollisionObject self, btVector3 const & linvel)"""
        return _bullet.btCollisionObject_setInterpolationLinearVelocity(self, linvel)


    def setInterpolationAngularVelocity(self, angvel):
        """setInterpolationAngularVelocity(btCollisionObject self, btVector3 const & angvel)"""
        return _bullet.btCollisionObject_setInterpolationAngularVelocity(self, angvel)


    def getInterpolationLinearVelocity(self):
        """getInterpolationLinearVelocity(btCollisionObject self) -> btVector3 const &"""
        return _bullet.btCollisionObject_getInterpolationLinearVelocity(self)


    def getInterpolationAngularVelocity(self):
        """getInterpolationAngularVelocity(btCollisionObject self) -> btVector3 const &"""
        return _bullet.btCollisionObject_getInterpolationAngularVelocity(self)


    def getIslandTag(self):
        """getIslandTag(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getIslandTag(self)


    def setIslandTag(self, tag):
        """setIslandTag(btCollisionObject self, int tag)"""
        return _bullet.btCollisionObject_setIslandTag(self, tag)


    def getCompanionId(self):
        """getCompanionId(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getCompanionId(self)


    def setCompanionId(self, id):
        """setCompanionId(btCollisionObject self, int id)"""
        return _bullet.btCollisionObject_setCompanionId(self, id)


    def getWorldArrayIndex(self):
        """getWorldArrayIndex(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getWorldArrayIndex(self)


    def setWorldArrayIndex(self, ix):
        """setWorldArrayIndex(btCollisionObject self, int ix)"""
        return _bullet.btCollisionObject_setWorldArrayIndex(self, ix)


    def getHitFraction(self):
        """getHitFraction(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getHitFraction(self)


    def setHitFraction(self, hitFraction):
        """setHitFraction(btCollisionObject self, btScalar hitFraction)"""
        return _bullet.btCollisionObject_setHitFraction(self, hitFraction)


    def getCollisionFlags(self):
        """getCollisionFlags(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getCollisionFlags(self)


    def setCollisionFlags(self, flags):
        """setCollisionFlags(btCollisionObject self, int flags)"""
        return _bullet.btCollisionObject_setCollisionFlags(self, flags)


    def getCcdSweptSphereRadius(self):
        """getCcdSweptSphereRadius(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getCcdSweptSphereRadius(self)


    def setCcdSweptSphereRadius(self, radius):
        """setCcdSweptSphereRadius(btCollisionObject self, btScalar radius)"""
        return _bullet.btCollisionObject_setCcdSweptSphereRadius(self, radius)


    def getCcdMotionThreshold(self):
        """getCcdMotionThreshold(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getCcdMotionThreshold(self)


    def getCcdSquareMotionThreshold(self):
        """getCcdSquareMotionThreshold(btCollisionObject self) -> btScalar"""
        return _bullet.btCollisionObject_getCcdSquareMotionThreshold(self)


    def setCcdMotionThreshold(self, ccdMotionThreshold):
        """setCcdMotionThreshold(btCollisionObject self, btScalar ccdMotionThreshold)"""
        return _bullet.btCollisionObject_setCcdMotionThreshold(self, ccdMotionThreshold)


    def getUserPointer(self):
        """getUserPointer(btCollisionObject self) -> void *"""
        return _bullet.btCollisionObject_getUserPointer(self)


    def getUserIndex(self):
        """getUserIndex(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getUserIndex(self)


    def getUserIndex2(self):
        """getUserIndex2(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getUserIndex2(self)


    def setUserPointer(self, userPointer):
        """setUserPointer(btCollisionObject self, void * userPointer)"""
        return _bullet.btCollisionObject_setUserPointer(self, userPointer)


    def setUserIndex(self, index):
        """setUserIndex(btCollisionObject self, int index)"""
        return _bullet.btCollisionObject_setUserIndex(self, index)


    def setUserIndex2(self, index):
        """setUserIndex2(btCollisionObject self, int index)"""
        return _bullet.btCollisionObject_setUserIndex2(self, index)


    def getUpdateRevisionInternal(self):
        """getUpdateRevisionInternal(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_getUpdateRevisionInternal(self)


    def setCustomDebugColor(self, colorRGB):
        """setCustomDebugColor(btCollisionObject self, btVector3 const & colorRGB)"""
        return _bullet.btCollisionObject_setCustomDebugColor(self, colorRGB)


    def removeCustomDebugColor(self):
        """removeCustomDebugColor(btCollisionObject self)"""
        return _bullet.btCollisionObject_removeCustomDebugColor(self)


    def getCustomDebugColor(self, colorRGB):
        """getCustomDebugColor(btCollisionObject self, btVector3 & colorRGB) -> bool"""
        return _bullet.btCollisionObject_getCustomDebugColor(self, colorRGB)


    def checkCollideWith(self, co):
        """checkCollideWith(btCollisionObject self, btCollisionObject co) -> bool"""
        return _bullet.btCollisionObject_checkCollideWith(self, co)


    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btCollisionObject self) -> int"""
        return _bullet.btCollisionObject_calculateSerializeBufferSize(self)


    def serialize(self, dataBuffer, serializer):
        """serialize(btCollisionObject self, void * dataBuffer, btSerializer serializer) -> char const *"""
        return _bullet.btCollisionObject_serialize(self, dataBuffer, serializer)


    def serializeSingleObject(self, serializer):
        """serializeSingleObject(btCollisionObject self, btSerializer serializer)"""
        return _bullet.btCollisionObject_serializeSingleObject(self, serializer)

btCollisionObject_swigregister = _bullet.btCollisionObject_swigregister
btCollisionObject_swigregister(btCollisionObject)

class btCollisionObjectDoubleData(_object):
    """Proxy of C++ btCollisionObjectDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObjectDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObjectDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_broadphaseHandle"] = _bullet.btCollisionObjectDoubleData_m_broadphaseHandle_set
    __swig_getmethods__["m_broadphaseHandle"] = _bullet.btCollisionObjectDoubleData_m_broadphaseHandle_get
    if _newclass:
        m_broadphaseHandle = _swig_property(_bullet.btCollisionObjectDoubleData_m_broadphaseHandle_get, _bullet.btCollisionObjectDoubleData_m_broadphaseHandle_set)
    __swig_setmethods__["m_collisionShape"] = _bullet.btCollisionObjectDoubleData_m_collisionShape_set
    __swig_getmethods__["m_collisionShape"] = _bullet.btCollisionObjectDoubleData_m_collisionShape_get
    if _newclass:
        m_collisionShape = _swig_property(_bullet.btCollisionObjectDoubleData_m_collisionShape_get, _bullet.btCollisionObjectDoubleData_m_collisionShape_set)
    __swig_setmethods__["m_rootCollisionShape"] = _bullet.btCollisionObjectDoubleData_m_rootCollisionShape_set
    __swig_getmethods__["m_rootCollisionShape"] = _bullet.btCollisionObjectDoubleData_m_rootCollisionShape_get
    if _newclass:
        m_rootCollisionShape = _swig_property(_bullet.btCollisionObjectDoubleData_m_rootCollisionShape_get, _bullet.btCollisionObjectDoubleData_m_rootCollisionShape_set)
    __swig_setmethods__["m_name"] = _bullet.btCollisionObjectDoubleData_m_name_set
    __swig_getmethods__["m_name"] = _bullet.btCollisionObjectDoubleData_m_name_get
    if _newclass:
        m_name = _swig_property(_bullet.btCollisionObjectDoubleData_m_name_get, _bullet.btCollisionObjectDoubleData_m_name_set)
    __swig_setmethods__["m_worldTransform"] = _bullet.btCollisionObjectDoubleData_m_worldTransform_set
    __swig_getmethods__["m_worldTransform"] = _bullet.btCollisionObjectDoubleData_m_worldTransform_get
    if _newclass:
        m_worldTransform = _swig_property(_bullet.btCollisionObjectDoubleData_m_worldTransform_get, _bullet.btCollisionObjectDoubleData_m_worldTransform_set)
    __swig_setmethods__["m_interpolationWorldTransform"] = _bullet.btCollisionObjectDoubleData_m_interpolationWorldTransform_set
    __swig_getmethods__["m_interpolationWorldTransform"] = _bullet.btCollisionObjectDoubleData_m_interpolationWorldTransform_get
    if _newclass:
        m_interpolationWorldTransform = _swig_property(_bullet.btCollisionObjectDoubleData_m_interpolationWorldTransform_get, _bullet.btCollisionObjectDoubleData_m_interpolationWorldTransform_set)
    __swig_setmethods__["m_interpolationLinearVelocity"] = _bullet.btCollisionObjectDoubleData_m_interpolationLinearVelocity_set
    __swig_getmethods__["m_interpolationLinearVelocity"] = _bullet.btCollisionObjectDoubleData_m_interpolationLinearVelocity_get
    if _newclass:
        m_interpolationLinearVelocity = _swig_property(_bullet.btCollisionObjectDoubleData_m_interpolationLinearVelocity_get, _bullet.btCollisionObjectDoubleData_m_interpolationLinearVelocity_set)
    __swig_setmethods__["m_interpolationAngularVelocity"] = _bullet.btCollisionObjectDoubleData_m_interpolationAngularVelocity_set
    __swig_getmethods__["m_interpolationAngularVelocity"] = _bullet.btCollisionObjectDoubleData_m_interpolationAngularVelocity_get
    if _newclass:
        m_interpolationAngularVelocity = _swig_property(_bullet.btCollisionObjectDoubleData_m_interpolationAngularVelocity_get, _bullet.btCollisionObjectDoubleData_m_interpolationAngularVelocity_set)
    __swig_setmethods__["m_anisotropicFriction"] = _bullet.btCollisionObjectDoubleData_m_anisotropicFriction_set
    __swig_getmethods__["m_anisotropicFriction"] = _bullet.btCollisionObjectDoubleData_m_anisotropicFriction_get
    if _newclass:
        m_anisotropicFriction = _swig_property(_bullet.btCollisionObjectDoubleData_m_anisotropicFriction_get, _bullet.btCollisionObjectDoubleData_m_anisotropicFriction_set)
    __swig_setmethods__["m_contactProcessingThreshold"] = _bullet.btCollisionObjectDoubleData_m_contactProcessingThreshold_set
    __swig_getmethods__["m_contactProcessingThreshold"] = _bullet.btCollisionObjectDoubleData_m_contactProcessingThreshold_get
    if _newclass:
        m_contactProcessingThreshold = _swig_property(_bullet.btCollisionObjectDoubleData_m_contactProcessingThreshold_get, _bullet.btCollisionObjectDoubleData_m_contactProcessingThreshold_set)
    __swig_setmethods__["m_deactivationTime"] = _bullet.btCollisionObjectDoubleData_m_deactivationTime_set
    __swig_getmethods__["m_deactivationTime"] = _bullet.btCollisionObjectDoubleData_m_deactivationTime_get
    if _newclass:
        m_deactivationTime = _swig_property(_bullet.btCollisionObjectDoubleData_m_deactivationTime_get, _bullet.btCollisionObjectDoubleData_m_deactivationTime_set)
    __swig_setmethods__["m_friction"] = _bullet.btCollisionObjectDoubleData_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btCollisionObjectDoubleData_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btCollisionObjectDoubleData_m_friction_get, _bullet.btCollisionObjectDoubleData_m_friction_set)
    __swig_setmethods__["m_rollingFriction"] = _bullet.btCollisionObjectDoubleData_m_rollingFriction_set
    __swig_getmethods__["m_rollingFriction"] = _bullet.btCollisionObjectDoubleData_m_rollingFriction_get
    if _newclass:
        m_rollingFriction = _swig_property(_bullet.btCollisionObjectDoubleData_m_rollingFriction_get, _bullet.btCollisionObjectDoubleData_m_rollingFriction_set)
    __swig_setmethods__["m_contactDamping"] = _bullet.btCollisionObjectDoubleData_m_contactDamping_set
    __swig_getmethods__["m_contactDamping"] = _bullet.btCollisionObjectDoubleData_m_contactDamping_get
    if _newclass:
        m_contactDamping = _swig_property(_bullet.btCollisionObjectDoubleData_m_contactDamping_get, _bullet.btCollisionObjectDoubleData_m_contactDamping_set)
    __swig_setmethods__["m_contactStiffness"] = _bullet.btCollisionObjectDoubleData_m_contactStiffness_set
    __swig_getmethods__["m_contactStiffness"] = _bullet.btCollisionObjectDoubleData_m_contactStiffness_get
    if _newclass:
        m_contactStiffness = _swig_property(_bullet.btCollisionObjectDoubleData_m_contactStiffness_get, _bullet.btCollisionObjectDoubleData_m_contactStiffness_set)
    __swig_setmethods__["m_restitution"] = _bullet.btCollisionObjectDoubleData_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btCollisionObjectDoubleData_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btCollisionObjectDoubleData_m_restitution_get, _bullet.btCollisionObjectDoubleData_m_restitution_set)
    __swig_setmethods__["m_hitFraction"] = _bullet.btCollisionObjectDoubleData_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = _bullet.btCollisionObjectDoubleData_m_hitFraction_get
    if _newclass:
        m_hitFraction = _swig_property(_bullet.btCollisionObjectDoubleData_m_hitFraction_get, _bullet.btCollisionObjectDoubleData_m_hitFraction_set)
    __swig_setmethods__["m_ccdSweptSphereRadius"] = _bullet.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set
    __swig_getmethods__["m_ccdSweptSphereRadius"] = _bullet.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get
    if _newclass:
        m_ccdSweptSphereRadius = _swig_property(_bullet.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_get, _bullet.btCollisionObjectDoubleData_m_ccdSweptSphereRadius_set)
    __swig_setmethods__["m_ccdMotionThreshold"] = _bullet.btCollisionObjectDoubleData_m_ccdMotionThreshold_set
    __swig_getmethods__["m_ccdMotionThreshold"] = _bullet.btCollisionObjectDoubleData_m_ccdMotionThreshold_get
    if _newclass:
        m_ccdMotionThreshold = _swig_property(_bullet.btCollisionObjectDoubleData_m_ccdMotionThreshold_get, _bullet.btCollisionObjectDoubleData_m_ccdMotionThreshold_set)
    __swig_setmethods__["m_hasAnisotropicFriction"] = _bullet.btCollisionObjectDoubleData_m_hasAnisotropicFriction_set
    __swig_getmethods__["m_hasAnisotropicFriction"] = _bullet.btCollisionObjectDoubleData_m_hasAnisotropicFriction_get
    if _newclass:
        m_hasAnisotropicFriction = _swig_property(_bullet.btCollisionObjectDoubleData_m_hasAnisotropicFriction_get, _bullet.btCollisionObjectDoubleData_m_hasAnisotropicFriction_set)
    __swig_setmethods__["m_collisionFlags"] = _bullet.btCollisionObjectDoubleData_m_collisionFlags_set
    __swig_getmethods__["m_collisionFlags"] = _bullet.btCollisionObjectDoubleData_m_collisionFlags_get
    if _newclass:
        m_collisionFlags = _swig_property(_bullet.btCollisionObjectDoubleData_m_collisionFlags_get, _bullet.btCollisionObjectDoubleData_m_collisionFlags_set)
    __swig_setmethods__["m_islandTag1"] = _bullet.btCollisionObjectDoubleData_m_islandTag1_set
    __swig_getmethods__["m_islandTag1"] = _bullet.btCollisionObjectDoubleData_m_islandTag1_get
    if _newclass:
        m_islandTag1 = _swig_property(_bullet.btCollisionObjectDoubleData_m_islandTag1_get, _bullet.btCollisionObjectDoubleData_m_islandTag1_set)
    __swig_setmethods__["m_companionId"] = _bullet.btCollisionObjectDoubleData_m_companionId_set
    __swig_getmethods__["m_companionId"] = _bullet.btCollisionObjectDoubleData_m_companionId_get
    if _newclass:
        m_companionId = _swig_property(_bullet.btCollisionObjectDoubleData_m_companionId_get, _bullet.btCollisionObjectDoubleData_m_companionId_set)
    __swig_setmethods__["m_activationState1"] = _bullet.btCollisionObjectDoubleData_m_activationState1_set
    __swig_getmethods__["m_activationState1"] = _bullet.btCollisionObjectDoubleData_m_activationState1_get
    if _newclass:
        m_activationState1 = _swig_property(_bullet.btCollisionObjectDoubleData_m_activationState1_get, _bullet.btCollisionObjectDoubleData_m_activationState1_set)
    __swig_setmethods__["m_internalType"] = _bullet.btCollisionObjectDoubleData_m_internalType_set
    __swig_getmethods__["m_internalType"] = _bullet.btCollisionObjectDoubleData_m_internalType_get
    if _newclass:
        m_internalType = _swig_property(_bullet.btCollisionObjectDoubleData_m_internalType_get, _bullet.btCollisionObjectDoubleData_m_internalType_set)
    __swig_setmethods__["m_checkCollideWith"] = _bullet.btCollisionObjectDoubleData_m_checkCollideWith_set
    __swig_getmethods__["m_checkCollideWith"] = _bullet.btCollisionObjectDoubleData_m_checkCollideWith_get
    if _newclass:
        m_checkCollideWith = _swig_property(_bullet.btCollisionObjectDoubleData_m_checkCollideWith_get, _bullet.btCollisionObjectDoubleData_m_checkCollideWith_set)
    __swig_setmethods__["m_padding"] = _bullet.btCollisionObjectDoubleData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btCollisionObjectDoubleData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btCollisionObjectDoubleData_m_padding_get, _bullet.btCollisionObjectDoubleData_m_padding_set)

    def __init__(self):
        """__init__(btCollisionObjectDoubleData self) -> btCollisionObjectDoubleData"""
        this = _bullet.new_btCollisionObjectDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionObjectDoubleData
    __del__ = lambda self: None
btCollisionObjectDoubleData_swigregister = _bullet.btCollisionObjectDoubleData_swigregister
btCollisionObjectDoubleData_swigregister(btCollisionObjectDoubleData)

class btCollisionObjectFloatData(_object):
    """Proxy of C++ btCollisionObjectFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionObjectFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionObjectFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_broadphaseHandle"] = _bullet.btCollisionObjectFloatData_m_broadphaseHandle_set
    __swig_getmethods__["m_broadphaseHandle"] = _bullet.btCollisionObjectFloatData_m_broadphaseHandle_get
    if _newclass:
        m_broadphaseHandle = _swig_property(_bullet.btCollisionObjectFloatData_m_broadphaseHandle_get, _bullet.btCollisionObjectFloatData_m_broadphaseHandle_set)
    __swig_setmethods__["m_collisionShape"] = _bullet.btCollisionObjectFloatData_m_collisionShape_set
    __swig_getmethods__["m_collisionShape"] = _bullet.btCollisionObjectFloatData_m_collisionShape_get
    if _newclass:
        m_collisionShape = _swig_property(_bullet.btCollisionObjectFloatData_m_collisionShape_get, _bullet.btCollisionObjectFloatData_m_collisionShape_set)
    __swig_setmethods__["m_rootCollisionShape"] = _bullet.btCollisionObjectFloatData_m_rootCollisionShape_set
    __swig_getmethods__["m_rootCollisionShape"] = _bullet.btCollisionObjectFloatData_m_rootCollisionShape_get
    if _newclass:
        m_rootCollisionShape = _swig_property(_bullet.btCollisionObjectFloatData_m_rootCollisionShape_get, _bullet.btCollisionObjectFloatData_m_rootCollisionShape_set)
    __swig_setmethods__["m_name"] = _bullet.btCollisionObjectFloatData_m_name_set
    __swig_getmethods__["m_name"] = _bullet.btCollisionObjectFloatData_m_name_get
    if _newclass:
        m_name = _swig_property(_bullet.btCollisionObjectFloatData_m_name_get, _bullet.btCollisionObjectFloatData_m_name_set)
    __swig_setmethods__["m_worldTransform"] = _bullet.btCollisionObjectFloatData_m_worldTransform_set
    __swig_getmethods__["m_worldTransform"] = _bullet.btCollisionObjectFloatData_m_worldTransform_get
    if _newclass:
        m_worldTransform = _swig_property(_bullet.btCollisionObjectFloatData_m_worldTransform_get, _bullet.btCollisionObjectFloatData_m_worldTransform_set)
    __swig_setmethods__["m_interpolationWorldTransform"] = _bullet.btCollisionObjectFloatData_m_interpolationWorldTransform_set
    __swig_getmethods__["m_interpolationWorldTransform"] = _bullet.btCollisionObjectFloatData_m_interpolationWorldTransform_get
    if _newclass:
        m_interpolationWorldTransform = _swig_property(_bullet.btCollisionObjectFloatData_m_interpolationWorldTransform_get, _bullet.btCollisionObjectFloatData_m_interpolationWorldTransform_set)
    __swig_setmethods__["m_interpolationLinearVelocity"] = _bullet.btCollisionObjectFloatData_m_interpolationLinearVelocity_set
    __swig_getmethods__["m_interpolationLinearVelocity"] = _bullet.btCollisionObjectFloatData_m_interpolationLinearVelocity_get
    if _newclass:
        m_interpolationLinearVelocity = _swig_property(_bullet.btCollisionObjectFloatData_m_interpolationLinearVelocity_get, _bullet.btCollisionObjectFloatData_m_interpolationLinearVelocity_set)
    __swig_setmethods__["m_interpolationAngularVelocity"] = _bullet.btCollisionObjectFloatData_m_interpolationAngularVelocity_set
    __swig_getmethods__["m_interpolationAngularVelocity"] = _bullet.btCollisionObjectFloatData_m_interpolationAngularVelocity_get
    if _newclass:
        m_interpolationAngularVelocity = _swig_property(_bullet.btCollisionObjectFloatData_m_interpolationAngularVelocity_get, _bullet.btCollisionObjectFloatData_m_interpolationAngularVelocity_set)
    __swig_setmethods__["m_anisotropicFriction"] = _bullet.btCollisionObjectFloatData_m_anisotropicFriction_set
    __swig_getmethods__["m_anisotropicFriction"] = _bullet.btCollisionObjectFloatData_m_anisotropicFriction_get
    if _newclass:
        m_anisotropicFriction = _swig_property(_bullet.btCollisionObjectFloatData_m_anisotropicFriction_get, _bullet.btCollisionObjectFloatData_m_anisotropicFriction_set)
    __swig_setmethods__["m_contactProcessingThreshold"] = _bullet.btCollisionObjectFloatData_m_contactProcessingThreshold_set
    __swig_getmethods__["m_contactProcessingThreshold"] = _bullet.btCollisionObjectFloatData_m_contactProcessingThreshold_get
    if _newclass:
        m_contactProcessingThreshold = _swig_property(_bullet.btCollisionObjectFloatData_m_contactProcessingThreshold_get, _bullet.btCollisionObjectFloatData_m_contactProcessingThreshold_set)
    __swig_setmethods__["m_deactivationTime"] = _bullet.btCollisionObjectFloatData_m_deactivationTime_set
    __swig_getmethods__["m_deactivationTime"] = _bullet.btCollisionObjectFloatData_m_deactivationTime_get
    if _newclass:
        m_deactivationTime = _swig_property(_bullet.btCollisionObjectFloatData_m_deactivationTime_get, _bullet.btCollisionObjectFloatData_m_deactivationTime_set)
    __swig_setmethods__["m_friction"] = _bullet.btCollisionObjectFloatData_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btCollisionObjectFloatData_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btCollisionObjectFloatData_m_friction_get, _bullet.btCollisionObjectFloatData_m_friction_set)
    __swig_setmethods__["m_rollingFriction"] = _bullet.btCollisionObjectFloatData_m_rollingFriction_set
    __swig_getmethods__["m_rollingFriction"] = _bullet.btCollisionObjectFloatData_m_rollingFriction_get
    if _newclass:
        m_rollingFriction = _swig_property(_bullet.btCollisionObjectFloatData_m_rollingFriction_get, _bullet.btCollisionObjectFloatData_m_rollingFriction_set)
    __swig_setmethods__["m_contactDamping"] = _bullet.btCollisionObjectFloatData_m_contactDamping_set
    __swig_getmethods__["m_contactDamping"] = _bullet.btCollisionObjectFloatData_m_contactDamping_get
    if _newclass:
        m_contactDamping = _swig_property(_bullet.btCollisionObjectFloatData_m_contactDamping_get, _bullet.btCollisionObjectFloatData_m_contactDamping_set)
    __swig_setmethods__["m_contactStiffness"] = _bullet.btCollisionObjectFloatData_m_contactStiffness_set
    __swig_getmethods__["m_contactStiffness"] = _bullet.btCollisionObjectFloatData_m_contactStiffness_get
    if _newclass:
        m_contactStiffness = _swig_property(_bullet.btCollisionObjectFloatData_m_contactStiffness_get, _bullet.btCollisionObjectFloatData_m_contactStiffness_set)
    __swig_setmethods__["m_restitution"] = _bullet.btCollisionObjectFloatData_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btCollisionObjectFloatData_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btCollisionObjectFloatData_m_restitution_get, _bullet.btCollisionObjectFloatData_m_restitution_set)
    __swig_setmethods__["m_hitFraction"] = _bullet.btCollisionObjectFloatData_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = _bullet.btCollisionObjectFloatData_m_hitFraction_get
    if _newclass:
        m_hitFraction = _swig_property(_bullet.btCollisionObjectFloatData_m_hitFraction_get, _bullet.btCollisionObjectFloatData_m_hitFraction_set)
    __swig_setmethods__["m_ccdSweptSphereRadius"] = _bullet.btCollisionObjectFloatData_m_ccdSweptSphereRadius_set
    __swig_getmethods__["m_ccdSweptSphereRadius"] = _bullet.btCollisionObjectFloatData_m_ccdSweptSphereRadius_get
    if _newclass:
        m_ccdSweptSphereRadius = _swig_property(_bullet.btCollisionObjectFloatData_m_ccdSweptSphereRadius_get, _bullet.btCollisionObjectFloatData_m_ccdSweptSphereRadius_set)
    __swig_setmethods__["m_ccdMotionThreshold"] = _bullet.btCollisionObjectFloatData_m_ccdMotionThreshold_set
    __swig_getmethods__["m_ccdMotionThreshold"] = _bullet.btCollisionObjectFloatData_m_ccdMotionThreshold_get
    if _newclass:
        m_ccdMotionThreshold = _swig_property(_bullet.btCollisionObjectFloatData_m_ccdMotionThreshold_get, _bullet.btCollisionObjectFloatData_m_ccdMotionThreshold_set)
    __swig_setmethods__["m_hasAnisotropicFriction"] = _bullet.btCollisionObjectFloatData_m_hasAnisotropicFriction_set
    __swig_getmethods__["m_hasAnisotropicFriction"] = _bullet.btCollisionObjectFloatData_m_hasAnisotropicFriction_get
    if _newclass:
        m_hasAnisotropicFriction = _swig_property(_bullet.btCollisionObjectFloatData_m_hasAnisotropicFriction_get, _bullet.btCollisionObjectFloatData_m_hasAnisotropicFriction_set)
    __swig_setmethods__["m_collisionFlags"] = _bullet.btCollisionObjectFloatData_m_collisionFlags_set
    __swig_getmethods__["m_collisionFlags"] = _bullet.btCollisionObjectFloatData_m_collisionFlags_get
    if _newclass:
        m_collisionFlags = _swig_property(_bullet.btCollisionObjectFloatData_m_collisionFlags_get, _bullet.btCollisionObjectFloatData_m_collisionFlags_set)
    __swig_setmethods__["m_islandTag1"] = _bullet.btCollisionObjectFloatData_m_islandTag1_set
    __swig_getmethods__["m_islandTag1"] = _bullet.btCollisionObjectFloatData_m_islandTag1_get
    if _newclass:
        m_islandTag1 = _swig_property(_bullet.btCollisionObjectFloatData_m_islandTag1_get, _bullet.btCollisionObjectFloatData_m_islandTag1_set)
    __swig_setmethods__["m_companionId"] = _bullet.btCollisionObjectFloatData_m_companionId_set
    __swig_getmethods__["m_companionId"] = _bullet.btCollisionObjectFloatData_m_companionId_get
    if _newclass:
        m_companionId = _swig_property(_bullet.btCollisionObjectFloatData_m_companionId_get, _bullet.btCollisionObjectFloatData_m_companionId_set)
    __swig_setmethods__["m_activationState1"] = _bullet.btCollisionObjectFloatData_m_activationState1_set
    __swig_getmethods__["m_activationState1"] = _bullet.btCollisionObjectFloatData_m_activationState1_get
    if _newclass:
        m_activationState1 = _swig_property(_bullet.btCollisionObjectFloatData_m_activationState1_get, _bullet.btCollisionObjectFloatData_m_activationState1_set)
    __swig_setmethods__["m_internalType"] = _bullet.btCollisionObjectFloatData_m_internalType_set
    __swig_getmethods__["m_internalType"] = _bullet.btCollisionObjectFloatData_m_internalType_get
    if _newclass:
        m_internalType = _swig_property(_bullet.btCollisionObjectFloatData_m_internalType_get, _bullet.btCollisionObjectFloatData_m_internalType_set)
    __swig_setmethods__["m_checkCollideWith"] = _bullet.btCollisionObjectFloatData_m_checkCollideWith_set
    __swig_getmethods__["m_checkCollideWith"] = _bullet.btCollisionObjectFloatData_m_checkCollideWith_get
    if _newclass:
        m_checkCollideWith = _swig_property(_bullet.btCollisionObjectFloatData_m_checkCollideWith_get, _bullet.btCollisionObjectFloatData_m_checkCollideWith_set)
    __swig_setmethods__["m_padding"] = _bullet.btCollisionObjectFloatData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btCollisionObjectFloatData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btCollisionObjectFloatData_m_padding_get, _bullet.btCollisionObjectFloatData_m_padding_set)

    def __init__(self):
        """__init__(btCollisionObjectFloatData self) -> btCollisionObjectFloatData"""
        this = _bullet.new_btCollisionObjectFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionObjectFloatData
    __del__ = lambda self: None
btCollisionObjectFloatData_swigregister = _bullet.btCollisionObjectFloatData_swigregister
btCollisionObjectFloatData_swigregister(btCollisionObjectFloatData)

class btManifoldResult(_object):
    """Proxy of C++ btManifoldResult class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btManifoldResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btManifoldResult, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btManifoldResult self) -> btManifoldResult
        __init__(btManifoldResult self, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap) -> btManifoldResult
        """
        this = _bullet.new_btManifoldResult(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btManifoldResult
    __del__ = lambda self: None

    def setPersistentManifold(self, manifoldPtr):
        """setPersistentManifold(btManifoldResult self, btPersistentManifold manifoldPtr)"""
        return _bullet.btManifoldResult_setPersistentManifold(self, manifoldPtr)


    def getPersistentManifold(self, *args):
        """
        getPersistentManifold(btManifoldResult self) -> btPersistentManifold
        getPersistentManifold(btManifoldResult self) -> btPersistentManifold
        """
        return _bullet.btManifoldResult_getPersistentManifold(self, *args)


    def setShapeIdentifiersA(self, partId0, index0):
        """setShapeIdentifiersA(btManifoldResult self, int partId0, int index0)"""
        return _bullet.btManifoldResult_setShapeIdentifiersA(self, partId0, index0)


    def setShapeIdentifiersB(self, partId1, index1):
        """setShapeIdentifiersB(btManifoldResult self, int partId1, int index1)"""
        return _bullet.btManifoldResult_setShapeIdentifiersB(self, partId1, index1)


    def addContactPoint(self, normalOnBInWorld, pointInWorld, depth):
        """addContactPoint(btManifoldResult self, btVector3 const & normalOnBInWorld, btVector3 const & pointInWorld, btScalar depth)"""
        return _bullet.btManifoldResult_addContactPoint(self, normalOnBInWorld, pointInWorld, depth)


    def refreshContactPoints(self):
        """refreshContactPoints(btManifoldResult self)"""
        return _bullet.btManifoldResult_refreshContactPoints(self)


    def getBody0Wrap(self):
        """getBody0Wrap(btManifoldResult self) -> btCollisionObjectWrapper const *"""
        return _bullet.btManifoldResult_getBody0Wrap(self)


    def getBody1Wrap(self):
        """getBody1Wrap(btManifoldResult self) -> btCollisionObjectWrapper const *"""
        return _bullet.btManifoldResult_getBody1Wrap(self)


    def setBody0Wrap(self, obj0Wrap):
        """setBody0Wrap(btManifoldResult self, btCollisionObjectWrapper const * obj0Wrap)"""
        return _bullet.btManifoldResult_setBody0Wrap(self, obj0Wrap)


    def setBody1Wrap(self, obj1Wrap):
        """setBody1Wrap(btManifoldResult self, btCollisionObjectWrapper const * obj1Wrap)"""
        return _bullet.btManifoldResult_setBody1Wrap(self, obj1Wrap)


    def getBody0Internal(self):
        """getBody0Internal(btManifoldResult self) -> btCollisionObject"""
        return _bullet.btManifoldResult_getBody0Internal(self)


    def getBody1Internal(self):
        """getBody1Internal(btManifoldResult self) -> btCollisionObject"""
        return _bullet.btManifoldResult_getBody1Internal(self)

    __swig_setmethods__["m_closestPointDistanceThreshold"] = _bullet.btManifoldResult_m_closestPointDistanceThreshold_set
    __swig_getmethods__["m_closestPointDistanceThreshold"] = _bullet.btManifoldResult_m_closestPointDistanceThreshold_get
    if _newclass:
        m_closestPointDistanceThreshold = _swig_property(_bullet.btManifoldResult_m_closestPointDistanceThreshold_get, _bullet.btManifoldResult_m_closestPointDistanceThreshold_set)

    def calculateCombinedRestitution(body0, body1):
        """calculateCombinedRestitution(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
        return _bullet.btManifoldResult_calculateCombinedRestitution(body0, body1)

    calculateCombinedRestitution = staticmethod(calculateCombinedRestitution)

    def calculateCombinedFriction(body0, body1):
        """calculateCombinedFriction(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
        return _bullet.btManifoldResult_calculateCombinedFriction(body0, body1)

    calculateCombinedFriction = staticmethod(calculateCombinedFriction)

    def calculateCombinedRollingFriction(body0, body1):
        """calculateCombinedRollingFriction(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
        return _bullet.btManifoldResult_calculateCombinedRollingFriction(body0, body1)

    calculateCombinedRollingFriction = staticmethod(calculateCombinedRollingFriction)

    def calculateCombinedSpinningFriction(body0, body1):
        """calculateCombinedSpinningFriction(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
        return _bullet.btManifoldResult_calculateCombinedSpinningFriction(body0, body1)

    calculateCombinedSpinningFriction = staticmethod(calculateCombinedSpinningFriction)

    def calculateCombinedContactDamping(body0, body1):
        """calculateCombinedContactDamping(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
        return _bullet.btManifoldResult_calculateCombinedContactDamping(body0, body1)

    calculateCombinedContactDamping = staticmethod(calculateCombinedContactDamping)

    def calculateCombinedContactStiffness(body0, body1):
        """calculateCombinedContactStiffness(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
        return _bullet.btManifoldResult_calculateCombinedContactStiffness(body0, body1)

    calculateCombinedContactStiffness = staticmethod(calculateCombinedContactStiffness)
btManifoldResult_swigregister = _bullet.btManifoldResult_swigregister
btManifoldResult_swigregister(btManifoldResult)

def btManifoldResult_calculateCombinedRestitution(body0, body1):
    """btManifoldResult_calculateCombinedRestitution(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
    return _bullet.btManifoldResult_calculateCombinedRestitution(body0, body1)

def btManifoldResult_calculateCombinedFriction(body0, body1):
    """btManifoldResult_calculateCombinedFriction(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
    return _bullet.btManifoldResult_calculateCombinedFriction(body0, body1)

def btManifoldResult_calculateCombinedRollingFriction(body0, body1):
    """btManifoldResult_calculateCombinedRollingFriction(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
    return _bullet.btManifoldResult_calculateCombinedRollingFriction(body0, body1)

def btManifoldResult_calculateCombinedSpinningFriction(body0, body1):
    """btManifoldResult_calculateCombinedSpinningFriction(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
    return _bullet.btManifoldResult_calculateCombinedSpinningFriction(body0, body1)

def btManifoldResult_calculateCombinedContactDamping(body0, body1):
    """btManifoldResult_calculateCombinedContactDamping(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
    return _bullet.btManifoldResult_calculateCombinedContactDamping(body0, body1)

def btManifoldResult_calculateCombinedContactStiffness(body0, body1):
    """btManifoldResult_calculateCombinedContactStiffness(btCollisionObject body0, btCollisionObject body1) -> btScalar"""
    return _bullet.btManifoldResult_calculateCombinedContactStiffness(body0, body1)

USE_DISPATCH_REGISTRY_ARRAY = _bullet.USE_DISPATCH_REGISTRY_ARRAY
class btCollisionDispatcher(btDispatcher):
    """Proxy of C++ btCollisionDispatcher class."""

    __swig_setmethods__ = {}
    for _s in [btDispatcher]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionDispatcher, name, value)
    __swig_getmethods__ = {}
    for _s in [btDispatcher]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionDispatcher, name)
    __repr__ = _swig_repr
    CD_STATIC_STATIC_REPORTED = _bullet.btCollisionDispatcher_CD_STATIC_STATIC_REPORTED
    CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD = _bullet.btCollisionDispatcher_CD_USE_RELATIVE_CONTACT_BREAKING_THRESHOLD
    CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION = _bullet.btCollisionDispatcher_CD_DISABLE_CONTACTPOOL_DYNAMIC_ALLOCATION

    def getDispatcherFlags(self):
        """getDispatcherFlags(btCollisionDispatcher self) -> int"""
        return _bullet.btCollisionDispatcher_getDispatcherFlags(self)


    def setDispatcherFlags(self, flags):
        """setDispatcherFlags(btCollisionDispatcher self, int flags)"""
        return _bullet.btCollisionDispatcher_setDispatcherFlags(self, flags)


    def registerCollisionCreateFunc(self, proxyType0, proxyType1, createFunc):
        """registerCollisionCreateFunc(btCollisionDispatcher self, int proxyType0, int proxyType1, btCollisionAlgorithmCreateFunc createFunc)"""
        return _bullet.btCollisionDispatcher_registerCollisionCreateFunc(self, proxyType0, proxyType1, createFunc)


    def registerClosestPointsCreateFunc(self, proxyType0, proxyType1, createFunc):
        """registerClosestPointsCreateFunc(btCollisionDispatcher self, int proxyType0, int proxyType1, btCollisionAlgorithmCreateFunc createFunc)"""
        return _bullet.btCollisionDispatcher_registerClosestPointsCreateFunc(self, proxyType0, proxyType1, createFunc)


    def getManifoldByIndexInternal(self, *args):
        """
        getManifoldByIndexInternal(btCollisionDispatcher self, int index) -> btPersistentManifold
        getManifoldByIndexInternal(btCollisionDispatcher self, int index) -> btPersistentManifold
        """
        return _bullet.btCollisionDispatcher_getManifoldByIndexInternal(self, *args)


    def __init__(self, collisionConfiguration):
        """__init__(btCollisionDispatcher self, btCollisionConfiguration collisionConfiguration) -> btCollisionDispatcher"""
        this = _bullet.new_btCollisionDispatcher(collisionConfiguration)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionDispatcher
    __del__ = lambda self: None

    def setNearCallback(self, nearCallback):
        """setNearCallback(btCollisionDispatcher self, btNearCallback nearCallback)"""
        return _bullet.btCollisionDispatcher_setNearCallback(self, nearCallback)


    def getNearCallback(self):
        """getNearCallback(btCollisionDispatcher self) -> btNearCallback"""
        return _bullet.btCollisionDispatcher_getNearCallback(self)


    def defaultNearCallback(collisionPair, dispatcher, dispatchInfo):
        """defaultNearCallback(btBroadphasePair collisionPair, btCollisionDispatcher dispatcher, btDispatcherInfo dispatchInfo)"""
        return _bullet.btCollisionDispatcher_defaultNearCallback(collisionPair, dispatcher, dispatchInfo)

    defaultNearCallback = staticmethod(defaultNearCallback)

    def getCollisionConfiguration(self, *args):
        """
        getCollisionConfiguration(btCollisionDispatcher self) -> btCollisionConfiguration
        getCollisionConfiguration(btCollisionDispatcher self) -> btCollisionConfiguration
        """
        return _bullet.btCollisionDispatcher_getCollisionConfiguration(self, *args)


    def setCollisionConfiguration(self, config):
        """setCollisionConfiguration(btCollisionDispatcher self, btCollisionConfiguration config)"""
        return _bullet.btCollisionDispatcher_setCollisionConfiguration(self, config)


    def getInternalManifoldPool(self, *args):
        """
        getInternalManifoldPool(btCollisionDispatcher self) -> btPoolAllocator
        getInternalManifoldPool(btCollisionDispatcher self) -> btPoolAllocator
        """
        return _bullet.btCollisionDispatcher_getInternalManifoldPool(self, *args)

btCollisionDispatcher_swigregister = _bullet.btCollisionDispatcher_swigregister
btCollisionDispatcher_swigregister(btCollisionDispatcher)

def btCollisionDispatcher_defaultNearCallback(collisionPair, dispatcher, dispatchInfo):
    """btCollisionDispatcher_defaultNearCallback(btBroadphasePair collisionPair, btCollisionDispatcher dispatcher, btDispatcherInfo dispatchInfo)"""
    return _bullet.btCollisionDispatcher_defaultNearCallback(collisionPair, dispatcher, dispatchInfo)

class btCollisionWorld(_object):
    """Proxy of C++ btCollisionWorld class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionWorld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionWorld, name)
    __repr__ = _swig_repr

    def __init__(self, dispatcher, broadphasePairCache, collisionConfiguration):
        """__init__(btCollisionWorld self, btDispatcher dispatcher, btBroadphaseInterface broadphasePairCache, btCollisionConfiguration collisionConfiguration) -> btCollisionWorld"""
        this = _bullet.new_btCollisionWorld(dispatcher, broadphasePairCache, collisionConfiguration)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionWorld
    __del__ = lambda self: None

    def setBroadphase(self, pairCache):
        """setBroadphase(btCollisionWorld self, btBroadphaseInterface pairCache)"""
        return _bullet.btCollisionWorld_setBroadphase(self, pairCache)


    def getBroadphase(self, *args):
        """
        getBroadphase(btCollisionWorld self) -> btBroadphaseInterface
        getBroadphase(btCollisionWorld self) -> btBroadphaseInterface
        """
        return _bullet.btCollisionWorld_getBroadphase(self, *args)


    def getPairCache(self):
        """getPairCache(btCollisionWorld self) -> btOverlappingPairCache"""
        return _bullet.btCollisionWorld_getPairCache(self)


    def getDispatcher(self, *args):
        """
        getDispatcher(btCollisionWorld self) -> btDispatcher
        getDispatcher(btCollisionWorld self) -> btDispatcher
        """
        return _bullet.btCollisionWorld_getDispatcher(self, *args)


    def updateSingleAabb(self, colObj):
        """updateSingleAabb(btCollisionWorld self, btCollisionObject colObj)"""
        return _bullet.btCollisionWorld_updateSingleAabb(self, colObj)


    def updateAabbs(self):
        """updateAabbs(btCollisionWorld self)"""
        return _bullet.btCollisionWorld_updateAabbs(self)


    def computeOverlappingPairs(self):
        """computeOverlappingPairs(btCollisionWorld self)"""
        return _bullet.btCollisionWorld_computeOverlappingPairs(self)


    def setDebugDrawer(self, debugDrawer):
        """setDebugDrawer(btCollisionWorld self, btIDebugDraw debugDrawer)"""
        return _bullet.btCollisionWorld_setDebugDrawer(self, debugDrawer)


    def getDebugDrawer(self):
        """getDebugDrawer(btCollisionWorld self) -> btIDebugDraw"""
        return _bullet.btCollisionWorld_getDebugDrawer(self)


    def debugDrawWorld(self):
        """debugDrawWorld(btCollisionWorld self)"""
        return _bullet.btCollisionWorld_debugDrawWorld(self)


    def debugDrawObject(self, worldTransform, shape, color):
        """debugDrawObject(btCollisionWorld self, btTransform const & worldTransform, btCollisionShape shape, btVector3 const & color)"""
        return _bullet.btCollisionWorld_debugDrawObject(self, worldTransform, shape, color)


    def getNumCollisionObjects(self):
        """getNumCollisionObjects(btCollisionWorld self) -> int"""
        return _bullet.btCollisionWorld_getNumCollisionObjects(self)


    def rayTest(self, rayFromWorld, rayToWorld, resultCallback):
        """rayTest(btCollisionWorld self, btVector3 const & rayFromWorld, btVector3 const & rayToWorld, btCollisionWorld::RayResultCallback & resultCallback)"""
        return _bullet.btCollisionWorld_rayTest(self, rayFromWorld, rayToWorld, resultCallback)


    def convexSweepTest(self, *args):
        """
        convexSweepTest(btCollisionWorld self, btConvexShape castShape, btTransform const & arg3, btTransform const & to, btCollisionWorld::ConvexResultCallback & resultCallback, btScalar allowedCcdPenetration)
        convexSweepTest(btCollisionWorld self, btConvexShape castShape, btTransform const & arg3, btTransform const & to, btCollisionWorld::ConvexResultCallback & resultCallback)
        """
        return _bullet.btCollisionWorld_convexSweepTest(self, *args)


    def contactTest(self, colObj, resultCallback):
        """contactTest(btCollisionWorld self, btCollisionObject colObj, btCollisionWorld::ContactResultCallback & resultCallback)"""
        return _bullet.btCollisionWorld_contactTest(self, colObj, resultCallback)


    def contactPairTest(self, colObjA, colObjB, resultCallback):
        """contactPairTest(btCollisionWorld self, btCollisionObject colObjA, btCollisionObject colObjB, btCollisionWorld::ContactResultCallback & resultCallback)"""
        return _bullet.btCollisionWorld_contactPairTest(self, colObjA, colObjB, resultCallback)


    def rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback):
        """rayTestSingle(btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform const & colObjWorldTransform, btCollisionWorld::RayResultCallback & resultCallback)"""
        return _bullet.btCollisionWorld_rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback)

    rayTestSingle = staticmethod(rayTestSingle)

    def rayTestSingleInternal(rayFromTrans, rayToTrans, collisionObjectWrap, resultCallback):
        """rayTestSingleInternal(btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObjectWrapper const * collisionObjectWrap, btCollisionWorld::RayResultCallback & resultCallback)"""
        return _bullet.btCollisionWorld_rayTestSingleInternal(rayFromTrans, rayToTrans, collisionObjectWrap, resultCallback)

    rayTestSingleInternal = staticmethod(rayTestSingleInternal)

    def objectQuerySingle(castShape, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback, allowedPenetration):
        """objectQuerySingle(btConvexShape castShape, btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform const & colObjWorldTransform, btCollisionWorld::ConvexResultCallback & resultCallback, btScalar allowedPenetration)"""
        return _bullet.btCollisionWorld_objectQuerySingle(castShape, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback, allowedPenetration)

    objectQuerySingle = staticmethod(objectQuerySingle)

    def objectQuerySingleInternal(castShape, convexFromTrans, convexToTrans, colObjWrap, resultCallback, allowedPenetration):
        """objectQuerySingleInternal(btConvexShape castShape, btTransform const & convexFromTrans, btTransform const & convexToTrans, btCollisionObjectWrapper const * colObjWrap, btCollisionWorld::ConvexResultCallback & resultCallback, btScalar allowedPenetration)"""
        return _bullet.btCollisionWorld_objectQuerySingleInternal(castShape, convexFromTrans, convexToTrans, colObjWrap, resultCallback, allowedPenetration)

    objectQuerySingleInternal = staticmethod(objectQuerySingleInternal)

    def addCollisionObject(self, *args):
        """
        addCollisionObject(btCollisionWorld self, btCollisionObject collisionObject, int collisionFilterGroup, int collisionFilterMask)
        addCollisionObject(btCollisionWorld self, btCollisionObject collisionObject, int collisionFilterGroup)
        addCollisionObject(btCollisionWorld self, btCollisionObject collisionObject)
        """
        return _bullet.btCollisionWorld_addCollisionObject(self, *args)


    def getCollisionObjectArray(self, *args):
        """
        getCollisionObjectArray(btCollisionWorld self) -> btCollisionObjectArray
        getCollisionObjectArray(btCollisionWorld self) -> btCollisionObjectArray const &
        """
        return _bullet.btCollisionWorld_getCollisionObjectArray(self, *args)


    def removeCollisionObject(self, collisionObject):
        """removeCollisionObject(btCollisionWorld self, btCollisionObject collisionObject)"""
        return _bullet.btCollisionWorld_removeCollisionObject(self, collisionObject)


    def performDiscreteCollisionDetection(self):
        """performDiscreteCollisionDetection(btCollisionWorld self)"""
        return _bullet.btCollisionWorld_performDiscreteCollisionDetection(self)


    def getDispatchInfo(self, *args):
        """
        getDispatchInfo(btCollisionWorld self) -> btDispatcherInfo
        getDispatchInfo(btCollisionWorld self) -> btDispatcherInfo
        """
        return _bullet.btCollisionWorld_getDispatchInfo(self, *args)


    def getForceUpdateAllAabbs(self):
        """getForceUpdateAllAabbs(btCollisionWorld self) -> bool"""
        return _bullet.btCollisionWorld_getForceUpdateAllAabbs(self)


    def setForceUpdateAllAabbs(self, forceUpdateAllAabbs):
        """setForceUpdateAllAabbs(btCollisionWorld self, bool forceUpdateAllAabbs)"""
        return _bullet.btCollisionWorld_setForceUpdateAllAabbs(self, forceUpdateAllAabbs)


    def serialize(self, serializer):
        """serialize(btCollisionWorld self, btSerializer serializer)"""
        return _bullet.btCollisionWorld_serialize(self, serializer)

btCollisionWorld_swigregister = _bullet.btCollisionWorld_swigregister
btCollisionWorld_swigregister(btCollisionWorld)

def btCollisionWorld_rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback):
    """btCollisionWorld_rayTestSingle(btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform const & colObjWorldTransform, btCollisionWorld::RayResultCallback & resultCallback)"""
    return _bullet.btCollisionWorld_rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback)

def btCollisionWorld_rayTestSingleInternal(rayFromTrans, rayToTrans, collisionObjectWrap, resultCallback):
    """btCollisionWorld_rayTestSingleInternal(btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObjectWrapper const * collisionObjectWrap, btCollisionWorld::RayResultCallback & resultCallback)"""
    return _bullet.btCollisionWorld_rayTestSingleInternal(rayFromTrans, rayToTrans, collisionObjectWrap, resultCallback)

def btCollisionWorld_objectQuerySingle(castShape, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback, allowedPenetration):
    """btCollisionWorld_objectQuerySingle(btConvexShape castShape, btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform const & colObjWorldTransform, btCollisionWorld::ConvexResultCallback & resultCallback, btScalar allowedPenetration)"""
    return _bullet.btCollisionWorld_objectQuerySingle(castShape, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback, allowedPenetration)

def btCollisionWorld_objectQuerySingleInternal(castShape, convexFromTrans, convexToTrans, colObjWrap, resultCallback, allowedPenetration):
    """btCollisionWorld_objectQuerySingleInternal(btConvexShape castShape, btTransform const & convexFromTrans, btTransform const & convexToTrans, btCollisionObjectWrapper const * colObjWrap, btCollisionWorld::ConvexResultCallback & resultCallback, btScalar allowedPenetration)"""
    return _bullet.btCollisionWorld_objectQuerySingleInternal(castShape, convexFromTrans, convexToTrans, colObjWrap, resultCallback, allowedPenetration)

class btCompoundCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btCompoundCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCompoundCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCompoundCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, ci, body0Wrap, body1Wrap, isSwapped):
        """__init__(btCompoundCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btCompoundCollisionAlgorithm"""
        this = _bullet.new_btCompoundCollisionAlgorithm(ci, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCompoundCollisionAlgorithm
    __del__ = lambda self: None

    def getChildAlgorithm(self, n):
        """getChildAlgorithm(btCompoundCollisionAlgorithm self, int n) -> btCollisionAlgorithm"""
        return _bullet.btCompoundCollisionAlgorithm_getChildAlgorithm(self, n)

btCompoundCollisionAlgorithm_swigregister = _bullet.btCompoundCollisionAlgorithm_swigregister
btCompoundCollisionAlgorithm_swigregister(btCompoundCollisionAlgorithm)

class btSimplePair(_object):
    """Proxy of C++ btSimplePair class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSimplePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSimplePair, name)
    __repr__ = _swig_repr

    def __init__(self, indexA, indexB):
        """__init__(btSimplePair self, int indexA, int indexB) -> btSimplePair"""
        this = _bullet.new_btSimplePair(indexA, indexB)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_indexA"] = _bullet.btSimplePair_m_indexA_set
    __swig_getmethods__["m_indexA"] = _bullet.btSimplePair_m_indexA_get
    if _newclass:
        m_indexA = _swig_property(_bullet.btSimplePair_m_indexA_get, _bullet.btSimplePair_m_indexA_set)
    __swig_setmethods__["m_indexB"] = _bullet.btSimplePair_m_indexB_set
    __swig_getmethods__["m_indexB"] = _bullet.btSimplePair_m_indexB_get
    if _newclass:
        m_indexB = _swig_property(_bullet.btSimplePair_m_indexB_get, _bullet.btSimplePair_m_indexB_set)
    __swig_destroy__ = _bullet.delete_btSimplePair
    __del__ = lambda self: None
btSimplePair_swigregister = _bullet.btSimplePair_swigregister
btSimplePair_swigregister(btSimplePair)
BT_SIMPLE_NULL_PAIR = cvar.BT_SIMPLE_NULL_PAIR

class btHashedSimplePairCache(_object):
    """Proxy of C++ btHashedSimplePairCache class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHashedSimplePairCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHashedSimplePairCache, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btHashedSimplePairCache self) -> btHashedSimplePairCache"""
        this = _bullet.new_btHashedSimplePairCache()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btHashedSimplePairCache
    __del__ = lambda self: None

    def removeAllPairs(self):
        """removeAllPairs(btHashedSimplePairCache self)"""
        return _bullet.btHashedSimplePairCache_removeAllPairs(self)


    def removeOverlappingPair(self, indexA, indexB):
        """removeOverlappingPair(btHashedSimplePairCache self, int indexA, int indexB) -> void *"""
        return _bullet.btHashedSimplePairCache_removeOverlappingPair(self, indexA, indexB)


    def addOverlappingPair(self, indexA, indexB):
        """addOverlappingPair(btHashedSimplePairCache self, int indexA, int indexB) -> btSimplePair"""
        return _bullet.btHashedSimplePairCache_addOverlappingPair(self, indexA, indexB)


    def getOverlappingPairArrayPtr(self, *args):
        """
        getOverlappingPairArrayPtr(btHashedSimplePairCache self) -> btSimplePair
        getOverlappingPairArrayPtr(btHashedSimplePairCache self) -> btSimplePair
        """
        return _bullet.btHashedSimplePairCache_getOverlappingPairArrayPtr(self, *args)


    def getOverlappingPairArray(self, *args):
        """
        getOverlappingPairArray(btHashedSimplePairCache self) -> btSimplePairArray
        getOverlappingPairArray(btHashedSimplePairCache self) -> btSimplePairArray const &
        """
        return _bullet.btHashedSimplePairCache_getOverlappingPairArray(self, *args)


    def findPair(self, indexA, indexB):
        """findPair(btHashedSimplePairCache self, int indexA, int indexB) -> btSimplePair"""
        return _bullet.btHashedSimplePairCache_findPair(self, indexA, indexB)


    def GetCount(self):
        """GetCount(btHashedSimplePairCache self) -> int"""
        return _bullet.btHashedSimplePairCache_GetCount(self)


    def getNumOverlappingPairs(self):
        """getNumOverlappingPairs(btHashedSimplePairCache self) -> int"""
        return _bullet.btHashedSimplePairCache_getNumOverlappingPairs(self)

btHashedSimplePairCache_swigregister = _bullet.btHashedSimplePairCache_swigregister
btHashedSimplePairCache_swigregister(btHashedSimplePairCache)

class btCompoundCompoundCollisionAlgorithm(btCompoundCollisionAlgorithm):
    """Proxy of C++ btCompoundCompoundCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCompoundCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCompoundCompoundCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCompoundCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCompoundCompoundCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, ci, body0Wrap, body1Wrap, isSwapped):
        """__init__(btCompoundCompoundCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btCompoundCompoundCollisionAlgorithm"""
        this = _bullet.new_btCompoundCompoundCollisionAlgorithm(ci, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCompoundCompoundCollisionAlgorithm
    __del__ = lambda self: None
btCompoundCompoundCollisionAlgorithm_swigregister = _bullet.btCompoundCompoundCollisionAlgorithm_swigregister
btCompoundCompoundCollisionAlgorithm_swigregister(btCompoundCompoundCollisionAlgorithm)

NO_VIRTUAL_INTERFACE = _bullet.NO_VIRTUAL_INTERFACE
VORONOI_SIMPLEX_MAX_VERTS = _bullet.VORONOI_SIMPLEX_MAX_VERTS
VORONOI_DEFAULT_EQUAL_VERTEX_THRESHOLD = _bullet.VORONOI_DEFAULT_EQUAL_VERTEX_THRESHOLD
class btUsageBitfield(_object):
    """Proxy of C++ btUsageBitfield class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btUsageBitfield, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btUsageBitfield, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btUsageBitfield self) -> btUsageBitfield"""
        this = _bullet.new_btUsageBitfield()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        """reset(btUsageBitfield self)"""
        return _bullet.btUsageBitfield_reset(self)

    __swig_setmethods__["usedVertexA"] = _bullet.btUsageBitfield_usedVertexA_set
    __swig_getmethods__["usedVertexA"] = _bullet.btUsageBitfield_usedVertexA_get
    if _newclass:
        usedVertexA = _swig_property(_bullet.btUsageBitfield_usedVertexA_get, _bullet.btUsageBitfield_usedVertexA_set)
    __swig_setmethods__["usedVertexB"] = _bullet.btUsageBitfield_usedVertexB_set
    __swig_getmethods__["usedVertexB"] = _bullet.btUsageBitfield_usedVertexB_get
    if _newclass:
        usedVertexB = _swig_property(_bullet.btUsageBitfield_usedVertexB_get, _bullet.btUsageBitfield_usedVertexB_set)
    __swig_setmethods__["usedVertexC"] = _bullet.btUsageBitfield_usedVertexC_set
    __swig_getmethods__["usedVertexC"] = _bullet.btUsageBitfield_usedVertexC_get
    if _newclass:
        usedVertexC = _swig_property(_bullet.btUsageBitfield_usedVertexC_get, _bullet.btUsageBitfield_usedVertexC_set)
    __swig_setmethods__["usedVertexD"] = _bullet.btUsageBitfield_usedVertexD_set
    __swig_getmethods__["usedVertexD"] = _bullet.btUsageBitfield_usedVertexD_get
    if _newclass:
        usedVertexD = _swig_property(_bullet.btUsageBitfield_usedVertexD_get, _bullet.btUsageBitfield_usedVertexD_set)
    __swig_setmethods__["unused1"] = _bullet.btUsageBitfield_unused1_set
    __swig_getmethods__["unused1"] = _bullet.btUsageBitfield_unused1_get
    if _newclass:
        unused1 = _swig_property(_bullet.btUsageBitfield_unused1_get, _bullet.btUsageBitfield_unused1_set)
    __swig_setmethods__["unused2"] = _bullet.btUsageBitfield_unused2_set
    __swig_getmethods__["unused2"] = _bullet.btUsageBitfield_unused2_get
    if _newclass:
        unused2 = _swig_property(_bullet.btUsageBitfield_unused2_get, _bullet.btUsageBitfield_unused2_set)
    __swig_setmethods__["unused3"] = _bullet.btUsageBitfield_unused3_set
    __swig_getmethods__["unused3"] = _bullet.btUsageBitfield_unused3_get
    if _newclass:
        unused3 = _swig_property(_bullet.btUsageBitfield_unused3_get, _bullet.btUsageBitfield_unused3_set)
    __swig_setmethods__["unused4"] = _bullet.btUsageBitfield_unused4_set
    __swig_getmethods__["unused4"] = _bullet.btUsageBitfield_unused4_get
    if _newclass:
        unused4 = _swig_property(_bullet.btUsageBitfield_unused4_get, _bullet.btUsageBitfield_unused4_set)
    __swig_destroy__ = _bullet.delete_btUsageBitfield
    __del__ = lambda self: None
btUsageBitfield_swigregister = _bullet.btUsageBitfield_swigregister
btUsageBitfield_swigregister(btUsageBitfield)

class btSubSimplexClosestResult(_object):
    """Proxy of C++ btSubSimplexClosestResult class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSubSimplexClosestResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSubSimplexClosestResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_closestPointOnSimplex"] = _bullet.btSubSimplexClosestResult_m_closestPointOnSimplex_set
    __swig_getmethods__["m_closestPointOnSimplex"] = _bullet.btSubSimplexClosestResult_m_closestPointOnSimplex_get
    if _newclass:
        m_closestPointOnSimplex = _swig_property(_bullet.btSubSimplexClosestResult_m_closestPointOnSimplex_get, _bullet.btSubSimplexClosestResult_m_closestPointOnSimplex_set)
    __swig_setmethods__["m_usedVertices"] = _bullet.btSubSimplexClosestResult_m_usedVertices_set
    __swig_getmethods__["m_usedVertices"] = _bullet.btSubSimplexClosestResult_m_usedVertices_get
    if _newclass:
        m_usedVertices = _swig_property(_bullet.btSubSimplexClosestResult_m_usedVertices_get, _bullet.btSubSimplexClosestResult_m_usedVertices_set)
    __swig_setmethods__["m_barycentricCoords"] = _bullet.btSubSimplexClosestResult_m_barycentricCoords_set
    __swig_getmethods__["m_barycentricCoords"] = _bullet.btSubSimplexClosestResult_m_barycentricCoords_get
    if _newclass:
        m_barycentricCoords = _swig_property(_bullet.btSubSimplexClosestResult_m_barycentricCoords_get, _bullet.btSubSimplexClosestResult_m_barycentricCoords_set)
    __swig_setmethods__["m_degenerate"] = _bullet.btSubSimplexClosestResult_m_degenerate_set
    __swig_getmethods__["m_degenerate"] = _bullet.btSubSimplexClosestResult_m_degenerate_get
    if _newclass:
        m_degenerate = _swig_property(_bullet.btSubSimplexClosestResult_m_degenerate_get, _bullet.btSubSimplexClosestResult_m_degenerate_set)

    def reset(self):
        """reset(btSubSimplexClosestResult self)"""
        return _bullet.btSubSimplexClosestResult_reset(self)


    def isValid(self):
        """isValid(btSubSimplexClosestResult self) -> bool"""
        return _bullet.btSubSimplexClosestResult_isValid(self)


    def setBarycentricCoordinates(self, *args):
        """
        setBarycentricCoordinates(btSubSimplexClosestResult self, btScalar a, btScalar b, btScalar c, btScalar d)
        setBarycentricCoordinates(btSubSimplexClosestResult self, btScalar a, btScalar b, btScalar c)
        setBarycentricCoordinates(btSubSimplexClosestResult self, btScalar a, btScalar b)
        setBarycentricCoordinates(btSubSimplexClosestResult self, btScalar a)
        setBarycentricCoordinates(btSubSimplexClosestResult self)
        """
        return _bullet.btSubSimplexClosestResult_setBarycentricCoordinates(self, *args)


    def __init__(self):
        """__init__(btSubSimplexClosestResult self) -> btSubSimplexClosestResult"""
        this = _bullet.new_btSubSimplexClosestResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSubSimplexClosestResult
    __del__ = lambda self: None
btSubSimplexClosestResult_swigregister = _bullet.btSubSimplexClosestResult_swigregister
btSubSimplexClosestResult_swigregister(btSubSimplexClosestResult)

class btVoronoiSimplexSolver(_object):
    """Proxy of C++ btVoronoiSimplexSolver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVoronoiSimplexSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVoronoiSimplexSolver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_numVertices"] = _bullet.btVoronoiSimplexSolver_m_numVertices_set
    __swig_getmethods__["m_numVertices"] = _bullet.btVoronoiSimplexSolver_m_numVertices_get
    if _newclass:
        m_numVertices = _swig_property(_bullet.btVoronoiSimplexSolver_m_numVertices_get, _bullet.btVoronoiSimplexSolver_m_numVertices_set)
    __swig_setmethods__["m_simplexVectorW"] = _bullet.btVoronoiSimplexSolver_m_simplexVectorW_set
    __swig_getmethods__["m_simplexVectorW"] = _bullet.btVoronoiSimplexSolver_m_simplexVectorW_get
    if _newclass:
        m_simplexVectorW = _swig_property(_bullet.btVoronoiSimplexSolver_m_simplexVectorW_get, _bullet.btVoronoiSimplexSolver_m_simplexVectorW_set)
    __swig_setmethods__["m_simplexPointsP"] = _bullet.btVoronoiSimplexSolver_m_simplexPointsP_set
    __swig_getmethods__["m_simplexPointsP"] = _bullet.btVoronoiSimplexSolver_m_simplexPointsP_get
    if _newclass:
        m_simplexPointsP = _swig_property(_bullet.btVoronoiSimplexSolver_m_simplexPointsP_get, _bullet.btVoronoiSimplexSolver_m_simplexPointsP_set)
    __swig_setmethods__["m_simplexPointsQ"] = _bullet.btVoronoiSimplexSolver_m_simplexPointsQ_set
    __swig_getmethods__["m_simplexPointsQ"] = _bullet.btVoronoiSimplexSolver_m_simplexPointsQ_get
    if _newclass:
        m_simplexPointsQ = _swig_property(_bullet.btVoronoiSimplexSolver_m_simplexPointsQ_get, _bullet.btVoronoiSimplexSolver_m_simplexPointsQ_set)
    __swig_setmethods__["m_cachedP1"] = _bullet.btVoronoiSimplexSolver_m_cachedP1_set
    __swig_getmethods__["m_cachedP1"] = _bullet.btVoronoiSimplexSolver_m_cachedP1_get
    if _newclass:
        m_cachedP1 = _swig_property(_bullet.btVoronoiSimplexSolver_m_cachedP1_get, _bullet.btVoronoiSimplexSolver_m_cachedP1_set)
    __swig_setmethods__["m_cachedP2"] = _bullet.btVoronoiSimplexSolver_m_cachedP2_set
    __swig_getmethods__["m_cachedP2"] = _bullet.btVoronoiSimplexSolver_m_cachedP2_get
    if _newclass:
        m_cachedP2 = _swig_property(_bullet.btVoronoiSimplexSolver_m_cachedP2_get, _bullet.btVoronoiSimplexSolver_m_cachedP2_set)
    __swig_setmethods__["m_cachedV"] = _bullet.btVoronoiSimplexSolver_m_cachedV_set
    __swig_getmethods__["m_cachedV"] = _bullet.btVoronoiSimplexSolver_m_cachedV_get
    if _newclass:
        m_cachedV = _swig_property(_bullet.btVoronoiSimplexSolver_m_cachedV_get, _bullet.btVoronoiSimplexSolver_m_cachedV_set)
    __swig_setmethods__["m_lastW"] = _bullet.btVoronoiSimplexSolver_m_lastW_set
    __swig_getmethods__["m_lastW"] = _bullet.btVoronoiSimplexSolver_m_lastW_get
    if _newclass:
        m_lastW = _swig_property(_bullet.btVoronoiSimplexSolver_m_lastW_get, _bullet.btVoronoiSimplexSolver_m_lastW_set)
    __swig_setmethods__["m_equalVertexThreshold"] = _bullet.btVoronoiSimplexSolver_m_equalVertexThreshold_set
    __swig_getmethods__["m_equalVertexThreshold"] = _bullet.btVoronoiSimplexSolver_m_equalVertexThreshold_get
    if _newclass:
        m_equalVertexThreshold = _swig_property(_bullet.btVoronoiSimplexSolver_m_equalVertexThreshold_get, _bullet.btVoronoiSimplexSolver_m_equalVertexThreshold_set)
    __swig_setmethods__["m_cachedValidClosest"] = _bullet.btVoronoiSimplexSolver_m_cachedValidClosest_set
    __swig_getmethods__["m_cachedValidClosest"] = _bullet.btVoronoiSimplexSolver_m_cachedValidClosest_get
    if _newclass:
        m_cachedValidClosest = _swig_property(_bullet.btVoronoiSimplexSolver_m_cachedValidClosest_get, _bullet.btVoronoiSimplexSolver_m_cachedValidClosest_set)
    __swig_setmethods__["m_cachedBC"] = _bullet.btVoronoiSimplexSolver_m_cachedBC_set
    __swig_getmethods__["m_cachedBC"] = _bullet.btVoronoiSimplexSolver_m_cachedBC_get
    if _newclass:
        m_cachedBC = _swig_property(_bullet.btVoronoiSimplexSolver_m_cachedBC_get, _bullet.btVoronoiSimplexSolver_m_cachedBC_set)
    __swig_setmethods__["m_needsUpdate"] = _bullet.btVoronoiSimplexSolver_m_needsUpdate_set
    __swig_getmethods__["m_needsUpdate"] = _bullet.btVoronoiSimplexSolver_m_needsUpdate_get
    if _newclass:
        m_needsUpdate = _swig_property(_bullet.btVoronoiSimplexSolver_m_needsUpdate_get, _bullet.btVoronoiSimplexSolver_m_needsUpdate_set)

    def removeVertex(self, index):
        """removeVertex(btVoronoiSimplexSolver self, int index)"""
        return _bullet.btVoronoiSimplexSolver_removeVertex(self, index)


    def reduceVertices(self, usedVerts):
        """reduceVertices(btVoronoiSimplexSolver self, btUsageBitfield usedVerts)"""
        return _bullet.btVoronoiSimplexSolver_reduceVertices(self, usedVerts)


    def updateClosestVectorAndPoints(self):
        """updateClosestVectorAndPoints(btVoronoiSimplexSolver self) -> bool"""
        return _bullet.btVoronoiSimplexSolver_updateClosestVectorAndPoints(self)


    def closestPtPointTetrahedron(self, p, a, b, c, d, finalResult):
        """closestPtPointTetrahedron(btVoronoiSimplexSolver self, btVector3 const & p, btVector3 const & a, btVector3 const & b, btVector3 const & c, btVector3 const & d, btSubSimplexClosestResult finalResult) -> bool"""
        return _bullet.btVoronoiSimplexSolver_closestPtPointTetrahedron(self, p, a, b, c, d, finalResult)


    def pointOutsideOfPlane(self, p, a, b, c, d):
        """pointOutsideOfPlane(btVoronoiSimplexSolver self, btVector3 const & p, btVector3 const & a, btVector3 const & b, btVector3 const & c, btVector3 const & d) -> int"""
        return _bullet.btVoronoiSimplexSolver_pointOutsideOfPlane(self, p, a, b, c, d)


    def closestPtPointTriangle(self, p, a, b, c, result):
        """closestPtPointTriangle(btVoronoiSimplexSolver self, btVector3 const & p, btVector3 const & a, btVector3 const & b, btVector3 const & c, btSubSimplexClosestResult result) -> bool"""
        return _bullet.btVoronoiSimplexSolver_closestPtPointTriangle(self, p, a, b, c, result)


    def __init__(self):
        """__init__(btVoronoiSimplexSolver self) -> btVoronoiSimplexSolver"""
        this = _bullet.new_btVoronoiSimplexSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        """reset(btVoronoiSimplexSolver self)"""
        return _bullet.btVoronoiSimplexSolver_reset(self)


    def addVertex(self, w, p, q):
        """addVertex(btVoronoiSimplexSolver self, btVector3 const & w, btVector3 const & p, btVector3 const & q)"""
        return _bullet.btVoronoiSimplexSolver_addVertex(self, w, p, q)


    def setEqualVertexThreshold(self, threshold):
        """setEqualVertexThreshold(btVoronoiSimplexSolver self, btScalar threshold)"""
        return _bullet.btVoronoiSimplexSolver_setEqualVertexThreshold(self, threshold)


    def getEqualVertexThreshold(self):
        """getEqualVertexThreshold(btVoronoiSimplexSolver self) -> btScalar"""
        return _bullet.btVoronoiSimplexSolver_getEqualVertexThreshold(self)


    def closest(self, v):
        """closest(btVoronoiSimplexSolver self, btVector3 & v) -> bool"""
        return _bullet.btVoronoiSimplexSolver_closest(self, v)


    def maxVertex(self):
        """maxVertex(btVoronoiSimplexSolver self) -> btScalar"""
        return _bullet.btVoronoiSimplexSolver_maxVertex(self)


    def fullSimplex(self):
        """fullSimplex(btVoronoiSimplexSolver self) -> bool"""
        return _bullet.btVoronoiSimplexSolver_fullSimplex(self)


    def getSimplex(self, pBuf, qBuf, yBuf):
        """getSimplex(btVoronoiSimplexSolver self, btVector3 * pBuf, btVector3 * qBuf, btVector3 * yBuf) -> int"""
        return _bullet.btVoronoiSimplexSolver_getSimplex(self, pBuf, qBuf, yBuf)


    def inSimplex(self, w):
        """inSimplex(btVoronoiSimplexSolver self, btVector3 const & w) -> bool"""
        return _bullet.btVoronoiSimplexSolver_inSimplex(self, w)


    def backup_closest(self, v):
        """backup_closest(btVoronoiSimplexSolver self, btVector3 & v)"""
        return _bullet.btVoronoiSimplexSolver_backup_closest(self, v)


    def emptySimplex(self):
        """emptySimplex(btVoronoiSimplexSolver self) -> bool"""
        return _bullet.btVoronoiSimplexSolver_emptySimplex(self)


    def compute_points(self, p1, p2):
        """compute_points(btVoronoiSimplexSolver self, btVector3 & p1, btVector3 & p2)"""
        return _bullet.btVoronoiSimplexSolver_compute_points(self, p1, p2)


    def numVertices(self):
        """numVertices(btVoronoiSimplexSolver self) -> int"""
        return _bullet.btVoronoiSimplexSolver_numVertices(self)

    __swig_destroy__ = _bullet.delete_btVoronoiSimplexSolver
    __del__ = lambda self: None
btVoronoiSimplexSolver_swigregister = _bullet.btVoronoiSimplexSolver_swigregister
btVoronoiSimplexSolver_swigregister(btVoronoiSimplexSolver)

class btGjkPairDetector(btDiscreteCollisionDetectorInterface):
    """Proxy of C++ btGjkPairDetector class."""

    __swig_setmethods__ = {}
    for _s in [btDiscreteCollisionDetectorInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGjkPairDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [btDiscreteCollisionDetectorInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGjkPairDetector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_lastUsedMethod"] = _bullet.btGjkPairDetector_m_lastUsedMethod_set
    __swig_getmethods__["m_lastUsedMethod"] = _bullet.btGjkPairDetector_m_lastUsedMethod_get
    if _newclass:
        m_lastUsedMethod = _swig_property(_bullet.btGjkPairDetector_m_lastUsedMethod_get, _bullet.btGjkPairDetector_m_lastUsedMethod_set)
    __swig_setmethods__["m_curIter"] = _bullet.btGjkPairDetector_m_curIter_set
    __swig_getmethods__["m_curIter"] = _bullet.btGjkPairDetector_m_curIter_get
    if _newclass:
        m_curIter = _swig_property(_bullet.btGjkPairDetector_m_curIter_get, _bullet.btGjkPairDetector_m_curIter_set)
    __swig_setmethods__["m_degenerateSimplex"] = _bullet.btGjkPairDetector_m_degenerateSimplex_set
    __swig_getmethods__["m_degenerateSimplex"] = _bullet.btGjkPairDetector_m_degenerateSimplex_get
    if _newclass:
        m_degenerateSimplex = _swig_property(_bullet.btGjkPairDetector_m_degenerateSimplex_get, _bullet.btGjkPairDetector_m_degenerateSimplex_set)
    __swig_setmethods__["m_catchDegeneracies"] = _bullet.btGjkPairDetector_m_catchDegeneracies_set
    __swig_getmethods__["m_catchDegeneracies"] = _bullet.btGjkPairDetector_m_catchDegeneracies_get
    if _newclass:
        m_catchDegeneracies = _swig_property(_bullet.btGjkPairDetector_m_catchDegeneracies_get, _bullet.btGjkPairDetector_m_catchDegeneracies_set)
    __swig_setmethods__["m_fixContactNormalDirection"] = _bullet.btGjkPairDetector_m_fixContactNormalDirection_set
    __swig_getmethods__["m_fixContactNormalDirection"] = _bullet.btGjkPairDetector_m_fixContactNormalDirection_get
    if _newclass:
        m_fixContactNormalDirection = _swig_property(_bullet.btGjkPairDetector_m_fixContactNormalDirection_get, _bullet.btGjkPairDetector_m_fixContactNormalDirection_set)

    def __init__(self, *args):
        """
        __init__(btGjkPairDetector self, btConvexShape objectA, btConvexShape objectB, btVoronoiSimplexSolver simplexSolver, btConvexPenetrationDepthSolver penetrationDepthSolver) -> btGjkPairDetector
        __init__(btGjkPairDetector self, btConvexShape objectA, btConvexShape objectB, int shapeTypeA, int shapeTypeB, btScalar marginA, btScalar marginB, btVoronoiSimplexSolver simplexSolver, btConvexPenetrationDepthSolver penetrationDepthSolver) -> btGjkPairDetector
        """
        this = _bullet.new_btGjkPairDetector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGjkPairDetector
    __del__ = lambda self: None

    def getClosestPoints(self, input, output, debugDraw, swapResults=False):
        """
        getClosestPoints(btGjkPairDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw, bool swapResults=False)
        getClosestPoints(btGjkPairDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw)
        """
        return _bullet.btGjkPairDetector_getClosestPoints(self, input, output, debugDraw, swapResults)


    def getClosestPointsNonVirtual(self, input, output, debugDraw):
        """getClosestPointsNonVirtual(btGjkPairDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw)"""
        return _bullet.btGjkPairDetector_getClosestPointsNonVirtual(self, input, output, debugDraw)


    def setMinkowskiA(self, minkA):
        """setMinkowskiA(btGjkPairDetector self, btConvexShape minkA)"""
        return _bullet.btGjkPairDetector_setMinkowskiA(self, minkA)


    def setMinkowskiB(self, minkB):
        """setMinkowskiB(btGjkPairDetector self, btConvexShape minkB)"""
        return _bullet.btGjkPairDetector_setMinkowskiB(self, minkB)


    def setCachedSeperatingAxis(self, seperatingAxis):
        """setCachedSeperatingAxis(btGjkPairDetector self, btVector3 const & seperatingAxis)"""
        return _bullet.btGjkPairDetector_setCachedSeperatingAxis(self, seperatingAxis)


    def getCachedSeparatingAxis(self):
        """getCachedSeparatingAxis(btGjkPairDetector self) -> btVector3 const &"""
        return _bullet.btGjkPairDetector_getCachedSeparatingAxis(self)


    def getCachedSeparatingDistance(self):
        """getCachedSeparatingDistance(btGjkPairDetector self) -> btScalar"""
        return _bullet.btGjkPairDetector_getCachedSeparatingDistance(self)


    def setPenetrationDepthSolver(self, penetrationDepthSolver):
        """setPenetrationDepthSolver(btGjkPairDetector self, btConvexPenetrationDepthSolver penetrationDepthSolver)"""
        return _bullet.btGjkPairDetector_setPenetrationDepthSolver(self, penetrationDepthSolver)


    def setIgnoreMargin(self, ignoreMargin):
        """setIgnoreMargin(btGjkPairDetector self, bool ignoreMargin)"""
        return _bullet.btGjkPairDetector_setIgnoreMargin(self, ignoreMargin)

btGjkPairDetector_swigregister = _bullet.btGjkPairDetector_swigregister
btGjkPairDetector_swigregister(btGjkPairDetector)

class btConvex2dConvex2dAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btConvex2dConvex2dAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvex2dConvex2dAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvex2dConvex2dAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, mf, ci, body0Wrap, body1Wrap, simplexSolver, pdSolver, numPerturbationIterations, minimumPointsPerturbationThreshold):
        """__init__(btConvex2dConvex2dAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, btVoronoiSimplexSolver simplexSolver, btConvexPenetrationDepthSolver pdSolver, int numPerturbationIterations, int minimumPointsPerturbationThreshold) -> btConvex2dConvex2dAlgorithm"""
        this = _bullet.new_btConvex2dConvex2dAlgorithm(mf, ci, body0Wrap, body1Wrap, simplexSolver, pdSolver, numPerturbationIterations, minimumPointsPerturbationThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvex2dConvex2dAlgorithm
    __del__ = lambda self: None

    def setLowLevelOfDetail(self, useLowLevel):
        """setLowLevelOfDetail(btConvex2dConvex2dAlgorithm self, bool useLowLevel)"""
        return _bullet.btConvex2dConvex2dAlgorithm_setLowLevelOfDetail(self, useLowLevel)


    def getManifold(self):
        """getManifold(btConvex2dConvex2dAlgorithm self) -> btPersistentManifold"""
        return _bullet.btConvex2dConvex2dAlgorithm_getManifold(self)

btConvex2dConvex2dAlgorithm_swigregister = _bullet.btConvex2dConvex2dAlgorithm_swigregister
btConvex2dConvex2dAlgorithm_swigregister(btConvex2dConvex2dAlgorithm)

class btTriangleCallback(_object):
    """Proxy of C++ btTriangleCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btTriangleCallback
    __del__ = lambda self: None

    def processTriangle(self, triangle, partId, triangleIndex):
        """processTriangle(btTriangleCallback self, btVector3 * triangle, int partId, int triangleIndex)"""
        return _bullet.btTriangleCallback_processTriangle(self, triangle, partId, triangleIndex)

btTriangleCallback_swigregister = _bullet.btTriangleCallback_swigregister
btTriangleCallback_swigregister(btTriangleCallback)

class btInternalTriangleIndexCallback(_object):
    """Proxy of C++ btInternalTriangleIndexCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btInternalTriangleIndexCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btInternalTriangleIndexCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btInternalTriangleIndexCallback
    __del__ = lambda self: None

    def internalProcessTriangleIndex(self, triangle, partId, triangleIndex):
        """internalProcessTriangleIndex(btInternalTriangleIndexCallback self, btVector3 * triangle, int partId, int triangleIndex)"""
        return _bullet.btInternalTriangleIndexCallback_internalProcessTriangleIndex(self, triangle, partId, triangleIndex)

btInternalTriangleIndexCallback_swigregister = _bullet.btInternalTriangleIndexCallback_swigregister
btInternalTriangleIndexCallback_swigregister(btInternalTriangleIndexCallback)

class btConvexTriangleCallback(btTriangleCallback):
    """Proxy of C++ btConvexTriangleCallback class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexTriangleCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexTriangleCallback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_triangleCount"] = _bullet.btConvexTriangleCallback_m_triangleCount_set
    __swig_getmethods__["m_triangleCount"] = _bullet.btConvexTriangleCallback_m_triangleCount_get
    if _newclass:
        m_triangleCount = _swig_property(_bullet.btConvexTriangleCallback_m_triangleCount_get, _bullet.btConvexTriangleCallback_m_triangleCount_set)
    __swig_setmethods__["m_manifoldPtr"] = _bullet.btConvexTriangleCallback_m_manifoldPtr_set
    __swig_getmethods__["m_manifoldPtr"] = _bullet.btConvexTriangleCallback_m_manifoldPtr_get
    if _newclass:
        m_manifoldPtr = _swig_property(_bullet.btConvexTriangleCallback_m_manifoldPtr_get, _bullet.btConvexTriangleCallback_m_manifoldPtr_set)

    def __init__(self, dispatcher, body0Wrap, body1Wrap, isSwapped):
        """__init__(btConvexTriangleCallback self, btDispatcher dispatcher, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btConvexTriangleCallback"""
        this = _bullet.new_btConvexTriangleCallback(dispatcher, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setTimeStepAndCounters(self, collisionMarginTriangle, dispatchInfo, convexBodyWrap, triBodyWrap, resultOut):
        """setTimeStepAndCounters(btConvexTriangleCallback self, btScalar collisionMarginTriangle, btDispatcherInfo dispatchInfo, btCollisionObjectWrapper const * convexBodyWrap, btCollisionObjectWrapper const * triBodyWrap, btManifoldResult resultOut)"""
        return _bullet.btConvexTriangleCallback_setTimeStepAndCounters(self, collisionMarginTriangle, dispatchInfo, convexBodyWrap, triBodyWrap, resultOut)


    def clearWrapperData(self):
        """clearWrapperData(btConvexTriangleCallback self)"""
        return _bullet.btConvexTriangleCallback_clearWrapperData(self)

    __swig_destroy__ = _bullet.delete_btConvexTriangleCallback
    __del__ = lambda self: None

    def clearCache(self):
        """clearCache(btConvexTriangleCallback self)"""
        return _bullet.btConvexTriangleCallback_clearCache(self)


    def getAabbMin(self):
        """getAabbMin(btConvexTriangleCallback self) -> btVector3 const &"""
        return _bullet.btConvexTriangleCallback_getAabbMin(self)


    def getAabbMax(self):
        """getAabbMax(btConvexTriangleCallback self) -> btVector3 const &"""
        return _bullet.btConvexTriangleCallback_getAabbMax(self)

btConvexTriangleCallback_swigregister = _bullet.btConvexTriangleCallback_swigregister
btConvexTriangleCallback_swigregister(btConvexTriangleCallback)

class btConvexConcaveCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btConvexConcaveCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexConcaveCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexConcaveCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, ci, body0Wrap, body1Wrap, isSwapped):
        """__init__(btConvexConcaveCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btConvexConcaveCollisionAlgorithm"""
        this = _bullet.new_btConvexConcaveCollisionAlgorithm(ci, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexConcaveCollisionAlgorithm
    __del__ = lambda self: None

    def clearCache(self):
        """clearCache(btConvexConcaveCollisionAlgorithm self)"""
        return _bullet.btConvexConcaveCollisionAlgorithm_clearCache(self)

btConvexConcaveCollisionAlgorithm_swigregister = _bullet.btConvexConcaveCollisionAlgorithm_swigregister
btConvexConcaveCollisionAlgorithm_swigregister(btConvexConcaveCollisionAlgorithm)

class btPolyhedralContactClipping(_object):
    """Proxy of C++ btPolyhedralContactClipping class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPolyhedralContactClipping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPolyhedralContactClipping, name)
    __repr__ = _swig_repr

    def clipHullAgainstHull(separatingNormal1, hullA, hullB, transA, transB, minDist, maxDist, worldVertsB1, worldVertsB2, resultOut):
        """clipHullAgainstHull(btVector3 const & separatingNormal1, btConvexPolyhedron hullA, btConvexPolyhedron hullB, btTransform const & transA, btTransform const & transB, btScalar const minDist, btScalar maxDist, btVertexArray & worldVertsB1, btVertexArray & worldVertsB2, btDiscreteCollisionDetectorInterface::Result & resultOut)"""
        return _bullet.btPolyhedralContactClipping_clipHullAgainstHull(separatingNormal1, hullA, hullB, transA, transB, minDist, maxDist, worldVertsB1, worldVertsB2, resultOut)

    clipHullAgainstHull = staticmethod(clipHullAgainstHull)

    def clipFaceAgainstHull(separatingNormal, hullA, transA, worldVertsB1, worldVertsB2, minDist, maxDist, resultOut):
        """clipFaceAgainstHull(btVector3 const & separatingNormal, btConvexPolyhedron hullA, btTransform const & transA, btVertexArray & worldVertsB1, btVertexArray & worldVertsB2, btScalar const minDist, btScalar maxDist, btDiscreteCollisionDetectorInterface::Result & resultOut)"""
        return _bullet.btPolyhedralContactClipping_clipFaceAgainstHull(separatingNormal, hullA, transA, worldVertsB1, worldVertsB2, minDist, maxDist, resultOut)

    clipFaceAgainstHull = staticmethod(clipFaceAgainstHull)

    def findSeparatingAxis(hullA, hullB, transA, transB, sep, resultOut):
        """findSeparatingAxis(btConvexPolyhedron hullA, btConvexPolyhedron hullB, btTransform const & transA, btTransform const & transB, btVector3 & sep, btDiscreteCollisionDetectorInterface::Result & resultOut) -> bool"""
        return _bullet.btPolyhedralContactClipping_findSeparatingAxis(hullA, hullB, transA, transB, sep, resultOut)

    findSeparatingAxis = staticmethod(findSeparatingAxis)

    def clipFace(pVtxIn, ppVtxOut, planeNormalWS, planeEqWS):
        """clipFace(btVertexArray const & pVtxIn, btVertexArray & ppVtxOut, btVector3 const & planeNormalWS, btScalar planeEqWS)"""
        return _bullet.btPolyhedralContactClipping_clipFace(pVtxIn, ppVtxOut, planeNormalWS, planeEqWS)

    clipFace = staticmethod(clipFace)

    def __init__(self):
        """__init__(btPolyhedralContactClipping self) -> btPolyhedralContactClipping"""
        this = _bullet.new_btPolyhedralContactClipping()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPolyhedralContactClipping
    __del__ = lambda self: None
btPolyhedralContactClipping_swigregister = _bullet.btPolyhedralContactClipping_swigregister
btPolyhedralContactClipping_swigregister(btPolyhedralContactClipping)

def btPolyhedralContactClipping_clipHullAgainstHull(separatingNormal1, hullA, hullB, transA, transB, minDist, maxDist, worldVertsB1, worldVertsB2, resultOut):
    """btPolyhedralContactClipping_clipHullAgainstHull(btVector3 const & separatingNormal1, btConvexPolyhedron hullA, btConvexPolyhedron hullB, btTransform const & transA, btTransform const & transB, btScalar const minDist, btScalar maxDist, btVertexArray & worldVertsB1, btVertexArray & worldVertsB2, btDiscreteCollisionDetectorInterface::Result & resultOut)"""
    return _bullet.btPolyhedralContactClipping_clipHullAgainstHull(separatingNormal1, hullA, hullB, transA, transB, minDist, maxDist, worldVertsB1, worldVertsB2, resultOut)

def btPolyhedralContactClipping_clipFaceAgainstHull(separatingNormal, hullA, transA, worldVertsB1, worldVertsB2, minDist, maxDist, resultOut):
    """btPolyhedralContactClipping_clipFaceAgainstHull(btVector3 const & separatingNormal, btConvexPolyhedron hullA, btTransform const & transA, btVertexArray & worldVertsB1, btVertexArray & worldVertsB2, btScalar const minDist, btScalar maxDist, btDiscreteCollisionDetectorInterface::Result & resultOut)"""
    return _bullet.btPolyhedralContactClipping_clipFaceAgainstHull(separatingNormal, hullA, transA, worldVertsB1, worldVertsB2, minDist, maxDist, resultOut)

def btPolyhedralContactClipping_findSeparatingAxis(hullA, hullB, transA, transB, sep, resultOut):
    """btPolyhedralContactClipping_findSeparatingAxis(btConvexPolyhedron hullA, btConvexPolyhedron hullB, btTransform const & transA, btTransform const & transB, btVector3 & sep, btDiscreteCollisionDetectorInterface::Result & resultOut) -> bool"""
    return _bullet.btPolyhedralContactClipping_findSeparatingAxis(hullA, hullB, transA, transB, sep, resultOut)

def btPolyhedralContactClipping_clipFace(pVtxIn, ppVtxOut, planeNormalWS, planeEqWS):
    """btPolyhedralContactClipping_clipFace(btVertexArray const & pVtxIn, btVertexArray & ppVtxOut, btVector3 const & planeNormalWS, btScalar planeEqWS)"""
    return _bullet.btPolyhedralContactClipping_clipFace(pVtxIn, ppVtxOut, planeNormalWS, planeEqWS)

class btConvexConvexAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btConvexConvexAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexConvexAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexConvexAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, mf, ci, body0Wrap, body1Wrap, pdSolver, numPerturbationIterations, minimumPointsPerturbationThreshold):
        """__init__(btConvexConvexAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, btConvexPenetrationDepthSolver pdSolver, int numPerturbationIterations, int minimumPointsPerturbationThreshold) -> btConvexConvexAlgorithm"""
        this = _bullet.new_btConvexConvexAlgorithm(mf, ci, body0Wrap, body1Wrap, pdSolver, numPerturbationIterations, minimumPointsPerturbationThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexConvexAlgorithm
    __del__ = lambda self: None

    def setLowLevelOfDetail(self, useLowLevel):
        """setLowLevelOfDetail(btConvexConvexAlgorithm self, bool useLowLevel)"""
        return _bullet.btConvexConvexAlgorithm_setLowLevelOfDetail(self, useLowLevel)


    def getManifold(self):
        """getManifold(btConvexConvexAlgorithm self) -> btPersistentManifold"""
        return _bullet.btConvexConvexAlgorithm_getManifold(self)

btConvexConvexAlgorithm_swigregister = _bullet.btConvexConvexAlgorithm_swigregister
btConvexConvexAlgorithm_swigregister(btConvexConvexAlgorithm)

class btConvexPlaneCollisionAlgorithm(btCollisionAlgorithm):
    """Proxy of C++ btConvexPlaneCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexPlaneCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexPlaneCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, mf, ci, body0Wrap, body1Wrap, isSwapped, numPerturbationIterations, minimumPointsPerturbationThreshold):
        """__init__(btConvexPlaneCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped, int numPerturbationIterations, int minimumPointsPerturbationThreshold) -> btConvexPlaneCollisionAlgorithm"""
        this = _bullet.new_btConvexPlaneCollisionAlgorithm(mf, ci, body0Wrap, body1Wrap, isSwapped, numPerturbationIterations, minimumPointsPerturbationThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexPlaneCollisionAlgorithm
    __del__ = lambda self: None

    def collideSingleContact(self, perturbeRot, body0Wrap, body1Wrap, dispatchInfo, resultOut):
        """collideSingleContact(btConvexPlaneCollisionAlgorithm self, btQuaternion const & perturbeRot, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, btDispatcherInfo dispatchInfo, btManifoldResult resultOut)"""
        return _bullet.btConvexPlaneCollisionAlgorithm_collideSingleContact(self, perturbeRot, body0Wrap, body1Wrap, dispatchInfo, resultOut)

btConvexPlaneCollisionAlgorithm_swigregister = _bullet.btConvexPlaneCollisionAlgorithm_swigregister
btConvexPlaneCollisionAlgorithm_swigregister(btConvexPlaneCollisionAlgorithm)

class btDefaultCollisionConstructionInfo(_object):
    """Proxy of C++ btDefaultCollisionConstructionInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultCollisionConstructionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultCollisionConstructionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_persistentManifoldPool"] = _bullet.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set
    __swig_getmethods__["m_persistentManifoldPool"] = _bullet.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get
    if _newclass:
        m_persistentManifoldPool = _swig_property(_bullet.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_get, _bullet.btDefaultCollisionConstructionInfo_m_persistentManifoldPool_set)
    __swig_setmethods__["m_collisionAlgorithmPool"] = _bullet.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set
    __swig_getmethods__["m_collisionAlgorithmPool"] = _bullet.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get
    if _newclass:
        m_collisionAlgorithmPool = _swig_property(_bullet.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_get, _bullet.btDefaultCollisionConstructionInfo_m_collisionAlgorithmPool_set)
    __swig_setmethods__["m_defaultMaxPersistentManifoldPoolSize"] = _bullet.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set
    __swig_getmethods__["m_defaultMaxPersistentManifoldPoolSize"] = _bullet.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get
    if _newclass:
        m_defaultMaxPersistentManifoldPoolSize = _swig_property(_bullet.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_get, _bullet.btDefaultCollisionConstructionInfo_m_defaultMaxPersistentManifoldPoolSize_set)
    __swig_setmethods__["m_defaultMaxCollisionAlgorithmPoolSize"] = _bullet.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set
    __swig_getmethods__["m_defaultMaxCollisionAlgorithmPoolSize"] = _bullet.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get
    if _newclass:
        m_defaultMaxCollisionAlgorithmPoolSize = _swig_property(_bullet.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_get, _bullet.btDefaultCollisionConstructionInfo_m_defaultMaxCollisionAlgorithmPoolSize_set)
    __swig_setmethods__["m_customCollisionAlgorithmMaxElementSize"] = _bullet.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set
    __swig_getmethods__["m_customCollisionAlgorithmMaxElementSize"] = _bullet.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get
    if _newclass:
        m_customCollisionAlgorithmMaxElementSize = _swig_property(_bullet.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_get, _bullet.btDefaultCollisionConstructionInfo_m_customCollisionAlgorithmMaxElementSize_set)
    __swig_setmethods__["m_useEpaPenetrationAlgorithm"] = _bullet.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set
    __swig_getmethods__["m_useEpaPenetrationAlgorithm"] = _bullet.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get
    if _newclass:
        m_useEpaPenetrationAlgorithm = _swig_property(_bullet.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_get, _bullet.btDefaultCollisionConstructionInfo_m_useEpaPenetrationAlgorithm_set)

    def __init__(self):
        """__init__(btDefaultCollisionConstructionInfo self) -> btDefaultCollisionConstructionInfo"""
        this = _bullet.new_btDefaultCollisionConstructionInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDefaultCollisionConstructionInfo
    __del__ = lambda self: None
btDefaultCollisionConstructionInfo_swigregister = _bullet.btDefaultCollisionConstructionInfo_swigregister
btDefaultCollisionConstructionInfo_swigregister(btDefaultCollisionConstructionInfo)

class btDefaultCollisionConfiguration(btCollisionConfiguration):
    """Proxy of C++ btDefaultCollisionConfiguration class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionConfiguration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultCollisionConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionConfiguration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultCollisionConfiguration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btDefaultCollisionConfiguration self, btDefaultCollisionConstructionInfo constructionInfo) -> btDefaultCollisionConfiguration
        __init__(btDefaultCollisionConfiguration self) -> btDefaultCollisionConfiguration
        """
        this = _bullet.new_btDefaultCollisionConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDefaultCollisionConfiguration
    __del__ = lambda self: None

    def setConvexConvexMultipointIterations(self, numPerturbationIterations=3, minimumPointsPerturbationThreshold=3):
        """
        setConvexConvexMultipointIterations(btDefaultCollisionConfiguration self, int numPerturbationIterations=3, int minimumPointsPerturbationThreshold=3)
        setConvexConvexMultipointIterations(btDefaultCollisionConfiguration self, int numPerturbationIterations=3)
        setConvexConvexMultipointIterations(btDefaultCollisionConfiguration self)
        """
        return _bullet.btDefaultCollisionConfiguration_setConvexConvexMultipointIterations(self, numPerturbationIterations, minimumPointsPerturbationThreshold)


    def setPlaneConvexMultipointIterations(self, numPerturbationIterations=3, minimumPointsPerturbationThreshold=3):
        """
        setPlaneConvexMultipointIterations(btDefaultCollisionConfiguration self, int numPerturbationIterations=3, int minimumPointsPerturbationThreshold=3)
        setPlaneConvexMultipointIterations(btDefaultCollisionConfiguration self, int numPerturbationIterations=3)
        setPlaneConvexMultipointIterations(btDefaultCollisionConfiguration self)
        """
        return _bullet.btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations(self, numPerturbationIterations, minimumPointsPerturbationThreshold)

btDefaultCollisionConfiguration_swigregister = _bullet.btDefaultCollisionConfiguration_swigregister
btDefaultCollisionConfiguration_swigregister(btDefaultCollisionConfiguration)

class btEmptyAlgorithm(btCollisionAlgorithm):
    """Proxy of C++ btEmptyAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btEmptyAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btEmptyAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, ci):
        """__init__(btEmptyAlgorithm self, btCollisionAlgorithmConstructionInfo ci) -> btEmptyAlgorithm"""
        this = _bullet.new_btEmptyAlgorithm(ci)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btEmptyAlgorithm
    __del__ = lambda self: None
btEmptyAlgorithm_swigregister = _bullet.btEmptyAlgorithm_swigregister
btEmptyAlgorithm_swigregister(btEmptyAlgorithm)

class btGhostObject(btCollisionObject):
    """Proxy of C++ btGhostObject class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGhostObject, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGhostObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btGhostObject self) -> btGhostObject"""
        this = _bullet.new_btGhostObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGhostObject
    __del__ = lambda self: None

    def convexSweepTest(self, castShape, convexFromWorld, convexToWorld, resultCallback, allowedCcdPenetration=0.):
        """
        convexSweepTest(btGhostObject self, btConvexShape castShape, btTransform const & convexFromWorld, btTransform const & convexToWorld, btCollisionWorld::ConvexResultCallback & resultCallback, btScalar allowedCcdPenetration=0.)
        convexSweepTest(btGhostObject self, btConvexShape castShape, btTransform const & convexFromWorld, btTransform const & convexToWorld, btCollisionWorld::ConvexResultCallback & resultCallback)
        """
        return _bullet.btGhostObject_convexSweepTest(self, castShape, convexFromWorld, convexToWorld, resultCallback, allowedCcdPenetration)


    def rayTest(self, rayFromWorld, rayToWorld, resultCallback):
        """rayTest(btGhostObject self, btVector3 const & rayFromWorld, btVector3 const & rayToWorld, btCollisionWorld::RayResultCallback & resultCallback)"""
        return _bullet.btGhostObject_rayTest(self, rayFromWorld, rayToWorld, resultCallback)


    def addOverlappingObjectInternal(self, otherProxy, thisProxy=None):
        """
        addOverlappingObjectInternal(btGhostObject self, btBroadphaseProxy otherProxy, btBroadphaseProxy thisProxy=None)
        addOverlappingObjectInternal(btGhostObject self, btBroadphaseProxy otherProxy)
        """
        return _bullet.btGhostObject_addOverlappingObjectInternal(self, otherProxy, thisProxy)


    def removeOverlappingObjectInternal(self, otherProxy, dispatcher, thisProxy=None):
        """
        removeOverlappingObjectInternal(btGhostObject self, btBroadphaseProxy otherProxy, btDispatcher dispatcher, btBroadphaseProxy thisProxy=None)
        removeOverlappingObjectInternal(btGhostObject self, btBroadphaseProxy otherProxy, btDispatcher dispatcher)
        """
        return _bullet.btGhostObject_removeOverlappingObjectInternal(self, otherProxy, dispatcher, thisProxy)


    def getNumOverlappingObjects(self):
        """getNumOverlappingObjects(btGhostObject self) -> int"""
        return _bullet.btGhostObject_getNumOverlappingObjects(self)


    def getOverlappingObject(self, *args):
        """
        getOverlappingObject(btGhostObject self, int index) -> btCollisionObject
        getOverlappingObject(btGhostObject self, int index) -> btCollisionObject
        """
        return _bullet.btGhostObject_getOverlappingObject(self, *args)


    def getOverlappingPairs(self):
        """getOverlappingPairs(btGhostObject self) -> btAlignedObjectArray< btCollisionObject * > &"""
        return _bullet.btGhostObject_getOverlappingPairs(self)


    def getOverlappingPairs_const(self):
        """getOverlappingPairs_const(btGhostObject self) -> btAlignedObjectArray< btCollisionObject * > const"""
        return _bullet.btGhostObject_getOverlappingPairs_const(self)


    def upcast_const(colObj):
        """upcast_const(btCollisionObject colObj) -> btGhostObject"""
        return _bullet.btGhostObject_upcast_const(colObj)

    upcast_const = staticmethod(upcast_const)

    def upcast(colObj):
        """upcast(btCollisionObject colObj) -> btGhostObject"""
        return _bullet.btGhostObject_upcast(colObj)

    upcast = staticmethod(upcast)
btGhostObject_swigregister = _bullet.btGhostObject_swigregister
btGhostObject_swigregister(btGhostObject)

def btGhostObject_upcast_const(colObj):
    """btGhostObject_upcast_const(btCollisionObject colObj) -> btGhostObject"""
    return _bullet.btGhostObject_upcast_const(colObj)

def btGhostObject_upcast(colObj):
    """btGhostObject_upcast(btCollisionObject colObj) -> btGhostObject"""
    return _bullet.btGhostObject_upcast(colObj)

class btPairCachingGhostObject(btGhostObject):
    """Proxy of C++ btPairCachingGhostObject class."""

    __swig_setmethods__ = {}
    for _s in [btGhostObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPairCachingGhostObject, name, value)
    __swig_getmethods__ = {}
    for _s in [btGhostObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPairCachingGhostObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btPairCachingGhostObject self) -> btPairCachingGhostObject"""
        this = _bullet.new_btPairCachingGhostObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPairCachingGhostObject
    __del__ = lambda self: None

    def addOverlappingObjectInternal(self, otherProxy, thisProxy=None):
        """
        addOverlappingObjectInternal(btPairCachingGhostObject self, btBroadphaseProxy otherProxy, btBroadphaseProxy thisProxy=None)
        addOverlappingObjectInternal(btPairCachingGhostObject self, btBroadphaseProxy otherProxy)
        """
        return _bullet.btPairCachingGhostObject_addOverlappingObjectInternal(self, otherProxy, thisProxy)


    def removeOverlappingObjectInternal(self, otherProxy, dispatcher, thisProxy=None):
        """
        removeOverlappingObjectInternal(btPairCachingGhostObject self, btBroadphaseProxy otherProxy, btDispatcher dispatcher, btBroadphaseProxy thisProxy=None)
        removeOverlappingObjectInternal(btPairCachingGhostObject self, btBroadphaseProxy otherProxy, btDispatcher dispatcher)
        """
        return _bullet.btPairCachingGhostObject_removeOverlappingObjectInternal(self, otherProxy, dispatcher, thisProxy)


    def getOverlappingPairCache(self):
        """getOverlappingPairCache(btPairCachingGhostObject self) -> btHashedOverlappingPairCache"""
        return _bullet.btPairCachingGhostObject_getOverlappingPairCache(self)

btPairCachingGhostObject_swigregister = _bullet.btPairCachingGhostObject_swigregister
btPairCachingGhostObject_swigregister(btPairCachingGhostObject)

class btGhostPairCallback(btOverlappingPairCallback):
    """Proxy of C++ btGhostPairCallback class."""

    __swig_setmethods__ = {}
    for _s in [btOverlappingPairCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGhostPairCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btOverlappingPairCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGhostPairCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btGhostPairCallback self) -> btGhostPairCallback"""
        this = _bullet.new_btGhostPairCallback()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGhostPairCallback
    __del__ = lambda self: None
btGhostPairCallback_swigregister = _bullet.btGhostPairCallback_swigregister
btGhostPairCallback_swigregister(btGhostPairCallback)

class btHashInt(_object):
    """Proxy of C++ btHashInt class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHashInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHashInt, name)
    __repr__ = _swig_repr

    def __init__(self, uid):
        """__init__(btHashInt self, int uid) -> btHashInt"""
        this = _bullet.new_btHashInt(uid)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getUid1(self):
        """getUid1(btHashInt self) -> int"""
        return _bullet.btHashInt_getUid1(self)


    def setUid1(self, uid):
        """setUid1(btHashInt self, int uid)"""
        return _bullet.btHashInt_setUid1(self, uid)


    def equals(self, other):
        """equals(btHashInt self, btHashInt other) -> bool"""
        return _bullet.btHashInt_equals(self, other)


    def getHash(self):
        """getHash(btHashInt self) -> unsigned int"""
        return _bullet.btHashInt_getHash(self)

    __swig_destroy__ = _bullet.delete_btHashInt
    __del__ = lambda self: None
btHashInt_swigregister = _bullet.btHashInt_swigregister
btHashInt_swigregister(btHashInt)
BT_HASH_NULL = cvar.BT_HASH_NULL

class btHashPtr(_object):
    """Proxy of C++ btHashPtr class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHashPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHashPtr, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btHashPtr self) -> btHashPtr
        __init__(btHashPtr self, void const * ptr) -> btHashPtr
        """
        this = _bullet.new_btHashPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointer(self):
        """getPointer(btHashPtr self) -> void const *"""
        return _bullet.btHashPtr_getPointer(self)


    def equals(self, other):
        """equals(btHashPtr self, btHashPtr other) -> bool"""
        return _bullet.btHashPtr_equals(self, other)


    def getHash(self):
        """getHash(btHashPtr self) -> unsigned int"""
        return _bullet.btHashPtr_getHash(self)

    __swig_destroy__ = _bullet.delete_btHashPtr
    __del__ = lambda self: None
btHashPtr_swigregister = _bullet.btHashPtr_swigregister
btHashPtr_swigregister(btHashPtr)


def btStrLen(str):
    """btStrLen(char const * str) -> int"""
    return _bullet.btStrLen(str)
class btChunk(_object):
    """Proxy of C++ btChunk class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btChunk, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_chunkCode"] = _bullet.btChunk_m_chunkCode_set
    __swig_getmethods__["m_chunkCode"] = _bullet.btChunk_m_chunkCode_get
    if _newclass:
        m_chunkCode = _swig_property(_bullet.btChunk_m_chunkCode_get, _bullet.btChunk_m_chunkCode_set)
    __swig_setmethods__["m_length"] = _bullet.btChunk_m_length_set
    __swig_getmethods__["m_length"] = _bullet.btChunk_m_length_get
    if _newclass:
        m_length = _swig_property(_bullet.btChunk_m_length_get, _bullet.btChunk_m_length_set)
    __swig_setmethods__["m_oldPtr"] = _bullet.btChunk_m_oldPtr_set
    __swig_getmethods__["m_oldPtr"] = _bullet.btChunk_m_oldPtr_get
    if _newclass:
        m_oldPtr = _swig_property(_bullet.btChunk_m_oldPtr_get, _bullet.btChunk_m_oldPtr_set)
    __swig_setmethods__["m_dna_nr"] = _bullet.btChunk_m_dna_nr_set
    __swig_getmethods__["m_dna_nr"] = _bullet.btChunk_m_dna_nr_get
    if _newclass:
        m_dna_nr = _swig_property(_bullet.btChunk_m_dna_nr_get, _bullet.btChunk_m_dna_nr_set)
    __swig_setmethods__["m_number"] = _bullet.btChunk_m_number_set
    __swig_getmethods__["m_number"] = _bullet.btChunk_m_number_get
    if _newclass:
        m_number = _swig_property(_bullet.btChunk_m_number_get, _bullet.btChunk_m_number_set)

    def __init__(self):
        """__init__(btChunk self) -> btChunk"""
        this = _bullet.new_btChunk()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btChunk
    __del__ = lambda self: None
btChunk_swigregister = _bullet.btChunk_swigregister
btChunk_swigregister(btChunk)

BT_SERIALIZE_NO_BVH = _bullet.BT_SERIALIZE_NO_BVH
BT_SERIALIZE_NO_TRIANGLEINFOMAP = _bullet.BT_SERIALIZE_NO_TRIANGLEINFOMAP
BT_SERIALIZE_NO_DUPLICATE_ASSERT = _bullet.BT_SERIALIZE_NO_DUPLICATE_ASSERT
class btSerializer(_object):
    """Proxy of C++ btSerializer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSerializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSerializer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btSerializer
    __del__ = lambda self: None

    def getBufferPointer(self):
        """getBufferPointer(btSerializer self) -> unsigned char const *"""
        return _bullet.btSerializer_getBufferPointer(self)


    def getCurrentBufferSize(self):
        """getCurrentBufferSize(btSerializer self) -> int"""
        return _bullet.btSerializer_getCurrentBufferSize(self)


    def allocate(self, size, numElements):
        """allocate(btSerializer self, size_t size, int numElements) -> btChunk"""
        return _bullet.btSerializer_allocate(self, size, numElements)


    def finalizeChunk(self, chunk, structType, chunkCode, oldPtr):
        """finalizeChunk(btSerializer self, btChunk chunk, char const * structType, int chunkCode, void * oldPtr)"""
        return _bullet.btSerializer_finalizeChunk(self, chunk, structType, chunkCode, oldPtr)


    def findPointer(self, oldPtr):
        """findPointer(btSerializer self, void * oldPtr) -> void *"""
        return _bullet.btSerializer_findPointer(self, oldPtr)


    def getUniquePointer(self, oldPtr):
        """getUniquePointer(btSerializer self, void * oldPtr) -> void *"""
        return _bullet.btSerializer_getUniquePointer(self, oldPtr)


    def startSerialization(self):
        """startSerialization(btSerializer self)"""
        return _bullet.btSerializer_startSerialization(self)


    def finishSerialization(self):
        """finishSerialization(btSerializer self)"""
        return _bullet.btSerializer_finishSerialization(self)


    def findNameForPointer(self, ptr):
        """findNameForPointer(btSerializer self, void const * ptr) -> char const *"""
        return _bullet.btSerializer_findNameForPointer(self, ptr)


    def registerNameForPointer(self, ptr, name):
        """registerNameForPointer(btSerializer self, void const * ptr, char const * name)"""
        return _bullet.btSerializer_registerNameForPointer(self, ptr, name)


    def serializeName(self, ptr):
        """serializeName(btSerializer self, char const * ptr)"""
        return _bullet.btSerializer_serializeName(self, ptr)


    def getSerializationFlags(self):
        """getSerializationFlags(btSerializer self) -> int"""
        return _bullet.btSerializer_getSerializationFlags(self)


    def setSerializationFlags(self, flags):
        """setSerializationFlags(btSerializer self, int flags)"""
        return _bullet.btSerializer_setSerializationFlags(self, flags)


    def getNumChunks(self):
        """getNumChunks(btSerializer self) -> int"""
        return _bullet.btSerializer_getNumChunks(self)


    def getChunk(self, chunkIndex):
        """getChunk(btSerializer self, int chunkIndex) -> btChunk"""
        return _bullet.btSerializer_getChunk(self, chunkIndex)

btSerializer_swigregister = _bullet.btSerializer_swigregister
btSerializer_swigregister(btSerializer)

BT_HEADER_LENGTH = _bullet.BT_HEADER_LENGTH
class btPointerUid(_object):
    """Proxy of C++ btPointerUid class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPointerUid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPointerUid, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btPointerUid self) -> btPointerUid"""
        this = _bullet.new_btPointerUid()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPointerUid
    __del__ = lambda self: None
btPointerUid_swigregister = _bullet.btPointerUid_swigregister
btPointerUid_swigregister(btPointerUid)

class btBulletSerializedArrays(_object):
    """Proxy of C++ btBulletSerializedArrays class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBulletSerializedArrays, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBulletSerializedArrays, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btBulletSerializedArrays self) -> btBulletSerializedArrays"""
        this = _bullet.new_btBulletSerializedArrays()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_bvhsDouble"] = _bullet.btBulletSerializedArrays_m_bvhsDouble_set
    __swig_getmethods__["m_bvhsDouble"] = _bullet.btBulletSerializedArrays_m_bvhsDouble_get
    if _newclass:
        m_bvhsDouble = _swig_property(_bullet.btBulletSerializedArrays_m_bvhsDouble_get, _bullet.btBulletSerializedArrays_m_bvhsDouble_set)
    __swig_setmethods__["m_bvhsFloat"] = _bullet.btBulletSerializedArrays_m_bvhsFloat_set
    __swig_getmethods__["m_bvhsFloat"] = _bullet.btBulletSerializedArrays_m_bvhsFloat_get
    if _newclass:
        m_bvhsFloat = _swig_property(_bullet.btBulletSerializedArrays_m_bvhsFloat_get, _bullet.btBulletSerializedArrays_m_bvhsFloat_set)
    __swig_setmethods__["m_colShapeData"] = _bullet.btBulletSerializedArrays_m_colShapeData_set
    __swig_getmethods__["m_colShapeData"] = _bullet.btBulletSerializedArrays_m_colShapeData_get
    if _newclass:
        m_colShapeData = _swig_property(_bullet.btBulletSerializedArrays_m_colShapeData_get, _bullet.btBulletSerializedArrays_m_colShapeData_set)
    __swig_setmethods__["m_dynamicWorldInfoDataDouble"] = _bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataDouble_set
    __swig_getmethods__["m_dynamicWorldInfoDataDouble"] = _bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataDouble_get
    if _newclass:
        m_dynamicWorldInfoDataDouble = _swig_property(_bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataDouble_get, _bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataDouble_set)
    __swig_setmethods__["m_dynamicWorldInfoDataFloat"] = _bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataFloat_set
    __swig_getmethods__["m_dynamicWorldInfoDataFloat"] = _bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataFloat_get
    if _newclass:
        m_dynamicWorldInfoDataFloat = _swig_property(_bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataFloat_get, _bullet.btBulletSerializedArrays_m_dynamicWorldInfoDataFloat_set)
    __swig_setmethods__["m_rigidBodyDataDouble"] = _bullet.btBulletSerializedArrays_m_rigidBodyDataDouble_set
    __swig_getmethods__["m_rigidBodyDataDouble"] = _bullet.btBulletSerializedArrays_m_rigidBodyDataDouble_get
    if _newclass:
        m_rigidBodyDataDouble = _swig_property(_bullet.btBulletSerializedArrays_m_rigidBodyDataDouble_get, _bullet.btBulletSerializedArrays_m_rigidBodyDataDouble_set)
    __swig_setmethods__["m_rigidBodyDataFloat"] = _bullet.btBulletSerializedArrays_m_rigidBodyDataFloat_set
    __swig_getmethods__["m_rigidBodyDataFloat"] = _bullet.btBulletSerializedArrays_m_rigidBodyDataFloat_get
    if _newclass:
        m_rigidBodyDataFloat = _swig_property(_bullet.btBulletSerializedArrays_m_rigidBodyDataFloat_get, _bullet.btBulletSerializedArrays_m_rigidBodyDataFloat_set)
    __swig_setmethods__["m_collisionObjectDataDouble"] = _bullet.btBulletSerializedArrays_m_collisionObjectDataDouble_set
    __swig_getmethods__["m_collisionObjectDataDouble"] = _bullet.btBulletSerializedArrays_m_collisionObjectDataDouble_get
    if _newclass:
        m_collisionObjectDataDouble = _swig_property(_bullet.btBulletSerializedArrays_m_collisionObjectDataDouble_get, _bullet.btBulletSerializedArrays_m_collisionObjectDataDouble_set)
    __swig_setmethods__["m_collisionObjectDataFloat"] = _bullet.btBulletSerializedArrays_m_collisionObjectDataFloat_set
    __swig_getmethods__["m_collisionObjectDataFloat"] = _bullet.btBulletSerializedArrays_m_collisionObjectDataFloat_get
    if _newclass:
        m_collisionObjectDataFloat = _swig_property(_bullet.btBulletSerializedArrays_m_collisionObjectDataFloat_get, _bullet.btBulletSerializedArrays_m_collisionObjectDataFloat_set)
    __swig_setmethods__["m_constraintDataFloat"] = _bullet.btBulletSerializedArrays_m_constraintDataFloat_set
    __swig_getmethods__["m_constraintDataFloat"] = _bullet.btBulletSerializedArrays_m_constraintDataFloat_get
    if _newclass:
        m_constraintDataFloat = _swig_property(_bullet.btBulletSerializedArrays_m_constraintDataFloat_get, _bullet.btBulletSerializedArrays_m_constraintDataFloat_set)
    __swig_setmethods__["m_constraintDataDouble"] = _bullet.btBulletSerializedArrays_m_constraintDataDouble_set
    __swig_getmethods__["m_constraintDataDouble"] = _bullet.btBulletSerializedArrays_m_constraintDataDouble_get
    if _newclass:
        m_constraintDataDouble = _swig_property(_bullet.btBulletSerializedArrays_m_constraintDataDouble_get, _bullet.btBulletSerializedArrays_m_constraintDataDouble_set)
    __swig_setmethods__["m_constraintData"] = _bullet.btBulletSerializedArrays_m_constraintData_set
    __swig_getmethods__["m_constraintData"] = _bullet.btBulletSerializedArrays_m_constraintData_get
    if _newclass:
        m_constraintData = _swig_property(_bullet.btBulletSerializedArrays_m_constraintData_get, _bullet.btBulletSerializedArrays_m_constraintData_set)
    __swig_setmethods__["m_softBodyFloatData"] = _bullet.btBulletSerializedArrays_m_softBodyFloatData_set
    __swig_getmethods__["m_softBodyFloatData"] = _bullet.btBulletSerializedArrays_m_softBodyFloatData_get
    if _newclass:
        m_softBodyFloatData = _swig_property(_bullet.btBulletSerializedArrays_m_softBodyFloatData_get, _bullet.btBulletSerializedArrays_m_softBodyFloatData_set)
    __swig_setmethods__["m_softBodyDoubleData"] = _bullet.btBulletSerializedArrays_m_softBodyDoubleData_set
    __swig_getmethods__["m_softBodyDoubleData"] = _bullet.btBulletSerializedArrays_m_softBodyDoubleData_get
    if _newclass:
        m_softBodyDoubleData = _swig_property(_bullet.btBulletSerializedArrays_m_softBodyDoubleData_get, _bullet.btBulletSerializedArrays_m_softBodyDoubleData_set)
    __swig_destroy__ = _bullet.delete_btBulletSerializedArrays
    __del__ = lambda self: None
btBulletSerializedArrays_swigregister = _bullet.btBulletSerializedArrays_swigregister
btBulletSerializedArrays_swigregister(btBulletSerializedArrays)

class btDefaultSerializer(btSerializer):
    """Proxy of C++ btDefaultSerializer class."""

    __swig_setmethods__ = {}
    for _s in [btSerializer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultSerializer, name, value)
    __swig_getmethods__ = {}
    for _s in [btSerializer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultSerializer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_skipPointers"] = _bullet.btDefaultSerializer_m_skipPointers_set
    __swig_getmethods__["m_skipPointers"] = _bullet.btDefaultSerializer_m_skipPointers_get
    if _newclass:
        m_skipPointers = _swig_property(_bullet.btDefaultSerializer_m_skipPointers_get, _bullet.btDefaultSerializer_m_skipPointers_set)

    def __init__(self, totalSize=0, buffer=None):
        """
        __init__(btDefaultSerializer self, int totalSize=0, unsigned char * buffer=None) -> btDefaultSerializer
        __init__(btDefaultSerializer self, int totalSize=0) -> btDefaultSerializer
        __init__(btDefaultSerializer self) -> btDefaultSerializer
        """
        this = _bullet.new_btDefaultSerializer(totalSize, buffer)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDefaultSerializer
    __del__ = lambda self: None

    def getMemoryDnaSizeInBytes():
        """getMemoryDnaSizeInBytes() -> int"""
        return _bullet.btDefaultSerializer_getMemoryDnaSizeInBytes()

    getMemoryDnaSizeInBytes = staticmethod(getMemoryDnaSizeInBytes)

    def getMemoryDna():
        """getMemoryDna() -> char const *"""
        return _bullet.btDefaultSerializer_getMemoryDna()

    getMemoryDna = staticmethod(getMemoryDna)

    def insertHeader(self):
        """insertHeader(btDefaultSerializer self)"""
        return _bullet.btDefaultSerializer_insertHeader(self)


    def writeHeader(self, buffer):
        """writeHeader(btDefaultSerializer self, unsigned char * buffer)"""
        return _bullet.btDefaultSerializer_writeHeader(self, buffer)


    def internalAlloc(self, size):
        """internalAlloc(btDefaultSerializer self, size_t size) -> unsigned char *"""
        return _bullet.btDefaultSerializer_internalAlloc(self, size)

btDefaultSerializer_swigregister = _bullet.btDefaultSerializer_swigregister
btDefaultSerializer_swigregister(btDefaultSerializer)

def btDefaultSerializer_getMemoryDnaSizeInBytes():
    """btDefaultSerializer_getMemoryDnaSizeInBytes() -> int"""
    return _bullet.btDefaultSerializer_getMemoryDnaSizeInBytes()

def btDefaultSerializer_getMemoryDna():
    """btDefaultSerializer_getMemoryDna() -> char const *"""
    return _bullet.btDefaultSerializer_getMemoryDna()

TRI_INFO_V0V1_CONVEX = _bullet.TRI_INFO_V0V1_CONVEX
TRI_INFO_V1V2_CONVEX = _bullet.TRI_INFO_V1V2_CONVEX
TRI_INFO_V2V0_CONVEX = _bullet.TRI_INFO_V2V0_CONVEX
TRI_INFO_V0V1_SWAP_NORMALB = _bullet.TRI_INFO_V0V1_SWAP_NORMALB
TRI_INFO_V1V2_SWAP_NORMALB = _bullet.TRI_INFO_V1V2_SWAP_NORMALB
TRI_INFO_V2V0_SWAP_NORMALB = _bullet.TRI_INFO_V2V0_SWAP_NORMALB
class btTriangleInfo(_object):
    """Proxy of C++ btTriangleInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btTriangleInfo self) -> btTriangleInfo"""
        this = _bullet.new_btTriangleInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_flags"] = _bullet.btTriangleInfo_m_flags_set
    __swig_getmethods__["m_flags"] = _bullet.btTriangleInfo_m_flags_get
    if _newclass:
        m_flags = _swig_property(_bullet.btTriangleInfo_m_flags_get, _bullet.btTriangleInfo_m_flags_set)
    __swig_setmethods__["m_edgeV0V1Angle"] = _bullet.btTriangleInfo_m_edgeV0V1Angle_set
    __swig_getmethods__["m_edgeV0V1Angle"] = _bullet.btTriangleInfo_m_edgeV0V1Angle_get
    if _newclass:
        m_edgeV0V1Angle = _swig_property(_bullet.btTriangleInfo_m_edgeV0V1Angle_get, _bullet.btTriangleInfo_m_edgeV0V1Angle_set)
    __swig_setmethods__["m_edgeV1V2Angle"] = _bullet.btTriangleInfo_m_edgeV1V2Angle_set
    __swig_getmethods__["m_edgeV1V2Angle"] = _bullet.btTriangleInfo_m_edgeV1V2Angle_get
    if _newclass:
        m_edgeV1V2Angle = _swig_property(_bullet.btTriangleInfo_m_edgeV1V2Angle_get, _bullet.btTriangleInfo_m_edgeV1V2Angle_set)
    __swig_setmethods__["m_edgeV2V0Angle"] = _bullet.btTriangleInfo_m_edgeV2V0Angle_set
    __swig_getmethods__["m_edgeV2V0Angle"] = _bullet.btTriangleInfo_m_edgeV2V0Angle_get
    if _newclass:
        m_edgeV2V0Angle = _swig_property(_bullet.btTriangleInfo_m_edgeV2V0Angle_get, _bullet.btTriangleInfo_m_edgeV2V0Angle_set)
    __swig_destroy__ = _bullet.delete_btTriangleInfo
    __del__ = lambda self: None
btTriangleInfo_swigregister = _bullet.btTriangleInfo_swigregister
btTriangleInfo_swigregister(btTriangleInfo)

class btTriangleInfoMap(_object):
    """Proxy of C++ btTriangleInfoMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleInfoMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleInfoMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexEpsilon"] = _bullet.btTriangleInfoMap_m_convexEpsilon_set
    __swig_getmethods__["m_convexEpsilon"] = _bullet.btTriangleInfoMap_m_convexEpsilon_get
    if _newclass:
        m_convexEpsilon = _swig_property(_bullet.btTriangleInfoMap_m_convexEpsilon_get, _bullet.btTriangleInfoMap_m_convexEpsilon_set)
    __swig_setmethods__["m_planarEpsilon"] = _bullet.btTriangleInfoMap_m_planarEpsilon_set
    __swig_getmethods__["m_planarEpsilon"] = _bullet.btTriangleInfoMap_m_planarEpsilon_get
    if _newclass:
        m_planarEpsilon = _swig_property(_bullet.btTriangleInfoMap_m_planarEpsilon_get, _bullet.btTriangleInfoMap_m_planarEpsilon_set)
    __swig_setmethods__["m_equalVertexThreshold"] = _bullet.btTriangleInfoMap_m_equalVertexThreshold_set
    __swig_getmethods__["m_equalVertexThreshold"] = _bullet.btTriangleInfoMap_m_equalVertexThreshold_get
    if _newclass:
        m_equalVertexThreshold = _swig_property(_bullet.btTriangleInfoMap_m_equalVertexThreshold_get, _bullet.btTriangleInfoMap_m_equalVertexThreshold_set)
    __swig_setmethods__["m_edgeDistanceThreshold"] = _bullet.btTriangleInfoMap_m_edgeDistanceThreshold_set
    __swig_getmethods__["m_edgeDistanceThreshold"] = _bullet.btTriangleInfoMap_m_edgeDistanceThreshold_get
    if _newclass:
        m_edgeDistanceThreshold = _swig_property(_bullet.btTriangleInfoMap_m_edgeDistanceThreshold_get, _bullet.btTriangleInfoMap_m_edgeDistanceThreshold_set)
    __swig_setmethods__["m_maxEdgeAngleThreshold"] = _bullet.btTriangleInfoMap_m_maxEdgeAngleThreshold_set
    __swig_getmethods__["m_maxEdgeAngleThreshold"] = _bullet.btTriangleInfoMap_m_maxEdgeAngleThreshold_get
    if _newclass:
        m_maxEdgeAngleThreshold = _swig_property(_bullet.btTriangleInfoMap_m_maxEdgeAngleThreshold_get, _bullet.btTriangleInfoMap_m_maxEdgeAngleThreshold_set)
    __swig_setmethods__["m_zeroAreaThreshold"] = _bullet.btTriangleInfoMap_m_zeroAreaThreshold_set
    __swig_getmethods__["m_zeroAreaThreshold"] = _bullet.btTriangleInfoMap_m_zeroAreaThreshold_get
    if _newclass:
        m_zeroAreaThreshold = _swig_property(_bullet.btTriangleInfoMap_m_zeroAreaThreshold_get, _bullet.btTriangleInfoMap_m_zeroAreaThreshold_set)

    def __init__(self):
        """__init__(btTriangleInfoMap self) -> btTriangleInfoMap"""
        this = _bullet.new_btTriangleInfoMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangleInfoMap
    __del__ = lambda self: None

    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btTriangleInfoMap self) -> int"""
        return _bullet.btTriangleInfoMap_calculateSerializeBufferSize(self)


    def serialize(self, dataBuffer, serializer):
        """serialize(btTriangleInfoMap self, void * dataBuffer, btSerializer serializer) -> char const *"""
        return _bullet.btTriangleInfoMap_serialize(self, dataBuffer, serializer)


    def deSerialize(self, data):
        """deSerialize(btTriangleInfoMap self, btTriangleInfoMapData data)"""
        return _bullet.btTriangleInfoMap_deSerialize(self, data)

btTriangleInfoMap_swigregister = _bullet.btTriangleInfoMap_swigregister
btTriangleInfoMap_swigregister(btTriangleInfoMap)

class btTriangleInfoData(_object):
    """Proxy of C++ btTriangleInfoData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleInfoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleInfoData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_flags"] = _bullet.btTriangleInfoData_m_flags_set
    __swig_getmethods__["m_flags"] = _bullet.btTriangleInfoData_m_flags_get
    if _newclass:
        m_flags = _swig_property(_bullet.btTriangleInfoData_m_flags_get, _bullet.btTriangleInfoData_m_flags_set)
    __swig_setmethods__["m_edgeV0V1Angle"] = _bullet.btTriangleInfoData_m_edgeV0V1Angle_set
    __swig_getmethods__["m_edgeV0V1Angle"] = _bullet.btTriangleInfoData_m_edgeV0V1Angle_get
    if _newclass:
        m_edgeV0V1Angle = _swig_property(_bullet.btTriangleInfoData_m_edgeV0V1Angle_get, _bullet.btTriangleInfoData_m_edgeV0V1Angle_set)
    __swig_setmethods__["m_edgeV1V2Angle"] = _bullet.btTriangleInfoData_m_edgeV1V2Angle_set
    __swig_getmethods__["m_edgeV1V2Angle"] = _bullet.btTriangleInfoData_m_edgeV1V2Angle_get
    if _newclass:
        m_edgeV1V2Angle = _swig_property(_bullet.btTriangleInfoData_m_edgeV1V2Angle_get, _bullet.btTriangleInfoData_m_edgeV1V2Angle_set)
    __swig_setmethods__["m_edgeV2V0Angle"] = _bullet.btTriangleInfoData_m_edgeV2V0Angle_set
    __swig_getmethods__["m_edgeV2V0Angle"] = _bullet.btTriangleInfoData_m_edgeV2V0Angle_get
    if _newclass:
        m_edgeV2V0Angle = _swig_property(_bullet.btTriangleInfoData_m_edgeV2V0Angle_get, _bullet.btTriangleInfoData_m_edgeV2V0Angle_set)

    def __init__(self):
        """__init__(btTriangleInfoData self) -> btTriangleInfoData"""
        this = _bullet.new_btTriangleInfoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangleInfoData
    __del__ = lambda self: None
btTriangleInfoData_swigregister = _bullet.btTriangleInfoData_swigregister
btTriangleInfoData_swigregister(btTriangleInfoData)

class btTriangleInfoMapData(_object):
    """Proxy of C++ btTriangleInfoMapData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleInfoMapData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleInfoMapData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_hashTablePtr"] = _bullet.btTriangleInfoMapData_m_hashTablePtr_set
    __swig_getmethods__["m_hashTablePtr"] = _bullet.btTriangleInfoMapData_m_hashTablePtr_get
    if _newclass:
        m_hashTablePtr = _swig_property(_bullet.btTriangleInfoMapData_m_hashTablePtr_get, _bullet.btTriangleInfoMapData_m_hashTablePtr_set)
    __swig_setmethods__["m_nextPtr"] = _bullet.btTriangleInfoMapData_m_nextPtr_set
    __swig_getmethods__["m_nextPtr"] = _bullet.btTriangleInfoMapData_m_nextPtr_get
    if _newclass:
        m_nextPtr = _swig_property(_bullet.btTriangleInfoMapData_m_nextPtr_get, _bullet.btTriangleInfoMapData_m_nextPtr_set)
    __swig_setmethods__["m_valueArrayPtr"] = _bullet.btTriangleInfoMapData_m_valueArrayPtr_set
    __swig_getmethods__["m_valueArrayPtr"] = _bullet.btTriangleInfoMapData_m_valueArrayPtr_get
    if _newclass:
        m_valueArrayPtr = _swig_property(_bullet.btTriangleInfoMapData_m_valueArrayPtr_get, _bullet.btTriangleInfoMapData_m_valueArrayPtr_set)
    __swig_setmethods__["m_keyArrayPtr"] = _bullet.btTriangleInfoMapData_m_keyArrayPtr_set
    __swig_getmethods__["m_keyArrayPtr"] = _bullet.btTriangleInfoMapData_m_keyArrayPtr_get
    if _newclass:
        m_keyArrayPtr = _swig_property(_bullet.btTriangleInfoMapData_m_keyArrayPtr_get, _bullet.btTriangleInfoMapData_m_keyArrayPtr_set)
    __swig_setmethods__["m_convexEpsilon"] = _bullet.btTriangleInfoMapData_m_convexEpsilon_set
    __swig_getmethods__["m_convexEpsilon"] = _bullet.btTriangleInfoMapData_m_convexEpsilon_get
    if _newclass:
        m_convexEpsilon = _swig_property(_bullet.btTriangleInfoMapData_m_convexEpsilon_get, _bullet.btTriangleInfoMapData_m_convexEpsilon_set)
    __swig_setmethods__["m_planarEpsilon"] = _bullet.btTriangleInfoMapData_m_planarEpsilon_set
    __swig_getmethods__["m_planarEpsilon"] = _bullet.btTriangleInfoMapData_m_planarEpsilon_get
    if _newclass:
        m_planarEpsilon = _swig_property(_bullet.btTriangleInfoMapData_m_planarEpsilon_get, _bullet.btTriangleInfoMapData_m_planarEpsilon_set)
    __swig_setmethods__["m_equalVertexThreshold"] = _bullet.btTriangleInfoMapData_m_equalVertexThreshold_set
    __swig_getmethods__["m_equalVertexThreshold"] = _bullet.btTriangleInfoMapData_m_equalVertexThreshold_get
    if _newclass:
        m_equalVertexThreshold = _swig_property(_bullet.btTriangleInfoMapData_m_equalVertexThreshold_get, _bullet.btTriangleInfoMapData_m_equalVertexThreshold_set)
    __swig_setmethods__["m_edgeDistanceThreshold"] = _bullet.btTriangleInfoMapData_m_edgeDistanceThreshold_set
    __swig_getmethods__["m_edgeDistanceThreshold"] = _bullet.btTriangleInfoMapData_m_edgeDistanceThreshold_get
    if _newclass:
        m_edgeDistanceThreshold = _swig_property(_bullet.btTriangleInfoMapData_m_edgeDistanceThreshold_get, _bullet.btTriangleInfoMapData_m_edgeDistanceThreshold_set)
    __swig_setmethods__["m_zeroAreaThreshold"] = _bullet.btTriangleInfoMapData_m_zeroAreaThreshold_set
    __swig_getmethods__["m_zeroAreaThreshold"] = _bullet.btTriangleInfoMapData_m_zeroAreaThreshold_get
    if _newclass:
        m_zeroAreaThreshold = _swig_property(_bullet.btTriangleInfoMapData_m_zeroAreaThreshold_get, _bullet.btTriangleInfoMapData_m_zeroAreaThreshold_set)
    __swig_setmethods__["m_nextSize"] = _bullet.btTriangleInfoMapData_m_nextSize_set
    __swig_getmethods__["m_nextSize"] = _bullet.btTriangleInfoMapData_m_nextSize_get
    if _newclass:
        m_nextSize = _swig_property(_bullet.btTriangleInfoMapData_m_nextSize_get, _bullet.btTriangleInfoMapData_m_nextSize_set)
    __swig_setmethods__["m_hashTableSize"] = _bullet.btTriangleInfoMapData_m_hashTableSize_set
    __swig_getmethods__["m_hashTableSize"] = _bullet.btTriangleInfoMapData_m_hashTableSize_get
    if _newclass:
        m_hashTableSize = _swig_property(_bullet.btTriangleInfoMapData_m_hashTableSize_get, _bullet.btTriangleInfoMapData_m_hashTableSize_set)
    __swig_setmethods__["m_numValues"] = _bullet.btTriangleInfoMapData_m_numValues_set
    __swig_getmethods__["m_numValues"] = _bullet.btTriangleInfoMapData_m_numValues_get
    if _newclass:
        m_numValues = _swig_property(_bullet.btTriangleInfoMapData_m_numValues_get, _bullet.btTriangleInfoMapData_m_numValues_set)
    __swig_setmethods__["m_numKeys"] = _bullet.btTriangleInfoMapData_m_numKeys_set
    __swig_getmethods__["m_numKeys"] = _bullet.btTriangleInfoMapData_m_numKeys_get
    if _newclass:
        m_numKeys = _swig_property(_bullet.btTriangleInfoMapData_m_numKeys_get, _bullet.btTriangleInfoMapData_m_numKeys_set)
    __swig_setmethods__["m_padding"] = _bullet.btTriangleInfoMapData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btTriangleInfoMapData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btTriangleInfoMapData_m_padding_get, _bullet.btTriangleInfoMapData_m_padding_set)

    def __init__(self):
        """__init__(btTriangleInfoMapData self) -> btTriangleInfoMapData"""
        this = _bullet.new_btTriangleInfoMapData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangleInfoMapData
    __del__ = lambda self: None
btTriangleInfoMapData_swigregister = _bullet.btTriangleInfoMapData_swigregister
btTriangleInfoMapData_swigregister(btTriangleInfoMapData)

BT_TRIANGLE_CONVEX_BACKFACE_MODE = _bullet.BT_TRIANGLE_CONVEX_BACKFACE_MODE
BT_TRIANGLE_CONCAVE_DOUBLE_SIDED = _bullet.BT_TRIANGLE_CONCAVE_DOUBLE_SIDED
BT_TRIANGLE_CONVEX_DOUBLE_SIDED = _bullet.BT_TRIANGLE_CONVEX_DOUBLE_SIDED

def btGenerateInternalEdgeInfo(trimeshShape, triangleInfoMap):
    """btGenerateInternalEdgeInfo(btBvhTriangleMeshShape trimeshShape, btTriangleInfoMap triangleInfoMap)"""
    return _bullet.btGenerateInternalEdgeInfo(trimeshShape, triangleInfoMap)

def btAdjustInternalEdgeContacts(cp, trimeshColObj0Wrap, otherColObj1Wrap, partId0, index0, normalAdjustFlags=0):
    """
    btAdjustInternalEdgeContacts(btManifoldPoint & cp, btCollisionObjectWrapper const * trimeshColObj0Wrap, btCollisionObjectWrapper const * otherColObj1Wrap, int partId0, int index0, int normalAdjustFlags=0)
    btAdjustInternalEdgeContacts(btManifoldPoint & cp, btCollisionObjectWrapper const * trimeshColObj0Wrap, btCollisionObjectWrapper const * otherColObj1Wrap, int partId0, int index0)
    """
    return _bullet.btAdjustInternalEdgeContacts(cp, trimeshColObj0Wrap, otherColObj1Wrap, partId0, index0, normalAdjustFlags)
USE_PATH_COMPRESSION = _bullet.USE_PATH_COMPRESSION
STATIC_SIMULATION_ISLAND_OPTIMIZATION = _bullet.STATIC_SIMULATION_ISLAND_OPTIMIZATION
class btElement(_object):
    """Proxy of C++ btElement class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btElement, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_id"] = _bullet.btElement_m_id_set
    __swig_getmethods__["m_id"] = _bullet.btElement_m_id_get
    if _newclass:
        m_id = _swig_property(_bullet.btElement_m_id_get, _bullet.btElement_m_id_set)
    __swig_setmethods__["m_sz"] = _bullet.btElement_m_sz_set
    __swig_getmethods__["m_sz"] = _bullet.btElement_m_sz_get
    if _newclass:
        m_sz = _swig_property(_bullet.btElement_m_sz_get, _bullet.btElement_m_sz_set)

    def __init__(self):
        """__init__(btElement self) -> btElement"""
        this = _bullet.new_btElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btElement
    __del__ = lambda self: None
btElement_swigregister = _bullet.btElement_swigregister
btElement_swigregister(btElement)

class btUnionFind(_object):
    """Proxy of C++ btUnionFind class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btUnionFind, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btUnionFind, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btUnionFind self) -> btUnionFind"""
        this = _bullet.new_btUnionFind()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btUnionFind
    __del__ = lambda self: None

    def sortIslands(self):
        """sortIslands(btUnionFind self)"""
        return _bullet.btUnionFind_sortIslands(self)


    def reset(self, N):
        """reset(btUnionFind self, int N)"""
        return _bullet.btUnionFind_reset(self, N)


    def getNumElements(self):
        """getNumElements(btUnionFind self) -> int"""
        return _bullet.btUnionFind_getNumElements(self)


    def isRoot(self, x):
        """isRoot(btUnionFind self, int x) -> bool"""
        return _bullet.btUnionFind_isRoot(self, x)


    def getElement(self, *args):
        """
        getElement(btUnionFind self, int index) -> btElement
        getElement(btUnionFind self, int index) -> btElement
        """
        return _bullet.btUnionFind_getElement(self, *args)


    def allocate(self, N):
        """allocate(btUnionFind self, int N)"""
        return _bullet.btUnionFind_allocate(self, N)


    def Free(self):
        """Free(btUnionFind self)"""
        return _bullet.btUnionFind_Free(self)


    def unite(self, p, q):
        """unite(btUnionFind self, int p, int q)"""
        return _bullet.btUnionFind_unite(self, p, q)


    def find(self, *args):
        """
        find(btUnionFind self, int p, int q) -> int
        find(btUnionFind self, int x) -> int
        """
        return _bullet.btUnionFind_find(self, *args)

btUnionFind_swigregister = _bullet.btUnionFind_swigregister
btUnionFind_swigregister(btUnionFind)

class btSimulationIslandManager(_object):
    """Proxy of C++ btSimulationIslandManager class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSimulationIslandManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSimulationIslandManager, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btSimulationIslandManager self) -> btSimulationIslandManager"""
        this = _bullet.new_btSimulationIslandManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSimulationIslandManager
    __del__ = lambda self: None

    def initUnionFind(self, n):
        """initUnionFind(btSimulationIslandManager self, int n)"""
        return _bullet.btSimulationIslandManager_initUnionFind(self, n)


    def getUnionFind(self):
        """getUnionFind(btSimulationIslandManager self) -> btUnionFind"""
        return _bullet.btSimulationIslandManager_getUnionFind(self)


    def updateActivationState(self, colWorld, dispatcher):
        """updateActivationState(btSimulationIslandManager self, btCollisionWorld colWorld, btDispatcher dispatcher)"""
        return _bullet.btSimulationIslandManager_updateActivationState(self, colWorld, dispatcher)


    def storeIslandActivationState(self, world):
        """storeIslandActivationState(btSimulationIslandManager self, btCollisionWorld world)"""
        return _bullet.btSimulationIslandManager_storeIslandActivationState(self, world)


    def findUnions(self, dispatcher, colWorld):
        """findUnions(btSimulationIslandManager self, btDispatcher dispatcher, btCollisionWorld colWorld)"""
        return _bullet.btSimulationIslandManager_findUnions(self, dispatcher, colWorld)


    def buildAndProcessIslands(self, dispatcher, collisionWorld, callback):
        """buildAndProcessIslands(btSimulationIslandManager self, btDispatcher dispatcher, btCollisionWorld collisionWorld, btSimulationIslandManager::IslandCallback * callback)"""
        return _bullet.btSimulationIslandManager_buildAndProcessIslands(self, dispatcher, collisionWorld, callback)


    def buildIslands(self, dispatcher, colWorld):
        """buildIslands(btSimulationIslandManager self, btDispatcher dispatcher, btCollisionWorld colWorld)"""
        return _bullet.btSimulationIslandManager_buildIslands(self, dispatcher, colWorld)


    def getSplitIslands(self):
        """getSplitIslands(btSimulationIslandManager self) -> bool"""
        return _bullet.btSimulationIslandManager_getSplitIslands(self)


    def setSplitIslands(self, doSplitIslands):
        """setSplitIslands(btSimulationIslandManager self, bool doSplitIslands)"""
        return _bullet.btSimulationIslandManager_setSplitIslands(self, doSplitIslands)

btSimulationIslandManager_swigregister = _bullet.btSimulationIslandManager_swigregister
btSimulationIslandManager_swigregister(btSimulationIslandManager)

class btSphereBoxCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btSphereBoxCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSphereBoxCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSphereBoxCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, mf, ci, body0Wrap, body1Wrap, isSwapped):
        """__init__(btSphereBoxCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btSphereBoxCollisionAlgorithm"""
        this = _bullet.new_btSphereBoxCollisionAlgorithm(mf, ci, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSphereBoxCollisionAlgorithm
    __del__ = lambda self: None

    def getSphereDistance(self, boxObjWrap, v3PointOnBox, normal, penetrationDepth, v3SphereCenter, fRadius, maxContactDistance):
        """getSphereDistance(btSphereBoxCollisionAlgorithm self, btCollisionObjectWrapper const * boxObjWrap, btVector3 & v3PointOnBox, btVector3 & normal, btScalar & penetrationDepth, btVector3 const & v3SphereCenter, btScalar fRadius, btScalar maxContactDistance) -> bool"""
        return _bullet.btSphereBoxCollisionAlgorithm_getSphereDistance(self, boxObjWrap, v3PointOnBox, normal, penetrationDepth, v3SphereCenter, fRadius, maxContactDistance)


    def getSpherePenetration(self, boxHalfExtent, sphereRelPos, closestPoint, normal):
        """getSpherePenetration(btSphereBoxCollisionAlgorithm self, btVector3 const & boxHalfExtent, btVector3 const & sphereRelPos, btVector3 & closestPoint, btVector3 & normal) -> btScalar"""
        return _bullet.btSphereBoxCollisionAlgorithm_getSpherePenetration(self, boxHalfExtent, sphereRelPos, closestPoint, normal)

btSphereBoxCollisionAlgorithm_swigregister = _bullet.btSphereBoxCollisionAlgorithm_swigregister
btSphereBoxCollisionAlgorithm_swigregister(btSphereBoxCollisionAlgorithm)

class btSphereSphereCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btSphereSphereCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSphereSphereCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSphereSphereCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btSphereSphereCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * col0Wrap, btCollisionObjectWrapper const * col1Wrap) -> btSphereSphereCollisionAlgorithm
        __init__(btSphereSphereCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci) -> btSphereSphereCollisionAlgorithm
        """
        this = _bullet.new_btSphereSphereCollisionAlgorithm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSphereSphereCollisionAlgorithm
    __del__ = lambda self: None
btSphereSphereCollisionAlgorithm_swigregister = _bullet.btSphereSphereCollisionAlgorithm_swigregister
btSphereSphereCollisionAlgorithm_swigregister(btSphereSphereCollisionAlgorithm)

class btSphereTriangleCollisionAlgorithm(btActivatingCollisionAlgorithm):
    """Proxy of C++ btSphereTriangleCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSphereTriangleCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btActivatingCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSphereTriangleCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btSphereTriangleCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool swapped) -> btSphereTriangleCollisionAlgorithm
        __init__(btSphereTriangleCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci) -> btSphereTriangleCollisionAlgorithm
        """
        this = _bullet.new_btSphereTriangleCollisionAlgorithm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSphereTriangleCollisionAlgorithm
    __del__ = lambda self: None
btSphereTriangleCollisionAlgorithm_swigregister = _bullet.btSphereTriangleCollisionAlgorithm_swigregister
btSphereTriangleCollisionAlgorithm_swigregister(btSphereTriangleCollisionAlgorithm)

class SphereTriangleDetector(btDiscreteCollisionDetectorInterface):
    """Proxy of C++ SphereTriangleDetector class."""

    __swig_setmethods__ = {}
    for _s in [btDiscreteCollisionDetectorInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereTriangleDetector, name, value)
    __swig_getmethods__ = {}
    for _s in [btDiscreteCollisionDetectorInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SphereTriangleDetector, name)
    __repr__ = _swig_repr

    def getClosestPoints(self, input, output, debugDraw, swapResults=False):
        """
        getClosestPoints(SphereTriangleDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw, bool swapResults=False)
        getClosestPoints(SphereTriangleDetector self, btDiscreteCollisionDetectorInterface::ClosestPointInput const & input, btDiscreteCollisionDetectorInterface::Result & output, btIDebugDraw debugDraw)
        """
        return _bullet.SphereTriangleDetector_getClosestPoints(self, input, output, debugDraw, swapResults)


    def __init__(self, sphere, triangle, contactBreakingThreshold):
        """__init__(SphereTriangleDetector self, btSphereShape sphere, btTriangleShape triangle, btScalar contactBreakingThreshold) -> SphereTriangleDetector"""
        this = _bullet.new_SphereTriangleDetector(sphere, triangle, contactBreakingThreshold)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SphereTriangleDetector
    __del__ = lambda self: None

    def collide(self, sphereCenter, point, resultNormal, depth, timeOfImpact, contactBreakingThreshold):
        """collide(SphereTriangleDetector self, btVector3 const & sphereCenter, btVector3 & point, btVector3 & resultNormal, btScalar & depth, btScalar & timeOfImpact, btScalar contactBreakingThreshold) -> bool"""
        return _bullet.SphereTriangleDetector_collide(self, sphereCenter, point, resultNormal, depth, timeOfImpact, contactBreakingThreshold)

SphereTriangleDetector_swigregister = _bullet.SphereTriangleDetector_swigregister
SphereTriangleDetector_swigregister(SphereTriangleDetector)

class btCollisionShape(_object):
    """Proxy of C++ btCollisionShape class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btCollisionShape
    __del__ = lambda self: None

    def getAabb(self, t, aabbMin, aabbMax):
        """getAabb(btCollisionShape self, btTransform const & t, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btCollisionShape_getAabb(self, t, aabbMin, aabbMax)


    def getBoundingSphere(self, center, radius):
        """getBoundingSphere(btCollisionShape self, btVector3 & center, btScalar & radius)"""
        return _bullet.btCollisionShape_getBoundingSphere(self, center, radius)


    def getAngularMotionDisc(self):
        """getAngularMotionDisc(btCollisionShape self) -> btScalar"""
        return _bullet.btCollisionShape_getAngularMotionDisc(self)


    def getContactBreakingThreshold(self, defaultContactThresholdFactor):
        """getContactBreakingThreshold(btCollisionShape self, btScalar defaultContactThresholdFactor) -> btScalar"""
        return _bullet.btCollisionShape_getContactBreakingThreshold(self, defaultContactThresholdFactor)


    def calculateTemporalAabb(self, curTrans, linvel, angvel, timeStep, temporalAabbMin, temporalAabbMax):
        """calculateTemporalAabb(btCollisionShape self, btTransform const & curTrans, btVector3 const & linvel, btVector3 const & angvel, btScalar timeStep, btVector3 & temporalAabbMin, btVector3 & temporalAabbMax)"""
        return _bullet.btCollisionShape_calculateTemporalAabb(self, curTrans, linvel, angvel, timeStep, temporalAabbMin, temporalAabbMax)


    def isPolyhedral(self):
        """isPolyhedral(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isPolyhedral(self)


    def isConvex2d(self):
        """isConvex2d(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isConvex2d(self)


    def isConvex(self):
        """isConvex(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isConvex(self)


    def isNonMoving(self):
        """isNonMoving(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isNonMoving(self)


    def isConcave(self):
        """isConcave(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isConcave(self)


    def isCompound(self):
        """isCompound(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isCompound(self)


    def isSoftBody(self):
        """isSoftBody(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isSoftBody(self)


    def isInfinite(self):
        """isInfinite(btCollisionShape self) -> bool"""
        return _bullet.btCollisionShape_isInfinite(self)


    def setLocalScaling(self, scaling):
        """setLocalScaling(btCollisionShape self, btVector3 const & scaling)"""
        return _bullet.btCollisionShape_setLocalScaling(self, scaling)


    def getLocalScaling(self):
        """getLocalScaling(btCollisionShape self) -> btVector3 const &"""
        return _bullet.btCollisionShape_getLocalScaling(self)


    def calculateLocalInertia(self, mass, inertia):
        """calculateLocalInertia(btCollisionShape self, btScalar mass, btVector3 & inertia)"""
        return _bullet.btCollisionShape_calculateLocalInertia(self, mass, inertia)


    def getName(self):
        """getName(btCollisionShape self) -> char const *"""
        return _bullet.btCollisionShape_getName(self)


    def getShapeType(self):
        """getShapeType(btCollisionShape self) -> int"""
        return _bullet.btCollisionShape_getShapeType(self)


    def getAnisotropicRollingFrictionDirection(self):
        """getAnisotropicRollingFrictionDirection(btCollisionShape self) -> btVector3"""
        return _bullet.btCollisionShape_getAnisotropicRollingFrictionDirection(self)


    def setMargin(self, margin):
        """setMargin(btCollisionShape self, btScalar margin)"""
        return _bullet.btCollisionShape_setMargin(self, margin)


    def getMargin(self):
        """getMargin(btCollisionShape self) -> btScalar"""
        return _bullet.btCollisionShape_getMargin(self)


    def setUserPointer(self, userPtr):
        """setUserPointer(btCollisionShape self, void * userPtr)"""
        return _bullet.btCollisionShape_setUserPointer(self, userPtr)


    def getUserPointer(self):
        """getUserPointer(btCollisionShape self) -> void *"""
        return _bullet.btCollisionShape_getUserPointer(self)


    def setUserIndex(self, index):
        """setUserIndex(btCollisionShape self, int index)"""
        return _bullet.btCollisionShape_setUserIndex(self, index)


    def getUserIndex(self):
        """getUserIndex(btCollisionShape self) -> int"""
        return _bullet.btCollisionShape_getUserIndex(self)


    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btCollisionShape self) -> int"""
        return _bullet.btCollisionShape_calculateSerializeBufferSize(self)


    def serialize(self, dataBuffer, serializer):
        """serialize(btCollisionShape self, void * dataBuffer, btSerializer serializer) -> char const *"""
        return _bullet.btCollisionShape_serialize(self, dataBuffer, serializer)


    def serializeSingleShape(self, serializer):
        """serializeSingleShape(btCollisionShape self, btSerializer serializer)"""
        return _bullet.btCollisionShape_serializeSingleShape(self, serializer)

btCollisionShape_swigregister = _bullet.btCollisionShape_swigregister
btCollisionShape_swigregister(btCollisionShape)

class btCollisionShapeData(_object):
    """Proxy of C++ btCollisionShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCollisionShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCollisionShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_name"] = _bullet.btCollisionShapeData_m_name_set
    __swig_getmethods__["m_name"] = _bullet.btCollisionShapeData_m_name_get
    if _newclass:
        m_name = _swig_property(_bullet.btCollisionShapeData_m_name_get, _bullet.btCollisionShapeData_m_name_set)
    __swig_setmethods__["m_shapeType"] = _bullet.btCollisionShapeData_m_shapeType_set
    __swig_getmethods__["m_shapeType"] = _bullet.btCollisionShapeData_m_shapeType_get
    if _newclass:
        m_shapeType = _swig_property(_bullet.btCollisionShapeData_m_shapeType_get, _bullet.btCollisionShapeData_m_shapeType_set)
    __swig_setmethods__["m_padding"] = _bullet.btCollisionShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btCollisionShapeData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btCollisionShapeData_m_padding_get, _bullet.btCollisionShapeData_m_padding_set)

    def __init__(self):
        """__init__(btCollisionShapeData self) -> btCollisionShapeData"""
        this = _bullet.new_btCollisionShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCollisionShapeData
    __del__ = lambda self: None
btCollisionShapeData_swigregister = _bullet.btCollisionShapeData_swigregister
btCollisionShapeData_swigregister(btCollisionShapeData)

MAX_PREFERRED_PENETRATION_DIRECTIONS = _bullet.MAX_PREFERRED_PENETRATION_DIRECTIONS
class btConvexShape(btCollisionShape):
    """Proxy of C++ btConvexShape class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btConvexShape
    __del__ = lambda self: None

    def localGetSupportingVertex(self, vec):
        """localGetSupportingVertex(btConvexShape self, btVector3 const & vec) -> btVector3"""
        return _bullet.btConvexShape_localGetSupportingVertex(self, vec)


    def localGetSupportingVertexWithoutMargin(self, vec):
        """localGetSupportingVertexWithoutMargin(btConvexShape self, btVector3 const & vec) -> btVector3"""
        return _bullet.btConvexShape_localGetSupportingVertexWithoutMargin(self, vec)


    def localGetSupportVertexWithoutMarginNonVirtual(self, vec):
        """localGetSupportVertexWithoutMarginNonVirtual(btConvexShape self, btVector3 const & vec) -> btVector3"""
        return _bullet.btConvexShape_localGetSupportVertexWithoutMarginNonVirtual(self, vec)


    def localGetSupportVertexNonVirtual(self, vec):
        """localGetSupportVertexNonVirtual(btConvexShape self, btVector3 const & vec) -> btVector3"""
        return _bullet.btConvexShape_localGetSupportVertexNonVirtual(self, vec)


    def getMarginNonVirtual(self):
        """getMarginNonVirtual(btConvexShape self) -> btScalar"""
        return _bullet.btConvexShape_getMarginNonVirtual(self)


    def getAabbNonVirtual(self, t, aabbMin, aabbMax):
        """getAabbNonVirtual(btConvexShape self, btTransform const & t, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btConvexShape_getAabbNonVirtual(self, t, aabbMin, aabbMax)


    def project(self, trans, dir, minProj, maxProj, witnesPtMin, witnesPtMax):
        """project(btConvexShape self, btTransform const & trans, btVector3 const & dir, btScalar & minProj, btScalar & maxProj, btVector3 & witnesPtMin, btVector3 & witnesPtMax)"""
        return _bullet.btConvexShape_project(self, trans, dir, minProj, maxProj, witnesPtMin, witnesPtMax)


    def batchedUnitVectorGetSupportingVertexWithoutMargin(self, vectors, supportVerticesOut, numVectors):
        """batchedUnitVectorGetSupportingVertexWithoutMargin(btConvexShape self, btVector3 const * vectors, btVector3 * supportVerticesOut, int numVectors)"""
        return _bullet.btConvexShape_batchedUnitVectorGetSupportingVertexWithoutMargin(self, vectors, supportVerticesOut, numVectors)


    def getAabbSlow(self, t, aabbMin, aabbMax):
        """getAabbSlow(btConvexShape self, btTransform const & t, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btConvexShape_getAabbSlow(self, t, aabbMin, aabbMax)


    def getNumPreferredPenetrationDirections(self):
        """getNumPreferredPenetrationDirections(btConvexShape self) -> int"""
        return _bullet.btConvexShape_getNumPreferredPenetrationDirections(self)


    def getPreferredPenetrationDirection(self, index, penetrationVector):
        """getPreferredPenetrationDirection(btConvexShape self, int index, btVector3 & penetrationVector)"""
        return _bullet.btConvexShape_getPreferredPenetrationDirection(self, index, penetrationVector)

btConvexShape_swigregister = _bullet.btConvexShape_swigregister
btConvexShape_swigregister(btConvexShape)

class btConvexInternalShape(btConvexShape):
    """Proxy of C++ btConvexInternalShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexInternalShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexInternalShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btConvexInternalShape
    __del__ = lambda self: None

    def getImplicitShapeDimensions(self):
        """getImplicitShapeDimensions(btConvexInternalShape self) -> btVector3 const &"""
        return _bullet.btConvexInternalShape_getImplicitShapeDimensions(self)


    def setImplicitShapeDimensions(self, dimensions):
        """setImplicitShapeDimensions(btConvexInternalShape self, btVector3 const & dimensions)"""
        return _bullet.btConvexInternalShape_setImplicitShapeDimensions(self, dimensions)


    def setSafeMargin(self, *args):
        """
        setSafeMargin(btConvexInternalShape self, btScalar minDimension, btScalar defaultMarginMultiplier=0.1)
        setSafeMargin(btConvexInternalShape self, btScalar minDimension)
        setSafeMargin(btConvexInternalShape self, btVector3 const & halfExtents, btScalar defaultMarginMultiplier=0.1)
        setSafeMargin(btConvexInternalShape self, btVector3 const & halfExtents)
        """
        return _bullet.btConvexInternalShape_setSafeMargin(self, *args)


    def getLocalScalingNV(self):
        """getLocalScalingNV(btConvexInternalShape self) -> btVector3 const &"""
        return _bullet.btConvexInternalShape_getLocalScalingNV(self)


    def getMarginNV(self):
        """getMarginNV(btConvexInternalShape self) -> btScalar"""
        return _bullet.btConvexInternalShape_getMarginNV(self)

btConvexInternalShape_swigregister = _bullet.btConvexInternalShape_swigregister
btConvexInternalShape_swigregister(btConvexInternalShape)

class btConvexInternalShapeData(_object):
    """Proxy of C++ btConvexInternalShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexInternalShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexInternalShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionShapeData"] = _bullet.btConvexInternalShapeData_m_collisionShapeData_set
    __swig_getmethods__["m_collisionShapeData"] = _bullet.btConvexInternalShapeData_m_collisionShapeData_get
    if _newclass:
        m_collisionShapeData = _swig_property(_bullet.btConvexInternalShapeData_m_collisionShapeData_get, _bullet.btConvexInternalShapeData_m_collisionShapeData_set)
    __swig_setmethods__["m_localScaling"] = _bullet.btConvexInternalShapeData_m_localScaling_set
    __swig_getmethods__["m_localScaling"] = _bullet.btConvexInternalShapeData_m_localScaling_get
    if _newclass:
        m_localScaling = _swig_property(_bullet.btConvexInternalShapeData_m_localScaling_get, _bullet.btConvexInternalShapeData_m_localScaling_set)
    __swig_setmethods__["m_implicitShapeDimensions"] = _bullet.btConvexInternalShapeData_m_implicitShapeDimensions_set
    __swig_getmethods__["m_implicitShapeDimensions"] = _bullet.btConvexInternalShapeData_m_implicitShapeDimensions_get
    if _newclass:
        m_implicitShapeDimensions = _swig_property(_bullet.btConvexInternalShapeData_m_implicitShapeDimensions_get, _bullet.btConvexInternalShapeData_m_implicitShapeDimensions_set)
    __swig_setmethods__["m_collisionMargin"] = _bullet.btConvexInternalShapeData_m_collisionMargin_set
    __swig_getmethods__["m_collisionMargin"] = _bullet.btConvexInternalShapeData_m_collisionMargin_get
    if _newclass:
        m_collisionMargin = _swig_property(_bullet.btConvexInternalShapeData_m_collisionMargin_get, _bullet.btConvexInternalShapeData_m_collisionMargin_set)
    __swig_setmethods__["m_padding"] = _bullet.btConvexInternalShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btConvexInternalShapeData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btConvexInternalShapeData_m_padding_get, _bullet.btConvexInternalShapeData_m_padding_set)

    def __init__(self):
        """__init__(btConvexInternalShapeData self) -> btConvexInternalShapeData"""
        this = _bullet.new_btConvexInternalShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexInternalShapeData
    __del__ = lambda self: None
btConvexInternalShapeData_swigregister = _bullet.btConvexInternalShapeData_swigregister
btConvexInternalShapeData_swigregister(btConvexInternalShapeData)

class btConvexInternalAabbCachingShape(btConvexInternalShape):
    """Proxy of C++ btConvexInternalAabbCachingShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexInternalAabbCachingShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexInternalAabbCachingShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def recalcLocalAabb(self):
        """recalcLocalAabb(btConvexInternalAabbCachingShape self)"""
        return _bullet.btConvexInternalAabbCachingShape_recalcLocalAabb(self)

    __swig_destroy__ = _bullet.delete_btConvexInternalAabbCachingShape
    __del__ = lambda self: None
btConvexInternalAabbCachingShape_swigregister = _bullet.btConvexInternalAabbCachingShape_swigregister
btConvexInternalAabbCachingShape_swigregister(btConvexInternalAabbCachingShape)

class btPolyhedralConvexShape(btConvexInternalShape):
    """Proxy of C++ btPolyhedralConvexShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPolyhedralConvexShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPolyhedralConvexShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btPolyhedralConvexShape
    __del__ = lambda self: None

    def initializePolyhedralFeatures(self, shiftVerticesByMargin=0):
        """
        initializePolyhedralFeatures(btPolyhedralConvexShape self, int shiftVerticesByMargin=0) -> bool
        initializePolyhedralFeatures(btPolyhedralConvexShape self) -> bool
        """
        return _bullet.btPolyhedralConvexShape_initializePolyhedralFeatures(self, shiftVerticesByMargin)


    def getConvexPolyhedron(self):
        """getConvexPolyhedron(btPolyhedralConvexShape self) -> btConvexPolyhedron"""
        return _bullet.btPolyhedralConvexShape_getConvexPolyhedron(self)


    def getNumVertices(self):
        """getNumVertices(btPolyhedralConvexShape self) -> int"""
        return _bullet.btPolyhedralConvexShape_getNumVertices(self)


    def getNumEdges(self):
        """getNumEdges(btPolyhedralConvexShape self) -> int"""
        return _bullet.btPolyhedralConvexShape_getNumEdges(self)


    def getEdge(self, i, pa, pb):
        """getEdge(btPolyhedralConvexShape self, int i, btVector3 & pa, btVector3 & pb)"""
        return _bullet.btPolyhedralConvexShape_getEdge(self, i, pa, pb)


    def getVertex(self, i, vtx):
        """getVertex(btPolyhedralConvexShape self, int i, btVector3 & vtx)"""
        return _bullet.btPolyhedralConvexShape_getVertex(self, i, vtx)


    def getNumPlanes(self):
        """getNumPlanes(btPolyhedralConvexShape self) -> int"""
        return _bullet.btPolyhedralConvexShape_getNumPlanes(self)


    def getPlane(self, planeNormal, planeSupport, i):
        """getPlane(btPolyhedralConvexShape self, btVector3 & planeNormal, btVector3 & planeSupport, int i)"""
        return _bullet.btPolyhedralConvexShape_getPlane(self, planeNormal, planeSupport, i)

btPolyhedralConvexShape_swigregister = _bullet.btPolyhedralConvexShape_swigregister
btPolyhedralConvexShape_swigregister(btPolyhedralConvexShape)

class btPolyhedralConvexAabbCachingShape(btPolyhedralConvexShape):
    """Proxy of C++ btPolyhedralConvexAabbCachingShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPolyhedralConvexAabbCachingShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPolyhedralConvexAabbCachingShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNonvirtualAabb(self, trans, aabbMin, aabbMax, margin):
        """getNonvirtualAabb(btPolyhedralConvexAabbCachingShape self, btTransform const & trans, btVector3 & aabbMin, btVector3 & aabbMax, btScalar margin)"""
        return _bullet.btPolyhedralConvexAabbCachingShape_getNonvirtualAabb(self, trans, aabbMin, aabbMax, margin)


    def recalcLocalAabb(self):
        """recalcLocalAabb(btPolyhedralConvexAabbCachingShape self)"""
        return _bullet.btPolyhedralConvexAabbCachingShape_recalcLocalAabb(self)

    __swig_destroy__ = _bullet.delete_btPolyhedralConvexAabbCachingShape
    __del__ = lambda self: None
btPolyhedralConvexAabbCachingShape_swigregister = _bullet.btPolyhedralConvexAabbCachingShape_swigregister
btPolyhedralConvexAabbCachingShape_swigregister(btPolyhedralConvexAabbCachingShape)

class btBox2dShape(btPolyhedralConvexShape):
    """Proxy of C++ btBox2dShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBox2dShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBox2dShape, name)
    __repr__ = _swig_repr

    def getHalfExtentsWithMargin(self):
        """getHalfExtentsWithMargin(btBox2dShape self) -> btVector3"""
        return _bullet.btBox2dShape_getHalfExtentsWithMargin(self)


    def getHalfExtentsWithoutMargin(self):
        """getHalfExtentsWithoutMargin(btBox2dShape self) -> btVector3 const &"""
        return _bullet.btBox2dShape_getHalfExtentsWithoutMargin(self)


    def __init__(self, boxHalfExtents):
        """__init__(btBox2dShape self, btVector3 const & boxHalfExtents) -> btBox2dShape"""
        this = _bullet.new_btBox2dShape(boxHalfExtents)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getVertexCount(self):
        """getVertexCount(btBox2dShape self) -> int"""
        return _bullet.btBox2dShape_getVertexCount(self)


    def getVertices(self):
        """getVertices(btBox2dShape self) -> btVector3 const *"""
        return _bullet.btBox2dShape_getVertices(self)


    def getNormals(self):
        """getNormals(btBox2dShape self) -> btVector3 const *"""
        return _bullet.btBox2dShape_getNormals(self)


    def getCentroid(self):
        """getCentroid(btBox2dShape self) -> btVector3 const &"""
        return _bullet.btBox2dShape_getCentroid(self)


    def getPlaneEquation(self, plane, i):
        """getPlaneEquation(btBox2dShape self, btVector4 & plane, int i)"""
        return _bullet.btBox2dShape_getPlaneEquation(self, plane, i)

    __swig_destroy__ = _bullet.delete_btBox2dShape
    __del__ = lambda self: None
btBox2dShape_swigregister = _bullet.btBox2dShape_swigregister
btBox2dShape_swigregister(btBox2dShape)

class btBoxShape(btPolyhedralConvexShape):
    """Proxy of C++ btBoxShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBoxShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBoxShape, name)
    __repr__ = _swig_repr

    def getHalfExtentsWithMargin(self):
        """getHalfExtentsWithMargin(btBoxShape self) -> btVector3"""
        return _bullet.btBoxShape_getHalfExtentsWithMargin(self)


    def getHalfExtentsWithoutMargin(self):
        """getHalfExtentsWithoutMargin(btBoxShape self) -> btVector3 const &"""
        return _bullet.btBoxShape_getHalfExtentsWithoutMargin(self)


    def __init__(self, boxHalfExtents):
        """__init__(btBoxShape self, btVector3 const & boxHalfExtents) -> btBoxShape"""
        this = _bullet.new_btBoxShape(boxHalfExtents)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPlaneEquation(self, plane, i):
        """getPlaneEquation(btBoxShape self, btVector4 & plane, int i)"""
        return _bullet.btBoxShape_getPlaneEquation(self, plane, i)

    __swig_destroy__ = _bullet.delete_btBoxShape
    __del__ = lambda self: None
btBoxShape_swigregister = _bullet.btBoxShape_swigregister
btBoxShape_swigregister(btBoxShape)

PHY_FLOAT = _bullet.PHY_FLOAT
PHY_DOUBLE = _bullet.PHY_DOUBLE
PHY_INTEGER = _bullet.PHY_INTEGER
PHY_SHORT = _bullet.PHY_SHORT
PHY_FIXEDPOINT88 = _bullet.PHY_FIXEDPOINT88
PHY_UCHAR = _bullet.PHY_UCHAR
class btConcaveShape(btCollisionShape):
    """Proxy of C++ btConcaveShape class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConcaveShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConcaveShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btConcaveShape
    __del__ = lambda self: None

    def processAllTriangles(self, callback, aabbMin, aabbMax):
        """processAllTriangles(btConcaveShape self, btTriangleCallback callback, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btConcaveShape_processAllTriangles(self, callback, aabbMin, aabbMax)

btConcaveShape_swigregister = _bullet.btConcaveShape_swigregister
btConcaveShape_swigregister(btConcaveShape)

class btStridingMeshInterface(_object):
    """Proxy of C++ btStridingMeshInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStridingMeshInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btStridingMeshInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btStridingMeshInterface
    __del__ = lambda self: None

    def InternalProcessAllTriangles(self, callback, aabbMin, aabbMax):
        """InternalProcessAllTriangles(btStridingMeshInterface self, btInternalTriangleIndexCallback callback, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btStridingMeshInterface_InternalProcessAllTriangles(self, callback, aabbMin, aabbMax)


    def calculateAabbBruteForce(self, aabbMin, aabbMax):
        """calculateAabbBruteForce(btStridingMeshInterface self, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btStridingMeshInterface_calculateAabbBruteForce(self, aabbMin, aabbMax)


    def getLockedVertexIndexBase(self, vertexbase, numverts, type, stride, indexbase, indexstride, numfaces, indicestype, subpart=0):
        """
        getLockedVertexIndexBase(btStridingMeshInterface self, unsigned char ** vertexbase, int & numverts, PHY_ScalarType & type, int & stride, unsigned char ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype, int subpart=0)
        getLockedVertexIndexBase(btStridingMeshInterface self, unsigned char ** vertexbase, int & numverts, PHY_ScalarType & type, int & stride, unsigned char ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype)
        """
        return _bullet.btStridingMeshInterface_getLockedVertexIndexBase(self, vertexbase, numverts, type, stride, indexbase, indexstride, numfaces, indicestype, subpart)


    def getLockedReadOnlyVertexIndexBase(self, vertexbase, numverts, type, stride, indexbase, indexstride, numfaces, indicestype, subpart=0):
        """
        getLockedReadOnlyVertexIndexBase(btStridingMeshInterface self, unsigned char const ** vertexbase, int & numverts, PHY_ScalarType & type, int & stride, unsigned char const ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype, int subpart=0)
        getLockedReadOnlyVertexIndexBase(btStridingMeshInterface self, unsigned char const ** vertexbase, int & numverts, PHY_ScalarType & type, int & stride, unsigned char const ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype)
        """
        return _bullet.btStridingMeshInterface_getLockedReadOnlyVertexIndexBase(self, vertexbase, numverts, type, stride, indexbase, indexstride, numfaces, indicestype, subpart)


    def unLockVertexBase(self, subpart):
        """unLockVertexBase(btStridingMeshInterface self, int subpart)"""
        return _bullet.btStridingMeshInterface_unLockVertexBase(self, subpart)


    def unLockReadOnlyVertexBase(self, subpart):
        """unLockReadOnlyVertexBase(btStridingMeshInterface self, int subpart)"""
        return _bullet.btStridingMeshInterface_unLockReadOnlyVertexBase(self, subpart)


    def getNumSubParts(self):
        """getNumSubParts(btStridingMeshInterface self) -> int"""
        return _bullet.btStridingMeshInterface_getNumSubParts(self)


    def preallocateVertices(self, numverts):
        """preallocateVertices(btStridingMeshInterface self, int numverts)"""
        return _bullet.btStridingMeshInterface_preallocateVertices(self, numverts)


    def preallocateIndices(self, numindices):
        """preallocateIndices(btStridingMeshInterface self, int numindices)"""
        return _bullet.btStridingMeshInterface_preallocateIndices(self, numindices)


    def hasPremadeAabb(self):
        """hasPremadeAabb(btStridingMeshInterface self) -> bool"""
        return _bullet.btStridingMeshInterface_hasPremadeAabb(self)


    def setPremadeAabb(self, aabbMin, aabbMax):
        """setPremadeAabb(btStridingMeshInterface self, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btStridingMeshInterface_setPremadeAabb(self, aabbMin, aabbMax)


    def getPremadeAabb(self, aabbMin, aabbMax):
        """getPremadeAabb(btStridingMeshInterface self, btVector3 * aabbMin, btVector3 * aabbMax)"""
        return _bullet.btStridingMeshInterface_getPremadeAabb(self, aabbMin, aabbMax)


    def getScaling(self):
        """getScaling(btStridingMeshInterface self) -> btVector3 const &"""
        return _bullet.btStridingMeshInterface_getScaling(self)


    def setScaling(self, scaling):
        """setScaling(btStridingMeshInterface self, btVector3 const & scaling)"""
        return _bullet.btStridingMeshInterface_setScaling(self, scaling)


    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btStridingMeshInterface self) -> int"""
        return _bullet.btStridingMeshInterface_calculateSerializeBufferSize(self)


    def serialize(self, dataBuffer, serializer):
        """serialize(btStridingMeshInterface self, void * dataBuffer, btSerializer serializer) -> char const *"""
        return _bullet.btStridingMeshInterface_serialize(self, dataBuffer, serializer)

btStridingMeshInterface_swigregister = _bullet.btStridingMeshInterface_swigregister
btStridingMeshInterface_swigregister(btStridingMeshInterface)

class btIntIndexData(_object):
    """Proxy of C++ btIntIndexData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btIntIndexData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btIntIndexData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_value"] = _bullet.btIntIndexData_m_value_set
    __swig_getmethods__["m_value"] = _bullet.btIntIndexData_m_value_get
    if _newclass:
        m_value = _swig_property(_bullet.btIntIndexData_m_value_get, _bullet.btIntIndexData_m_value_set)

    def __init__(self):
        """__init__(btIntIndexData self) -> btIntIndexData"""
        this = _bullet.new_btIntIndexData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btIntIndexData
    __del__ = lambda self: None
btIntIndexData_swigregister = _bullet.btIntIndexData_swigregister
btIntIndexData_swigregister(btIntIndexData)

class btShortIntIndexData(_object):
    """Proxy of C++ btShortIntIndexData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btShortIntIndexData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btShortIntIndexData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_value"] = _bullet.btShortIntIndexData_m_value_set
    __swig_getmethods__["m_value"] = _bullet.btShortIntIndexData_m_value_get
    if _newclass:
        m_value = _swig_property(_bullet.btShortIntIndexData_m_value_get, _bullet.btShortIntIndexData_m_value_set)
    __swig_setmethods__["m_pad"] = _bullet.btShortIntIndexData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btShortIntIndexData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btShortIntIndexData_m_pad_get, _bullet.btShortIntIndexData_m_pad_set)

    def __init__(self):
        """__init__(btShortIntIndexData self) -> btShortIntIndexData"""
        this = _bullet.new_btShortIntIndexData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btShortIntIndexData
    __del__ = lambda self: None
btShortIntIndexData_swigregister = _bullet.btShortIntIndexData_swigregister
btShortIntIndexData_swigregister(btShortIntIndexData)

class btShortIntIndexTripletData(_object):
    """Proxy of C++ btShortIntIndexTripletData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btShortIntIndexTripletData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btShortIntIndexTripletData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_values"] = _bullet.btShortIntIndexTripletData_m_values_set
    __swig_getmethods__["m_values"] = _bullet.btShortIntIndexTripletData_m_values_get
    if _newclass:
        m_values = _swig_property(_bullet.btShortIntIndexTripletData_m_values_get, _bullet.btShortIntIndexTripletData_m_values_set)
    __swig_setmethods__["m_pad"] = _bullet.btShortIntIndexTripletData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btShortIntIndexTripletData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btShortIntIndexTripletData_m_pad_get, _bullet.btShortIntIndexTripletData_m_pad_set)

    def __init__(self):
        """__init__(btShortIntIndexTripletData self) -> btShortIntIndexTripletData"""
        this = _bullet.new_btShortIntIndexTripletData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btShortIntIndexTripletData
    __del__ = lambda self: None
btShortIntIndexTripletData_swigregister = _bullet.btShortIntIndexTripletData_swigregister
btShortIntIndexTripletData_swigregister(btShortIntIndexTripletData)

class btCharIndexTripletData(_object):
    """Proxy of C++ btCharIndexTripletData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCharIndexTripletData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCharIndexTripletData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_values"] = _bullet.btCharIndexTripletData_m_values_set
    __swig_getmethods__["m_values"] = _bullet.btCharIndexTripletData_m_values_get
    if _newclass:
        m_values = _swig_property(_bullet.btCharIndexTripletData_m_values_get, _bullet.btCharIndexTripletData_m_values_set)
    __swig_setmethods__["m_pad"] = _bullet.btCharIndexTripletData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btCharIndexTripletData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btCharIndexTripletData_m_pad_get, _bullet.btCharIndexTripletData_m_pad_set)

    def __init__(self):
        """__init__(btCharIndexTripletData self) -> btCharIndexTripletData"""
        this = _bullet.new_btCharIndexTripletData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCharIndexTripletData
    __del__ = lambda self: None
btCharIndexTripletData_swigregister = _bullet.btCharIndexTripletData_swigregister
btCharIndexTripletData_swigregister(btCharIndexTripletData)

class btMeshPartData(_object):
    """Proxy of C++ btMeshPartData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMeshPartData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMeshPartData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vertices3f"] = _bullet.btMeshPartData_m_vertices3f_set
    __swig_getmethods__["m_vertices3f"] = _bullet.btMeshPartData_m_vertices3f_get
    if _newclass:
        m_vertices3f = _swig_property(_bullet.btMeshPartData_m_vertices3f_get, _bullet.btMeshPartData_m_vertices3f_set)
    __swig_setmethods__["m_vertices3d"] = _bullet.btMeshPartData_m_vertices3d_set
    __swig_getmethods__["m_vertices3d"] = _bullet.btMeshPartData_m_vertices3d_get
    if _newclass:
        m_vertices3d = _swig_property(_bullet.btMeshPartData_m_vertices3d_get, _bullet.btMeshPartData_m_vertices3d_set)
    __swig_setmethods__["m_indices32"] = _bullet.btMeshPartData_m_indices32_set
    __swig_getmethods__["m_indices32"] = _bullet.btMeshPartData_m_indices32_get
    if _newclass:
        m_indices32 = _swig_property(_bullet.btMeshPartData_m_indices32_get, _bullet.btMeshPartData_m_indices32_set)
    __swig_setmethods__["m_3indices16"] = _bullet.btMeshPartData_m_3indices16_set
    __swig_getmethods__["m_3indices16"] = _bullet.btMeshPartData_m_3indices16_get
    if _newclass:
        m_3indices16 = _swig_property(_bullet.btMeshPartData_m_3indices16_get, _bullet.btMeshPartData_m_3indices16_set)
    __swig_setmethods__["m_3indices8"] = _bullet.btMeshPartData_m_3indices8_set
    __swig_getmethods__["m_3indices8"] = _bullet.btMeshPartData_m_3indices8_get
    if _newclass:
        m_3indices8 = _swig_property(_bullet.btMeshPartData_m_3indices8_get, _bullet.btMeshPartData_m_3indices8_set)
    __swig_setmethods__["m_indices16"] = _bullet.btMeshPartData_m_indices16_set
    __swig_getmethods__["m_indices16"] = _bullet.btMeshPartData_m_indices16_get
    if _newclass:
        m_indices16 = _swig_property(_bullet.btMeshPartData_m_indices16_get, _bullet.btMeshPartData_m_indices16_set)
    __swig_setmethods__["m_numTriangles"] = _bullet.btMeshPartData_m_numTriangles_set
    __swig_getmethods__["m_numTriangles"] = _bullet.btMeshPartData_m_numTriangles_get
    if _newclass:
        m_numTriangles = _swig_property(_bullet.btMeshPartData_m_numTriangles_get, _bullet.btMeshPartData_m_numTriangles_set)
    __swig_setmethods__["m_numVertices"] = _bullet.btMeshPartData_m_numVertices_set
    __swig_getmethods__["m_numVertices"] = _bullet.btMeshPartData_m_numVertices_get
    if _newclass:
        m_numVertices = _swig_property(_bullet.btMeshPartData_m_numVertices_get, _bullet.btMeshPartData_m_numVertices_set)

    def __init__(self):
        """__init__(btMeshPartData self) -> btMeshPartData"""
        this = _bullet.new_btMeshPartData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMeshPartData
    __del__ = lambda self: None
btMeshPartData_swigregister = _bullet.btMeshPartData_swigregister
btMeshPartData_swigregister(btMeshPartData)

class btStridingMeshInterfaceData(_object):
    """Proxy of C++ btStridingMeshInterfaceData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStridingMeshInterfaceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btStridingMeshInterfaceData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_meshPartsPtr"] = _bullet.btStridingMeshInterfaceData_m_meshPartsPtr_set
    __swig_getmethods__["m_meshPartsPtr"] = _bullet.btStridingMeshInterfaceData_m_meshPartsPtr_get
    if _newclass:
        m_meshPartsPtr = _swig_property(_bullet.btStridingMeshInterfaceData_m_meshPartsPtr_get, _bullet.btStridingMeshInterfaceData_m_meshPartsPtr_set)
    __swig_setmethods__["m_scaling"] = _bullet.btStridingMeshInterfaceData_m_scaling_set
    __swig_getmethods__["m_scaling"] = _bullet.btStridingMeshInterfaceData_m_scaling_get
    if _newclass:
        m_scaling = _swig_property(_bullet.btStridingMeshInterfaceData_m_scaling_get, _bullet.btStridingMeshInterfaceData_m_scaling_set)
    __swig_setmethods__["m_numMeshParts"] = _bullet.btStridingMeshInterfaceData_m_numMeshParts_set
    __swig_getmethods__["m_numMeshParts"] = _bullet.btStridingMeshInterfaceData_m_numMeshParts_get
    if _newclass:
        m_numMeshParts = _swig_property(_bullet.btStridingMeshInterfaceData_m_numMeshParts_get, _bullet.btStridingMeshInterfaceData_m_numMeshParts_set)
    __swig_setmethods__["m_padding"] = _bullet.btStridingMeshInterfaceData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btStridingMeshInterfaceData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btStridingMeshInterfaceData_m_padding_get, _bullet.btStridingMeshInterfaceData_m_padding_set)

    def __init__(self):
        """__init__(btStridingMeshInterfaceData self) -> btStridingMeshInterfaceData"""
        this = _bullet.new_btStridingMeshInterfaceData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btStridingMeshInterfaceData
    __del__ = lambda self: None
btStridingMeshInterfaceData_swigregister = _bullet.btStridingMeshInterfaceData_swigregister
btStridingMeshInterfaceData_swigregister(btStridingMeshInterfaceData)

class btTriangleMeshShape(btConcaveShape):
    """Proxy of C++ btTriangleMeshShape class."""

    __swig_setmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleMeshShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleMeshShape, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btTriangleMeshShape
    __del__ = lambda self: None

    def localGetSupportingVertex(self, vec):
        """localGetSupportingVertex(btTriangleMeshShape self, btVector3 const & vec) -> btVector3"""
        return _bullet.btTriangleMeshShape_localGetSupportingVertex(self, vec)


    def localGetSupportingVertexWithoutMargin(self, vec):
        """localGetSupportingVertexWithoutMargin(btTriangleMeshShape self, btVector3 const & vec) -> btVector3"""
        return _bullet.btTriangleMeshShape_localGetSupportingVertexWithoutMargin(self, vec)


    def recalcLocalAabb(self):
        """recalcLocalAabb(btTriangleMeshShape self)"""
        return _bullet.btTriangleMeshShape_recalcLocalAabb(self)


    def getMeshInterface(self, *args):
        """
        getMeshInterface(btTriangleMeshShape self) -> btStridingMeshInterface
        getMeshInterface(btTriangleMeshShape self) -> btStridingMeshInterface
        """
        return _bullet.btTriangleMeshShape_getMeshInterface(self, *args)


    def getLocalAabbMin(self):
        """getLocalAabbMin(btTriangleMeshShape self) -> btVector3 const &"""
        return _bullet.btTriangleMeshShape_getLocalAabbMin(self)


    def getLocalAabbMax(self):
        """getLocalAabbMax(btTriangleMeshShape self) -> btVector3 const &"""
        return _bullet.btTriangleMeshShape_getLocalAabbMax(self)

btTriangleMeshShape_swigregister = _bullet.btTriangleMeshShape_swigregister
btTriangleMeshShape_swigregister(btTriangleMeshShape)

class btOptimizedBvh(btQuantizedBvh):
    """Proxy of C++ btOptimizedBvh class."""

    __swig_setmethods__ = {}
    for _s in [btQuantizedBvh]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btOptimizedBvh, name, value)
    __swig_getmethods__ = {}
    for _s in [btQuantizedBvh]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btOptimizedBvh, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btOptimizedBvh self) -> btOptimizedBvh"""
        this = _bullet.new_btOptimizedBvh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btOptimizedBvh
    __del__ = lambda self: None

    def build(self, triangles, useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax):
        """build(btOptimizedBvh self, btStridingMeshInterface triangles, bool useQuantizedAabbCompression, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax)"""
        return _bullet.btOptimizedBvh_build(self, triangles, useQuantizedAabbCompression, bvhAabbMin, bvhAabbMax)


    def refit(self, triangles, aabbMin, aabbMax):
        """refit(btOptimizedBvh self, btStridingMeshInterface triangles, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btOptimizedBvh_refit(self, triangles, aabbMin, aabbMax)


    def refitPartial(self, triangles, aabbMin, aabbMax):
        """refitPartial(btOptimizedBvh self, btStridingMeshInterface triangles, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btOptimizedBvh_refitPartial(self, triangles, aabbMin, aabbMax)


    def updateBvhNodes(self, meshInterface, firstNode, endNode, index):
        """updateBvhNodes(btOptimizedBvh self, btStridingMeshInterface meshInterface, int firstNode, int endNode, int index)"""
        return _bullet.btOptimizedBvh_updateBvhNodes(self, meshInterface, firstNode, endNode, index)


    def serializeInPlace(self, o_alignedDataBuffer, i_dataBufferSize, i_swapEndian):
        """serializeInPlace(btOptimizedBvh self, void * o_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian) -> bool"""
        return _bullet.btOptimizedBvh_serializeInPlace(self, o_alignedDataBuffer, i_dataBufferSize, i_swapEndian)


    def deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian):
        """deSerializeInPlace(void * i_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian) -> btOptimizedBvh"""
        return _bullet.btOptimizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian)

    deSerializeInPlace = staticmethod(deSerializeInPlace)
btOptimizedBvh_swigregister = _bullet.btOptimizedBvh_swigregister
btOptimizedBvh_swigregister(btOptimizedBvh)

def btOptimizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian):
    """btOptimizedBvh_deSerializeInPlace(void * i_alignedDataBuffer, unsigned int i_dataBufferSize, bool i_swapEndian) -> btOptimizedBvh"""
    return _bullet.btOptimizedBvh_deSerializeInPlace(i_alignedDataBuffer, i_dataBufferSize, i_swapEndian)

class btBvhTriangleMeshShape(btTriangleMeshShape):
    """Proxy of C++ btBvhTriangleMeshShape class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleMeshShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBvhTriangleMeshShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleMeshShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBvhTriangleMeshShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btBvhTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, bool buildBvh=True) -> btBvhTriangleMeshShape
        __init__(btBvhTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression) -> btBvhTriangleMeshShape
        __init__(btBvhTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax, bool buildBvh=True) -> btBvhTriangleMeshShape
        __init__(btBvhTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax) -> btBvhTriangleMeshShape
        """
        this = _bullet.new_btBvhTriangleMeshShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBvhTriangleMeshShape
    __del__ = lambda self: None

    def getOwnsBvh(self):
        """getOwnsBvh(btBvhTriangleMeshShape self) -> bool"""
        return _bullet.btBvhTriangleMeshShape_getOwnsBvh(self)


    def performRaycast(self, callback, raySource, rayTarget):
        """performRaycast(btBvhTriangleMeshShape self, btTriangleCallback callback, btVector3 const & raySource, btVector3 const & rayTarget)"""
        return _bullet.btBvhTriangleMeshShape_performRaycast(self, callback, raySource, rayTarget)


    def performConvexcast(self, callback, boxSource, boxTarget, boxMin, boxMax):
        """performConvexcast(btBvhTriangleMeshShape self, btTriangleCallback callback, btVector3 const & boxSource, btVector3 const & boxTarget, btVector3 const & boxMin, btVector3 const & boxMax)"""
        return _bullet.btBvhTriangleMeshShape_performConvexcast(self, callback, boxSource, boxTarget, boxMin, boxMax)


    def refitTree(self, aabbMin, aabbMax):
        """refitTree(btBvhTriangleMeshShape self, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btBvhTriangleMeshShape_refitTree(self, aabbMin, aabbMax)


    def partialRefitTree(self, aabbMin, aabbMax):
        """partialRefitTree(btBvhTriangleMeshShape self, btVector3 const & aabbMin, btVector3 const & aabbMax)"""
        return _bullet.btBvhTriangleMeshShape_partialRefitTree(self, aabbMin, aabbMax)


    def getOptimizedBvh(self):
        """getOptimizedBvh(btBvhTriangleMeshShape self) -> btOptimizedBvh"""
        return _bullet.btBvhTriangleMeshShape_getOptimizedBvh(self)


    def setOptimizedBvh(self, *args):
        """
        setOptimizedBvh(btBvhTriangleMeshShape self, btOptimizedBvh bvh, btVector3 const & localScaling)
        setOptimizedBvh(btBvhTriangleMeshShape self, btOptimizedBvh bvh)
        """
        return _bullet.btBvhTriangleMeshShape_setOptimizedBvh(self, *args)


    def buildOptimizedBvh(self):
        """buildOptimizedBvh(btBvhTriangleMeshShape self)"""
        return _bullet.btBvhTriangleMeshShape_buildOptimizedBvh(self)


    def usesQuantizedAabbCompression(self):
        """usesQuantizedAabbCompression(btBvhTriangleMeshShape self) -> bool"""
        return _bullet.btBvhTriangleMeshShape_usesQuantizedAabbCompression(self)


    def setTriangleInfoMap(self, triangleInfoMap):
        """setTriangleInfoMap(btBvhTriangleMeshShape self, btTriangleInfoMap triangleInfoMap)"""
        return _bullet.btBvhTriangleMeshShape_setTriangleInfoMap(self, triangleInfoMap)


    def getTriangleInfoMap(self, *args):
        """
        getTriangleInfoMap(btBvhTriangleMeshShape self) -> btTriangleInfoMap
        getTriangleInfoMap(btBvhTriangleMeshShape self) -> btTriangleInfoMap
        """
        return _bullet.btBvhTriangleMeshShape_getTriangleInfoMap(self, *args)


    def serializeSingleBvh(self, serializer):
        """serializeSingleBvh(btBvhTriangleMeshShape self, btSerializer serializer)"""
        return _bullet.btBvhTriangleMeshShape_serializeSingleBvh(self, serializer)


    def serializeSingleTriangleInfoMap(self, serializer):
        """serializeSingleTriangleInfoMap(btBvhTriangleMeshShape self, btSerializer serializer)"""
        return _bullet.btBvhTriangleMeshShape_serializeSingleTriangleInfoMap(self, serializer)

btBvhTriangleMeshShape_swigregister = _bullet.btBvhTriangleMeshShape_swigregister
btBvhTriangleMeshShape_swigregister(btBvhTriangleMeshShape)

class btTriangleMeshShapeData(_object):
    """Proxy of C++ btTriangleMeshShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleMeshShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleMeshShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionShapeData"] = _bullet.btTriangleMeshShapeData_m_collisionShapeData_set
    __swig_getmethods__["m_collisionShapeData"] = _bullet.btTriangleMeshShapeData_m_collisionShapeData_get
    if _newclass:
        m_collisionShapeData = _swig_property(_bullet.btTriangleMeshShapeData_m_collisionShapeData_get, _bullet.btTriangleMeshShapeData_m_collisionShapeData_set)
    __swig_setmethods__["m_meshInterface"] = _bullet.btTriangleMeshShapeData_m_meshInterface_set
    __swig_getmethods__["m_meshInterface"] = _bullet.btTriangleMeshShapeData_m_meshInterface_get
    if _newclass:
        m_meshInterface = _swig_property(_bullet.btTriangleMeshShapeData_m_meshInterface_get, _bullet.btTriangleMeshShapeData_m_meshInterface_set)
    __swig_setmethods__["m_quantizedFloatBvh"] = _bullet.btTriangleMeshShapeData_m_quantizedFloatBvh_set
    __swig_getmethods__["m_quantizedFloatBvh"] = _bullet.btTriangleMeshShapeData_m_quantizedFloatBvh_get
    if _newclass:
        m_quantizedFloatBvh = _swig_property(_bullet.btTriangleMeshShapeData_m_quantizedFloatBvh_get, _bullet.btTriangleMeshShapeData_m_quantizedFloatBvh_set)
    __swig_setmethods__["m_quantizedDoubleBvh"] = _bullet.btTriangleMeshShapeData_m_quantizedDoubleBvh_set
    __swig_getmethods__["m_quantizedDoubleBvh"] = _bullet.btTriangleMeshShapeData_m_quantizedDoubleBvh_get
    if _newclass:
        m_quantizedDoubleBvh = _swig_property(_bullet.btTriangleMeshShapeData_m_quantizedDoubleBvh_get, _bullet.btTriangleMeshShapeData_m_quantizedDoubleBvh_set)
    __swig_setmethods__["m_triangleInfoMap"] = _bullet.btTriangleMeshShapeData_m_triangleInfoMap_set
    __swig_getmethods__["m_triangleInfoMap"] = _bullet.btTriangleMeshShapeData_m_triangleInfoMap_get
    if _newclass:
        m_triangleInfoMap = _swig_property(_bullet.btTriangleMeshShapeData_m_triangleInfoMap_get, _bullet.btTriangleMeshShapeData_m_triangleInfoMap_set)
    __swig_setmethods__["m_collisionMargin"] = _bullet.btTriangleMeshShapeData_m_collisionMargin_set
    __swig_getmethods__["m_collisionMargin"] = _bullet.btTriangleMeshShapeData_m_collisionMargin_get
    if _newclass:
        m_collisionMargin = _swig_property(_bullet.btTriangleMeshShapeData_m_collisionMargin_get, _bullet.btTriangleMeshShapeData_m_collisionMargin_set)
    __swig_setmethods__["m_pad3"] = _bullet.btTriangleMeshShapeData_m_pad3_set
    __swig_getmethods__["m_pad3"] = _bullet.btTriangleMeshShapeData_m_pad3_get
    if _newclass:
        m_pad3 = _swig_property(_bullet.btTriangleMeshShapeData_m_pad3_get, _bullet.btTriangleMeshShapeData_m_pad3_set)

    def __init__(self):
        """__init__(btTriangleMeshShapeData self) -> btTriangleMeshShapeData"""
        this = _bullet.new_btTriangleMeshShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangleMeshShapeData
    __del__ = lambda self: None
btTriangleMeshShapeData_swigregister = _bullet.btTriangleMeshShapeData_swigregister
btTriangleMeshShapeData_swigregister(btTriangleMeshShapeData)

class btCapsuleShape(btConvexInternalShape):
    """Proxy of C++ btCapsuleShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCapsuleShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCapsuleShape, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """__init__(btCapsuleShape self, btScalar radius, btScalar height) -> btCapsuleShape"""
        this = _bullet.new_btCapsuleShape(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getUpAxis(self):
        """getUpAxis(btCapsuleShape self) -> int"""
        return _bullet.btCapsuleShape_getUpAxis(self)


    def getRadius(self):
        """getRadius(btCapsuleShape self) -> btScalar"""
        return _bullet.btCapsuleShape_getRadius(self)


    def getHalfHeight(self):
        """getHalfHeight(btCapsuleShape self) -> btScalar"""
        return _bullet.btCapsuleShape_getHalfHeight(self)


    def deSerializeFloat(self, dataBuffer):
        """deSerializeFloat(btCapsuleShape self, btCapsuleShapeData dataBuffer)"""
        return _bullet.btCapsuleShape_deSerializeFloat(self, dataBuffer)

    __swig_destroy__ = _bullet.delete_btCapsuleShape
    __del__ = lambda self: None
btCapsuleShape_swigregister = _bullet.btCapsuleShape_swigregister
btCapsuleShape_swigregister(btCapsuleShape)

class btCapsuleShapeX(btCapsuleShape):
    """Proxy of C++ btCapsuleShapeX class."""

    __swig_setmethods__ = {}
    for _s in [btCapsuleShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCapsuleShapeX, name, value)
    __swig_getmethods__ = {}
    for _s in [btCapsuleShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCapsuleShapeX, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """__init__(btCapsuleShapeX self, btScalar radius, btScalar height) -> btCapsuleShapeX"""
        this = _bullet.new_btCapsuleShapeX(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCapsuleShapeX
    __del__ = lambda self: None
btCapsuleShapeX_swigregister = _bullet.btCapsuleShapeX_swigregister
btCapsuleShapeX_swigregister(btCapsuleShapeX)

class btCapsuleShapeZ(btCapsuleShape):
    """Proxy of C++ btCapsuleShapeZ class."""

    __swig_setmethods__ = {}
    for _s in [btCapsuleShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCapsuleShapeZ, name, value)
    __swig_getmethods__ = {}
    for _s in [btCapsuleShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCapsuleShapeZ, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """__init__(btCapsuleShapeZ self, btScalar radius, btScalar height) -> btCapsuleShapeZ"""
        this = _bullet.new_btCapsuleShapeZ(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCapsuleShapeZ
    __del__ = lambda self: None
btCapsuleShapeZ_swigregister = _bullet.btCapsuleShapeZ_swigregister
btCapsuleShapeZ_swigregister(btCapsuleShapeZ)

class btCapsuleShapeData(_object):
    """Proxy of C++ btCapsuleShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCapsuleShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCapsuleShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexInternalShapeData"] = _bullet.btCapsuleShapeData_m_convexInternalShapeData_set
    __swig_getmethods__["m_convexInternalShapeData"] = _bullet.btCapsuleShapeData_m_convexInternalShapeData_get
    if _newclass:
        m_convexInternalShapeData = _swig_property(_bullet.btCapsuleShapeData_m_convexInternalShapeData_get, _bullet.btCapsuleShapeData_m_convexInternalShapeData_set)
    __swig_setmethods__["m_upAxis"] = _bullet.btCapsuleShapeData_m_upAxis_set
    __swig_getmethods__["m_upAxis"] = _bullet.btCapsuleShapeData_m_upAxis_get
    if _newclass:
        m_upAxis = _swig_property(_bullet.btCapsuleShapeData_m_upAxis_get, _bullet.btCapsuleShapeData_m_upAxis_set)
    __swig_setmethods__["m_padding"] = _bullet.btCapsuleShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btCapsuleShapeData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btCapsuleShapeData_m_padding_get, _bullet.btCapsuleShapeData_m_padding_set)

    def __init__(self):
        """__init__(btCapsuleShapeData self) -> btCapsuleShapeData"""
        this = _bullet.new_btCapsuleShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCapsuleShapeData
    __del__ = lambda self: None
btCapsuleShapeData_swigregister = _bullet.btCapsuleShapeData_swigregister
btCapsuleShapeData_swigregister(btCapsuleShapeData)

class btCompoundShapeChild(_object):
    """Proxy of C++ btCompoundShapeChild class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCompoundShapeChild, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCompoundShapeChild, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_transform"] = _bullet.btCompoundShapeChild_m_transform_set
    __swig_getmethods__["m_transform"] = _bullet.btCompoundShapeChild_m_transform_get
    if _newclass:
        m_transform = _swig_property(_bullet.btCompoundShapeChild_m_transform_get, _bullet.btCompoundShapeChild_m_transform_set)
    __swig_setmethods__["m_childShape"] = _bullet.btCompoundShapeChild_m_childShape_set
    __swig_getmethods__["m_childShape"] = _bullet.btCompoundShapeChild_m_childShape_get
    if _newclass:
        m_childShape = _swig_property(_bullet.btCompoundShapeChild_m_childShape_get, _bullet.btCompoundShapeChild_m_childShape_set)
    __swig_setmethods__["m_childShapeType"] = _bullet.btCompoundShapeChild_m_childShapeType_set
    __swig_getmethods__["m_childShapeType"] = _bullet.btCompoundShapeChild_m_childShapeType_get
    if _newclass:
        m_childShapeType = _swig_property(_bullet.btCompoundShapeChild_m_childShapeType_get, _bullet.btCompoundShapeChild_m_childShapeType_set)
    __swig_setmethods__["m_childMargin"] = _bullet.btCompoundShapeChild_m_childMargin_set
    __swig_getmethods__["m_childMargin"] = _bullet.btCompoundShapeChild_m_childMargin_get
    if _newclass:
        m_childMargin = _swig_property(_bullet.btCompoundShapeChild_m_childMargin_get, _bullet.btCompoundShapeChild_m_childMargin_set)
    __swig_setmethods__["m_node"] = _bullet.btCompoundShapeChild_m_node_set
    __swig_getmethods__["m_node"] = _bullet.btCompoundShapeChild_m_node_get
    if _newclass:
        m_node = _swig_property(_bullet.btCompoundShapeChild_m_node_get, _bullet.btCompoundShapeChild_m_node_set)

    def __init__(self):
        """__init__(btCompoundShapeChild self) -> btCompoundShapeChild"""
        this = _bullet.new_btCompoundShapeChild()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCompoundShapeChild
    __del__ = lambda self: None
btCompoundShapeChild_swigregister = _bullet.btCompoundShapeChild_swigregister
btCompoundShapeChild_swigregister(btCompoundShapeChild)

class btCompoundShape(btCollisionShape):
    """Proxy of C++ btCompoundShape class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCompoundShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCompoundShape, name)
    __repr__ = _swig_repr

    def __init__(self, enableDynamicAabbTree=True, initialChildCapacity=0):
        """
        __init__(btCompoundShape self, bool enableDynamicAabbTree=True, int const initialChildCapacity=0) -> btCompoundShape
        __init__(btCompoundShape self, bool enableDynamicAabbTree=True) -> btCompoundShape
        __init__(btCompoundShape self) -> btCompoundShape
        """
        this = _bullet.new_btCompoundShape(enableDynamicAabbTree, initialChildCapacity)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCompoundShape
    __del__ = lambda self: None

    def addChildShape(self, localTransform, shape):
        """addChildShape(btCompoundShape self, btTransform const & localTransform, btCollisionShape shape)"""
        return _bullet.btCompoundShape_addChildShape(self, localTransform, shape)


    def removeChildShape(self, shape):
        """removeChildShape(btCompoundShape self, btCollisionShape shape)"""
        return _bullet.btCompoundShape_removeChildShape(self, shape)


    def removeChildShapeByIndex(self, childShapeindex):
        """removeChildShapeByIndex(btCompoundShape self, int childShapeindex)"""
        return _bullet.btCompoundShape_removeChildShapeByIndex(self, childShapeindex)


    def getNumChildShapes(self):
        """getNumChildShapes(btCompoundShape self) -> int"""
        return _bullet.btCompoundShape_getNumChildShapes(self)


    def getChildShape(self, *args):
        """
        getChildShape(btCompoundShape self, int index) -> btCollisionShape
        getChildShape(btCompoundShape self, int index) -> btCollisionShape
        """
        return _bullet.btCompoundShape_getChildShape(self, *args)


    def getChildTransform(self, *args):
        """
        getChildTransform(btCompoundShape self, int index) -> btTransform
        getChildTransform(btCompoundShape self, int index) -> btTransform const &
        """
        return _bullet.btCompoundShape_getChildTransform(self, *args)


    def updateChildTransform(self, childIndex, newChildTransform, shouldRecalculateLocalAabb=True):
        """
        updateChildTransform(btCompoundShape self, int childIndex, btTransform const & newChildTransform, bool shouldRecalculateLocalAabb=True)
        updateChildTransform(btCompoundShape self, int childIndex, btTransform const & newChildTransform)
        """
        return _bullet.btCompoundShape_updateChildTransform(self, childIndex, newChildTransform, shouldRecalculateLocalAabb)


    def getChildList(self):
        """getChildList(btCompoundShape self) -> btCompoundShapeChild"""
        return _bullet.btCompoundShape_getChildList(self)


    def recalculateLocalAabb(self):
        """recalculateLocalAabb(btCompoundShape self)"""
        return _bullet.btCompoundShape_recalculateLocalAabb(self)


    def getDynamicAabbTree(self, *args):
        """
        getDynamicAabbTree(btCompoundShape self) -> btDbvt
        getDynamicAabbTree(btCompoundShape self) -> btDbvt
        """
        return _bullet.btCompoundShape_getDynamicAabbTree(self, *args)


    def createAabbTreeFromChildren(self):
        """createAabbTreeFromChildren(btCompoundShape self)"""
        return _bullet.btCompoundShape_createAabbTreeFromChildren(self)


    def calculatePrincipalAxisTransform(self, masses, principal, inertia):
        """calculatePrincipalAxisTransform(btCompoundShape self, btScalar * masses, btTransform & principal, btVector3 & inertia)"""
        return _bullet.btCompoundShape_calculatePrincipalAxisTransform(self, masses, principal, inertia)


    def getUpdateRevision(self):
        """getUpdateRevision(btCompoundShape self) -> int"""
        return _bullet.btCompoundShape_getUpdateRevision(self)

btCompoundShape_swigregister = _bullet.btCompoundShape_swigregister
btCompoundShape_swigregister(btCompoundShape)

class btCompoundShapeChildData(_object):
    """Proxy of C++ btCompoundShapeChildData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCompoundShapeChildData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCompoundShapeChildData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_transform"] = _bullet.btCompoundShapeChildData_m_transform_set
    __swig_getmethods__["m_transform"] = _bullet.btCompoundShapeChildData_m_transform_get
    if _newclass:
        m_transform = _swig_property(_bullet.btCompoundShapeChildData_m_transform_get, _bullet.btCompoundShapeChildData_m_transform_set)
    __swig_setmethods__["m_childShape"] = _bullet.btCompoundShapeChildData_m_childShape_set
    __swig_getmethods__["m_childShape"] = _bullet.btCompoundShapeChildData_m_childShape_get
    if _newclass:
        m_childShape = _swig_property(_bullet.btCompoundShapeChildData_m_childShape_get, _bullet.btCompoundShapeChildData_m_childShape_set)
    __swig_setmethods__["m_childShapeType"] = _bullet.btCompoundShapeChildData_m_childShapeType_set
    __swig_getmethods__["m_childShapeType"] = _bullet.btCompoundShapeChildData_m_childShapeType_get
    if _newclass:
        m_childShapeType = _swig_property(_bullet.btCompoundShapeChildData_m_childShapeType_get, _bullet.btCompoundShapeChildData_m_childShapeType_set)
    __swig_setmethods__["m_childMargin"] = _bullet.btCompoundShapeChildData_m_childMargin_set
    __swig_getmethods__["m_childMargin"] = _bullet.btCompoundShapeChildData_m_childMargin_get
    if _newclass:
        m_childMargin = _swig_property(_bullet.btCompoundShapeChildData_m_childMargin_get, _bullet.btCompoundShapeChildData_m_childMargin_set)

    def __init__(self):
        """__init__(btCompoundShapeChildData self) -> btCompoundShapeChildData"""
        this = _bullet.new_btCompoundShapeChildData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCompoundShapeChildData
    __del__ = lambda self: None
btCompoundShapeChildData_swigregister = _bullet.btCompoundShapeChildData_swigregister
btCompoundShapeChildData_swigregister(btCompoundShapeChildData)

class btCompoundShapeData(_object):
    """Proxy of C++ btCompoundShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCompoundShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCompoundShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionShapeData"] = _bullet.btCompoundShapeData_m_collisionShapeData_set
    __swig_getmethods__["m_collisionShapeData"] = _bullet.btCompoundShapeData_m_collisionShapeData_get
    if _newclass:
        m_collisionShapeData = _swig_property(_bullet.btCompoundShapeData_m_collisionShapeData_get, _bullet.btCompoundShapeData_m_collisionShapeData_set)
    __swig_setmethods__["m_childShapePtr"] = _bullet.btCompoundShapeData_m_childShapePtr_set
    __swig_getmethods__["m_childShapePtr"] = _bullet.btCompoundShapeData_m_childShapePtr_get
    if _newclass:
        m_childShapePtr = _swig_property(_bullet.btCompoundShapeData_m_childShapePtr_get, _bullet.btCompoundShapeData_m_childShapePtr_set)
    __swig_setmethods__["m_numChildShapes"] = _bullet.btCompoundShapeData_m_numChildShapes_set
    __swig_getmethods__["m_numChildShapes"] = _bullet.btCompoundShapeData_m_numChildShapes_get
    if _newclass:
        m_numChildShapes = _swig_property(_bullet.btCompoundShapeData_m_numChildShapes_get, _bullet.btCompoundShapeData_m_numChildShapes_set)
    __swig_setmethods__["m_collisionMargin"] = _bullet.btCompoundShapeData_m_collisionMargin_set
    __swig_getmethods__["m_collisionMargin"] = _bullet.btCompoundShapeData_m_collisionMargin_get
    if _newclass:
        m_collisionMargin = _swig_property(_bullet.btCompoundShapeData_m_collisionMargin_get, _bullet.btCompoundShapeData_m_collisionMargin_set)

    def __init__(self):
        """__init__(btCompoundShapeData self) -> btCompoundShapeData"""
        this = _bullet.new_btCompoundShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCompoundShapeData
    __del__ = lambda self: None
btCompoundShapeData_swigregister = _bullet.btCompoundShapeData_swigregister
btCompoundShapeData_swigregister(btCompoundShapeData)

class btConeShape(btConvexInternalShape):
    """Proxy of C++ btConeShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConeShape, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """__init__(btConeShape self, btScalar radius, btScalar height) -> btConeShape"""
        this = _bullet.new_btConeShape(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRadius(self):
        """getRadius(btConeShape self) -> btScalar"""
        return _bullet.btConeShape_getRadius(self)


    def getHeight(self):
        """getHeight(btConeShape self) -> btScalar"""
        return _bullet.btConeShape_getHeight(self)


    def setRadius(self, radius):
        """setRadius(btConeShape self, btScalar const radius)"""
        return _bullet.btConeShape_setRadius(self, radius)


    def setHeight(self, height):
        """setHeight(btConeShape self, btScalar const height)"""
        return _bullet.btConeShape_setHeight(self, height)


    def setConeUpIndex(self, upIndex):
        """setConeUpIndex(btConeShape self, int upIndex)"""
        return _bullet.btConeShape_setConeUpIndex(self, upIndex)


    def getConeUpIndex(self):
        """getConeUpIndex(btConeShape self) -> int"""
        return _bullet.btConeShape_getConeUpIndex(self)

    __swig_destroy__ = _bullet.delete_btConeShape
    __del__ = lambda self: None
btConeShape_swigregister = _bullet.btConeShape_swigregister
btConeShape_swigregister(btConeShape)

class btConeShapeX(btConeShape):
    """Proxy of C++ btConeShapeX class."""

    __swig_setmethods__ = {}
    for _s in [btConeShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeShapeX, name, value)
    __swig_getmethods__ = {}
    for _s in [btConeShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConeShapeX, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """__init__(btConeShapeX self, btScalar radius, btScalar height) -> btConeShapeX"""
        this = _bullet.new_btConeShapeX(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConeShapeX
    __del__ = lambda self: None
btConeShapeX_swigregister = _bullet.btConeShapeX_swigregister
btConeShapeX_swigregister(btConeShapeX)

class btConeShapeZ(btConeShape):
    """Proxy of C++ btConeShapeZ class."""

    __swig_setmethods__ = {}
    for _s in [btConeShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeShapeZ, name, value)
    __swig_getmethods__ = {}
    for _s in [btConeShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConeShapeZ, name)
    __repr__ = _swig_repr

    def __init__(self, radius, height):
        """__init__(btConeShapeZ self, btScalar radius, btScalar height) -> btConeShapeZ"""
        this = _bullet.new_btConeShapeZ(radius, height)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConeShapeZ
    __del__ = lambda self: None
btConeShapeZ_swigregister = _bullet.btConeShapeZ_swigregister
btConeShapeZ_swigregister(btConeShapeZ)

class btConeShapeData(_object):
    """Proxy of C++ btConeShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConeShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexInternalShapeData"] = _bullet.btConeShapeData_m_convexInternalShapeData_set
    __swig_getmethods__["m_convexInternalShapeData"] = _bullet.btConeShapeData_m_convexInternalShapeData_get
    if _newclass:
        m_convexInternalShapeData = _swig_property(_bullet.btConeShapeData_m_convexInternalShapeData_get, _bullet.btConeShapeData_m_convexInternalShapeData_set)
    __swig_setmethods__["m_upIndex"] = _bullet.btConeShapeData_m_upIndex_set
    __swig_getmethods__["m_upIndex"] = _bullet.btConeShapeData_m_upIndex_get
    if _newclass:
        m_upIndex = _swig_property(_bullet.btConeShapeData_m_upIndex_get, _bullet.btConeShapeData_m_upIndex_set)
    __swig_setmethods__["m_padding"] = _bullet.btConeShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btConeShapeData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btConeShapeData_m_padding_get, _bullet.btConeShapeData_m_padding_set)

    def __init__(self):
        """__init__(btConeShapeData self) -> btConeShapeData"""
        this = _bullet.new_btConeShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConeShapeData
    __del__ = lambda self: None
btConeShapeData_swigregister = _bullet.btConeShapeData_swigregister
btConeShapeData_swigregister(btConeShapeData)

class btConvex2dShape(btConvexShape):
    """Proxy of C++ btConvex2dShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvex2dShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvex2dShape, name)
    __repr__ = _swig_repr

    def __init__(self, convexChildShape):
        """__init__(btConvex2dShape self, btConvexShape convexChildShape) -> btConvex2dShape"""
        this = _bullet.new_btConvex2dShape(convexChildShape)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvex2dShape
    __del__ = lambda self: None

    def getChildShape(self, *args):
        """
        getChildShape(btConvex2dShape self) -> btConvexShape
        getChildShape(btConvex2dShape self) -> btConvexShape
        """
        return _bullet.btConvex2dShape_getChildShape(self, *args)

btConvex2dShape_swigregister = _bullet.btConvex2dShape_swigregister
btConvex2dShape_swigregister(btConvex2dShape)

class btConvexHullShape(btPolyhedralConvexAabbCachingShape):
    """Proxy of C++ btConvexHullShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexHullShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexHullShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btConvexHullShape self, btScalar const * points=None, int numPoints=0, int stride) -> btConvexHullShape
        __init__(btConvexHullShape self, btScalar const * points=None, int numPoints=0) -> btConvexHullShape
        __init__(btConvexHullShape self, btScalar const * points=None) -> btConvexHullShape
        __init__(btConvexHullShape self) -> btConvexHullShape
        """
        this = _bullet.new_btConvexHullShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addPoint(self, point, recalculateLocalAabb=True):
        """
        addPoint(btConvexHullShape self, btVector3 const & point, bool recalculateLocalAabb=True)
        addPoint(btConvexHullShape self, btVector3 const & point)
        """
        return _bullet.btConvexHullShape_addPoint(self, point, recalculateLocalAabb)


    def getUnscaledPoints(self, *args):
        """
        getUnscaledPoints(btConvexHullShape self) -> btVector3
        getUnscaledPoints(btConvexHullShape self) -> btVector3 const *
        """
        return _bullet.btConvexHullShape_getUnscaledPoints(self, *args)


    def getPoints(self):
        """getPoints(btConvexHullShape self) -> btVector3 const *"""
        return _bullet.btConvexHullShape_getPoints(self)


    def optimizeConvexHull(self):
        """optimizeConvexHull(btConvexHullShape self)"""
        return _bullet.btConvexHullShape_optimizeConvexHull(self)


    def getScaledPoint(self, i):
        """getScaledPoint(btConvexHullShape self, int i) -> btVector3"""
        return _bullet.btConvexHullShape_getScaledPoint(self, i)


    def getNumPoints(self):
        """getNumPoints(btConvexHullShape self) -> int"""
        return _bullet.btConvexHullShape_getNumPoints(self)

    __swig_destroy__ = _bullet.delete_btConvexHullShape
    __del__ = lambda self: None
btConvexHullShape_swigregister = _bullet.btConvexHullShape_swigregister
btConvexHullShape_swigregister(btConvexHullShape)

class btConvexHullShapeData(_object):
    """Proxy of C++ btConvexHullShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexHullShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexHullShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexInternalShapeData"] = _bullet.btConvexHullShapeData_m_convexInternalShapeData_set
    __swig_getmethods__["m_convexInternalShapeData"] = _bullet.btConvexHullShapeData_m_convexInternalShapeData_get
    if _newclass:
        m_convexInternalShapeData = _swig_property(_bullet.btConvexHullShapeData_m_convexInternalShapeData_get, _bullet.btConvexHullShapeData_m_convexInternalShapeData_set)
    __swig_setmethods__["m_unscaledPointsFloatPtr"] = _bullet.btConvexHullShapeData_m_unscaledPointsFloatPtr_set
    __swig_getmethods__["m_unscaledPointsFloatPtr"] = _bullet.btConvexHullShapeData_m_unscaledPointsFloatPtr_get
    if _newclass:
        m_unscaledPointsFloatPtr = _swig_property(_bullet.btConvexHullShapeData_m_unscaledPointsFloatPtr_get, _bullet.btConvexHullShapeData_m_unscaledPointsFloatPtr_set)
    __swig_setmethods__["m_unscaledPointsDoublePtr"] = _bullet.btConvexHullShapeData_m_unscaledPointsDoublePtr_set
    __swig_getmethods__["m_unscaledPointsDoublePtr"] = _bullet.btConvexHullShapeData_m_unscaledPointsDoublePtr_get
    if _newclass:
        m_unscaledPointsDoublePtr = _swig_property(_bullet.btConvexHullShapeData_m_unscaledPointsDoublePtr_get, _bullet.btConvexHullShapeData_m_unscaledPointsDoublePtr_set)
    __swig_setmethods__["m_numUnscaledPoints"] = _bullet.btConvexHullShapeData_m_numUnscaledPoints_set
    __swig_getmethods__["m_numUnscaledPoints"] = _bullet.btConvexHullShapeData_m_numUnscaledPoints_get
    if _newclass:
        m_numUnscaledPoints = _swig_property(_bullet.btConvexHullShapeData_m_numUnscaledPoints_get, _bullet.btConvexHullShapeData_m_numUnscaledPoints_set)
    __swig_setmethods__["m_padding3"] = _bullet.btConvexHullShapeData_m_padding3_set
    __swig_getmethods__["m_padding3"] = _bullet.btConvexHullShapeData_m_padding3_get
    if _newclass:
        m_padding3 = _swig_property(_bullet.btConvexHullShapeData_m_padding3_get, _bullet.btConvexHullShapeData_m_padding3_set)

    def __init__(self):
        """__init__(btConvexHullShapeData self) -> btConvexHullShapeData"""
        this = _bullet.new_btConvexHullShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexHullShapeData
    __del__ = lambda self: None
btConvexHullShapeData_swigregister = _bullet.btConvexHullShapeData_swigregister
btConvexHullShapeData_swigregister(btConvexHullShapeData)

class btConvexPointCloudShape(btPolyhedralConvexAabbCachingShape):
    """Proxy of C++ btConvexPointCloudShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexPointCloudShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexPointCloudShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btConvexPointCloudShape self) -> btConvexPointCloudShape
        __init__(btConvexPointCloudShape self, btVector3 * points, int numPoints, btVector3 const & localScaling, bool computeAabb=True) -> btConvexPointCloudShape
        __init__(btConvexPointCloudShape self, btVector3 * points, int numPoints, btVector3 const & localScaling) -> btConvexPointCloudShape
        """
        this = _bullet.new_btConvexPointCloudShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setPoints(self, *args):
        """
        setPoints(btConvexPointCloudShape self, btVector3 * points, int numPoints, bool computeAabb=True, btVector3 const & localScaling)
        setPoints(btConvexPointCloudShape self, btVector3 * points, int numPoints, bool computeAabb=True)
        setPoints(btConvexPointCloudShape self, btVector3 * points, int numPoints)
        """
        return _bullet.btConvexPointCloudShape_setPoints(self, *args)


    def getUnscaledPoints(self, *args):
        """
        getUnscaledPoints(btConvexPointCloudShape self) -> btVector3
        getUnscaledPoints(btConvexPointCloudShape self) -> btVector3 const *
        """
        return _bullet.btConvexPointCloudShape_getUnscaledPoints(self, *args)


    def getNumPoints(self):
        """getNumPoints(btConvexPointCloudShape self) -> int"""
        return _bullet.btConvexPointCloudShape_getNumPoints(self)


    def getScaledPoint(self, index):
        """getScaledPoint(btConvexPointCloudShape self, int index) -> btVector3"""
        return _bullet.btConvexPointCloudShape_getScaledPoint(self, index)

    __swig_destroy__ = _bullet.delete_btConvexPointCloudShape
    __del__ = lambda self: None
btConvexPointCloudShape_swigregister = _bullet.btConvexPointCloudShape_swigregister
btConvexPointCloudShape_swigregister(btConvexPointCloudShape)

TEST_INTERNAL_OBJECTS = _bullet.TEST_INTERNAL_OBJECTS
class btFace(_object):
    """Proxy of C++ btFace class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btFace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_indices"] = _bullet.btFace_m_indices_set
    __swig_getmethods__["m_indices"] = _bullet.btFace_m_indices_get
    if _newclass:
        m_indices = _swig_property(_bullet.btFace_m_indices_get, _bullet.btFace_m_indices_set)
    __swig_setmethods__["m_plane"] = _bullet.btFace_m_plane_set
    __swig_getmethods__["m_plane"] = _bullet.btFace_m_plane_get
    if _newclass:
        m_plane = _swig_property(_bullet.btFace_m_plane_get, _bullet.btFace_m_plane_set)

    def __init__(self):
        """__init__(btFace self) -> btFace"""
        this = _bullet.new_btFace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btFace
    __del__ = lambda self: None
btFace_swigregister = _bullet.btFace_swigregister
btFace_swigregister(btFace)

class btConvexPolyhedron(_object):
    """Proxy of C++ btConvexPolyhedron class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexPolyhedron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexPolyhedron, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btConvexPolyhedron self) -> btConvexPolyhedron"""
        this = _bullet.new_btConvexPolyhedron()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexPolyhedron
    __del__ = lambda self: None
    __swig_setmethods__["m_vertices"] = _bullet.btConvexPolyhedron_m_vertices_set
    __swig_getmethods__["m_vertices"] = _bullet.btConvexPolyhedron_m_vertices_get
    if _newclass:
        m_vertices = _swig_property(_bullet.btConvexPolyhedron_m_vertices_get, _bullet.btConvexPolyhedron_m_vertices_set)
    __swig_setmethods__["m_faces"] = _bullet.btConvexPolyhedron_m_faces_set
    __swig_getmethods__["m_faces"] = _bullet.btConvexPolyhedron_m_faces_get
    if _newclass:
        m_faces = _swig_property(_bullet.btConvexPolyhedron_m_faces_get, _bullet.btConvexPolyhedron_m_faces_set)
    __swig_setmethods__["m_uniqueEdges"] = _bullet.btConvexPolyhedron_m_uniqueEdges_set
    __swig_getmethods__["m_uniqueEdges"] = _bullet.btConvexPolyhedron_m_uniqueEdges_get
    if _newclass:
        m_uniqueEdges = _swig_property(_bullet.btConvexPolyhedron_m_uniqueEdges_get, _bullet.btConvexPolyhedron_m_uniqueEdges_set)
    __swig_setmethods__["m_localCenter"] = _bullet.btConvexPolyhedron_m_localCenter_set
    __swig_getmethods__["m_localCenter"] = _bullet.btConvexPolyhedron_m_localCenter_get
    if _newclass:
        m_localCenter = _swig_property(_bullet.btConvexPolyhedron_m_localCenter_get, _bullet.btConvexPolyhedron_m_localCenter_set)
    __swig_setmethods__["m_extents"] = _bullet.btConvexPolyhedron_m_extents_set
    __swig_getmethods__["m_extents"] = _bullet.btConvexPolyhedron_m_extents_get
    if _newclass:
        m_extents = _swig_property(_bullet.btConvexPolyhedron_m_extents_get, _bullet.btConvexPolyhedron_m_extents_set)
    __swig_setmethods__["m_radius"] = _bullet.btConvexPolyhedron_m_radius_set
    __swig_getmethods__["m_radius"] = _bullet.btConvexPolyhedron_m_radius_get
    if _newclass:
        m_radius = _swig_property(_bullet.btConvexPolyhedron_m_radius_get, _bullet.btConvexPolyhedron_m_radius_set)
    __swig_setmethods__["mC"] = _bullet.btConvexPolyhedron_mC_set
    __swig_getmethods__["mC"] = _bullet.btConvexPolyhedron_mC_get
    if _newclass:
        mC = _swig_property(_bullet.btConvexPolyhedron_mC_get, _bullet.btConvexPolyhedron_mC_set)
    __swig_setmethods__["mE"] = _bullet.btConvexPolyhedron_mE_set
    __swig_getmethods__["mE"] = _bullet.btConvexPolyhedron_mE_get
    if _newclass:
        mE = _swig_property(_bullet.btConvexPolyhedron_mE_get, _bullet.btConvexPolyhedron_mE_set)

    def initialize(self):
        """initialize(btConvexPolyhedron self)"""
        return _bullet.btConvexPolyhedron_initialize(self)


    def testContainment(self):
        """testContainment(btConvexPolyhedron self) -> bool"""
        return _bullet.btConvexPolyhedron_testContainment(self)


    def project(self, trans, dir, minProj, maxProj, witnesPtMin, witnesPtMax):
        """project(btConvexPolyhedron self, btTransform const & trans, btVector3 const & dir, btScalar & minProj, btScalar & maxProj, btVector3 & witnesPtMin, btVector3 & witnesPtMax)"""
        return _bullet.btConvexPolyhedron_project(self, trans, dir, minProj, maxProj, witnesPtMin, witnesPtMax)

btConvexPolyhedron_swigregister = _bullet.btConvexPolyhedron_swigregister
btConvexPolyhedron_swigregister(btConvexPolyhedron)

class btConvexTriangleMeshShape(btPolyhedralConvexAabbCachingShape):
    """Proxy of C++ btConvexTriangleMeshShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexTriangleMeshShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexTriangleMeshShape, name)
    __repr__ = _swig_repr

    def __init__(self, meshInterface, calcAabb=True):
        """
        __init__(btConvexTriangleMeshShape self, btStridingMeshInterface meshInterface, bool calcAabb=True) -> btConvexTriangleMeshShape
        __init__(btConvexTriangleMeshShape self, btStridingMeshInterface meshInterface) -> btConvexTriangleMeshShape
        """
        this = _bullet.new_btConvexTriangleMeshShape(meshInterface, calcAabb)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getMeshInterface(self, *args):
        """
        getMeshInterface(btConvexTriangleMeshShape self) -> btStridingMeshInterface
        getMeshInterface(btConvexTriangleMeshShape self) -> btStridingMeshInterface
        """
        return _bullet.btConvexTriangleMeshShape_getMeshInterface(self, *args)


    def calculatePrincipalAxisTransform(self, principal, inertia, volume):
        """calculatePrincipalAxisTransform(btConvexTriangleMeshShape self, btTransform & principal, btVector3 & inertia, btScalar & volume)"""
        return _bullet.btConvexTriangleMeshShape_calculatePrincipalAxisTransform(self, principal, inertia, volume)

    __swig_destroy__ = _bullet.delete_btConvexTriangleMeshShape
    __del__ = lambda self: None
btConvexTriangleMeshShape_swigregister = _bullet.btConvexTriangleMeshShape_swigregister
btConvexTriangleMeshShape_swigregister(btConvexTriangleMeshShape)

class btCylinderShape(btConvexInternalShape):
    """Proxy of C++ btCylinderShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCylinderShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCylinderShape, name)
    __repr__ = _swig_repr

    def getHalfExtentsWithMargin(self):
        """getHalfExtentsWithMargin(btCylinderShape self) -> btVector3"""
        return _bullet.btCylinderShape_getHalfExtentsWithMargin(self)


    def getHalfExtentsWithoutMargin(self):
        """getHalfExtentsWithoutMargin(btCylinderShape self) -> btVector3 const &"""
        return _bullet.btCylinderShape_getHalfExtentsWithoutMargin(self)


    def __init__(self, halfExtents):
        """__init__(btCylinderShape self, btVector3 const & halfExtents) -> btCylinderShape"""
        this = _bullet.new_btCylinderShape(halfExtents)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getUpAxis(self):
        """getUpAxis(btCylinderShape self) -> int"""
        return _bullet.btCylinderShape_getUpAxis(self)


    def getRadius(self):
        """getRadius(btCylinderShape self) -> btScalar"""
        return _bullet.btCylinderShape_getRadius(self)

    __swig_destroy__ = _bullet.delete_btCylinderShape
    __del__ = lambda self: None
btCylinderShape_swigregister = _bullet.btCylinderShape_swigregister
btCylinderShape_swigregister(btCylinderShape)

class btCylinderShapeX(btCylinderShape):
    """Proxy of C++ btCylinderShapeX class."""

    __swig_setmethods__ = {}
    for _s in [btCylinderShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCylinderShapeX, name, value)
    __swig_getmethods__ = {}
    for _s in [btCylinderShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCylinderShapeX, name)
    __repr__ = _swig_repr

    def __init__(self, halfExtents):
        """__init__(btCylinderShapeX self, btVector3 const & halfExtents) -> btCylinderShapeX"""
        this = _bullet.new_btCylinderShapeX(halfExtents)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCylinderShapeX
    __del__ = lambda self: None
btCylinderShapeX_swigregister = _bullet.btCylinderShapeX_swigregister
btCylinderShapeX_swigregister(btCylinderShapeX)

class btCylinderShapeZ(btCylinderShape):
    """Proxy of C++ btCylinderShapeZ class."""

    __swig_setmethods__ = {}
    for _s in [btCylinderShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCylinderShapeZ, name, value)
    __swig_getmethods__ = {}
    for _s in [btCylinderShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCylinderShapeZ, name)
    __repr__ = _swig_repr

    def __init__(self, halfExtents):
        """__init__(btCylinderShapeZ self, btVector3 const & halfExtents) -> btCylinderShapeZ"""
        this = _bullet.new_btCylinderShapeZ(halfExtents)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCylinderShapeZ
    __del__ = lambda self: None
btCylinderShapeZ_swigregister = _bullet.btCylinderShapeZ_swigregister
btCylinderShapeZ_swigregister(btCylinderShapeZ)

class btCylinderShapeData(_object):
    """Proxy of C++ btCylinderShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCylinderShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btCylinderShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexInternalShapeData"] = _bullet.btCylinderShapeData_m_convexInternalShapeData_set
    __swig_getmethods__["m_convexInternalShapeData"] = _bullet.btCylinderShapeData_m_convexInternalShapeData_get
    if _newclass:
        m_convexInternalShapeData = _swig_property(_bullet.btCylinderShapeData_m_convexInternalShapeData_get, _bullet.btCylinderShapeData_m_convexInternalShapeData_set)
    __swig_setmethods__["m_upAxis"] = _bullet.btCylinderShapeData_m_upAxis_set
    __swig_getmethods__["m_upAxis"] = _bullet.btCylinderShapeData_m_upAxis_get
    if _newclass:
        m_upAxis = _swig_property(_bullet.btCylinderShapeData_m_upAxis_get, _bullet.btCylinderShapeData_m_upAxis_set)
    __swig_setmethods__["m_padding"] = _bullet.btCylinderShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btCylinderShapeData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btCylinderShapeData_m_padding_get, _bullet.btCylinderShapeData_m_padding_set)

    def __init__(self):
        """__init__(btCylinderShapeData self) -> btCylinderShapeData"""
        this = _bullet.new_btCylinderShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCylinderShapeData
    __del__ = lambda self: None
btCylinderShapeData_swigregister = _bullet.btCylinderShapeData_swigregister
btCylinderShapeData_swigregister(btCylinderShapeData)

class btEmptyShape(btConcaveShape):
    """Proxy of C++ btEmptyShape class."""

    __swig_setmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btEmptyShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btEmptyShape, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btEmptyShape self) -> btEmptyShape"""
        this = _bullet.new_btEmptyShape()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btEmptyShape
    __del__ = lambda self: None
btEmptyShape_swigregister = _bullet.btEmptyShape_swigregister
btEmptyShape_swigregister(btEmptyShape)

class btHeightfieldTerrainShape(btConcaveShape):
    """Proxy of C++ btHeightfieldTerrainShape class."""

    __swig_setmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHeightfieldTerrainShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHeightfieldTerrainShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btHeightfieldTerrainShape self, int heightStickWidth, int heightStickLength, void const * heightfieldData, btScalar heightScale, btScalar minHeight, btScalar maxHeight, int upAxis, PHY_ScalarType heightDataType, bool flipQuadEdges) -> btHeightfieldTerrainShape
        __init__(btHeightfieldTerrainShape self, int heightStickWidth, int heightStickLength, void const * heightfieldData, btScalar maxHeight, int upAxis, bool useFloatData, bool flipQuadEdges) -> btHeightfieldTerrainShape
        """
        this = _bullet.new_btHeightfieldTerrainShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btHeightfieldTerrainShape
    __del__ = lambda self: None

    def setUseDiamondSubdivision(self, useDiamondSubdivision=True):
        """
        setUseDiamondSubdivision(btHeightfieldTerrainShape self, bool useDiamondSubdivision=True)
        setUseDiamondSubdivision(btHeightfieldTerrainShape self)
        """
        return _bullet.btHeightfieldTerrainShape_setUseDiamondSubdivision(self, useDiamondSubdivision)


    def setUseZigzagSubdivision(self, useZigzagSubdivision=True):
        """
        setUseZigzagSubdivision(btHeightfieldTerrainShape self, bool useZigzagSubdivision=True)
        setUseZigzagSubdivision(btHeightfieldTerrainShape self)
        """
        return _bullet.btHeightfieldTerrainShape_setUseZigzagSubdivision(self, useZigzagSubdivision)

btHeightfieldTerrainShape_swigregister = _bullet.btHeightfieldTerrainShape_swigregister
btHeightfieldTerrainShape_swigregister(btHeightfieldTerrainShape)

class btMaterial(_object):
    """Proxy of C++ btMaterial class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMaterial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMaterial, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_friction"] = _bullet.btMaterial_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btMaterial_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btMaterial_m_friction_get, _bullet.btMaterial_m_friction_set)
    __swig_setmethods__["m_restitution"] = _bullet.btMaterial_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btMaterial_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btMaterial_m_restitution_get, _bullet.btMaterial_m_restitution_set)
    __swig_setmethods__["pad"] = _bullet.btMaterial_pad_set
    __swig_getmethods__["pad"] = _bullet.btMaterial_pad_get
    if _newclass:
        pad = _swig_property(_bullet.btMaterial_pad_get, _bullet.btMaterial_pad_set)

    def __init__(self, *args):
        """
        __init__(btMaterial self) -> btMaterial
        __init__(btMaterial self, btScalar fric, btScalar rest) -> btMaterial
        """
        this = _bullet.new_btMaterial(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMaterial
    __del__ = lambda self: None
btMaterial_swigregister = _bullet.btMaterial_swigregister
btMaterial_swigregister(btMaterial)

class btMinkowskiSumShape(btConvexInternalShape):
    """Proxy of C++ btMinkowskiSumShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMinkowskiSumShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMinkowskiSumShape, name)
    __repr__ = _swig_repr

    def __init__(self, shapeA, shapeB):
        """__init__(btMinkowskiSumShape self, btConvexShape shapeA, btConvexShape shapeB) -> btMinkowskiSumShape"""
        this = _bullet.new_btMinkowskiSumShape(shapeA, shapeB)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setTransformA(self, transA):
        """setTransformA(btMinkowskiSumShape self, btTransform const & transA)"""
        return _bullet.btMinkowskiSumShape_setTransformA(self, transA)


    def setTransformB(self, transB):
        """setTransformB(btMinkowskiSumShape self, btTransform const & transB)"""
        return _bullet.btMinkowskiSumShape_setTransformB(self, transB)


    def getTransformA(self):
        """getTransformA(btMinkowskiSumShape self) -> btTransform const &"""
        return _bullet.btMinkowskiSumShape_getTransformA(self)


    def GetTransformB(self):
        """GetTransformB(btMinkowskiSumShape self) -> btTransform const &"""
        return _bullet.btMinkowskiSumShape_GetTransformB(self)


    def getShapeA(self):
        """getShapeA(btMinkowskiSumShape self) -> btConvexShape"""
        return _bullet.btMinkowskiSumShape_getShapeA(self)


    def getShapeB(self):
        """getShapeB(btMinkowskiSumShape self) -> btConvexShape"""
        return _bullet.btMinkowskiSumShape_getShapeB(self)

    __swig_destroy__ = _bullet.delete_btMinkowskiSumShape
    __del__ = lambda self: None
btMinkowskiSumShape_swigregister = _bullet.btMinkowskiSumShape_swigregister
btMinkowskiSumShape_swigregister(btMinkowskiSumShape)

class btMultimaterialTriangleMeshShape(btBvhTriangleMeshShape):
    """Proxy of C++ btMultimaterialTriangleMeshShape class."""

    __swig_setmethods__ = {}
    for _s in [btBvhTriangleMeshShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultimaterialTriangleMeshShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btBvhTriangleMeshShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultimaterialTriangleMeshShape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btMultimaterialTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, bool buildBvh=True) -> btMultimaterialTriangleMeshShape
        __init__(btMultimaterialTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression) -> btMultimaterialTriangleMeshShape
        __init__(btMultimaterialTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax, bool buildBvh=True) -> btMultimaterialTriangleMeshShape
        __init__(btMultimaterialTriangleMeshShape self, btStridingMeshInterface meshInterface, bool useQuantizedAabbCompression, btVector3 const & bvhAabbMin, btVector3 const & bvhAabbMax) -> btMultimaterialTriangleMeshShape
        """
        this = _bullet.new_btMultimaterialTriangleMeshShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultimaterialTriangleMeshShape
    __del__ = lambda self: None

    def getMaterialProperties(self, partID, triIndex):
        """getMaterialProperties(btMultimaterialTriangleMeshShape self, int partID, int triIndex) -> btMaterial"""
        return _bullet.btMultimaterialTriangleMeshShape_getMaterialProperties(self, partID, triIndex)

btMultimaterialTriangleMeshShape_swigregister = _bullet.btMultimaterialTriangleMeshShape_swigregister
btMultimaterialTriangleMeshShape_swigregister(btMultimaterialTriangleMeshShape)

class btMultiSphereShape(btConvexInternalAabbCachingShape):
    """Proxy of C++ btMultiSphereShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalAabbCachingShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiSphereShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalAabbCachingShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiSphereShape, name)
    __repr__ = _swig_repr

    def __init__(self, positions, radi, numSpheres):
        """__init__(btMultiSphereShape self, btVector3 const * positions, btScalar const * radi, int numSpheres) -> btMultiSphereShape"""
        this = _bullet.new_btMultiSphereShape(positions, radi, numSpheres)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSphereCount(self):
        """getSphereCount(btMultiSphereShape self) -> int"""
        return _bullet.btMultiSphereShape_getSphereCount(self)


    def getSpherePosition(self, index):
        """getSpherePosition(btMultiSphereShape self, int index) -> btVector3 const &"""
        return _bullet.btMultiSphereShape_getSpherePosition(self, index)


    def getSphereRadius(self, index):
        """getSphereRadius(btMultiSphereShape self, int index) -> btScalar"""
        return _bullet.btMultiSphereShape_getSphereRadius(self, index)

    __swig_destroy__ = _bullet.delete_btMultiSphereShape
    __del__ = lambda self: None
btMultiSphereShape_swigregister = _bullet.btMultiSphereShape_swigregister
btMultiSphereShape_swigregister(btMultiSphereShape)

class btPositionAndRadius(_object):
    """Proxy of C++ btPositionAndRadius class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPositionAndRadius, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPositionAndRadius, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_pos"] = _bullet.btPositionAndRadius_m_pos_set
    __swig_getmethods__["m_pos"] = _bullet.btPositionAndRadius_m_pos_get
    if _newclass:
        m_pos = _swig_property(_bullet.btPositionAndRadius_m_pos_get, _bullet.btPositionAndRadius_m_pos_set)
    __swig_setmethods__["m_radius"] = _bullet.btPositionAndRadius_m_radius_set
    __swig_getmethods__["m_radius"] = _bullet.btPositionAndRadius_m_radius_get
    if _newclass:
        m_radius = _swig_property(_bullet.btPositionAndRadius_m_radius_get, _bullet.btPositionAndRadius_m_radius_set)

    def __init__(self):
        """__init__(btPositionAndRadius self) -> btPositionAndRadius"""
        this = _bullet.new_btPositionAndRadius()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPositionAndRadius
    __del__ = lambda self: None
btPositionAndRadius_swigregister = _bullet.btPositionAndRadius_swigregister
btPositionAndRadius_swigregister(btPositionAndRadius)

class btMultiSphereShapeData(_object):
    """Proxy of C++ btMultiSphereShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiSphereShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiSphereShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexInternalShapeData"] = _bullet.btMultiSphereShapeData_m_convexInternalShapeData_set
    __swig_getmethods__["m_convexInternalShapeData"] = _bullet.btMultiSphereShapeData_m_convexInternalShapeData_get
    if _newclass:
        m_convexInternalShapeData = _swig_property(_bullet.btMultiSphereShapeData_m_convexInternalShapeData_get, _bullet.btMultiSphereShapeData_m_convexInternalShapeData_set)
    __swig_setmethods__["m_localPositionArrayPtr"] = _bullet.btMultiSphereShapeData_m_localPositionArrayPtr_set
    __swig_getmethods__["m_localPositionArrayPtr"] = _bullet.btMultiSphereShapeData_m_localPositionArrayPtr_get
    if _newclass:
        m_localPositionArrayPtr = _swig_property(_bullet.btMultiSphereShapeData_m_localPositionArrayPtr_get, _bullet.btMultiSphereShapeData_m_localPositionArrayPtr_set)
    __swig_setmethods__["m_localPositionArraySize"] = _bullet.btMultiSphereShapeData_m_localPositionArraySize_set
    __swig_getmethods__["m_localPositionArraySize"] = _bullet.btMultiSphereShapeData_m_localPositionArraySize_get
    if _newclass:
        m_localPositionArraySize = _swig_property(_bullet.btMultiSphereShapeData_m_localPositionArraySize_get, _bullet.btMultiSphereShapeData_m_localPositionArraySize_set)
    __swig_setmethods__["m_padding"] = _bullet.btMultiSphereShapeData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btMultiSphereShapeData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btMultiSphereShapeData_m_padding_get, _bullet.btMultiSphereShapeData_m_padding_set)

    def __init__(self):
        """__init__(btMultiSphereShapeData self) -> btMultiSphereShapeData"""
        this = _bullet.new_btMultiSphereShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiSphereShapeData
    __del__ = lambda self: None
btMultiSphereShapeData_swigregister = _bullet.btMultiSphereShapeData_swigregister
btMultiSphereShapeData_swigregister(btMultiSphereShapeData)

class btScaledBvhTriangleMeshShape(btConcaveShape):
    """Proxy of C++ btScaledBvhTriangleMeshShape class."""

    __swig_setmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btScaledBvhTriangleMeshShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btScaledBvhTriangleMeshShape, name)
    __repr__ = _swig_repr

    def __init__(self, childShape, localScaling):
        """__init__(btScaledBvhTriangleMeshShape self, btBvhTriangleMeshShape childShape, btVector3 const & localScaling) -> btScaledBvhTriangleMeshShape"""
        this = _bullet.new_btScaledBvhTriangleMeshShape(childShape, localScaling)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btScaledBvhTriangleMeshShape
    __del__ = lambda self: None

    def getChildShape(self, *args):
        """
        getChildShape(btScaledBvhTriangleMeshShape self) -> btBvhTriangleMeshShape
        getChildShape(btScaledBvhTriangleMeshShape self) -> btBvhTriangleMeshShape
        """
        return _bullet.btScaledBvhTriangleMeshShape_getChildShape(self, *args)

btScaledBvhTriangleMeshShape_swigregister = _bullet.btScaledBvhTriangleMeshShape_swigregister
btScaledBvhTriangleMeshShape_swigregister(btScaledBvhTriangleMeshShape)

class btScaledTriangleMeshShapeData(_object):
    """Proxy of C++ btScaledTriangleMeshShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btScaledTriangleMeshShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btScaledTriangleMeshShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_trimeshShapeData"] = _bullet.btScaledTriangleMeshShapeData_m_trimeshShapeData_set
    __swig_getmethods__["m_trimeshShapeData"] = _bullet.btScaledTriangleMeshShapeData_m_trimeshShapeData_get
    if _newclass:
        m_trimeshShapeData = _swig_property(_bullet.btScaledTriangleMeshShapeData_m_trimeshShapeData_get, _bullet.btScaledTriangleMeshShapeData_m_trimeshShapeData_set)
    __swig_setmethods__["m_localScaling"] = _bullet.btScaledTriangleMeshShapeData_m_localScaling_set
    __swig_getmethods__["m_localScaling"] = _bullet.btScaledTriangleMeshShapeData_m_localScaling_get
    if _newclass:
        m_localScaling = _swig_property(_bullet.btScaledTriangleMeshShapeData_m_localScaling_get, _bullet.btScaledTriangleMeshShapeData_m_localScaling_set)

    def __init__(self):
        """__init__(btScaledTriangleMeshShapeData self) -> btScaledTriangleMeshShapeData"""
        this = _bullet.new_btScaledTriangleMeshShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btScaledTriangleMeshShapeData
    __del__ = lambda self: None
btScaledTriangleMeshShapeData_swigregister = _bullet.btScaledTriangleMeshShapeData_swigregister
btScaledTriangleMeshShapeData_swigregister(btScaledTriangleMeshShapeData)

class btShapeHull(_object):
    """Proxy of C++ btShapeHull class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btShapeHull, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btShapeHull, name)
    __repr__ = _swig_repr

    def __init__(self, shape):
        """__init__(btShapeHull self, btConvexShape shape) -> btShapeHull"""
        this = _bullet.new_btShapeHull(shape)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btShapeHull
    __del__ = lambda self: None

    def buildHull(self, margin):
        """buildHull(btShapeHull self, btScalar margin) -> bool"""
        return _bullet.btShapeHull_buildHull(self, margin)


    def numTriangles(self):
        """numTriangles(btShapeHull self) -> int"""
        return _bullet.btShapeHull_numTriangles(self)


    def numVertices(self):
        """numVertices(btShapeHull self) -> int"""
        return _bullet.btShapeHull_numVertices(self)


    def numIndices(self):
        """numIndices(btShapeHull self) -> int"""
        return _bullet.btShapeHull_numIndices(self)


    def getVertexPointer(self):
        """getVertexPointer(btShapeHull self) -> btVector3 const *"""
        return _bullet.btShapeHull_getVertexPointer(self)


    def getIndexPointer(self):
        """getIndexPointer(btShapeHull self) -> unsigned int const *"""
        return _bullet.btShapeHull_getIndexPointer(self)

btShapeHull_swigregister = _bullet.btShapeHull_swigregister
btShapeHull_swigregister(btShapeHull)

class btSphereShape(btConvexInternalShape):
    """Proxy of C++ btSphereShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSphereShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSphereShape, name)
    __repr__ = _swig_repr

    def __init__(self, radius):
        """__init__(btSphereShape self, btScalar radius) -> btSphereShape"""
        this = _bullet.new_btSphereShape(radius)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRadius(self):
        """getRadius(btSphereShape self) -> btScalar"""
        return _bullet.btSphereShape_getRadius(self)


    def setUnscaledRadius(self, radius):
        """setUnscaledRadius(btSphereShape self, btScalar radius)"""
        return _bullet.btSphereShape_setUnscaledRadius(self, radius)

    __swig_destroy__ = _bullet.delete_btSphereShape
    __del__ = lambda self: None
btSphereShape_swigregister = _bullet.btSphereShape_swigregister
btSphereShape_swigregister(btSphereShape)

class btStaticPlaneShape(btConcaveShape):
    """Proxy of C++ btStaticPlaneShape class."""

    __swig_setmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStaticPlaneShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btStaticPlaneShape, name)
    __repr__ = _swig_repr

    def __init__(self, planeNormal, planeConstant):
        """__init__(btStaticPlaneShape self, btVector3 const & planeNormal, btScalar planeConstant) -> btStaticPlaneShape"""
        this = _bullet.new_btStaticPlaneShape(planeNormal, planeConstant)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btStaticPlaneShape
    __del__ = lambda self: None

    def getPlaneNormal(self):
        """getPlaneNormal(btStaticPlaneShape self) -> btVector3 const &"""
        return _bullet.btStaticPlaneShape_getPlaneNormal(self)


    def getPlaneConstant(self):
        """getPlaneConstant(btStaticPlaneShape self) -> btScalar const &"""
        return _bullet.btStaticPlaneShape_getPlaneConstant(self)

btStaticPlaneShape_swigregister = _bullet.btStaticPlaneShape_swigregister
btStaticPlaneShape_swigregister(btStaticPlaneShape)

class btStaticPlaneShapeData(_object):
    """Proxy of C++ btStaticPlaneShapeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStaticPlaneShapeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btStaticPlaneShapeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionShapeData"] = _bullet.btStaticPlaneShapeData_m_collisionShapeData_set
    __swig_getmethods__["m_collisionShapeData"] = _bullet.btStaticPlaneShapeData_m_collisionShapeData_get
    if _newclass:
        m_collisionShapeData = _swig_property(_bullet.btStaticPlaneShapeData_m_collisionShapeData_get, _bullet.btStaticPlaneShapeData_m_collisionShapeData_set)
    __swig_setmethods__["m_localScaling"] = _bullet.btStaticPlaneShapeData_m_localScaling_set
    __swig_getmethods__["m_localScaling"] = _bullet.btStaticPlaneShapeData_m_localScaling_get
    if _newclass:
        m_localScaling = _swig_property(_bullet.btStaticPlaneShapeData_m_localScaling_get, _bullet.btStaticPlaneShapeData_m_localScaling_set)
    __swig_setmethods__["m_planeNormal"] = _bullet.btStaticPlaneShapeData_m_planeNormal_set
    __swig_getmethods__["m_planeNormal"] = _bullet.btStaticPlaneShapeData_m_planeNormal_get
    if _newclass:
        m_planeNormal = _swig_property(_bullet.btStaticPlaneShapeData_m_planeNormal_get, _bullet.btStaticPlaneShapeData_m_planeNormal_set)
    __swig_setmethods__["m_planeConstant"] = _bullet.btStaticPlaneShapeData_m_planeConstant_set
    __swig_getmethods__["m_planeConstant"] = _bullet.btStaticPlaneShapeData_m_planeConstant_get
    if _newclass:
        m_planeConstant = _swig_property(_bullet.btStaticPlaneShapeData_m_planeConstant_get, _bullet.btStaticPlaneShapeData_m_planeConstant_set)
    __swig_setmethods__["m_pad"] = _bullet.btStaticPlaneShapeData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btStaticPlaneShapeData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btStaticPlaneShapeData_m_pad_get, _bullet.btStaticPlaneShapeData_m_pad_set)

    def __init__(self):
        """__init__(btStaticPlaneShapeData self) -> btStaticPlaneShapeData"""
        this = _bullet.new_btStaticPlaneShapeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btStaticPlaneShapeData
    __del__ = lambda self: None
btStaticPlaneShapeData_swigregister = _bullet.btStaticPlaneShapeData_swigregister
btStaticPlaneShapeData_swigregister(btStaticPlaneShapeData)

class btBU_Simplex1to4(btPolyhedralConvexAabbCachingShape):
    """Proxy of C++ btBU_Simplex1to4 class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBU_Simplex1to4, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexAabbCachingShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btBU_Simplex1to4, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btBU_Simplex1to4 self) -> btBU_Simplex1to4
        __init__(btBU_Simplex1to4 self, btVector3 const & pt0) -> btBU_Simplex1to4
        __init__(btBU_Simplex1to4 self, btVector3 const & pt0, btVector3 const & pt1) -> btBU_Simplex1to4
        __init__(btBU_Simplex1to4 self, btVector3 const & pt0, btVector3 const & pt1, btVector3 const & pt2) -> btBU_Simplex1to4
        __init__(btBU_Simplex1to4 self, btVector3 const & pt0, btVector3 const & pt1, btVector3 const & pt2, btVector3 const & pt3) -> btBU_Simplex1to4
        """
        this = _bullet.new_btBU_Simplex1to4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self):
        """reset(btBU_Simplex1to4 self)"""
        return _bullet.btBU_Simplex1to4_reset(self)


    def addVertex(self, pt):
        """addVertex(btBU_Simplex1to4 self, btVector3 const & pt)"""
        return _bullet.btBU_Simplex1to4_addVertex(self, pt)


    def getIndex(self, i):
        """getIndex(btBU_Simplex1to4 self, int i) -> int"""
        return _bullet.btBU_Simplex1to4_getIndex(self, i)

    __swig_destroy__ = _bullet.delete_btBU_Simplex1to4
    __del__ = lambda self: None
btBU_Simplex1to4_swigregister = _bullet.btBU_Simplex1to4_swigregister
btBU_Simplex1to4_swigregister(btBU_Simplex1to4)

class btTriangle(_object):
    """Proxy of C++ btTriangle class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vertex0"] = _bullet.btTriangle_m_vertex0_set
    __swig_getmethods__["m_vertex0"] = _bullet.btTriangle_m_vertex0_get
    if _newclass:
        m_vertex0 = _swig_property(_bullet.btTriangle_m_vertex0_get, _bullet.btTriangle_m_vertex0_set)
    __swig_setmethods__["m_vertex1"] = _bullet.btTriangle_m_vertex1_set
    __swig_getmethods__["m_vertex1"] = _bullet.btTriangle_m_vertex1_get
    if _newclass:
        m_vertex1 = _swig_property(_bullet.btTriangle_m_vertex1_get, _bullet.btTriangle_m_vertex1_set)
    __swig_setmethods__["m_vertex2"] = _bullet.btTriangle_m_vertex2_set
    __swig_getmethods__["m_vertex2"] = _bullet.btTriangle_m_vertex2_get
    if _newclass:
        m_vertex2 = _swig_property(_bullet.btTriangle_m_vertex2_get, _bullet.btTriangle_m_vertex2_set)
    __swig_setmethods__["m_partId"] = _bullet.btTriangle_m_partId_set
    __swig_getmethods__["m_partId"] = _bullet.btTriangle_m_partId_get
    if _newclass:
        m_partId = _swig_property(_bullet.btTriangle_m_partId_get, _bullet.btTriangle_m_partId_set)
    __swig_setmethods__["m_triangleIndex"] = _bullet.btTriangle_m_triangleIndex_set
    __swig_getmethods__["m_triangleIndex"] = _bullet.btTriangle_m_triangleIndex_get
    if _newclass:
        m_triangleIndex = _swig_property(_bullet.btTriangle_m_triangleIndex_get, _bullet.btTriangle_m_triangleIndex_set)

    def __init__(self):
        """__init__(btTriangle self) -> btTriangle"""
        this = _bullet.new_btTriangle()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangle
    __del__ = lambda self: None
btTriangle_swigregister = _bullet.btTriangle_swigregister
btTriangle_swigregister(btTriangle)

class btTriangleBuffer(btTriangleCallback):
    """Proxy of C++ btTriangleBuffer class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleBuffer, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleBuffer, name)
    __repr__ = _swig_repr

    def getNumTriangles(self):
        """getNumTriangles(btTriangleBuffer self) -> int"""
        return _bullet.btTriangleBuffer_getNumTriangles(self)


    def getTriangle(self, index):
        """getTriangle(btTriangleBuffer self, int index) -> btTriangle"""
        return _bullet.btTriangleBuffer_getTriangle(self, index)


    def clearBuffer(self):
        """clearBuffer(btTriangleBuffer self)"""
        return _bullet.btTriangleBuffer_clearBuffer(self)


    def __init__(self):
        """__init__(btTriangleBuffer self) -> btTriangleBuffer"""
        this = _bullet.new_btTriangleBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangleBuffer
    __del__ = lambda self: None
btTriangleBuffer_swigregister = _bullet.btTriangleBuffer_swigregister
btTriangleBuffer_swigregister(btTriangleBuffer)

class btIndexedMesh(_object):
    """Proxy of C++ btIndexedMesh class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btIndexedMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btIndexedMesh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_numTriangles"] = _bullet.btIndexedMesh_m_numTriangles_set
    __swig_getmethods__["m_numTriangles"] = _bullet.btIndexedMesh_m_numTriangles_get
    if _newclass:
        m_numTriangles = _swig_property(_bullet.btIndexedMesh_m_numTriangles_get, _bullet.btIndexedMesh_m_numTriangles_set)
    __swig_setmethods__["m_triangleIndexBase"] = _bullet.btIndexedMesh_m_triangleIndexBase_set
    __swig_getmethods__["m_triangleIndexBase"] = _bullet.btIndexedMesh_m_triangleIndexBase_get
    if _newclass:
        m_triangleIndexBase = _swig_property(_bullet.btIndexedMesh_m_triangleIndexBase_get, _bullet.btIndexedMesh_m_triangleIndexBase_set)
    __swig_setmethods__["m_triangleIndexStride"] = _bullet.btIndexedMesh_m_triangleIndexStride_set
    __swig_getmethods__["m_triangleIndexStride"] = _bullet.btIndexedMesh_m_triangleIndexStride_get
    if _newclass:
        m_triangleIndexStride = _swig_property(_bullet.btIndexedMesh_m_triangleIndexStride_get, _bullet.btIndexedMesh_m_triangleIndexStride_set)
    __swig_setmethods__["m_numVertices"] = _bullet.btIndexedMesh_m_numVertices_set
    __swig_getmethods__["m_numVertices"] = _bullet.btIndexedMesh_m_numVertices_get
    if _newclass:
        m_numVertices = _swig_property(_bullet.btIndexedMesh_m_numVertices_get, _bullet.btIndexedMesh_m_numVertices_set)
    __swig_setmethods__["m_vertexBase"] = _bullet.btIndexedMesh_m_vertexBase_set
    __swig_getmethods__["m_vertexBase"] = _bullet.btIndexedMesh_m_vertexBase_get
    if _newclass:
        m_vertexBase = _swig_property(_bullet.btIndexedMesh_m_vertexBase_get, _bullet.btIndexedMesh_m_vertexBase_set)
    __swig_setmethods__["m_vertexStride"] = _bullet.btIndexedMesh_m_vertexStride_set
    __swig_getmethods__["m_vertexStride"] = _bullet.btIndexedMesh_m_vertexStride_get
    if _newclass:
        m_vertexStride = _swig_property(_bullet.btIndexedMesh_m_vertexStride_get, _bullet.btIndexedMesh_m_vertexStride_set)
    __swig_setmethods__["m_indexType"] = _bullet.btIndexedMesh_m_indexType_set
    __swig_getmethods__["m_indexType"] = _bullet.btIndexedMesh_m_indexType_get
    if _newclass:
        m_indexType = _swig_property(_bullet.btIndexedMesh_m_indexType_get, _bullet.btIndexedMesh_m_indexType_set)
    __swig_setmethods__["m_vertexType"] = _bullet.btIndexedMesh_m_vertexType_set
    __swig_getmethods__["m_vertexType"] = _bullet.btIndexedMesh_m_vertexType_get
    if _newclass:
        m_vertexType = _swig_property(_bullet.btIndexedMesh_m_vertexType_get, _bullet.btIndexedMesh_m_vertexType_set)

    def __init__(self):
        """__init__(btIndexedMesh self) -> btIndexedMesh"""
        this = _bullet.new_btIndexedMesh()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btIndexedMesh
    __del__ = lambda self: None
btIndexedMesh_swigregister = _bullet.btIndexedMesh_swigregister
btIndexedMesh_swigregister(btIndexedMesh)

class btTriangleIndexVertexArray(btStridingMeshInterface):
    """Proxy of C++ btTriangleIndexVertexArray class."""

    __swig_setmethods__ = {}
    for _s in [btStridingMeshInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleIndexVertexArray, name, value)
    __swig_getmethods__ = {}
    for _s in [btStridingMeshInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleIndexVertexArray, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btTriangleIndexVertexArray
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(btTriangleIndexVertexArray self) -> btTriangleIndexVertexArray
        __init__(btTriangleIndexVertexArray self, int numTriangles, int * triangleIndexBase, int triangleIndexStride, int numVertices, btScalar * vertexBase, int vertexStride) -> btTriangleIndexVertexArray
        """
        this = _bullet.new_btTriangleIndexVertexArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addIndexedMesh(self, mesh, indexType=PHY_INTEGER):
        """
        addIndexedMesh(btTriangleIndexVertexArray self, btIndexedMesh mesh, PHY_ScalarType indexType=PHY_INTEGER)
        addIndexedMesh(btTriangleIndexVertexArray self, btIndexedMesh mesh)
        """
        return _bullet.btTriangleIndexVertexArray_addIndexedMesh(self, mesh, indexType)


    def getLockedVertexIndexBase(self, vertexbase, numverts, type, vertexStride, indexbase, indexstride, numfaces, indicestype, subpart=0):
        """
        getLockedVertexIndexBase(btTriangleIndexVertexArray self, unsigned char ** vertexbase, int & numverts, PHY_ScalarType & type, int & vertexStride, unsigned char ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype, int subpart=0)
        getLockedVertexIndexBase(btTriangleIndexVertexArray self, unsigned char ** vertexbase, int & numverts, PHY_ScalarType & type, int & vertexStride, unsigned char ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype)
        """
        return _bullet.btTriangleIndexVertexArray_getLockedVertexIndexBase(self, vertexbase, numverts, type, vertexStride, indexbase, indexstride, numfaces, indicestype, subpart)


    def getLockedReadOnlyVertexIndexBase(self, vertexbase, numverts, type, vertexStride, indexbase, indexstride, numfaces, indicestype, subpart=0):
        """
        getLockedReadOnlyVertexIndexBase(btTriangleIndexVertexArray self, unsigned char const ** vertexbase, int & numverts, PHY_ScalarType & type, int & vertexStride, unsigned char const ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype, int subpart=0)
        getLockedReadOnlyVertexIndexBase(btTriangleIndexVertexArray self, unsigned char const ** vertexbase, int & numverts, PHY_ScalarType & type, int & vertexStride, unsigned char const ** indexbase, int & indexstride, int & numfaces, PHY_ScalarType & indicestype)
        """
        return _bullet.btTriangleIndexVertexArray_getLockedReadOnlyVertexIndexBase(self, vertexbase, numverts, type, vertexStride, indexbase, indexstride, numfaces, indicestype, subpart)


    def getIndexedMeshArray(self, *args):
        """
        getIndexedMeshArray(btTriangleIndexVertexArray self) -> IndexedMeshArray
        getIndexedMeshArray(btTriangleIndexVertexArray self) -> IndexedMeshArray const &
        """
        return _bullet.btTriangleIndexVertexArray_getIndexedMeshArray(self, *args)

btTriangleIndexVertexArray_swigregister = _bullet.btTriangleIndexVertexArray_swigregister
btTriangleIndexVertexArray_swigregister(btTriangleIndexVertexArray)

class btMaterialProperties(_object):
    """Proxy of C++ btMaterialProperties class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMaterialProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMaterialProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_numMaterials"] = _bullet.btMaterialProperties_m_numMaterials_set
    __swig_getmethods__["m_numMaterials"] = _bullet.btMaterialProperties_m_numMaterials_get
    if _newclass:
        m_numMaterials = _swig_property(_bullet.btMaterialProperties_m_numMaterials_get, _bullet.btMaterialProperties_m_numMaterials_set)
    __swig_setmethods__["m_materialBase"] = _bullet.btMaterialProperties_m_materialBase_set
    __swig_getmethods__["m_materialBase"] = _bullet.btMaterialProperties_m_materialBase_get
    if _newclass:
        m_materialBase = _swig_property(_bullet.btMaterialProperties_m_materialBase_get, _bullet.btMaterialProperties_m_materialBase_set)
    __swig_setmethods__["m_materialStride"] = _bullet.btMaterialProperties_m_materialStride_set
    __swig_getmethods__["m_materialStride"] = _bullet.btMaterialProperties_m_materialStride_get
    if _newclass:
        m_materialStride = _swig_property(_bullet.btMaterialProperties_m_materialStride_get, _bullet.btMaterialProperties_m_materialStride_set)
    __swig_setmethods__["m_materialType"] = _bullet.btMaterialProperties_m_materialType_set
    __swig_getmethods__["m_materialType"] = _bullet.btMaterialProperties_m_materialType_get
    if _newclass:
        m_materialType = _swig_property(_bullet.btMaterialProperties_m_materialType_get, _bullet.btMaterialProperties_m_materialType_set)
    __swig_setmethods__["m_numTriangles"] = _bullet.btMaterialProperties_m_numTriangles_set
    __swig_getmethods__["m_numTriangles"] = _bullet.btMaterialProperties_m_numTriangles_get
    if _newclass:
        m_numTriangles = _swig_property(_bullet.btMaterialProperties_m_numTriangles_get, _bullet.btMaterialProperties_m_numTriangles_set)
    __swig_setmethods__["m_triangleMaterialsBase"] = _bullet.btMaterialProperties_m_triangleMaterialsBase_set
    __swig_getmethods__["m_triangleMaterialsBase"] = _bullet.btMaterialProperties_m_triangleMaterialsBase_get
    if _newclass:
        m_triangleMaterialsBase = _swig_property(_bullet.btMaterialProperties_m_triangleMaterialsBase_get, _bullet.btMaterialProperties_m_triangleMaterialsBase_set)
    __swig_setmethods__["m_triangleMaterialStride"] = _bullet.btMaterialProperties_m_triangleMaterialStride_set
    __swig_getmethods__["m_triangleMaterialStride"] = _bullet.btMaterialProperties_m_triangleMaterialStride_get
    if _newclass:
        m_triangleMaterialStride = _swig_property(_bullet.btMaterialProperties_m_triangleMaterialStride_get, _bullet.btMaterialProperties_m_triangleMaterialStride_set)
    __swig_setmethods__["m_triangleType"] = _bullet.btMaterialProperties_m_triangleType_set
    __swig_getmethods__["m_triangleType"] = _bullet.btMaterialProperties_m_triangleType_get
    if _newclass:
        m_triangleType = _swig_property(_bullet.btMaterialProperties_m_triangleType_get, _bullet.btMaterialProperties_m_triangleType_set)

    def __init__(self):
        """__init__(btMaterialProperties self) -> btMaterialProperties"""
        this = _bullet.new_btMaterialProperties()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMaterialProperties
    __del__ = lambda self: None
btMaterialProperties_swigregister = _bullet.btMaterialProperties_swigregister
btMaterialProperties_swigregister(btMaterialProperties)

class btTriangleIndexVertexMaterialArray(btTriangleIndexVertexArray):
    """Proxy of C++ btTriangleIndexVertexMaterialArray class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleIndexVertexArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleIndexVertexMaterialArray, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleIndexVertexArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleIndexVertexMaterialArray, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btTriangleIndexVertexMaterialArray self) -> btTriangleIndexVertexMaterialArray
        __init__(btTriangleIndexVertexMaterialArray self, int numTriangles, int * triangleIndexBase, int triangleIndexStride, int numVertices, btScalar * vertexBase, int vertexStride, int numMaterials, unsigned char * materialBase, int materialStride, int * triangleMaterialsBase, int materialIndexStride) -> btTriangleIndexVertexMaterialArray
        """
        this = _bullet.new_btTriangleIndexVertexMaterialArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTriangleIndexVertexMaterialArray
    __del__ = lambda self: None

    def addMaterialProperties(self, mat, triangleType=PHY_INTEGER):
        """
        addMaterialProperties(btTriangleIndexVertexMaterialArray self, btMaterialProperties mat, PHY_ScalarType triangleType=PHY_INTEGER)
        addMaterialProperties(btTriangleIndexVertexMaterialArray self, btMaterialProperties mat)
        """
        return _bullet.btTriangleIndexVertexMaterialArray_addMaterialProperties(self, mat, triangleType)


    def getLockedMaterialBase(self, materialBase, numMaterials, materialType, materialStride, triangleMaterialBase, numTriangles, triangleMaterialStride, triangleType, subpart=0):
        """
        getLockedMaterialBase(btTriangleIndexVertexMaterialArray self, unsigned char ** materialBase, int & numMaterials, PHY_ScalarType & materialType, int & materialStride, unsigned char ** triangleMaterialBase, int & numTriangles, int & triangleMaterialStride, PHY_ScalarType & triangleType, int subpart=0)
        getLockedMaterialBase(btTriangleIndexVertexMaterialArray self, unsigned char ** materialBase, int & numMaterials, PHY_ScalarType & materialType, int & materialStride, unsigned char ** triangleMaterialBase, int & numTriangles, int & triangleMaterialStride, PHY_ScalarType & triangleType)
        """
        return _bullet.btTriangleIndexVertexMaterialArray_getLockedMaterialBase(self, materialBase, numMaterials, materialType, materialStride, triangleMaterialBase, numTriangles, triangleMaterialStride, triangleType, subpart)


    def getLockedReadOnlyMaterialBase(self, materialBase, numMaterials, materialType, materialStride, triangleMaterialBase, numTriangles, triangleMaterialStride, triangleType, subpart=0):
        """
        getLockedReadOnlyMaterialBase(btTriangleIndexVertexMaterialArray self, unsigned char const ** materialBase, int & numMaterials, PHY_ScalarType & materialType, int & materialStride, unsigned char const ** triangleMaterialBase, int & numTriangles, int & triangleMaterialStride, PHY_ScalarType & triangleType, int subpart=0)
        getLockedReadOnlyMaterialBase(btTriangleIndexVertexMaterialArray self, unsigned char const ** materialBase, int & numMaterials, PHY_ScalarType & materialType, int & materialStride, unsigned char const ** triangleMaterialBase, int & numTriangles, int & triangleMaterialStride, PHY_ScalarType & triangleType)
        """
        return _bullet.btTriangleIndexVertexMaterialArray_getLockedReadOnlyMaterialBase(self, materialBase, numMaterials, materialType, materialStride, triangleMaterialBase, numTriangles, triangleMaterialStride, triangleType, subpart)

btTriangleIndexVertexMaterialArray_swigregister = _bullet.btTriangleIndexVertexMaterialArray_swigregister
btTriangleIndexVertexMaterialArray_swigregister(btTriangleIndexVertexMaterialArray)

class btTriangleMesh(btTriangleIndexVertexArray):
    """Proxy of C++ btTriangleMesh class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleIndexVertexArray]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleIndexVertexArray]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleMesh, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_weldingThreshold"] = _bullet.btTriangleMesh_m_weldingThreshold_set
    __swig_getmethods__["m_weldingThreshold"] = _bullet.btTriangleMesh_m_weldingThreshold_get
    if _newclass:
        m_weldingThreshold = _swig_property(_bullet.btTriangleMesh_m_weldingThreshold_get, _bullet.btTriangleMesh_m_weldingThreshold_set)

    def __init__(self, use32bitIndices=True, use4componentVertices=True):
        """
        __init__(btTriangleMesh self, bool use32bitIndices=True, bool use4componentVertices=True) -> btTriangleMesh
        __init__(btTriangleMesh self, bool use32bitIndices=True) -> btTriangleMesh
        __init__(btTriangleMesh self) -> btTriangleMesh
        """
        this = _bullet.new_btTriangleMesh(use32bitIndices, use4componentVertices)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getUse32bitIndices(self):
        """getUse32bitIndices(btTriangleMesh self) -> bool"""
        return _bullet.btTriangleMesh_getUse32bitIndices(self)


    def getUse4componentVertices(self):
        """getUse4componentVertices(btTriangleMesh self) -> bool"""
        return _bullet.btTriangleMesh_getUse4componentVertices(self)


    def addTriangle(self, vertex0, vertex1, vertex2, removeDuplicateVertices=False):
        """
        addTriangle(btTriangleMesh self, btVector3 const & vertex0, btVector3 const & vertex1, btVector3 const & vertex2, bool removeDuplicateVertices=False)
        addTriangle(btTriangleMesh self, btVector3 const & vertex0, btVector3 const & vertex1, btVector3 const & vertex2)
        """
        return _bullet.btTriangleMesh_addTriangle(self, vertex0, vertex1, vertex2, removeDuplicateVertices)


    def addTriangleIndices(self, index1, index2, index3):
        """addTriangleIndices(btTriangleMesh self, int index1, int index2, int index3)"""
        return _bullet.btTriangleMesh_addTriangleIndices(self, index1, index2, index3)


    def getNumTriangles(self):
        """getNumTriangles(btTriangleMesh self) -> int"""
        return _bullet.btTriangleMesh_getNumTriangles(self)


    def findOrAddVertex(self, vertex, removeDuplicateVertices):
        """findOrAddVertex(btTriangleMesh self, btVector3 const & vertex, bool removeDuplicateVertices) -> int"""
        return _bullet.btTriangleMesh_findOrAddVertex(self, vertex, removeDuplicateVertices)


    def addIndex(self, index):
        """addIndex(btTriangleMesh self, int index)"""
        return _bullet.btTriangleMesh_addIndex(self, index)

    __swig_destroy__ = _bullet.delete_btTriangleMesh
    __del__ = lambda self: None
btTriangleMesh_swigregister = _bullet.btTriangleMesh_swigregister
btTriangleMesh_swigregister(btTriangleMesh)

class btTriangleShape(btPolyhedralConvexShape):
    """Proxy of C++ btTriangleShape class."""

    __swig_setmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btPolyhedralConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vertices1"] = _bullet.btTriangleShape_m_vertices1_set
    __swig_getmethods__["m_vertices1"] = _bullet.btTriangleShape_m_vertices1_get
    if _newclass:
        m_vertices1 = _swig_property(_bullet.btTriangleShape_m_vertices1_get, _bullet.btTriangleShape_m_vertices1_set)

    def getVertexPtr(self, *args):
        """
        getVertexPtr(btTriangleShape self, int index) -> btVector3
        getVertexPtr(btTriangleShape self, int index) -> btVector3 const &
        """
        return _bullet.btTriangleShape_getVertexPtr(self, *args)


    def __init__(self, *args):
        """
        __init__(btTriangleShape self) -> btTriangleShape
        __init__(btTriangleShape self, btVector3 const & p0, btVector3 const & p1, btVector3 const & p2) -> btTriangleShape
        """
        this = _bullet.new_btTriangleShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcNormal(self, normal):
        """calcNormal(btTriangleShape self, btVector3 & normal)"""
        return _bullet.btTriangleShape_calcNormal(self, normal)


    def getPlaneEquation(self, i, planeNormal, planeSupport):
        """getPlaneEquation(btTriangleShape self, int i, btVector3 & planeNormal, btVector3 & planeSupport)"""
        return _bullet.btTriangleShape_getPlaneEquation(self, i, planeNormal, planeSupport)

    __swig_destroy__ = _bullet.delete_btTriangleShape
    __del__ = lambda self: None
btTriangleShape_swigregister = _bullet.btTriangleShape_swigregister
btTriangleShape_swigregister(btTriangleShape)

class btUniformScalingShape(btConvexShape):
    """Proxy of C++ btUniformScalingShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btUniformScalingShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btUniformScalingShape, name)
    __repr__ = _swig_repr

    def __init__(self, convexChildShape, uniformScalingFactor):
        """__init__(btUniformScalingShape self, btConvexShape convexChildShape, btScalar uniformScalingFactor) -> btUniformScalingShape"""
        this = _bullet.new_btUniformScalingShape(convexChildShape, uniformScalingFactor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btUniformScalingShape
    __del__ = lambda self: None

    def getUniformScalingFactor(self):
        """getUniformScalingFactor(btUniformScalingShape self) -> btScalar"""
        return _bullet.btUniformScalingShape_getUniformScalingFactor(self)


    def getChildShape(self, *args):
        """
        getChildShape(btUniformScalingShape self) -> btConvexShape
        getChildShape(btUniformScalingShape self) -> btConvexShape
        """
        return _bullet.btUniformScalingShape_getChildShape(self, *args)

btUniformScalingShape_swigregister = _bullet.btUniformScalingShape_swigregister
btUniformScalingShape_swigregister(btUniformScalingShape)

class btIDebugDraw(_object):
    """Proxy of C++ btIDebugDraw class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btIDebugDraw, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btIDebugDraw, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DBG_NoDebug = _bullet.btIDebugDraw_DBG_NoDebug
    DBG_DrawWireframe = _bullet.btIDebugDraw_DBG_DrawWireframe
    DBG_DrawAabb = _bullet.btIDebugDraw_DBG_DrawAabb
    DBG_DrawFeaturesText = _bullet.btIDebugDraw_DBG_DrawFeaturesText
    DBG_DrawContactPoints = _bullet.btIDebugDraw_DBG_DrawContactPoints
    DBG_NoDeactivation = _bullet.btIDebugDraw_DBG_NoDeactivation
    DBG_NoHelpText = _bullet.btIDebugDraw_DBG_NoHelpText
    DBG_DrawText = _bullet.btIDebugDraw_DBG_DrawText
    DBG_ProfileTimings = _bullet.btIDebugDraw_DBG_ProfileTimings
    DBG_EnableSatComparison = _bullet.btIDebugDraw_DBG_EnableSatComparison
    DBG_DisableBulletLCP = _bullet.btIDebugDraw_DBG_DisableBulletLCP
    DBG_EnableCCD = _bullet.btIDebugDraw_DBG_EnableCCD
    DBG_DrawConstraints = _bullet.btIDebugDraw_DBG_DrawConstraints
    DBG_DrawConstraintLimits = _bullet.btIDebugDraw_DBG_DrawConstraintLimits
    DBG_FastWireframe = _bullet.btIDebugDraw_DBG_FastWireframe
    DBG_DrawNormals = _bullet.btIDebugDraw_DBG_DrawNormals
    DBG_DrawFrames = _bullet.btIDebugDraw_DBG_DrawFrames
    DBG_MAX_DEBUG_DRAW_MODE = _bullet.btIDebugDraw_DBG_MAX_DEBUG_DRAW_MODE
    __swig_destroy__ = _bullet.delete_btIDebugDraw
    __del__ = lambda self: None

    def getDefaultColors(self):
        """getDefaultColors(btIDebugDraw self) -> btIDebugDraw::DefaultColors"""
        return _bullet.btIDebugDraw_getDefaultColors(self)


    def setDefaultColors(self, arg2):
        """setDefaultColors(btIDebugDraw self, btIDebugDraw::DefaultColors const & arg2)"""
        return _bullet.btIDebugDraw_setDefaultColors(self, arg2)


    def drawLine(self, *args):
        """
        drawLine(btIDebugDraw self, btVector3 const & arg2, btVector3 const & to, btVector3 const & color)
        drawLine(btIDebugDraw self, btVector3 const & arg2, btVector3 const & to, btVector3 const & fromColor, btVector3 const & toColor)
        """
        return _bullet.btIDebugDraw_drawLine(self, *args)


    def drawSphere(self, *args):
        """
        drawSphere(btIDebugDraw self, btScalar radius, btTransform const & transform, btVector3 const & color)
        drawSphere(btIDebugDraw self, btVector3 const & p, btScalar radius, btVector3 const & color)
        """
        return _bullet.btIDebugDraw_drawSphere(self, *args)


    def drawTriangle(self, *args):
        """
        drawTriangle(btIDebugDraw self, btVector3 const & v0, btVector3 const & v1, btVector3 const & v2, btVector3 const & arg5, btVector3 const & arg6, btVector3 const & arg7, btVector3 const & color, btScalar alpha)
        drawTriangle(btIDebugDraw self, btVector3 const & v0, btVector3 const & v1, btVector3 const & v2, btVector3 const & color, btScalar arg6)
        """
        return _bullet.btIDebugDraw_drawTriangle(self, *args)


    def drawContactPoint(self, PointOnB, normalOnB, distance, lifeTime, color):
        """drawContactPoint(btIDebugDraw self, btVector3 const & PointOnB, btVector3 const & normalOnB, btScalar distance, int lifeTime, btVector3 const & color)"""
        return _bullet.btIDebugDraw_drawContactPoint(self, PointOnB, normalOnB, distance, lifeTime, color)


    def reportErrorWarning(self, warningString):
        """reportErrorWarning(btIDebugDraw self, char const * warningString)"""
        return _bullet.btIDebugDraw_reportErrorWarning(self, warningString)


    def draw3dText(self, location, textString):
        """draw3dText(btIDebugDraw self, btVector3 const & location, char const * textString)"""
        return _bullet.btIDebugDraw_draw3dText(self, location, textString)


    def setDebugMode(self, debugMode):
        """setDebugMode(btIDebugDraw self, int debugMode)"""
        return _bullet.btIDebugDraw_setDebugMode(self, debugMode)


    def getDebugMode(self):
        """getDebugMode(btIDebugDraw self) -> int"""
        return _bullet.btIDebugDraw_getDebugMode(self)


    def drawAabb(self, arg2, to, color):
        """drawAabb(btIDebugDraw self, btVector3 const & arg2, btVector3 const & to, btVector3 const & color)"""
        return _bullet.btIDebugDraw_drawAabb(self, arg2, to, color)


    def drawTransform(self, transform, orthoLen):
        """drawTransform(btIDebugDraw self, btTransform const & transform, btScalar orthoLen)"""
        return _bullet.btIDebugDraw_drawTransform(self, transform, orthoLen)


    def drawArc(self, *args):
        """
        drawArc(btIDebugDraw self, btVector3 const & center, btVector3 const & normal, btVector3 const & axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, btVector3 const & color, bool drawSect, btScalar stepDegrees)
        drawArc(btIDebugDraw self, btVector3 const & center, btVector3 const & normal, btVector3 const & axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, btVector3 const & color, bool drawSect)
        """
        return _bullet.btIDebugDraw_drawArc(self, *args)


    def drawSpherePatch(self, *args):
        """
        drawSpherePatch(btIDebugDraw self, btVector3 const & center, btVector3 const & up, btVector3 const & axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, btVector3 const & color, btScalar stepDegrees, bool drawCenter=True)
        drawSpherePatch(btIDebugDraw self, btVector3 const & center, btVector3 const & up, btVector3 const & axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, btVector3 const & color, btScalar stepDegrees)
        drawSpherePatch(btIDebugDraw self, btVector3 const & center, btVector3 const & up, btVector3 const & axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, btVector3 const & color)
        """
        return _bullet.btIDebugDraw_drawSpherePatch(self, *args)


    def drawBox(self, *args):
        """
        drawBox(btIDebugDraw self, btVector3 const & bbMin, btVector3 const & bbMax, btVector3 const & color)
        drawBox(btIDebugDraw self, btVector3 const & bbMin, btVector3 const & bbMax, btTransform const & trans, btVector3 const & color)
        """
        return _bullet.btIDebugDraw_drawBox(self, *args)


    def drawCapsule(self, radius, halfHeight, upAxis, transform, color):
        """drawCapsule(btIDebugDraw self, btScalar radius, btScalar halfHeight, int upAxis, btTransform const & transform, btVector3 const & color)"""
        return _bullet.btIDebugDraw_drawCapsule(self, radius, halfHeight, upAxis, transform, color)


    def drawCylinder(self, radius, halfHeight, upAxis, transform, color):
        """drawCylinder(btIDebugDraw self, btScalar radius, btScalar halfHeight, int upAxis, btTransform const & transform, btVector3 const & color)"""
        return _bullet.btIDebugDraw_drawCylinder(self, radius, halfHeight, upAxis, transform, color)


    def drawCone(self, radius, height, upAxis, transform, color):
        """drawCone(btIDebugDraw self, btScalar radius, btScalar height, int upAxis, btTransform const & transform, btVector3 const & color)"""
        return _bullet.btIDebugDraw_drawCone(self, radius, height, upAxis, transform, color)


    def drawPlane(self, planeNormal, planeConst, transform, color):
        """drawPlane(btIDebugDraw self, btVector3 const & planeNormal, btScalar planeConst, btTransform const & transform, btVector3 const & color)"""
        return _bullet.btIDebugDraw_drawPlane(self, planeNormal, planeConst, transform, color)


    def flushLines(self):
        """flushLines(btIDebugDraw self)"""
        return _bullet.btIDebugDraw_flushLines(self)

btIDebugDraw_swigregister = _bullet.btIDebugDraw_swigregister
btIDebugDraw_swigregister(btIDebugDraw)

class btConvexCast(_object):
    """Proxy of C++ btConvexCast class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexCast, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexCast, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btConvexCast
    __del__ = lambda self: None

    def calcTimeOfImpact(self, fromA, toA, fromB, toB, result):
        """calcTimeOfImpact(btConvexCast self, btTransform const & fromA, btTransform const & toA, btTransform const & fromB, btTransform const & toB, btConvexCast::CastResult & result) -> bool"""
        return _bullet.btConvexCast_calcTimeOfImpact(self, fromA, toA, fromB, toB, result)

btConvexCast_swigregister = _bullet.btConvexCast_swigregister
btConvexCast_swigregister(btConvexCast)

class btContinuousConvexCollision(btConvexCast):
    """Proxy of C++ btContinuousConvexCollision class."""

    __swig_setmethods__ = {}
    for _s in [btConvexCast]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btContinuousConvexCollision, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexCast]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btContinuousConvexCollision, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btContinuousConvexCollision self, btConvexShape shapeA, btConvexShape shapeB, btVoronoiSimplexSolver simplexSolver, btConvexPenetrationDepthSolver penetrationDepthSolver) -> btContinuousConvexCollision
        __init__(btContinuousConvexCollision self, btConvexShape shapeA, btStaticPlaneShape plane) -> btContinuousConvexCollision
        """
        this = _bullet.new_btContinuousConvexCollision(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btContinuousConvexCollision
    __del__ = lambda self: None
btContinuousConvexCollision_swigregister = _bullet.btContinuousConvexCollision_swigregister
btContinuousConvexCollision_swigregister(btContinuousConvexCollision)

class btConvexPenetrationDepthSolver(_object):
    """Proxy of C++ btConvexPenetrationDepthSolver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexPenetrationDepthSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexPenetrationDepthSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btConvexPenetrationDepthSolver
    __del__ = lambda self: None

    def calcPenDepth(self, simplexSolver, convexA, convexB, transA, transB, v, pa, pb, debugDraw):
        """calcPenDepth(btConvexPenetrationDepthSolver self, btVoronoiSimplexSolver simplexSolver, btConvexShape convexA, btConvexShape convexB, btTransform const & transA, btTransform const & transB, btVector3 & v, btVector3 & pa, btVector3 & pb, btIDebugDraw debugDraw) -> bool"""
        return _bullet.btConvexPenetrationDepthSolver_calcPenDepth(self, simplexSolver, convexA, convexB, transA, transB, v, pa, pb, debugDraw)

btConvexPenetrationDepthSolver_swigregister = _bullet.btConvexPenetrationDepthSolver_swigregister
btConvexPenetrationDepthSolver_swigregister(btConvexPenetrationDepthSolver)

class btGjkConvexCast(btConvexCast):
    """Proxy of C++ btGjkConvexCast class."""

    __swig_setmethods__ = {}
    for _s in [btConvexCast]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGjkConvexCast, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexCast]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGjkConvexCast, name)
    __repr__ = _swig_repr

    def __init__(self, convexA, convexB, simplexSolver):
        """__init__(btGjkConvexCast self, btConvexShape convexA, btConvexShape convexB, btVoronoiSimplexSolver simplexSolver) -> btGjkConvexCast"""
        this = _bullet.new_btGjkConvexCast(convexA, convexB, simplexSolver)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGjkConvexCast
    __del__ = lambda self: None
btGjkConvexCast_swigregister = _bullet.btGjkConvexCast_swigregister
btGjkConvexCast_swigregister(btGjkConvexCast)

class btGjkEpaSolver2(_object):
    """Proxy of C++ btGjkEpaSolver2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGjkEpaSolver2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGjkEpaSolver2, name)
    __repr__ = _swig_repr

    def StackSizeRequirement():
        """StackSizeRequirement() -> int"""
        return _bullet.btGjkEpaSolver2_StackSizeRequirement()

    StackSizeRequirement = staticmethod(StackSizeRequirement)

    def Distance(shape0, wtrs0, shape1, wtrs1, guess, results):
        """Distance(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results) -> bool"""
        return _bullet.btGjkEpaSolver2_Distance(shape0, wtrs0, shape1, wtrs1, guess, results)

    Distance = staticmethod(Distance)

    def Penetration(shape0, wtrs0, shape1, wtrs1, guess, results, usemargins=True):
        """
        Penetration(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results, bool usemargins=True) -> bool
        Penetration(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results) -> bool
        """
        return _bullet.btGjkEpaSolver2_Penetration(shape0, wtrs0, shape1, wtrs1, guess, results, usemargins)

    Penetration = staticmethod(Penetration)

    def SignedDistance(*args):
        """
        SignedDistance(btVector3 const & position, btScalar margin, btConvexShape shape, btTransform const & wtrs, btGjkEpaSolver2::sResults & results) -> btScalar
        SignedDistance(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results) -> bool
        """
        return _bullet.btGjkEpaSolver2_SignedDistance(*args)

    SignedDistance = staticmethod(SignedDistance)

    def __init__(self):
        """__init__(btGjkEpaSolver2 self) -> btGjkEpaSolver2"""
        this = _bullet.new_btGjkEpaSolver2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGjkEpaSolver2
    __del__ = lambda self: None
btGjkEpaSolver2_swigregister = _bullet.btGjkEpaSolver2_swigregister
btGjkEpaSolver2_swigregister(btGjkEpaSolver2)

def btGjkEpaSolver2_StackSizeRequirement():
    """btGjkEpaSolver2_StackSizeRequirement() -> int"""
    return _bullet.btGjkEpaSolver2_StackSizeRequirement()

def btGjkEpaSolver2_Distance(shape0, wtrs0, shape1, wtrs1, guess, results):
    """btGjkEpaSolver2_Distance(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results) -> bool"""
    return _bullet.btGjkEpaSolver2_Distance(shape0, wtrs0, shape1, wtrs1, guess, results)

def btGjkEpaSolver2_Penetration(shape0, wtrs0, shape1, wtrs1, guess, results, usemargins=True):
    """
    Penetration(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results, bool usemargins=True) -> bool
    btGjkEpaSolver2_Penetration(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results) -> bool
    """
    return _bullet.btGjkEpaSolver2_Penetration(shape0, wtrs0, shape1, wtrs1, guess, results, usemargins)

def btGjkEpaSolver2_SignedDistance(*args):
    """
    SignedDistance(btVector3 const & position, btScalar margin, btConvexShape shape, btTransform const & wtrs, btGjkEpaSolver2::sResults & results) -> btScalar
    btGjkEpaSolver2_SignedDistance(btConvexShape shape0, btTransform const & wtrs0, btConvexShape shape1, btTransform const & wtrs1, btVector3 const & guess, btGjkEpaSolver2::sResults & results) -> bool
    """
    return _bullet.btGjkEpaSolver2_SignedDistance(*args)

class btGjkEpaPenetrationDepthSolver(btConvexPenetrationDepthSolver):
    """Proxy of C++ btGjkEpaPenetrationDepthSolver class."""

    __swig_setmethods__ = {}
    for _s in [btConvexPenetrationDepthSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGjkEpaPenetrationDepthSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexPenetrationDepthSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGjkEpaPenetrationDepthSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btGjkEpaPenetrationDepthSolver self) -> btGjkEpaPenetrationDepthSolver"""
        this = _bullet.new_btGjkEpaPenetrationDepthSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGjkEpaPenetrationDepthSolver
    __del__ = lambda self: None
btGjkEpaPenetrationDepthSolver_swigregister = _bullet.btGjkEpaPenetrationDepthSolver_swigregister
btGjkEpaPenetrationDepthSolver_swigregister(btGjkEpaPenetrationDepthSolver)

class btMinkowskiPenetrationDepthSolver(btConvexPenetrationDepthSolver):
    """Proxy of C++ btMinkowskiPenetrationDepthSolver class."""

    __swig_setmethods__ = {}
    for _s in [btConvexPenetrationDepthSolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMinkowskiPenetrationDepthSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexPenetrationDepthSolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMinkowskiPenetrationDepthSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btMinkowskiPenetrationDepthSolver self) -> btMinkowskiPenetrationDepthSolver"""
        this = _bullet.new_btMinkowskiPenetrationDepthSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMinkowskiPenetrationDepthSolver
    __del__ = lambda self: None
btMinkowskiPenetrationDepthSolver_swigregister = _bullet.btMinkowskiPenetrationDepthSolver_swigregister
btMinkowskiPenetrationDepthSolver_swigregister(btMinkowskiPenetrationDepthSolver)

class btPointCollector(_object):
    """Proxy of C++ btPointCollector class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPointCollector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPointCollector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_normalOnBInWorld"] = _bullet.btPointCollector_m_normalOnBInWorld_set
    __swig_getmethods__["m_normalOnBInWorld"] = _bullet.btPointCollector_m_normalOnBInWorld_get
    if _newclass:
        m_normalOnBInWorld = _swig_property(_bullet.btPointCollector_m_normalOnBInWorld_get, _bullet.btPointCollector_m_normalOnBInWorld_set)
    __swig_setmethods__["m_pointInWorld"] = _bullet.btPointCollector_m_pointInWorld_set
    __swig_getmethods__["m_pointInWorld"] = _bullet.btPointCollector_m_pointInWorld_get
    if _newclass:
        m_pointInWorld = _swig_property(_bullet.btPointCollector_m_pointInWorld_get, _bullet.btPointCollector_m_pointInWorld_set)
    __swig_setmethods__["m_distance"] = _bullet.btPointCollector_m_distance_set
    __swig_getmethods__["m_distance"] = _bullet.btPointCollector_m_distance_get
    if _newclass:
        m_distance = _swig_property(_bullet.btPointCollector_m_distance_get, _bullet.btPointCollector_m_distance_set)
    __swig_setmethods__["m_hasResult"] = _bullet.btPointCollector_m_hasResult_set
    __swig_getmethods__["m_hasResult"] = _bullet.btPointCollector_m_hasResult_get
    if _newclass:
        m_hasResult = _swig_property(_bullet.btPointCollector_m_hasResult_get, _bullet.btPointCollector_m_hasResult_set)

    def __init__(self):
        """__init__(btPointCollector self) -> btPointCollector"""
        this = _bullet.new_btPointCollector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setShapeIdentifiersA(self, partId0, index0):
        """setShapeIdentifiersA(btPointCollector self, int partId0, int index0)"""
        return _bullet.btPointCollector_setShapeIdentifiersA(self, partId0, index0)


    def setShapeIdentifiersB(self, partId1, index1):
        """setShapeIdentifiersB(btPointCollector self, int partId1, int index1)"""
        return _bullet.btPointCollector_setShapeIdentifiersB(self, partId1, index1)


    def addContactPoint(self, normalOnBInWorld, pointInWorld, depth):
        """addContactPoint(btPointCollector self, btVector3 const & normalOnBInWorld, btVector3 const & pointInWorld, btScalar depth)"""
        return _bullet.btPointCollector_addContactPoint(self, normalOnBInWorld, pointInWorld, depth)

    __swig_destroy__ = _bullet.delete_btPointCollector
    __del__ = lambda self: None
btPointCollector_swigregister = _bullet.btPointCollector_swigregister
btPointCollector_swigregister(btPointCollector)

class btTriangleRaycastCallback(btTriangleCallback):
    """Proxy of C++ btTriangleRaycastCallback class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleRaycastCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleRaycastCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_from"] = _bullet.btTriangleRaycastCallback_m_from_set
    __swig_getmethods__["m_from"] = _bullet.btTriangleRaycastCallback_m_from_get
    if _newclass:
        m_from = _swig_property(_bullet.btTriangleRaycastCallback_m_from_get, _bullet.btTriangleRaycastCallback_m_from_set)
    __swig_setmethods__["m_to"] = _bullet.btTriangleRaycastCallback_m_to_set
    __swig_getmethods__["m_to"] = _bullet.btTriangleRaycastCallback_m_to_get
    if _newclass:
        m_to = _swig_property(_bullet.btTriangleRaycastCallback_m_to_get, _bullet.btTriangleRaycastCallback_m_to_set)
    kF_None = _bullet.btTriangleRaycastCallback_kF_None
    kF_FilterBackfaces = _bullet.btTriangleRaycastCallback_kF_FilterBackfaces
    kF_KeepUnflippedNormal = _bullet.btTriangleRaycastCallback_kF_KeepUnflippedNormal
    kF_UseSubSimplexConvexCastRaytest = _bullet.btTriangleRaycastCallback_kF_UseSubSimplexConvexCastRaytest
    kF_UseGjkConvexCastRaytest = _bullet.btTriangleRaycastCallback_kF_UseGjkConvexCastRaytest
    kF_Terminator = _bullet.btTriangleRaycastCallback_kF_Terminator
    __swig_setmethods__["m_flags"] = _bullet.btTriangleRaycastCallback_m_flags_set
    __swig_getmethods__["m_flags"] = _bullet.btTriangleRaycastCallback_m_flags_get
    if _newclass:
        m_flags = _swig_property(_bullet.btTriangleRaycastCallback_m_flags_get, _bullet.btTriangleRaycastCallback_m_flags_set)
    __swig_setmethods__["m_hitFraction"] = _bullet.btTriangleRaycastCallback_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = _bullet.btTriangleRaycastCallback_m_hitFraction_get
    if _newclass:
        m_hitFraction = _swig_property(_bullet.btTriangleRaycastCallback_m_hitFraction_get, _bullet.btTriangleRaycastCallback_m_hitFraction_set)

    def reportHit(self, hitNormalLocal, hitFraction, partId, triangleIndex):
        """reportHit(btTriangleRaycastCallback self, btVector3 const & hitNormalLocal, btScalar hitFraction, int partId, int triangleIndex) -> btScalar"""
        return _bullet.btTriangleRaycastCallback_reportHit(self, hitNormalLocal, hitFraction, partId, triangleIndex)

    __swig_destroy__ = _bullet.delete_btTriangleRaycastCallback
    __del__ = lambda self: None
btTriangleRaycastCallback_swigregister = _bullet.btTriangleRaycastCallback_swigregister
btTriangleRaycastCallback_swigregister(btTriangleRaycastCallback)

class btTriangleConvexcastCallback(btTriangleCallback):
    """Proxy of C++ btTriangleConvexcastCallback class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriangleConvexcastCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTriangleConvexcastCallback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["m_convexShape"] = _bullet.btTriangleConvexcastCallback_m_convexShape_set
    __swig_getmethods__["m_convexShape"] = _bullet.btTriangleConvexcastCallback_m_convexShape_get
    if _newclass:
        m_convexShape = _swig_property(_bullet.btTriangleConvexcastCallback_m_convexShape_get, _bullet.btTriangleConvexcastCallback_m_convexShape_set)
    __swig_setmethods__["m_convexShapeFrom"] = _bullet.btTriangleConvexcastCallback_m_convexShapeFrom_set
    __swig_getmethods__["m_convexShapeFrom"] = _bullet.btTriangleConvexcastCallback_m_convexShapeFrom_get
    if _newclass:
        m_convexShapeFrom = _swig_property(_bullet.btTriangleConvexcastCallback_m_convexShapeFrom_get, _bullet.btTriangleConvexcastCallback_m_convexShapeFrom_set)
    __swig_setmethods__["m_convexShapeTo"] = _bullet.btTriangleConvexcastCallback_m_convexShapeTo_set
    __swig_getmethods__["m_convexShapeTo"] = _bullet.btTriangleConvexcastCallback_m_convexShapeTo_get
    if _newclass:
        m_convexShapeTo = _swig_property(_bullet.btTriangleConvexcastCallback_m_convexShapeTo_get, _bullet.btTriangleConvexcastCallback_m_convexShapeTo_set)
    __swig_setmethods__["m_triangleToWorld"] = _bullet.btTriangleConvexcastCallback_m_triangleToWorld_set
    __swig_getmethods__["m_triangleToWorld"] = _bullet.btTriangleConvexcastCallback_m_triangleToWorld_get
    if _newclass:
        m_triangleToWorld = _swig_property(_bullet.btTriangleConvexcastCallback_m_triangleToWorld_get, _bullet.btTriangleConvexcastCallback_m_triangleToWorld_set)
    __swig_setmethods__["m_hitFraction"] = _bullet.btTriangleConvexcastCallback_m_hitFraction_set
    __swig_getmethods__["m_hitFraction"] = _bullet.btTriangleConvexcastCallback_m_hitFraction_get
    if _newclass:
        m_hitFraction = _swig_property(_bullet.btTriangleConvexcastCallback_m_hitFraction_get, _bullet.btTriangleConvexcastCallback_m_hitFraction_set)
    __swig_setmethods__["m_triangleCollisionMargin"] = _bullet.btTriangleConvexcastCallback_m_triangleCollisionMargin_set
    __swig_getmethods__["m_triangleCollisionMargin"] = _bullet.btTriangleConvexcastCallback_m_triangleCollisionMargin_get
    if _newclass:
        m_triangleCollisionMargin = _swig_property(_bullet.btTriangleConvexcastCallback_m_triangleCollisionMargin_get, _bullet.btTriangleConvexcastCallback_m_triangleCollisionMargin_set)
    __swig_setmethods__["m_allowedPenetration"] = _bullet.btTriangleConvexcastCallback_m_allowedPenetration_set
    __swig_getmethods__["m_allowedPenetration"] = _bullet.btTriangleConvexcastCallback_m_allowedPenetration_get
    if _newclass:
        m_allowedPenetration = _swig_property(_bullet.btTriangleConvexcastCallback_m_allowedPenetration_get, _bullet.btTriangleConvexcastCallback_m_allowedPenetration_set)

    def reportHit(self, hitNormalLocal, hitPointLocal, hitFraction, partId, triangleIndex):
        """reportHit(btTriangleConvexcastCallback self, btVector3 const & hitNormalLocal, btVector3 const & hitPointLocal, btScalar hitFraction, int partId, int triangleIndex) -> btScalar"""
        return _bullet.btTriangleConvexcastCallback_reportHit(self, hitNormalLocal, hitPointLocal, hitFraction, partId, triangleIndex)

    __swig_destroy__ = _bullet.delete_btTriangleConvexcastCallback
    __del__ = lambda self: None
btTriangleConvexcastCallback_swigregister = _bullet.btTriangleConvexcastCallback_swigregister
btTriangleConvexcastCallback_swigregister(btTriangleConvexcastCallback)

class btSubsimplexConvexCast(btConvexCast):
    """Proxy of C++ btSubsimplexConvexCast class."""

    __swig_setmethods__ = {}
    for _s in [btConvexCast]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSubsimplexConvexCast, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexCast]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSubsimplexConvexCast, name)
    __repr__ = _swig_repr

    def __init__(self, shapeA, shapeB, simplexSolver):
        """__init__(btSubsimplexConvexCast self, btConvexShape shapeA, btConvexShape shapeB, btVoronoiSimplexSolver simplexSolver) -> btSubsimplexConvexCast"""
        this = _bullet.new_btSubsimplexConvexCast(shapeA, shapeB, simplexSolver)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSubsimplexConvexCast
    __del__ = lambda self: None
btSubsimplexConvexCast_swigregister = _bullet.btSubsimplexConvexCast_swigregister
btSubsimplexConvexCast_swigregister(btSubsimplexConvexCast)

btRigidBodyDataName = _bullet.btRigidBodyDataName
BT_DISABLE_WORLD_GRAVITY = _bullet.BT_DISABLE_WORLD_GRAVITY
BT_ENABLE_GYROSCOPIC_FORCE_EXPLICIT = _bullet.BT_ENABLE_GYROSCOPIC_FORCE_EXPLICIT
BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_WORLD = _bullet.BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_WORLD
BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY = _bullet.BT_ENABLE_GYROSCOPIC_FORCE_IMPLICIT_BODY
BT_ENABLE_GYROPSCOPIC_FORCE = _bullet.BT_ENABLE_GYROPSCOPIC_FORCE
class btRigidBody(btCollisionObject):
    """Proxy of C++ btRigidBody class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBody, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBody, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btRigidBody self, btRigidBody::btRigidBodyConstructionInfo const & constructionInfo) -> btRigidBody
        __init__(btRigidBody self, btScalar mass, btMotionState motionState, btCollisionShape collisionShape, btVector3 const & localInertia) -> btRigidBody
        __init__(btRigidBody self, btScalar mass, btMotionState motionState, btCollisionShape collisionShape) -> btRigidBody
        """
        this = _bullet.new_btRigidBody(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btRigidBody
    __del__ = lambda self: None

    def proceedToTransform(self, newTrans):
        """proceedToTransform(btRigidBody self, btTransform const & newTrans)"""
        return _bullet.btRigidBody_proceedToTransform(self, newTrans)


    def upcast_const(colObj):
        """upcast_const(btCollisionObject colObj) -> btRigidBody"""
        return _bullet.btRigidBody_upcast_const(colObj)

    upcast_const = staticmethod(upcast_const)

    def upcast(colObj):
        """upcast(btCollisionObject colObj) -> btRigidBody"""
        return _bullet.btRigidBody_upcast(colObj)

    upcast = staticmethod(upcast)

    def predictIntegratedTransform(self, step, predictedTransform):
        """predictIntegratedTransform(btRigidBody self, btScalar step, btTransform & predictedTransform)"""
        return _bullet.btRigidBody_predictIntegratedTransform(self, step, predictedTransform)


    def saveKinematicState(self, step):
        """saveKinematicState(btRigidBody self, btScalar step)"""
        return _bullet.btRigidBody_saveKinematicState(self, step)


    def applyGravity(self):
        """applyGravity(btRigidBody self)"""
        return _bullet.btRigidBody_applyGravity(self)


    def setGravity(self, acceleration):
        """setGravity(btRigidBody self, btVector3 const & acceleration)"""
        return _bullet.btRigidBody_setGravity(self, acceleration)


    def getGravity(self):
        """getGravity(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getGravity(self)


    def setDamping(self, lin_damping, ang_damping):
        """setDamping(btRigidBody self, btScalar lin_damping, btScalar ang_damping)"""
        return _bullet.btRigidBody_setDamping(self, lin_damping, ang_damping)


    def getLinearDamping(self):
        """getLinearDamping(btRigidBody self) -> btScalar"""
        return _bullet.btRigidBody_getLinearDamping(self)


    def getAngularDamping(self):
        """getAngularDamping(btRigidBody self) -> btScalar"""
        return _bullet.btRigidBody_getAngularDamping(self)


    def getLinearSleepingThreshold(self):
        """getLinearSleepingThreshold(btRigidBody self) -> btScalar"""
        return _bullet.btRigidBody_getLinearSleepingThreshold(self)


    def getAngularSleepingThreshold(self):
        """getAngularSleepingThreshold(btRigidBody self) -> btScalar"""
        return _bullet.btRigidBody_getAngularSleepingThreshold(self)


    def applyDamping(self, timeStep):
        """applyDamping(btRigidBody self, btScalar timeStep)"""
        return _bullet.btRigidBody_applyDamping(self, timeStep)


    def getCollisionShape(self, *args):
        """
        getCollisionShape(btRigidBody self) -> btCollisionShape
        getCollisionShape(btRigidBody self) -> btCollisionShape
        """
        return _bullet.btRigidBody_getCollisionShape(self, *args)


    def setMassProps(self, mass, inertia):
        """setMassProps(btRigidBody self, btScalar mass, btVector3 const & inertia)"""
        return _bullet.btRigidBody_setMassProps(self, mass, inertia)


    def getLinearFactor(self):
        """getLinearFactor(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getLinearFactor(self)


    def setLinearFactor(self, linearFactor):
        """setLinearFactor(btRigidBody self, btVector3 const & linearFactor)"""
        return _bullet.btRigidBody_setLinearFactor(self, linearFactor)


    def getInvMass(self):
        """getInvMass(btRigidBody self) -> btScalar"""
        return _bullet.btRigidBody_getInvMass(self)


    def getInvInertiaTensorWorld(self):
        """getInvInertiaTensorWorld(btRigidBody self) -> btMatrix3x3 const &"""
        return _bullet.btRigidBody_getInvInertiaTensorWorld(self)


    def integrateVelocities(self, step):
        """integrateVelocities(btRigidBody self, btScalar step)"""
        return _bullet.btRigidBody_integrateVelocities(self, step)


    def setCenterOfMassTransform(self, xform):
        """setCenterOfMassTransform(btRigidBody self, btTransform const & xform)"""
        return _bullet.btRigidBody_setCenterOfMassTransform(self, xform)


    def applyCentralForce(self, force):
        """applyCentralForce(btRigidBody self, btVector3 const & force)"""
        return _bullet.btRigidBody_applyCentralForce(self, force)


    def getTotalForce(self):
        """getTotalForce(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getTotalForce(self)


    def getTotalTorque(self):
        """getTotalTorque(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getTotalTorque(self)


    def getInvInertiaDiagLocal(self):
        """getInvInertiaDiagLocal(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getInvInertiaDiagLocal(self)


    def setInvInertiaDiagLocal(self, diagInvInertia):
        """setInvInertiaDiagLocal(btRigidBody self, btVector3 const & diagInvInertia)"""
        return _bullet.btRigidBody_setInvInertiaDiagLocal(self, diagInvInertia)


    def setSleepingThresholds(self, linear, angular):
        """setSleepingThresholds(btRigidBody self, btScalar linear, btScalar angular)"""
        return _bullet.btRigidBody_setSleepingThresholds(self, linear, angular)


    def applyTorque(self, torque):
        """applyTorque(btRigidBody self, btVector3 const & torque)"""
        return _bullet.btRigidBody_applyTorque(self, torque)


    def applyForce(self, force, rel_pos):
        """applyForce(btRigidBody self, btVector3 const & force, btVector3 const & rel_pos)"""
        return _bullet.btRigidBody_applyForce(self, force, rel_pos)


    def applyCentralImpulse(self, impulse):
        """applyCentralImpulse(btRigidBody self, btVector3 const & impulse)"""
        return _bullet.btRigidBody_applyCentralImpulse(self, impulse)


    def applyTorqueImpulse(self, torque):
        """applyTorqueImpulse(btRigidBody self, btVector3 const & torque)"""
        return _bullet.btRigidBody_applyTorqueImpulse(self, torque)


    def applyImpulse(self, impulse, rel_pos):
        """applyImpulse(btRigidBody self, btVector3 const & impulse, btVector3 const & rel_pos)"""
        return _bullet.btRigidBody_applyImpulse(self, impulse, rel_pos)


    def clearForces(self):
        """clearForces(btRigidBody self)"""
        return _bullet.btRigidBody_clearForces(self)


    def updateInertiaTensor(self):
        """updateInertiaTensor(btRigidBody self)"""
        return _bullet.btRigidBody_updateInertiaTensor(self)


    def getCenterOfMassPosition(self):
        """getCenterOfMassPosition(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getCenterOfMassPosition(self)


    def getOrientation(self):
        """getOrientation(btRigidBody self) -> btQuaternion"""
        return _bullet.btRigidBody_getOrientation(self)


    def getCenterOfMassTransform(self):
        """getCenterOfMassTransform(btRigidBody self) -> btTransform const &"""
        return _bullet.btRigidBody_getCenterOfMassTransform(self)


    def getLinearVelocity(self):
        """getLinearVelocity(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getLinearVelocity(self)


    def getAngularVelocity(self):
        """getAngularVelocity(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getAngularVelocity(self)


    def setLinearVelocity(self, lin_vel):
        """setLinearVelocity(btRigidBody self, btVector3 const & lin_vel)"""
        return _bullet.btRigidBody_setLinearVelocity(self, lin_vel)


    def setAngularVelocity(self, ang_vel):
        """setAngularVelocity(btRigidBody self, btVector3 const & ang_vel)"""
        return _bullet.btRigidBody_setAngularVelocity(self, ang_vel)


    def getVelocityInLocalPoint(self, rel_pos):
        """getVelocityInLocalPoint(btRigidBody self, btVector3 const & rel_pos) -> btVector3"""
        return _bullet.btRigidBody_getVelocityInLocalPoint(self, rel_pos)


    def translate(self, v):
        """translate(btRigidBody self, btVector3 const & v)"""
        return _bullet.btRigidBody_translate(self, v)


    def getAabb(self, aabbMin, aabbMax):
        """getAabb(btRigidBody self, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btRigidBody_getAabb(self, aabbMin, aabbMax)


    def computeImpulseDenominator(self, pos, normal):
        """computeImpulseDenominator(btRigidBody self, btVector3 const & pos, btVector3 const & normal) -> btScalar"""
        return _bullet.btRigidBody_computeImpulseDenominator(self, pos, normal)


    def computeAngularImpulseDenominator(self, axis):
        """computeAngularImpulseDenominator(btRigidBody self, btVector3 const & axis) -> btScalar"""
        return _bullet.btRigidBody_computeAngularImpulseDenominator(self, axis)


    def updateDeactivation(self, timeStep):
        """updateDeactivation(btRigidBody self, btScalar timeStep)"""
        return _bullet.btRigidBody_updateDeactivation(self, timeStep)


    def wantsSleeping(self):
        """wantsSleeping(btRigidBody self) -> bool"""
        return _bullet.btRigidBody_wantsSleeping(self)


    def getBroadphaseProxy(self, *args):
        """
        getBroadphaseProxy(btRigidBody self) -> btBroadphaseProxy
        getBroadphaseProxy(btRigidBody self) -> btBroadphaseProxy
        """
        return _bullet.btRigidBody_getBroadphaseProxy(self, *args)


    def setNewBroadphaseProxy(self, broadphaseProxy):
        """setNewBroadphaseProxy(btRigidBody self, btBroadphaseProxy broadphaseProxy)"""
        return _bullet.btRigidBody_setNewBroadphaseProxy(self, broadphaseProxy)


    def getMotionState(self, *args):
        """
        getMotionState(btRigidBody self) -> btMotionState
        getMotionState(btRigidBody self) -> btMotionState
        """
        return _bullet.btRigidBody_getMotionState(self, *args)


    def setMotionState(self, motionState):
        """setMotionState(btRigidBody self, btMotionState motionState)"""
        return _bullet.btRigidBody_setMotionState(self, motionState)

    __swig_setmethods__["m_contactSolverType"] = _bullet.btRigidBody_m_contactSolverType_set
    __swig_getmethods__["m_contactSolverType"] = _bullet.btRigidBody_m_contactSolverType_get
    if _newclass:
        m_contactSolverType = _swig_property(_bullet.btRigidBody_m_contactSolverType_get, _bullet.btRigidBody_m_contactSolverType_set)
    __swig_setmethods__["m_frictionSolverType"] = _bullet.btRigidBody_m_frictionSolverType_set
    __swig_getmethods__["m_frictionSolverType"] = _bullet.btRigidBody_m_frictionSolverType_get
    if _newclass:
        m_frictionSolverType = _swig_property(_bullet.btRigidBody_m_frictionSolverType_get, _bullet.btRigidBody_m_frictionSolverType_set)

    def setAngularFactor(self, *args):
        """
        setAngularFactor(btRigidBody self, btVector3 const & angFac)
        setAngularFactor(btRigidBody self, btScalar angFac)
        """
        return _bullet.btRigidBody_setAngularFactor(self, *args)


    def getAngularFactor(self):
        """getAngularFactor(btRigidBody self) -> btVector3 const &"""
        return _bullet.btRigidBody_getAngularFactor(self)


    def isInWorld(self):
        """isInWorld(btRigidBody self) -> bool"""
        return _bullet.btRigidBody_isInWorld(self)


    def addConstraintRef(self, c):
        """addConstraintRef(btRigidBody self, btTypedConstraint c)"""
        return _bullet.btRigidBody_addConstraintRef(self, c)


    def removeConstraintRef(self, c):
        """removeConstraintRef(btRigidBody self, btTypedConstraint c)"""
        return _bullet.btRigidBody_removeConstraintRef(self, c)


    def getConstraintRef(self, index):
        """getConstraintRef(btRigidBody self, int index) -> btTypedConstraint"""
        return _bullet.btRigidBody_getConstraintRef(self, index)


    def getNumConstraintRefs(self):
        """getNumConstraintRefs(btRigidBody self) -> int"""
        return _bullet.btRigidBody_getNumConstraintRefs(self)


    def setFlags(self, flags):
        """setFlags(btRigidBody self, int flags)"""
        return _bullet.btRigidBody_setFlags(self, flags)


    def getFlags(self):
        """getFlags(btRigidBody self) -> int"""
        return _bullet.btRigidBody_getFlags(self)


    def computeGyroscopicImpulseImplicit_World(self, dt):
        """computeGyroscopicImpulseImplicit_World(btRigidBody self, btScalar dt) -> btVector3"""
        return _bullet.btRigidBody_computeGyroscopicImpulseImplicit_World(self, dt)


    def computeGyroscopicImpulseImplicit_Body(self, step):
        """computeGyroscopicImpulseImplicit_Body(btRigidBody self, btScalar step) -> btVector3"""
        return _bullet.btRigidBody_computeGyroscopicImpulseImplicit_Body(self, step)


    def computeGyroscopicForceExplicit(self, maxGyroscopicForce):
        """computeGyroscopicForceExplicit(btRigidBody self, btScalar maxGyroscopicForce) -> btVector3"""
        return _bullet.btRigidBody_computeGyroscopicForceExplicit(self, maxGyroscopicForce)


    def getLocalInertia(self):
        """getLocalInertia(btRigidBody self) -> btVector3"""
        return _bullet.btRigidBody_getLocalInertia(self)

btRigidBody_swigregister = _bullet.btRigidBody_swigregister
btRigidBody_swigregister(btRigidBody)

def btRigidBody_upcast_const(colObj):
    """btRigidBody_upcast_const(btCollisionObject colObj) -> btRigidBody"""
    return _bullet.btRigidBody_upcast_const(colObj)

def btRigidBody_upcast(colObj):
    """btRigidBody_upcast(btCollisionObject colObj) -> btRigidBody"""
    return _bullet.btRigidBody_upcast(colObj)

class btRigidBodyFloatData(_object):
    """Proxy of C++ btRigidBodyFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBodyFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBodyFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionObjectData"] = _bullet.btRigidBodyFloatData_m_collisionObjectData_set
    __swig_getmethods__["m_collisionObjectData"] = _bullet.btRigidBodyFloatData_m_collisionObjectData_get
    if _newclass:
        m_collisionObjectData = _swig_property(_bullet.btRigidBodyFloatData_m_collisionObjectData_get, _bullet.btRigidBodyFloatData_m_collisionObjectData_set)
    __swig_setmethods__["m_invInertiaTensorWorld"] = _bullet.btRigidBodyFloatData_m_invInertiaTensorWorld_set
    __swig_getmethods__["m_invInertiaTensorWorld"] = _bullet.btRigidBodyFloatData_m_invInertiaTensorWorld_get
    if _newclass:
        m_invInertiaTensorWorld = _swig_property(_bullet.btRigidBodyFloatData_m_invInertiaTensorWorld_get, _bullet.btRigidBodyFloatData_m_invInertiaTensorWorld_set)
    __swig_setmethods__["m_linearVelocity"] = _bullet.btRigidBodyFloatData_m_linearVelocity_set
    __swig_getmethods__["m_linearVelocity"] = _bullet.btRigidBodyFloatData_m_linearVelocity_get
    if _newclass:
        m_linearVelocity = _swig_property(_bullet.btRigidBodyFloatData_m_linearVelocity_get, _bullet.btRigidBodyFloatData_m_linearVelocity_set)
    __swig_setmethods__["m_angularVelocity"] = _bullet.btRigidBodyFloatData_m_angularVelocity_set
    __swig_getmethods__["m_angularVelocity"] = _bullet.btRigidBodyFloatData_m_angularVelocity_get
    if _newclass:
        m_angularVelocity = _swig_property(_bullet.btRigidBodyFloatData_m_angularVelocity_get, _bullet.btRigidBodyFloatData_m_angularVelocity_set)
    __swig_setmethods__["m_angularFactor"] = _bullet.btRigidBodyFloatData_m_angularFactor_set
    __swig_getmethods__["m_angularFactor"] = _bullet.btRigidBodyFloatData_m_angularFactor_get
    if _newclass:
        m_angularFactor = _swig_property(_bullet.btRigidBodyFloatData_m_angularFactor_get, _bullet.btRigidBodyFloatData_m_angularFactor_set)
    __swig_setmethods__["m_linearFactor"] = _bullet.btRigidBodyFloatData_m_linearFactor_set
    __swig_getmethods__["m_linearFactor"] = _bullet.btRigidBodyFloatData_m_linearFactor_get
    if _newclass:
        m_linearFactor = _swig_property(_bullet.btRigidBodyFloatData_m_linearFactor_get, _bullet.btRigidBodyFloatData_m_linearFactor_set)
    __swig_setmethods__["m_gravity"] = _bullet.btRigidBodyFloatData_m_gravity_set
    __swig_getmethods__["m_gravity"] = _bullet.btRigidBodyFloatData_m_gravity_get
    if _newclass:
        m_gravity = _swig_property(_bullet.btRigidBodyFloatData_m_gravity_get, _bullet.btRigidBodyFloatData_m_gravity_set)
    __swig_setmethods__["m_gravity_acceleration"] = _bullet.btRigidBodyFloatData_m_gravity_acceleration_set
    __swig_getmethods__["m_gravity_acceleration"] = _bullet.btRigidBodyFloatData_m_gravity_acceleration_get
    if _newclass:
        m_gravity_acceleration = _swig_property(_bullet.btRigidBodyFloatData_m_gravity_acceleration_get, _bullet.btRigidBodyFloatData_m_gravity_acceleration_set)
    __swig_setmethods__["m_invInertiaLocal"] = _bullet.btRigidBodyFloatData_m_invInertiaLocal_set
    __swig_getmethods__["m_invInertiaLocal"] = _bullet.btRigidBodyFloatData_m_invInertiaLocal_get
    if _newclass:
        m_invInertiaLocal = _swig_property(_bullet.btRigidBodyFloatData_m_invInertiaLocal_get, _bullet.btRigidBodyFloatData_m_invInertiaLocal_set)
    __swig_setmethods__["m_totalForce"] = _bullet.btRigidBodyFloatData_m_totalForce_set
    __swig_getmethods__["m_totalForce"] = _bullet.btRigidBodyFloatData_m_totalForce_get
    if _newclass:
        m_totalForce = _swig_property(_bullet.btRigidBodyFloatData_m_totalForce_get, _bullet.btRigidBodyFloatData_m_totalForce_set)
    __swig_setmethods__["m_totalTorque"] = _bullet.btRigidBodyFloatData_m_totalTorque_set
    __swig_getmethods__["m_totalTorque"] = _bullet.btRigidBodyFloatData_m_totalTorque_get
    if _newclass:
        m_totalTorque = _swig_property(_bullet.btRigidBodyFloatData_m_totalTorque_get, _bullet.btRigidBodyFloatData_m_totalTorque_set)
    __swig_setmethods__["m_inverseMass"] = _bullet.btRigidBodyFloatData_m_inverseMass_set
    __swig_getmethods__["m_inverseMass"] = _bullet.btRigidBodyFloatData_m_inverseMass_get
    if _newclass:
        m_inverseMass = _swig_property(_bullet.btRigidBodyFloatData_m_inverseMass_get, _bullet.btRigidBodyFloatData_m_inverseMass_set)
    __swig_setmethods__["m_linearDamping"] = _bullet.btRigidBodyFloatData_m_linearDamping_set
    __swig_getmethods__["m_linearDamping"] = _bullet.btRigidBodyFloatData_m_linearDamping_get
    if _newclass:
        m_linearDamping = _swig_property(_bullet.btRigidBodyFloatData_m_linearDamping_get, _bullet.btRigidBodyFloatData_m_linearDamping_set)
    __swig_setmethods__["m_angularDamping"] = _bullet.btRigidBodyFloatData_m_angularDamping_set
    __swig_getmethods__["m_angularDamping"] = _bullet.btRigidBodyFloatData_m_angularDamping_get
    if _newclass:
        m_angularDamping = _swig_property(_bullet.btRigidBodyFloatData_m_angularDamping_get, _bullet.btRigidBodyFloatData_m_angularDamping_set)
    __swig_setmethods__["m_additionalDampingFactor"] = _bullet.btRigidBodyFloatData_m_additionalDampingFactor_set
    __swig_getmethods__["m_additionalDampingFactor"] = _bullet.btRigidBodyFloatData_m_additionalDampingFactor_get
    if _newclass:
        m_additionalDampingFactor = _swig_property(_bullet.btRigidBodyFloatData_m_additionalDampingFactor_get, _bullet.btRigidBodyFloatData_m_additionalDampingFactor_set)
    __swig_setmethods__["m_additionalLinearDampingThresholdSqr"] = _bullet.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set
    __swig_getmethods__["m_additionalLinearDampingThresholdSqr"] = _bullet.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get
    if _newclass:
        m_additionalLinearDampingThresholdSqr = _swig_property(_bullet.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_get, _bullet.btRigidBodyFloatData_m_additionalLinearDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingThresholdSqr"] = _bullet.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set
    __swig_getmethods__["m_additionalAngularDampingThresholdSqr"] = _bullet.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get
    if _newclass:
        m_additionalAngularDampingThresholdSqr = _swig_property(_bullet.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_get, _bullet.btRigidBodyFloatData_m_additionalAngularDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingFactor"] = _bullet.btRigidBodyFloatData_m_additionalAngularDampingFactor_set
    __swig_getmethods__["m_additionalAngularDampingFactor"] = _bullet.btRigidBodyFloatData_m_additionalAngularDampingFactor_get
    if _newclass:
        m_additionalAngularDampingFactor = _swig_property(_bullet.btRigidBodyFloatData_m_additionalAngularDampingFactor_get, _bullet.btRigidBodyFloatData_m_additionalAngularDampingFactor_set)
    __swig_setmethods__["m_linearSleepingThreshold"] = _bullet.btRigidBodyFloatData_m_linearSleepingThreshold_set
    __swig_getmethods__["m_linearSleepingThreshold"] = _bullet.btRigidBodyFloatData_m_linearSleepingThreshold_get
    if _newclass:
        m_linearSleepingThreshold = _swig_property(_bullet.btRigidBodyFloatData_m_linearSleepingThreshold_get, _bullet.btRigidBodyFloatData_m_linearSleepingThreshold_set)
    __swig_setmethods__["m_angularSleepingThreshold"] = _bullet.btRigidBodyFloatData_m_angularSleepingThreshold_set
    __swig_getmethods__["m_angularSleepingThreshold"] = _bullet.btRigidBodyFloatData_m_angularSleepingThreshold_get
    if _newclass:
        m_angularSleepingThreshold = _swig_property(_bullet.btRigidBodyFloatData_m_angularSleepingThreshold_get, _bullet.btRigidBodyFloatData_m_angularSleepingThreshold_set)
    __swig_setmethods__["m_additionalDamping"] = _bullet.btRigidBodyFloatData_m_additionalDamping_set
    __swig_getmethods__["m_additionalDamping"] = _bullet.btRigidBodyFloatData_m_additionalDamping_get
    if _newclass:
        m_additionalDamping = _swig_property(_bullet.btRigidBodyFloatData_m_additionalDamping_get, _bullet.btRigidBodyFloatData_m_additionalDamping_set)

    def __init__(self):
        """__init__(btRigidBodyFloatData self) -> btRigidBodyFloatData"""
        this = _bullet.new_btRigidBodyFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btRigidBodyFloatData
    __del__ = lambda self: None
btRigidBodyFloatData_swigregister = _bullet.btRigidBodyFloatData_swigregister
btRigidBodyFloatData_swigregister(btRigidBodyFloatData)

class btRigidBodyDoubleData(_object):
    """Proxy of C++ btRigidBodyDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRigidBodyDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRigidBodyDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionObjectData"] = _bullet.btRigidBodyDoubleData_m_collisionObjectData_set
    __swig_getmethods__["m_collisionObjectData"] = _bullet.btRigidBodyDoubleData_m_collisionObjectData_get
    if _newclass:
        m_collisionObjectData = _swig_property(_bullet.btRigidBodyDoubleData_m_collisionObjectData_get, _bullet.btRigidBodyDoubleData_m_collisionObjectData_set)
    __swig_setmethods__["m_invInertiaTensorWorld"] = _bullet.btRigidBodyDoubleData_m_invInertiaTensorWorld_set
    __swig_getmethods__["m_invInertiaTensorWorld"] = _bullet.btRigidBodyDoubleData_m_invInertiaTensorWorld_get
    if _newclass:
        m_invInertiaTensorWorld = _swig_property(_bullet.btRigidBodyDoubleData_m_invInertiaTensorWorld_get, _bullet.btRigidBodyDoubleData_m_invInertiaTensorWorld_set)
    __swig_setmethods__["m_linearVelocity"] = _bullet.btRigidBodyDoubleData_m_linearVelocity_set
    __swig_getmethods__["m_linearVelocity"] = _bullet.btRigidBodyDoubleData_m_linearVelocity_get
    if _newclass:
        m_linearVelocity = _swig_property(_bullet.btRigidBodyDoubleData_m_linearVelocity_get, _bullet.btRigidBodyDoubleData_m_linearVelocity_set)
    __swig_setmethods__["m_angularVelocity"] = _bullet.btRigidBodyDoubleData_m_angularVelocity_set
    __swig_getmethods__["m_angularVelocity"] = _bullet.btRigidBodyDoubleData_m_angularVelocity_get
    if _newclass:
        m_angularVelocity = _swig_property(_bullet.btRigidBodyDoubleData_m_angularVelocity_get, _bullet.btRigidBodyDoubleData_m_angularVelocity_set)
    __swig_setmethods__["m_angularFactor"] = _bullet.btRigidBodyDoubleData_m_angularFactor_set
    __swig_getmethods__["m_angularFactor"] = _bullet.btRigidBodyDoubleData_m_angularFactor_get
    if _newclass:
        m_angularFactor = _swig_property(_bullet.btRigidBodyDoubleData_m_angularFactor_get, _bullet.btRigidBodyDoubleData_m_angularFactor_set)
    __swig_setmethods__["m_linearFactor"] = _bullet.btRigidBodyDoubleData_m_linearFactor_set
    __swig_getmethods__["m_linearFactor"] = _bullet.btRigidBodyDoubleData_m_linearFactor_get
    if _newclass:
        m_linearFactor = _swig_property(_bullet.btRigidBodyDoubleData_m_linearFactor_get, _bullet.btRigidBodyDoubleData_m_linearFactor_set)
    __swig_setmethods__["m_gravity"] = _bullet.btRigidBodyDoubleData_m_gravity_set
    __swig_getmethods__["m_gravity"] = _bullet.btRigidBodyDoubleData_m_gravity_get
    if _newclass:
        m_gravity = _swig_property(_bullet.btRigidBodyDoubleData_m_gravity_get, _bullet.btRigidBodyDoubleData_m_gravity_set)
    __swig_setmethods__["m_gravity_acceleration"] = _bullet.btRigidBodyDoubleData_m_gravity_acceleration_set
    __swig_getmethods__["m_gravity_acceleration"] = _bullet.btRigidBodyDoubleData_m_gravity_acceleration_get
    if _newclass:
        m_gravity_acceleration = _swig_property(_bullet.btRigidBodyDoubleData_m_gravity_acceleration_get, _bullet.btRigidBodyDoubleData_m_gravity_acceleration_set)
    __swig_setmethods__["m_invInertiaLocal"] = _bullet.btRigidBodyDoubleData_m_invInertiaLocal_set
    __swig_getmethods__["m_invInertiaLocal"] = _bullet.btRigidBodyDoubleData_m_invInertiaLocal_get
    if _newclass:
        m_invInertiaLocal = _swig_property(_bullet.btRigidBodyDoubleData_m_invInertiaLocal_get, _bullet.btRigidBodyDoubleData_m_invInertiaLocal_set)
    __swig_setmethods__["m_totalForce"] = _bullet.btRigidBodyDoubleData_m_totalForce_set
    __swig_getmethods__["m_totalForce"] = _bullet.btRigidBodyDoubleData_m_totalForce_get
    if _newclass:
        m_totalForce = _swig_property(_bullet.btRigidBodyDoubleData_m_totalForce_get, _bullet.btRigidBodyDoubleData_m_totalForce_set)
    __swig_setmethods__["m_totalTorque"] = _bullet.btRigidBodyDoubleData_m_totalTorque_set
    __swig_getmethods__["m_totalTorque"] = _bullet.btRigidBodyDoubleData_m_totalTorque_get
    if _newclass:
        m_totalTorque = _swig_property(_bullet.btRigidBodyDoubleData_m_totalTorque_get, _bullet.btRigidBodyDoubleData_m_totalTorque_set)
    __swig_setmethods__["m_inverseMass"] = _bullet.btRigidBodyDoubleData_m_inverseMass_set
    __swig_getmethods__["m_inverseMass"] = _bullet.btRigidBodyDoubleData_m_inverseMass_get
    if _newclass:
        m_inverseMass = _swig_property(_bullet.btRigidBodyDoubleData_m_inverseMass_get, _bullet.btRigidBodyDoubleData_m_inverseMass_set)
    __swig_setmethods__["m_linearDamping"] = _bullet.btRigidBodyDoubleData_m_linearDamping_set
    __swig_getmethods__["m_linearDamping"] = _bullet.btRigidBodyDoubleData_m_linearDamping_get
    if _newclass:
        m_linearDamping = _swig_property(_bullet.btRigidBodyDoubleData_m_linearDamping_get, _bullet.btRigidBodyDoubleData_m_linearDamping_set)
    __swig_setmethods__["m_angularDamping"] = _bullet.btRigidBodyDoubleData_m_angularDamping_set
    __swig_getmethods__["m_angularDamping"] = _bullet.btRigidBodyDoubleData_m_angularDamping_get
    if _newclass:
        m_angularDamping = _swig_property(_bullet.btRigidBodyDoubleData_m_angularDamping_get, _bullet.btRigidBodyDoubleData_m_angularDamping_set)
    __swig_setmethods__["m_additionalDampingFactor"] = _bullet.btRigidBodyDoubleData_m_additionalDampingFactor_set
    __swig_getmethods__["m_additionalDampingFactor"] = _bullet.btRigidBodyDoubleData_m_additionalDampingFactor_get
    if _newclass:
        m_additionalDampingFactor = _swig_property(_bullet.btRigidBodyDoubleData_m_additionalDampingFactor_get, _bullet.btRigidBodyDoubleData_m_additionalDampingFactor_set)
    __swig_setmethods__["m_additionalLinearDampingThresholdSqr"] = _bullet.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set
    __swig_getmethods__["m_additionalLinearDampingThresholdSqr"] = _bullet.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get
    if _newclass:
        m_additionalLinearDampingThresholdSqr = _swig_property(_bullet.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_get, _bullet.btRigidBodyDoubleData_m_additionalLinearDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingThresholdSqr"] = _bullet.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set
    __swig_getmethods__["m_additionalAngularDampingThresholdSqr"] = _bullet.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get
    if _newclass:
        m_additionalAngularDampingThresholdSqr = _swig_property(_bullet.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_get, _bullet.btRigidBodyDoubleData_m_additionalAngularDampingThresholdSqr_set)
    __swig_setmethods__["m_additionalAngularDampingFactor"] = _bullet.btRigidBodyDoubleData_m_additionalAngularDampingFactor_set
    __swig_getmethods__["m_additionalAngularDampingFactor"] = _bullet.btRigidBodyDoubleData_m_additionalAngularDampingFactor_get
    if _newclass:
        m_additionalAngularDampingFactor = _swig_property(_bullet.btRigidBodyDoubleData_m_additionalAngularDampingFactor_get, _bullet.btRigidBodyDoubleData_m_additionalAngularDampingFactor_set)
    __swig_setmethods__["m_linearSleepingThreshold"] = _bullet.btRigidBodyDoubleData_m_linearSleepingThreshold_set
    __swig_getmethods__["m_linearSleepingThreshold"] = _bullet.btRigidBodyDoubleData_m_linearSleepingThreshold_get
    if _newclass:
        m_linearSleepingThreshold = _swig_property(_bullet.btRigidBodyDoubleData_m_linearSleepingThreshold_get, _bullet.btRigidBodyDoubleData_m_linearSleepingThreshold_set)
    __swig_setmethods__["m_angularSleepingThreshold"] = _bullet.btRigidBodyDoubleData_m_angularSleepingThreshold_set
    __swig_getmethods__["m_angularSleepingThreshold"] = _bullet.btRigidBodyDoubleData_m_angularSleepingThreshold_get
    if _newclass:
        m_angularSleepingThreshold = _swig_property(_bullet.btRigidBodyDoubleData_m_angularSleepingThreshold_get, _bullet.btRigidBodyDoubleData_m_angularSleepingThreshold_set)
    __swig_setmethods__["m_additionalDamping"] = _bullet.btRigidBodyDoubleData_m_additionalDamping_set
    __swig_getmethods__["m_additionalDamping"] = _bullet.btRigidBodyDoubleData_m_additionalDamping_get
    if _newclass:
        m_additionalDamping = _swig_property(_bullet.btRigidBodyDoubleData_m_additionalDamping_get, _bullet.btRigidBodyDoubleData_m_additionalDamping_set)
    __swig_setmethods__["m_padding"] = _bullet.btRigidBodyDoubleData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btRigidBodyDoubleData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btRigidBodyDoubleData_m_padding_get, _bullet.btRigidBodyDoubleData_m_padding_set)

    def __init__(self):
        """__init__(btRigidBodyDoubleData self) -> btRigidBodyDoubleData"""
        this = _bullet.new_btRigidBodyDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btRigidBodyDoubleData
    __del__ = lambda self: None
btRigidBodyDoubleData_swigregister = _bullet.btRigidBodyDoubleData_swigregister
btRigidBodyDoubleData_swigregister(btRigidBodyDoubleData)

class btActionInterface(_object):
    """Proxy of C++ btActionInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btActionInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btActionInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btActionInterface
    __del__ = lambda self: None

    def updateAction(self, collisionWorld, deltaTimeStep):
        """updateAction(btActionInterface self, btCollisionWorld collisionWorld, btScalar deltaTimeStep)"""
        return _bullet.btActionInterface_updateAction(self, collisionWorld, deltaTimeStep)


    def debugDraw(self, debugDrawer):
        """debugDraw(btActionInterface self, btIDebugDraw debugDrawer)"""
        return _bullet.btActionInterface_debugDraw(self, debugDrawer)

btActionInterface_swigregister = _bullet.btActionInterface_swigregister
btActionInterface_swigregister(btActionInterface)

class btCharacterControllerInterface(btActionInterface):
    """Proxy of C++ btCharacterControllerInterface class."""

    __swig_setmethods__ = {}
    for _s in [btActionInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCharacterControllerInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [btActionInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCharacterControllerInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btCharacterControllerInterface
    __del__ = lambda self: None

    def setWalkDirection(self, walkDirection):
        """setWalkDirection(btCharacterControllerInterface self, btVector3 const & walkDirection)"""
        return _bullet.btCharacterControllerInterface_setWalkDirection(self, walkDirection)


    def setVelocityForTimeInterval(self, velocity, timeInterval):
        """setVelocityForTimeInterval(btCharacterControllerInterface self, btVector3 const & velocity, btScalar timeInterval)"""
        return _bullet.btCharacterControllerInterface_setVelocityForTimeInterval(self, velocity, timeInterval)


    def reset(self, collisionWorld):
        """reset(btCharacterControllerInterface self, btCollisionWorld collisionWorld)"""
        return _bullet.btCharacterControllerInterface_reset(self, collisionWorld)


    def warp(self, origin):
        """warp(btCharacterControllerInterface self, btVector3 const & origin)"""
        return _bullet.btCharacterControllerInterface_warp(self, origin)


    def preStep(self, collisionWorld):
        """preStep(btCharacterControllerInterface self, btCollisionWorld collisionWorld)"""
        return _bullet.btCharacterControllerInterface_preStep(self, collisionWorld)


    def playerStep(self, collisionWorld, dt):
        """playerStep(btCharacterControllerInterface self, btCollisionWorld collisionWorld, btScalar dt)"""
        return _bullet.btCharacterControllerInterface_playerStep(self, collisionWorld, dt)


    def canJump(self):
        """canJump(btCharacterControllerInterface self) -> bool"""
        return _bullet.btCharacterControllerInterface_canJump(self)


    def jump(self, *args):
        """
        jump(btCharacterControllerInterface self, btVector3 const & dir)
        jump(btCharacterControllerInterface self)
        """
        return _bullet.btCharacterControllerInterface_jump(self, *args)


    def onGround(self):
        """onGround(btCharacterControllerInterface self) -> bool"""
        return _bullet.btCharacterControllerInterface_onGround(self)


    def setUpInterpolate(self, value):
        """setUpInterpolate(btCharacterControllerInterface self, bool value)"""
        return _bullet.btCharacterControllerInterface_setUpInterpolate(self, value)

btCharacterControllerInterface_swigregister = _bullet.btCharacterControllerInterface_swigregister
btCharacterControllerInterface_swigregister(btCharacterControllerInterface)

class btKinematicCharacterController(btCharacterControllerInterface):
    """Proxy of C++ btKinematicCharacterController class."""

    __swig_setmethods__ = {}
    for _s in [btCharacterControllerInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btKinematicCharacterController, name, value)
    __swig_getmethods__ = {}
    for _s in [btCharacterControllerInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btKinematicCharacterController, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btKinematicCharacterController self, btPairCachingGhostObject ghostObject, btConvexShape convexShape, btScalar stepHeight, btVector3 const & up) -> btKinematicCharacterController
        __init__(btKinematicCharacterController self, btPairCachingGhostObject ghostObject, btConvexShape convexShape, btScalar stepHeight) -> btKinematicCharacterController
        """
        this = _bullet.new_btKinematicCharacterController(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btKinematicCharacterController
    __del__ = lambda self: None

    def setUp(self, up):
        """setUp(btKinematicCharacterController self, btVector3 const & up)"""
        return _bullet.btKinematicCharacterController_setUp(self, up)


    def getUp(self):
        """getUp(btKinematicCharacterController self) -> btVector3 const &"""
        return _bullet.btKinematicCharacterController_getUp(self)


    def setAngularVelocity(self, velocity):
        """setAngularVelocity(btKinematicCharacterController self, btVector3 const & velocity)"""
        return _bullet.btKinematicCharacterController_setAngularVelocity(self, velocity)


    def getAngularVelocity(self):
        """getAngularVelocity(btKinematicCharacterController self) -> btVector3 const &"""
        return _bullet.btKinematicCharacterController_getAngularVelocity(self)


    def setLinearVelocity(self, velocity):
        """setLinearVelocity(btKinematicCharacterController self, btVector3 const & velocity)"""
        return _bullet.btKinematicCharacterController_setLinearVelocity(self, velocity)


    def getLinearVelocity(self):
        """getLinearVelocity(btKinematicCharacterController self) -> btVector3"""
        return _bullet.btKinematicCharacterController_getLinearVelocity(self)


    def setLinearDamping(self, d):
        """setLinearDamping(btKinematicCharacterController self, btScalar d)"""
        return _bullet.btKinematicCharacterController_setLinearDamping(self, d)


    def getLinearDamping(self):
        """getLinearDamping(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getLinearDamping(self)


    def setAngularDamping(self, d):
        """setAngularDamping(btKinematicCharacterController self, btScalar d)"""
        return _bullet.btKinematicCharacterController_setAngularDamping(self, d)


    def getAngularDamping(self):
        """getAngularDamping(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getAngularDamping(self)


    def setStepHeight(self, h):
        """setStepHeight(btKinematicCharacterController self, btScalar h)"""
        return _bullet.btKinematicCharacterController_setStepHeight(self, h)


    def getStepHeight(self):
        """getStepHeight(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getStepHeight(self)


    def setFallSpeed(self, fallSpeed):
        """setFallSpeed(btKinematicCharacterController self, btScalar fallSpeed)"""
        return _bullet.btKinematicCharacterController_setFallSpeed(self, fallSpeed)


    def getFallSpeed(self):
        """getFallSpeed(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getFallSpeed(self)


    def setJumpSpeed(self, jumpSpeed):
        """setJumpSpeed(btKinematicCharacterController self, btScalar jumpSpeed)"""
        return _bullet.btKinematicCharacterController_setJumpSpeed(self, jumpSpeed)


    def getJumpSpeed(self):
        """getJumpSpeed(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getJumpSpeed(self)


    def setMaxJumpHeight(self, maxJumpHeight):
        """setMaxJumpHeight(btKinematicCharacterController self, btScalar maxJumpHeight)"""
        return _bullet.btKinematicCharacterController_setMaxJumpHeight(self, maxJumpHeight)


    def jump(self, *args):
        """
        jump(btKinematicCharacterController self, btVector3 const & v)
        jump(btKinematicCharacterController self)
        """
        return _bullet.btKinematicCharacterController_jump(self, *args)


    def applyImpulse(self, v):
        """applyImpulse(btKinematicCharacterController self, btVector3 const & v)"""
        return _bullet.btKinematicCharacterController_applyImpulse(self, v)


    def setGravity(self, gravity):
        """setGravity(btKinematicCharacterController self, btVector3 const & gravity)"""
        return _bullet.btKinematicCharacterController_setGravity(self, gravity)


    def getGravity(self):
        """getGravity(btKinematicCharacterController self) -> btVector3"""
        return _bullet.btKinematicCharacterController_getGravity(self)


    def setMaxSlope(self, slopeRadians):
        """setMaxSlope(btKinematicCharacterController self, btScalar slopeRadians)"""
        return _bullet.btKinematicCharacterController_setMaxSlope(self, slopeRadians)


    def getMaxSlope(self):
        """getMaxSlope(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getMaxSlope(self)


    def setMaxPenetrationDepth(self, d):
        """setMaxPenetrationDepth(btKinematicCharacterController self, btScalar d)"""
        return _bullet.btKinematicCharacterController_setMaxPenetrationDepth(self, d)


    def getMaxPenetrationDepth(self):
        """getMaxPenetrationDepth(btKinematicCharacterController self) -> btScalar"""
        return _bullet.btKinematicCharacterController_getMaxPenetrationDepth(self)


    def getGhostObject(self):
        """getGhostObject(btKinematicCharacterController self) -> btPairCachingGhostObject"""
        return _bullet.btKinematicCharacterController_getGhostObject(self)


    def setUseGhostSweepTest(self, useGhostObjectSweepTest):
        """setUseGhostSweepTest(btKinematicCharacterController self, bool useGhostObjectSweepTest)"""
        return _bullet.btKinematicCharacterController_setUseGhostSweepTest(self, useGhostObjectSweepTest)

btKinematicCharacterController_swigregister = _bullet.btKinematicCharacterController_swigregister
btKinematicCharacterController_swigregister(btKinematicCharacterController)

class btJacobianEntry(_object):
    """Proxy of C++ btJacobianEntry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btJacobianEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btJacobianEntry, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btJacobianEntry self) -> btJacobianEntry
        __init__(btJacobianEntry self, btMatrix3x3 const & world2A, btMatrix3x3 const & world2B, btVector3 const & rel_pos1, btVector3 const & rel_pos2, btVector3 const & jointAxis, btVector3 const & inertiaInvA, btScalar const massInvA, btVector3 const & inertiaInvB, btScalar const massInvB) -> btJacobianEntry
        __init__(btJacobianEntry self, btVector3 const & jointAxis, btMatrix3x3 const & world2A, btMatrix3x3 const & world2B, btVector3 const & inertiaInvA, btVector3 const & inertiaInvB) -> btJacobianEntry
        __init__(btJacobianEntry self, btVector3 const & axisInA, btVector3 const & axisInB, btVector3 const & inertiaInvA, btVector3 const & inertiaInvB) -> btJacobianEntry
        __init__(btJacobianEntry self, btMatrix3x3 const & world2A, btVector3 const & rel_pos1, btVector3 const & rel_pos2, btVector3 const & jointAxis, btVector3 const & inertiaInvA, btScalar const massInvA) -> btJacobianEntry
        """
        this = _bullet.new_btJacobianEntry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getDiagonal(self):
        """getDiagonal(btJacobianEntry self) -> btScalar"""
        return _bullet.btJacobianEntry_getDiagonal(self)


    def getNonDiagonal(self, *args):
        """
        getNonDiagonal(btJacobianEntry self, btJacobianEntry jacB, btScalar const massInvA) -> btScalar
        getNonDiagonal(btJacobianEntry self, btJacobianEntry jacB, btScalar const massInvA, btScalar const massInvB) -> btScalar
        """
        return _bullet.btJacobianEntry_getNonDiagonal(self, *args)


    def getRelativeVelocity(self, linvelA, angvelA, linvelB, angvelB):
        """getRelativeVelocity(btJacobianEntry self, btVector3 const & linvelA, btVector3 const & angvelA, btVector3 const & linvelB, btVector3 const & angvelB) -> btScalar"""
        return _bullet.btJacobianEntry_getRelativeVelocity(self, linvelA, angvelA, linvelB, angvelB)

    __swig_setmethods__["m_linearJointAxis"] = _bullet.btJacobianEntry_m_linearJointAxis_set
    __swig_getmethods__["m_linearJointAxis"] = _bullet.btJacobianEntry_m_linearJointAxis_get
    if _newclass:
        m_linearJointAxis = _swig_property(_bullet.btJacobianEntry_m_linearJointAxis_get, _bullet.btJacobianEntry_m_linearJointAxis_set)
    __swig_setmethods__["m_aJ"] = _bullet.btJacobianEntry_m_aJ_set
    __swig_getmethods__["m_aJ"] = _bullet.btJacobianEntry_m_aJ_get
    if _newclass:
        m_aJ = _swig_property(_bullet.btJacobianEntry_m_aJ_get, _bullet.btJacobianEntry_m_aJ_set)
    __swig_setmethods__["m_bJ"] = _bullet.btJacobianEntry_m_bJ_set
    __swig_getmethods__["m_bJ"] = _bullet.btJacobianEntry_m_bJ_get
    if _newclass:
        m_bJ = _swig_property(_bullet.btJacobianEntry_m_bJ_get, _bullet.btJacobianEntry_m_bJ_set)
    __swig_setmethods__["m_0MinvJt"] = _bullet.btJacobianEntry_m_0MinvJt_set
    __swig_getmethods__["m_0MinvJt"] = _bullet.btJacobianEntry_m_0MinvJt_get
    if _newclass:
        m_0MinvJt = _swig_property(_bullet.btJacobianEntry_m_0MinvJt_get, _bullet.btJacobianEntry_m_0MinvJt_set)
    __swig_setmethods__["m_1MinvJt"] = _bullet.btJacobianEntry_m_1MinvJt_set
    __swig_getmethods__["m_1MinvJt"] = _bullet.btJacobianEntry_m_1MinvJt_get
    if _newclass:
        m_1MinvJt = _swig_property(_bullet.btJacobianEntry_m_1MinvJt_get, _bullet.btJacobianEntry_m_1MinvJt_set)
    __swig_setmethods__["m_Adiag"] = _bullet.btJacobianEntry_m_Adiag_set
    __swig_getmethods__["m_Adiag"] = _bullet.btJacobianEntry_m_Adiag_get
    if _newclass:
        m_Adiag = _swig_property(_bullet.btJacobianEntry_m_Adiag_get, _bullet.btJacobianEntry_m_Adiag_set)
    __swig_destroy__ = _bullet.delete_btJacobianEntry
    __del__ = lambda self: None
btJacobianEntry_swigregister = _bullet.btJacobianEntry_swigregister
btJacobianEntry_swigregister(btJacobianEntry)

class btSolverBody(_object):
    """Proxy of C++ btSolverBody class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSolverBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSolverBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_worldTransform"] = _bullet.btSolverBody_m_worldTransform_set
    __swig_getmethods__["m_worldTransform"] = _bullet.btSolverBody_m_worldTransform_get
    if _newclass:
        m_worldTransform = _swig_property(_bullet.btSolverBody_m_worldTransform_get, _bullet.btSolverBody_m_worldTransform_set)
    __swig_setmethods__["m_deltaLinearVelocity"] = _bullet.btSolverBody_m_deltaLinearVelocity_set
    __swig_getmethods__["m_deltaLinearVelocity"] = _bullet.btSolverBody_m_deltaLinearVelocity_get
    if _newclass:
        m_deltaLinearVelocity = _swig_property(_bullet.btSolverBody_m_deltaLinearVelocity_get, _bullet.btSolverBody_m_deltaLinearVelocity_set)
    __swig_setmethods__["m_deltaAngularVelocity"] = _bullet.btSolverBody_m_deltaAngularVelocity_set
    __swig_getmethods__["m_deltaAngularVelocity"] = _bullet.btSolverBody_m_deltaAngularVelocity_get
    if _newclass:
        m_deltaAngularVelocity = _swig_property(_bullet.btSolverBody_m_deltaAngularVelocity_get, _bullet.btSolverBody_m_deltaAngularVelocity_set)
    __swig_setmethods__["m_angularFactor"] = _bullet.btSolverBody_m_angularFactor_set
    __swig_getmethods__["m_angularFactor"] = _bullet.btSolverBody_m_angularFactor_get
    if _newclass:
        m_angularFactor = _swig_property(_bullet.btSolverBody_m_angularFactor_get, _bullet.btSolverBody_m_angularFactor_set)
    __swig_setmethods__["m_linearFactor"] = _bullet.btSolverBody_m_linearFactor_set
    __swig_getmethods__["m_linearFactor"] = _bullet.btSolverBody_m_linearFactor_get
    if _newclass:
        m_linearFactor = _swig_property(_bullet.btSolverBody_m_linearFactor_get, _bullet.btSolverBody_m_linearFactor_set)
    __swig_setmethods__["m_invMass"] = _bullet.btSolverBody_m_invMass_set
    __swig_getmethods__["m_invMass"] = _bullet.btSolverBody_m_invMass_get
    if _newclass:
        m_invMass = _swig_property(_bullet.btSolverBody_m_invMass_get, _bullet.btSolverBody_m_invMass_set)
    __swig_setmethods__["m_pushVelocity"] = _bullet.btSolverBody_m_pushVelocity_set
    __swig_getmethods__["m_pushVelocity"] = _bullet.btSolverBody_m_pushVelocity_get
    if _newclass:
        m_pushVelocity = _swig_property(_bullet.btSolverBody_m_pushVelocity_get, _bullet.btSolverBody_m_pushVelocity_set)
    __swig_setmethods__["m_turnVelocity"] = _bullet.btSolverBody_m_turnVelocity_set
    __swig_getmethods__["m_turnVelocity"] = _bullet.btSolverBody_m_turnVelocity_get
    if _newclass:
        m_turnVelocity = _swig_property(_bullet.btSolverBody_m_turnVelocity_get, _bullet.btSolverBody_m_turnVelocity_set)
    __swig_setmethods__["m_linearVelocity"] = _bullet.btSolverBody_m_linearVelocity_set
    __swig_getmethods__["m_linearVelocity"] = _bullet.btSolverBody_m_linearVelocity_get
    if _newclass:
        m_linearVelocity = _swig_property(_bullet.btSolverBody_m_linearVelocity_get, _bullet.btSolverBody_m_linearVelocity_set)
    __swig_setmethods__["m_angularVelocity"] = _bullet.btSolverBody_m_angularVelocity_set
    __swig_getmethods__["m_angularVelocity"] = _bullet.btSolverBody_m_angularVelocity_get
    if _newclass:
        m_angularVelocity = _swig_property(_bullet.btSolverBody_m_angularVelocity_get, _bullet.btSolverBody_m_angularVelocity_set)
    __swig_setmethods__["m_externalForceImpulse"] = _bullet.btSolverBody_m_externalForceImpulse_set
    __swig_getmethods__["m_externalForceImpulse"] = _bullet.btSolverBody_m_externalForceImpulse_get
    if _newclass:
        m_externalForceImpulse = _swig_property(_bullet.btSolverBody_m_externalForceImpulse_get, _bullet.btSolverBody_m_externalForceImpulse_set)
    __swig_setmethods__["m_externalTorqueImpulse"] = _bullet.btSolverBody_m_externalTorqueImpulse_set
    __swig_getmethods__["m_externalTorqueImpulse"] = _bullet.btSolverBody_m_externalTorqueImpulse_get
    if _newclass:
        m_externalTorqueImpulse = _swig_property(_bullet.btSolverBody_m_externalTorqueImpulse_get, _bullet.btSolverBody_m_externalTorqueImpulse_set)
    __swig_setmethods__["m_originalBody"] = _bullet.btSolverBody_m_originalBody_set
    __swig_getmethods__["m_originalBody"] = _bullet.btSolverBody_m_originalBody_get
    if _newclass:
        m_originalBody = _swig_property(_bullet.btSolverBody_m_originalBody_get, _bullet.btSolverBody_m_originalBody_set)

    def setWorldTransform(self, worldTransform):
        """setWorldTransform(btSolverBody self, btTransform const & worldTransform)"""
        return _bullet.btSolverBody_setWorldTransform(self, worldTransform)


    def getWorldTransform(self):
        """getWorldTransform(btSolverBody self) -> btTransform const &"""
        return _bullet.btSolverBody_getWorldTransform(self)


    def getVelocityInLocalPointNoDelta(self, rel_pos, velocity):
        """getVelocityInLocalPointNoDelta(btSolverBody self, btVector3 const & rel_pos, btVector3 & velocity)"""
        return _bullet.btSolverBody_getVelocityInLocalPointNoDelta(self, rel_pos, velocity)


    def getVelocityInLocalPointObsolete(self, rel_pos, velocity):
        """getVelocityInLocalPointObsolete(btSolverBody self, btVector3 const & rel_pos, btVector3 & velocity)"""
        return _bullet.btSolverBody_getVelocityInLocalPointObsolete(self, rel_pos, velocity)


    def getAngularVelocity(self, angVel):
        """getAngularVelocity(btSolverBody self, btVector3 & angVel)"""
        return _bullet.btSolverBody_getAngularVelocity(self, angVel)


    def applyImpulse(self, linearComponent, angularComponent, impulseMagnitude):
        """applyImpulse(btSolverBody self, btVector3 const & linearComponent, btVector3 const & angularComponent, btScalar const impulseMagnitude)"""
        return _bullet.btSolverBody_applyImpulse(self, linearComponent, angularComponent, impulseMagnitude)


    def internalApplyPushImpulse(self, linearComponent, angularComponent, impulseMagnitude):
        """internalApplyPushImpulse(btSolverBody self, btVector3 const & linearComponent, btVector3 const & angularComponent, btScalar impulseMagnitude)"""
        return _bullet.btSolverBody_internalApplyPushImpulse(self, linearComponent, angularComponent, impulseMagnitude)


    def getDeltaLinearVelocity(self):
        """getDeltaLinearVelocity(btSolverBody self) -> btVector3 const &"""
        return _bullet.btSolverBody_getDeltaLinearVelocity(self)


    def getDeltaAngularVelocity(self):
        """getDeltaAngularVelocity(btSolverBody self) -> btVector3 const &"""
        return _bullet.btSolverBody_getDeltaAngularVelocity(self)


    def getPushVelocity(self):
        """getPushVelocity(btSolverBody self) -> btVector3 const &"""
        return _bullet.btSolverBody_getPushVelocity(self)


    def getTurnVelocity(self):
        """getTurnVelocity(btSolverBody self) -> btVector3 const &"""
        return _bullet.btSolverBody_getTurnVelocity(self)


    def internalGetDeltaLinearVelocity(self):
        """internalGetDeltaLinearVelocity(btSolverBody self) -> btVector3 &"""
        return _bullet.btSolverBody_internalGetDeltaLinearVelocity(self)


    def internalGetDeltaAngularVelocity(self):
        """internalGetDeltaAngularVelocity(btSolverBody self) -> btVector3 &"""
        return _bullet.btSolverBody_internalGetDeltaAngularVelocity(self)


    def internalGetAngularFactor(self):
        """internalGetAngularFactor(btSolverBody self) -> btVector3 const &"""
        return _bullet.btSolverBody_internalGetAngularFactor(self)


    def internalGetInvMass(self):
        """internalGetInvMass(btSolverBody self) -> btVector3 const &"""
        return _bullet.btSolverBody_internalGetInvMass(self)


    def internalSetInvMass(self, invMass):
        """internalSetInvMass(btSolverBody self, btVector3 const & invMass)"""
        return _bullet.btSolverBody_internalSetInvMass(self, invMass)


    def internalGetPushVelocity(self):
        """internalGetPushVelocity(btSolverBody self) -> btVector3 &"""
        return _bullet.btSolverBody_internalGetPushVelocity(self)


    def internalGetTurnVelocity(self):
        """internalGetTurnVelocity(btSolverBody self) -> btVector3 &"""
        return _bullet.btSolverBody_internalGetTurnVelocity(self)


    def internalGetVelocityInLocalPointObsolete(self, rel_pos, velocity):
        """internalGetVelocityInLocalPointObsolete(btSolverBody self, btVector3 const & rel_pos, btVector3 & velocity)"""
        return _bullet.btSolverBody_internalGetVelocityInLocalPointObsolete(self, rel_pos, velocity)


    def internalGetAngularVelocity(self, angVel):
        """internalGetAngularVelocity(btSolverBody self, btVector3 & angVel)"""
        return _bullet.btSolverBody_internalGetAngularVelocity(self, angVel)


    def internalApplyImpulse(self, linearComponent, angularComponent, impulseMagnitude):
        """internalApplyImpulse(btSolverBody self, btVector3 const & linearComponent, btVector3 const & angularComponent, btScalar const impulseMagnitude)"""
        return _bullet.btSolverBody_internalApplyImpulse(self, linearComponent, angularComponent, impulseMagnitude)


    def writebackVelocity(self):
        """writebackVelocity(btSolverBody self)"""
        return _bullet.btSolverBody_writebackVelocity(self)


    def writebackVelocityAndTransform(self, timeStep, splitImpulseTurnErp):
        """writebackVelocityAndTransform(btSolverBody self, btScalar timeStep, btScalar splitImpulseTurnErp)"""
        return _bullet.btSolverBody_writebackVelocityAndTransform(self, timeStep, splitImpulseTurnErp)


    def __init__(self):
        """__init__(btSolverBody self) -> btSolverBody"""
        this = _bullet.new_btSolverBody()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSolverBody
    __del__ = lambda self: None
btSolverBody_swigregister = _bullet.btSolverBody_swigregister
btSolverBody_swigregister(btSolverBody)

class btSolverConstraint(_object):
    """Proxy of C++ btSolverConstraint class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSolverConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSolverConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_relpos1CrossNormal"] = _bullet.btSolverConstraint_m_relpos1CrossNormal_set
    __swig_getmethods__["m_relpos1CrossNormal"] = _bullet.btSolverConstraint_m_relpos1CrossNormal_get
    if _newclass:
        m_relpos1CrossNormal = _swig_property(_bullet.btSolverConstraint_m_relpos1CrossNormal_get, _bullet.btSolverConstraint_m_relpos1CrossNormal_set)
    __swig_setmethods__["m_contactNormal1"] = _bullet.btSolverConstraint_m_contactNormal1_set
    __swig_getmethods__["m_contactNormal1"] = _bullet.btSolverConstraint_m_contactNormal1_get
    if _newclass:
        m_contactNormal1 = _swig_property(_bullet.btSolverConstraint_m_contactNormal1_get, _bullet.btSolverConstraint_m_contactNormal1_set)
    __swig_setmethods__["m_relpos2CrossNormal"] = _bullet.btSolverConstraint_m_relpos2CrossNormal_set
    __swig_getmethods__["m_relpos2CrossNormal"] = _bullet.btSolverConstraint_m_relpos2CrossNormal_get
    if _newclass:
        m_relpos2CrossNormal = _swig_property(_bullet.btSolverConstraint_m_relpos2CrossNormal_get, _bullet.btSolverConstraint_m_relpos2CrossNormal_set)
    __swig_setmethods__["m_contactNormal2"] = _bullet.btSolverConstraint_m_contactNormal2_set
    __swig_getmethods__["m_contactNormal2"] = _bullet.btSolverConstraint_m_contactNormal2_get
    if _newclass:
        m_contactNormal2 = _swig_property(_bullet.btSolverConstraint_m_contactNormal2_get, _bullet.btSolverConstraint_m_contactNormal2_set)
    __swig_setmethods__["m_angularComponentA"] = _bullet.btSolverConstraint_m_angularComponentA_set
    __swig_getmethods__["m_angularComponentA"] = _bullet.btSolverConstraint_m_angularComponentA_get
    if _newclass:
        m_angularComponentA = _swig_property(_bullet.btSolverConstraint_m_angularComponentA_get, _bullet.btSolverConstraint_m_angularComponentA_set)
    __swig_setmethods__["m_angularComponentB"] = _bullet.btSolverConstraint_m_angularComponentB_set
    __swig_getmethods__["m_angularComponentB"] = _bullet.btSolverConstraint_m_angularComponentB_get
    if _newclass:
        m_angularComponentB = _swig_property(_bullet.btSolverConstraint_m_angularComponentB_get, _bullet.btSolverConstraint_m_angularComponentB_set)
    __swig_setmethods__["m_appliedPushImpulse"] = _bullet.btSolverConstraint_m_appliedPushImpulse_set
    __swig_getmethods__["m_appliedPushImpulse"] = _bullet.btSolverConstraint_m_appliedPushImpulse_get
    if _newclass:
        m_appliedPushImpulse = _swig_property(_bullet.btSolverConstraint_m_appliedPushImpulse_get, _bullet.btSolverConstraint_m_appliedPushImpulse_set)
    __swig_setmethods__["m_appliedImpulse"] = _bullet.btSolverConstraint_m_appliedImpulse_set
    __swig_getmethods__["m_appliedImpulse"] = _bullet.btSolverConstraint_m_appliedImpulse_get
    if _newclass:
        m_appliedImpulse = _swig_property(_bullet.btSolverConstraint_m_appliedImpulse_get, _bullet.btSolverConstraint_m_appliedImpulse_set)
    __swig_setmethods__["m_friction"] = _bullet.btSolverConstraint_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btSolverConstraint_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btSolverConstraint_m_friction_get, _bullet.btSolverConstraint_m_friction_set)
    __swig_setmethods__["m_jacDiagABInv"] = _bullet.btSolverConstraint_m_jacDiagABInv_set
    __swig_getmethods__["m_jacDiagABInv"] = _bullet.btSolverConstraint_m_jacDiagABInv_get
    if _newclass:
        m_jacDiagABInv = _swig_property(_bullet.btSolverConstraint_m_jacDiagABInv_get, _bullet.btSolverConstraint_m_jacDiagABInv_set)
    __swig_setmethods__["m_rhs"] = _bullet.btSolverConstraint_m_rhs_set
    __swig_getmethods__["m_rhs"] = _bullet.btSolverConstraint_m_rhs_get
    if _newclass:
        m_rhs = _swig_property(_bullet.btSolverConstraint_m_rhs_get, _bullet.btSolverConstraint_m_rhs_set)
    __swig_setmethods__["m_cfm"] = _bullet.btSolverConstraint_m_cfm_set
    __swig_getmethods__["m_cfm"] = _bullet.btSolverConstraint_m_cfm_get
    if _newclass:
        m_cfm = _swig_property(_bullet.btSolverConstraint_m_cfm_get, _bullet.btSolverConstraint_m_cfm_set)
    __swig_setmethods__["m_lowerLimit"] = _bullet.btSolverConstraint_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btSolverConstraint_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btSolverConstraint_m_lowerLimit_get, _bullet.btSolverConstraint_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btSolverConstraint_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btSolverConstraint_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btSolverConstraint_m_upperLimit_get, _bullet.btSolverConstraint_m_upperLimit_set)
    __swig_setmethods__["m_rhsPenetration"] = _bullet.btSolverConstraint_m_rhsPenetration_set
    __swig_getmethods__["m_rhsPenetration"] = _bullet.btSolverConstraint_m_rhsPenetration_get
    if _newclass:
        m_rhsPenetration = _swig_property(_bullet.btSolverConstraint_m_rhsPenetration_get, _bullet.btSolverConstraint_m_rhsPenetration_set)
    __swig_setmethods__["m_overrideNumSolverIterations"] = _bullet.btSolverConstraint_m_overrideNumSolverIterations_set
    __swig_getmethods__["m_overrideNumSolverIterations"] = _bullet.btSolverConstraint_m_overrideNumSolverIterations_get
    if _newclass:
        m_overrideNumSolverIterations = _swig_property(_bullet.btSolverConstraint_m_overrideNumSolverIterations_get, _bullet.btSolverConstraint_m_overrideNumSolverIterations_set)
    __swig_setmethods__["m_frictionIndex"] = _bullet.btSolverConstraint_m_frictionIndex_set
    __swig_getmethods__["m_frictionIndex"] = _bullet.btSolverConstraint_m_frictionIndex_get
    if _newclass:
        m_frictionIndex = _swig_property(_bullet.btSolverConstraint_m_frictionIndex_get, _bullet.btSolverConstraint_m_frictionIndex_set)
    __swig_setmethods__["m_solverBodyIdA"] = _bullet.btSolverConstraint_m_solverBodyIdA_set
    __swig_getmethods__["m_solverBodyIdA"] = _bullet.btSolverConstraint_m_solverBodyIdA_get
    if _newclass:
        m_solverBodyIdA = _swig_property(_bullet.btSolverConstraint_m_solverBodyIdA_get, _bullet.btSolverConstraint_m_solverBodyIdA_set)
    __swig_setmethods__["m_solverBodyIdB"] = _bullet.btSolverConstraint_m_solverBodyIdB_set
    __swig_getmethods__["m_solverBodyIdB"] = _bullet.btSolverConstraint_m_solverBodyIdB_get
    if _newclass:
        m_solverBodyIdB = _swig_property(_bullet.btSolverConstraint_m_solverBodyIdB_get, _bullet.btSolverConstraint_m_solverBodyIdB_set)
    BT_SOLVER_CONTACT_1D = _bullet.btSolverConstraint_BT_SOLVER_CONTACT_1D
    BT_SOLVER_FRICTION_1D = _bullet.btSolverConstraint_BT_SOLVER_FRICTION_1D

    def __init__(self):
        """__init__(btSolverConstraint self) -> btSolverConstraint"""
        this = _bullet.new_btSolverConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSolverConstraint
    __del__ = lambda self: None
btSolverConstraint_swigregister = _bullet.btSolverConstraint_swigregister
btSolverConstraint_swigregister(btSolverConstraint)

btTypedConstraintDataName = _bullet.btTypedConstraintDataName
POINT2POINT_CONSTRAINT_TYPE = _bullet.POINT2POINT_CONSTRAINT_TYPE
HINGE_CONSTRAINT_TYPE = _bullet.HINGE_CONSTRAINT_TYPE
CONETWIST_CONSTRAINT_TYPE = _bullet.CONETWIST_CONSTRAINT_TYPE
D6_CONSTRAINT_TYPE = _bullet.D6_CONSTRAINT_TYPE
SLIDER_CONSTRAINT_TYPE = _bullet.SLIDER_CONSTRAINT_TYPE
CONTACT_CONSTRAINT_TYPE = _bullet.CONTACT_CONSTRAINT_TYPE
D6_SPRING_CONSTRAINT_TYPE = _bullet.D6_SPRING_CONSTRAINT_TYPE
GEAR_CONSTRAINT_TYPE = _bullet.GEAR_CONSTRAINT_TYPE
FIXED_CONSTRAINT_TYPE = _bullet.FIXED_CONSTRAINT_TYPE
D6_SPRING_2_CONSTRAINT_TYPE = _bullet.D6_SPRING_2_CONSTRAINT_TYPE
MAX_CONSTRAINT_TYPE = _bullet.MAX_CONSTRAINT_TYPE
BT_CONSTRAINT_ERP = _bullet.BT_CONSTRAINT_ERP
BT_CONSTRAINT_STOP_ERP = _bullet.BT_CONSTRAINT_STOP_ERP
BT_CONSTRAINT_CFM = _bullet.BT_CONSTRAINT_CFM
BT_CONSTRAINT_STOP_CFM = _bullet.BT_CONSTRAINT_STOP_CFM
class btJointFeedback(_object):
    """Proxy of C++ btJointFeedback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btJointFeedback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btJointFeedback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_appliedForceBodyA"] = _bullet.btJointFeedback_m_appliedForceBodyA_set
    __swig_getmethods__["m_appliedForceBodyA"] = _bullet.btJointFeedback_m_appliedForceBodyA_get
    if _newclass:
        m_appliedForceBodyA = _swig_property(_bullet.btJointFeedback_m_appliedForceBodyA_get, _bullet.btJointFeedback_m_appliedForceBodyA_set)
    __swig_setmethods__["m_appliedTorqueBodyA"] = _bullet.btJointFeedback_m_appliedTorqueBodyA_set
    __swig_getmethods__["m_appliedTorqueBodyA"] = _bullet.btJointFeedback_m_appliedTorqueBodyA_get
    if _newclass:
        m_appliedTorqueBodyA = _swig_property(_bullet.btJointFeedback_m_appliedTorqueBodyA_get, _bullet.btJointFeedback_m_appliedTorqueBodyA_set)
    __swig_setmethods__["m_appliedForceBodyB"] = _bullet.btJointFeedback_m_appliedForceBodyB_set
    __swig_getmethods__["m_appliedForceBodyB"] = _bullet.btJointFeedback_m_appliedForceBodyB_get
    if _newclass:
        m_appliedForceBodyB = _swig_property(_bullet.btJointFeedback_m_appliedForceBodyB_get, _bullet.btJointFeedback_m_appliedForceBodyB_set)
    __swig_setmethods__["m_appliedTorqueBodyB"] = _bullet.btJointFeedback_m_appliedTorqueBodyB_set
    __swig_getmethods__["m_appliedTorqueBodyB"] = _bullet.btJointFeedback_m_appliedTorqueBodyB_get
    if _newclass:
        m_appliedTorqueBodyB = _swig_property(_bullet.btJointFeedback_m_appliedTorqueBodyB_get, _bullet.btJointFeedback_m_appliedTorqueBodyB_set)

    def __init__(self):
        """__init__(btJointFeedback self) -> btJointFeedback"""
        this = _bullet.new_btJointFeedback()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btJointFeedback
    __del__ = lambda self: None
btJointFeedback_swigregister = _bullet.btJointFeedback_swigregister
btJointFeedback_swigregister(btJointFeedback)

class btTypedConstraint(btTypedObject):
    """Proxy of C++ btTypedConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btTypedConstraint
    __del__ = lambda self: None

    def getFixedBody():
        """getFixedBody() -> btRigidBody"""
        return _bullet.btTypedConstraint_getFixedBody()

    getFixedBody = staticmethod(getFixedBody)

    def getOverrideNumSolverIterations(self):
        """getOverrideNumSolverIterations(btTypedConstraint self) -> int"""
        return _bullet.btTypedConstraint_getOverrideNumSolverIterations(self)


    def setOverrideNumSolverIterations(self, overideNumIterations):
        """setOverrideNumSolverIterations(btTypedConstraint self, int overideNumIterations)"""
        return _bullet.btTypedConstraint_setOverrideNumSolverIterations(self, overideNumIterations)


    def buildJacobian(self):
        """buildJacobian(btTypedConstraint self)"""
        return _bullet.btTypedConstraint_buildJacobian(self)


    def setupSolverConstraint(self, ca, solverBodyA, solverBodyB, timeStep):
        """setupSolverConstraint(btTypedConstraint self, btConstraintArray & ca, int solverBodyA, int solverBodyB, btScalar timeStep)"""
        return _bullet.btTypedConstraint_setupSolverConstraint(self, ca, solverBodyA, solverBodyB, timeStep)


    def getInfo1(self, info):
        """getInfo1(btTypedConstraint self, btTypedConstraint::btConstraintInfo1 * info)"""
        return _bullet.btTypedConstraint_getInfo1(self, info)


    def getInfo2(self, info):
        """getInfo2(btTypedConstraint self, btTypedConstraint::btConstraintInfo2 * info)"""
        return _bullet.btTypedConstraint_getInfo2(self, info)


    def internalSetAppliedImpulse(self, appliedImpulse):
        """internalSetAppliedImpulse(btTypedConstraint self, btScalar appliedImpulse)"""
        return _bullet.btTypedConstraint_internalSetAppliedImpulse(self, appliedImpulse)


    def internalGetAppliedImpulse(self):
        """internalGetAppliedImpulse(btTypedConstraint self) -> btScalar"""
        return _bullet.btTypedConstraint_internalGetAppliedImpulse(self)


    def getBreakingImpulseThreshold(self):
        """getBreakingImpulseThreshold(btTypedConstraint self) -> btScalar"""
        return _bullet.btTypedConstraint_getBreakingImpulseThreshold(self)


    def setBreakingImpulseThreshold(self, threshold):
        """setBreakingImpulseThreshold(btTypedConstraint self, btScalar threshold)"""
        return _bullet.btTypedConstraint_setBreakingImpulseThreshold(self, threshold)


    def isEnabled(self):
        """isEnabled(btTypedConstraint self) -> bool"""
        return _bullet.btTypedConstraint_isEnabled(self)


    def setEnabled(self, enabled):
        """setEnabled(btTypedConstraint self, bool enabled)"""
        return _bullet.btTypedConstraint_setEnabled(self, enabled)


    def solveConstraintObsolete(self, arg2, arg3, arg4):
        """solveConstraintObsolete(btTypedConstraint self, btSolverBody arg2, btSolverBody arg3, btScalar arg4)"""
        return _bullet.btTypedConstraint_solveConstraintObsolete(self, arg2, arg3, arg4)


    def getRigidBodyA(self, *args):
        """
        getRigidBodyA(btTypedConstraint self) -> btRigidBody
        getRigidBodyA(btTypedConstraint self) -> btRigidBody
        """
        return _bullet.btTypedConstraint_getRigidBodyA(self, *args)


    def getRigidBodyB(self, *args):
        """
        getRigidBodyB(btTypedConstraint self) -> btRigidBody
        getRigidBodyB(btTypedConstraint self) -> btRigidBody
        """
        return _bullet.btTypedConstraint_getRigidBodyB(self, *args)


    def getUserConstraintType(self):
        """getUserConstraintType(btTypedConstraint self) -> int"""
        return _bullet.btTypedConstraint_getUserConstraintType(self)


    def setUserConstraintType(self, userConstraintType):
        """setUserConstraintType(btTypedConstraint self, int userConstraintType)"""
        return _bullet.btTypedConstraint_setUserConstraintType(self, userConstraintType)


    def setUserConstraintId(self, uid):
        """setUserConstraintId(btTypedConstraint self, int uid)"""
        return _bullet.btTypedConstraint_setUserConstraintId(self, uid)


    def getUserConstraintId(self):
        """getUserConstraintId(btTypedConstraint self) -> int"""
        return _bullet.btTypedConstraint_getUserConstraintId(self)


    def setUserConstraintPtr(self, ptr):
        """setUserConstraintPtr(btTypedConstraint self, void * ptr)"""
        return _bullet.btTypedConstraint_setUserConstraintPtr(self, ptr)


    def getUserConstraintPtr(self):
        """getUserConstraintPtr(btTypedConstraint self) -> void *"""
        return _bullet.btTypedConstraint_getUserConstraintPtr(self)


    def setJointFeedback(self, jointFeedback):
        """setJointFeedback(btTypedConstraint self, btJointFeedback jointFeedback)"""
        return _bullet.btTypedConstraint_setJointFeedback(self, jointFeedback)


    def getJointFeedback(self, *args):
        """
        getJointFeedback(btTypedConstraint self) -> btJointFeedback
        getJointFeedback(btTypedConstraint self) -> btJointFeedback
        """
        return _bullet.btTypedConstraint_getJointFeedback(self, *args)


    def getUid(self):
        """getUid(btTypedConstraint self) -> int"""
        return _bullet.btTypedConstraint_getUid(self)


    def needsFeedback(self):
        """needsFeedback(btTypedConstraint self) -> bool"""
        return _bullet.btTypedConstraint_needsFeedback(self)


    def enableFeedback(self, needsFeedback):
        """enableFeedback(btTypedConstraint self, bool needsFeedback)"""
        return _bullet.btTypedConstraint_enableFeedback(self, needsFeedback)


    def getAppliedImpulse(self):
        """getAppliedImpulse(btTypedConstraint self) -> btScalar"""
        return _bullet.btTypedConstraint_getAppliedImpulse(self)


    def getConstraintType(self):
        """getConstraintType(btTypedConstraint self) -> btTypedConstraintType"""
        return _bullet.btTypedConstraint_getConstraintType(self)


    def setDbgDrawSize(self, dbgDrawSize):
        """setDbgDrawSize(btTypedConstraint self, btScalar dbgDrawSize)"""
        return _bullet.btTypedConstraint_setDbgDrawSize(self, dbgDrawSize)


    def getDbgDrawSize(self):
        """getDbgDrawSize(btTypedConstraint self) -> btScalar"""
        return _bullet.btTypedConstraint_getDbgDrawSize(self)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btTypedConstraint self, int num, btScalar value, int axis=-1)
        setParam(btTypedConstraint self, int num, btScalar value)
        """
        return _bullet.btTypedConstraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btTypedConstraint self, int num, int axis=-1) -> btScalar
        getParam(btTypedConstraint self, int num) -> btScalar
        """
        return _bullet.btTypedConstraint_getParam(self, num, axis)


    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btTypedConstraint self) -> int"""
        return _bullet.btTypedConstraint_calculateSerializeBufferSize(self)


    def serialize(self, dataBuffer, serializer):
        """serialize(btTypedConstraint self, void * dataBuffer, btSerializer serializer) -> char const *"""
        return _bullet.btTypedConstraint_serialize(self, dataBuffer, serializer)

btTypedConstraint_swigregister = _bullet.btTypedConstraint_swigregister
btTypedConstraint_swigregister(btTypedConstraint)

def btTypedConstraint_getFixedBody():
    """btTypedConstraint_getFixedBody() -> btRigidBody"""
    return _bullet.btTypedConstraint_getFixedBody()


def btAdjustAngleToLimits(angleInRadians, angleLowerLimitInRadians, angleUpperLimitInRadians):
    """btAdjustAngleToLimits(btScalar angleInRadians, btScalar angleLowerLimitInRadians, btScalar angleUpperLimitInRadians) -> btScalar"""
    return _bullet.btAdjustAngleToLimits(angleInRadians, angleLowerLimitInRadians, angleUpperLimitInRadians)
class btTypedConstraintFloatData(_object):
    """Proxy of C++ btTypedConstraintFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedConstraintFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedConstraintFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rbA"] = _bullet.btTypedConstraintFloatData_m_rbA_set
    __swig_getmethods__["m_rbA"] = _bullet.btTypedConstraintFloatData_m_rbA_get
    if _newclass:
        m_rbA = _swig_property(_bullet.btTypedConstraintFloatData_m_rbA_get, _bullet.btTypedConstraintFloatData_m_rbA_set)
    __swig_setmethods__["m_rbB"] = _bullet.btTypedConstraintFloatData_m_rbB_set
    __swig_getmethods__["m_rbB"] = _bullet.btTypedConstraintFloatData_m_rbB_get
    if _newclass:
        m_rbB = _swig_property(_bullet.btTypedConstraintFloatData_m_rbB_get, _bullet.btTypedConstraintFloatData_m_rbB_set)
    __swig_setmethods__["m_name"] = _bullet.btTypedConstraintFloatData_m_name_set
    __swig_getmethods__["m_name"] = _bullet.btTypedConstraintFloatData_m_name_get
    if _newclass:
        m_name = _swig_property(_bullet.btTypedConstraintFloatData_m_name_get, _bullet.btTypedConstraintFloatData_m_name_set)
    __swig_setmethods__["m_objectType"] = _bullet.btTypedConstraintFloatData_m_objectType_set
    __swig_getmethods__["m_objectType"] = _bullet.btTypedConstraintFloatData_m_objectType_get
    if _newclass:
        m_objectType = _swig_property(_bullet.btTypedConstraintFloatData_m_objectType_get, _bullet.btTypedConstraintFloatData_m_objectType_set)
    __swig_setmethods__["m_userConstraintType"] = _bullet.btTypedConstraintFloatData_m_userConstraintType_set
    __swig_getmethods__["m_userConstraintType"] = _bullet.btTypedConstraintFloatData_m_userConstraintType_get
    if _newclass:
        m_userConstraintType = _swig_property(_bullet.btTypedConstraintFloatData_m_userConstraintType_get, _bullet.btTypedConstraintFloatData_m_userConstraintType_set)
    __swig_setmethods__["m_userConstraintId"] = _bullet.btTypedConstraintFloatData_m_userConstraintId_set
    __swig_getmethods__["m_userConstraintId"] = _bullet.btTypedConstraintFloatData_m_userConstraintId_get
    if _newclass:
        m_userConstraintId = _swig_property(_bullet.btTypedConstraintFloatData_m_userConstraintId_get, _bullet.btTypedConstraintFloatData_m_userConstraintId_set)
    __swig_setmethods__["m_needsFeedback"] = _bullet.btTypedConstraintFloatData_m_needsFeedback_set
    __swig_getmethods__["m_needsFeedback"] = _bullet.btTypedConstraintFloatData_m_needsFeedback_get
    if _newclass:
        m_needsFeedback = _swig_property(_bullet.btTypedConstraintFloatData_m_needsFeedback_get, _bullet.btTypedConstraintFloatData_m_needsFeedback_set)
    __swig_setmethods__["m_appliedImpulse"] = _bullet.btTypedConstraintFloatData_m_appliedImpulse_set
    __swig_getmethods__["m_appliedImpulse"] = _bullet.btTypedConstraintFloatData_m_appliedImpulse_get
    if _newclass:
        m_appliedImpulse = _swig_property(_bullet.btTypedConstraintFloatData_m_appliedImpulse_get, _bullet.btTypedConstraintFloatData_m_appliedImpulse_set)
    __swig_setmethods__["m_dbgDrawSize"] = _bullet.btTypedConstraintFloatData_m_dbgDrawSize_set
    __swig_getmethods__["m_dbgDrawSize"] = _bullet.btTypedConstraintFloatData_m_dbgDrawSize_get
    if _newclass:
        m_dbgDrawSize = _swig_property(_bullet.btTypedConstraintFloatData_m_dbgDrawSize_get, _bullet.btTypedConstraintFloatData_m_dbgDrawSize_set)
    __swig_setmethods__["m_disableCollisionsBetweenLinkedBodies"] = _bullet.btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_set
    __swig_getmethods__["m_disableCollisionsBetweenLinkedBodies"] = _bullet.btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_get
    if _newclass:
        m_disableCollisionsBetweenLinkedBodies = _swig_property(_bullet.btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_get, _bullet.btTypedConstraintFloatData_m_disableCollisionsBetweenLinkedBodies_set)
    __swig_setmethods__["m_overrideNumSolverIterations"] = _bullet.btTypedConstraintFloatData_m_overrideNumSolverIterations_set
    __swig_getmethods__["m_overrideNumSolverIterations"] = _bullet.btTypedConstraintFloatData_m_overrideNumSolverIterations_get
    if _newclass:
        m_overrideNumSolverIterations = _swig_property(_bullet.btTypedConstraintFloatData_m_overrideNumSolverIterations_get, _bullet.btTypedConstraintFloatData_m_overrideNumSolverIterations_set)
    __swig_setmethods__["m_breakingImpulseThreshold"] = _bullet.btTypedConstraintFloatData_m_breakingImpulseThreshold_set
    __swig_getmethods__["m_breakingImpulseThreshold"] = _bullet.btTypedConstraintFloatData_m_breakingImpulseThreshold_get
    if _newclass:
        m_breakingImpulseThreshold = _swig_property(_bullet.btTypedConstraintFloatData_m_breakingImpulseThreshold_get, _bullet.btTypedConstraintFloatData_m_breakingImpulseThreshold_set)
    __swig_setmethods__["m_isEnabled"] = _bullet.btTypedConstraintFloatData_m_isEnabled_set
    __swig_getmethods__["m_isEnabled"] = _bullet.btTypedConstraintFloatData_m_isEnabled_get
    if _newclass:
        m_isEnabled = _swig_property(_bullet.btTypedConstraintFloatData_m_isEnabled_get, _bullet.btTypedConstraintFloatData_m_isEnabled_set)

    def __init__(self):
        """__init__(btTypedConstraintFloatData self) -> btTypedConstraintFloatData"""
        this = _bullet.new_btTypedConstraintFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTypedConstraintFloatData
    __del__ = lambda self: None
btTypedConstraintFloatData_swigregister = _bullet.btTypedConstraintFloatData_swigregister
btTypedConstraintFloatData_swigregister(btTypedConstraintFloatData)

class btTypedConstraintData(_object):
    """Proxy of C++ btTypedConstraintData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rbA"] = _bullet.btTypedConstraintData_m_rbA_set
    __swig_getmethods__["m_rbA"] = _bullet.btTypedConstraintData_m_rbA_get
    if _newclass:
        m_rbA = _swig_property(_bullet.btTypedConstraintData_m_rbA_get, _bullet.btTypedConstraintData_m_rbA_set)
    __swig_setmethods__["m_rbB"] = _bullet.btTypedConstraintData_m_rbB_set
    __swig_getmethods__["m_rbB"] = _bullet.btTypedConstraintData_m_rbB_get
    if _newclass:
        m_rbB = _swig_property(_bullet.btTypedConstraintData_m_rbB_get, _bullet.btTypedConstraintData_m_rbB_set)
    __swig_setmethods__["m_name"] = _bullet.btTypedConstraintData_m_name_set
    __swig_getmethods__["m_name"] = _bullet.btTypedConstraintData_m_name_get
    if _newclass:
        m_name = _swig_property(_bullet.btTypedConstraintData_m_name_get, _bullet.btTypedConstraintData_m_name_set)
    __swig_setmethods__["m_objectType"] = _bullet.btTypedConstraintData_m_objectType_set
    __swig_getmethods__["m_objectType"] = _bullet.btTypedConstraintData_m_objectType_get
    if _newclass:
        m_objectType = _swig_property(_bullet.btTypedConstraintData_m_objectType_get, _bullet.btTypedConstraintData_m_objectType_set)
    __swig_setmethods__["m_userConstraintType"] = _bullet.btTypedConstraintData_m_userConstraintType_set
    __swig_getmethods__["m_userConstraintType"] = _bullet.btTypedConstraintData_m_userConstraintType_get
    if _newclass:
        m_userConstraintType = _swig_property(_bullet.btTypedConstraintData_m_userConstraintType_get, _bullet.btTypedConstraintData_m_userConstraintType_set)
    __swig_setmethods__["m_userConstraintId"] = _bullet.btTypedConstraintData_m_userConstraintId_set
    __swig_getmethods__["m_userConstraintId"] = _bullet.btTypedConstraintData_m_userConstraintId_get
    if _newclass:
        m_userConstraintId = _swig_property(_bullet.btTypedConstraintData_m_userConstraintId_get, _bullet.btTypedConstraintData_m_userConstraintId_set)
    __swig_setmethods__["m_needsFeedback"] = _bullet.btTypedConstraintData_m_needsFeedback_set
    __swig_getmethods__["m_needsFeedback"] = _bullet.btTypedConstraintData_m_needsFeedback_get
    if _newclass:
        m_needsFeedback = _swig_property(_bullet.btTypedConstraintData_m_needsFeedback_get, _bullet.btTypedConstraintData_m_needsFeedback_set)
    __swig_setmethods__["m_appliedImpulse"] = _bullet.btTypedConstraintData_m_appliedImpulse_set
    __swig_getmethods__["m_appliedImpulse"] = _bullet.btTypedConstraintData_m_appliedImpulse_get
    if _newclass:
        m_appliedImpulse = _swig_property(_bullet.btTypedConstraintData_m_appliedImpulse_get, _bullet.btTypedConstraintData_m_appliedImpulse_set)
    __swig_setmethods__["m_dbgDrawSize"] = _bullet.btTypedConstraintData_m_dbgDrawSize_set
    __swig_getmethods__["m_dbgDrawSize"] = _bullet.btTypedConstraintData_m_dbgDrawSize_get
    if _newclass:
        m_dbgDrawSize = _swig_property(_bullet.btTypedConstraintData_m_dbgDrawSize_get, _bullet.btTypedConstraintData_m_dbgDrawSize_set)
    __swig_setmethods__["m_disableCollisionsBetweenLinkedBodies"] = _bullet.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set
    __swig_getmethods__["m_disableCollisionsBetweenLinkedBodies"] = _bullet.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get
    if _newclass:
        m_disableCollisionsBetweenLinkedBodies = _swig_property(_bullet.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_get, _bullet.btTypedConstraintData_m_disableCollisionsBetweenLinkedBodies_set)
    __swig_setmethods__["m_overrideNumSolverIterations"] = _bullet.btTypedConstraintData_m_overrideNumSolverIterations_set
    __swig_getmethods__["m_overrideNumSolverIterations"] = _bullet.btTypedConstraintData_m_overrideNumSolverIterations_get
    if _newclass:
        m_overrideNumSolverIterations = _swig_property(_bullet.btTypedConstraintData_m_overrideNumSolverIterations_get, _bullet.btTypedConstraintData_m_overrideNumSolverIterations_set)
    __swig_setmethods__["m_breakingImpulseThreshold"] = _bullet.btTypedConstraintData_m_breakingImpulseThreshold_set
    __swig_getmethods__["m_breakingImpulseThreshold"] = _bullet.btTypedConstraintData_m_breakingImpulseThreshold_get
    if _newclass:
        m_breakingImpulseThreshold = _swig_property(_bullet.btTypedConstraintData_m_breakingImpulseThreshold_get, _bullet.btTypedConstraintData_m_breakingImpulseThreshold_set)
    __swig_setmethods__["m_isEnabled"] = _bullet.btTypedConstraintData_m_isEnabled_set
    __swig_getmethods__["m_isEnabled"] = _bullet.btTypedConstraintData_m_isEnabled_get
    if _newclass:
        m_isEnabled = _swig_property(_bullet.btTypedConstraintData_m_isEnabled_get, _bullet.btTypedConstraintData_m_isEnabled_set)

    def __init__(self):
        """__init__(btTypedConstraintData self) -> btTypedConstraintData"""
        this = _bullet.new_btTypedConstraintData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTypedConstraintData
    __del__ = lambda self: None
btTypedConstraintData_swigregister = _bullet.btTypedConstraintData_swigregister
btTypedConstraintData_swigregister(btTypedConstraintData)

class btTypedConstraintDoubleData(_object):
    """Proxy of C++ btTypedConstraintDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTypedConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTypedConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rbA"] = _bullet.btTypedConstraintDoubleData_m_rbA_set
    __swig_getmethods__["m_rbA"] = _bullet.btTypedConstraintDoubleData_m_rbA_get
    if _newclass:
        m_rbA = _swig_property(_bullet.btTypedConstraintDoubleData_m_rbA_get, _bullet.btTypedConstraintDoubleData_m_rbA_set)
    __swig_setmethods__["m_rbB"] = _bullet.btTypedConstraintDoubleData_m_rbB_set
    __swig_getmethods__["m_rbB"] = _bullet.btTypedConstraintDoubleData_m_rbB_get
    if _newclass:
        m_rbB = _swig_property(_bullet.btTypedConstraintDoubleData_m_rbB_get, _bullet.btTypedConstraintDoubleData_m_rbB_set)
    __swig_setmethods__["m_name"] = _bullet.btTypedConstraintDoubleData_m_name_set
    __swig_getmethods__["m_name"] = _bullet.btTypedConstraintDoubleData_m_name_get
    if _newclass:
        m_name = _swig_property(_bullet.btTypedConstraintDoubleData_m_name_get, _bullet.btTypedConstraintDoubleData_m_name_set)
    __swig_setmethods__["m_objectType"] = _bullet.btTypedConstraintDoubleData_m_objectType_set
    __swig_getmethods__["m_objectType"] = _bullet.btTypedConstraintDoubleData_m_objectType_get
    if _newclass:
        m_objectType = _swig_property(_bullet.btTypedConstraintDoubleData_m_objectType_get, _bullet.btTypedConstraintDoubleData_m_objectType_set)
    __swig_setmethods__["m_userConstraintType"] = _bullet.btTypedConstraintDoubleData_m_userConstraintType_set
    __swig_getmethods__["m_userConstraintType"] = _bullet.btTypedConstraintDoubleData_m_userConstraintType_get
    if _newclass:
        m_userConstraintType = _swig_property(_bullet.btTypedConstraintDoubleData_m_userConstraintType_get, _bullet.btTypedConstraintDoubleData_m_userConstraintType_set)
    __swig_setmethods__["m_userConstraintId"] = _bullet.btTypedConstraintDoubleData_m_userConstraintId_set
    __swig_getmethods__["m_userConstraintId"] = _bullet.btTypedConstraintDoubleData_m_userConstraintId_get
    if _newclass:
        m_userConstraintId = _swig_property(_bullet.btTypedConstraintDoubleData_m_userConstraintId_get, _bullet.btTypedConstraintDoubleData_m_userConstraintId_set)
    __swig_setmethods__["m_needsFeedback"] = _bullet.btTypedConstraintDoubleData_m_needsFeedback_set
    __swig_getmethods__["m_needsFeedback"] = _bullet.btTypedConstraintDoubleData_m_needsFeedback_get
    if _newclass:
        m_needsFeedback = _swig_property(_bullet.btTypedConstraintDoubleData_m_needsFeedback_get, _bullet.btTypedConstraintDoubleData_m_needsFeedback_set)
    __swig_setmethods__["m_appliedImpulse"] = _bullet.btTypedConstraintDoubleData_m_appliedImpulse_set
    __swig_getmethods__["m_appliedImpulse"] = _bullet.btTypedConstraintDoubleData_m_appliedImpulse_get
    if _newclass:
        m_appliedImpulse = _swig_property(_bullet.btTypedConstraintDoubleData_m_appliedImpulse_get, _bullet.btTypedConstraintDoubleData_m_appliedImpulse_set)
    __swig_setmethods__["m_dbgDrawSize"] = _bullet.btTypedConstraintDoubleData_m_dbgDrawSize_set
    __swig_getmethods__["m_dbgDrawSize"] = _bullet.btTypedConstraintDoubleData_m_dbgDrawSize_get
    if _newclass:
        m_dbgDrawSize = _swig_property(_bullet.btTypedConstraintDoubleData_m_dbgDrawSize_get, _bullet.btTypedConstraintDoubleData_m_dbgDrawSize_set)
    __swig_setmethods__["m_disableCollisionsBetweenLinkedBodies"] = _bullet.btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_set
    __swig_getmethods__["m_disableCollisionsBetweenLinkedBodies"] = _bullet.btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_get
    if _newclass:
        m_disableCollisionsBetweenLinkedBodies = _swig_property(_bullet.btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_get, _bullet.btTypedConstraintDoubleData_m_disableCollisionsBetweenLinkedBodies_set)
    __swig_setmethods__["m_overrideNumSolverIterations"] = _bullet.btTypedConstraintDoubleData_m_overrideNumSolverIterations_set
    __swig_getmethods__["m_overrideNumSolverIterations"] = _bullet.btTypedConstraintDoubleData_m_overrideNumSolverIterations_get
    if _newclass:
        m_overrideNumSolverIterations = _swig_property(_bullet.btTypedConstraintDoubleData_m_overrideNumSolverIterations_get, _bullet.btTypedConstraintDoubleData_m_overrideNumSolverIterations_set)
    __swig_setmethods__["m_breakingImpulseThreshold"] = _bullet.btTypedConstraintDoubleData_m_breakingImpulseThreshold_set
    __swig_getmethods__["m_breakingImpulseThreshold"] = _bullet.btTypedConstraintDoubleData_m_breakingImpulseThreshold_get
    if _newclass:
        m_breakingImpulseThreshold = _swig_property(_bullet.btTypedConstraintDoubleData_m_breakingImpulseThreshold_get, _bullet.btTypedConstraintDoubleData_m_breakingImpulseThreshold_set)
    __swig_setmethods__["m_isEnabled"] = _bullet.btTypedConstraintDoubleData_m_isEnabled_set
    __swig_getmethods__["m_isEnabled"] = _bullet.btTypedConstraintDoubleData_m_isEnabled_get
    if _newclass:
        m_isEnabled = _swig_property(_bullet.btTypedConstraintDoubleData_m_isEnabled_get, _bullet.btTypedConstraintDoubleData_m_isEnabled_set)
    __swig_setmethods__["padding"] = _bullet.btTypedConstraintDoubleData_padding_set
    __swig_getmethods__["padding"] = _bullet.btTypedConstraintDoubleData_padding_get
    if _newclass:
        padding = _swig_property(_bullet.btTypedConstraintDoubleData_padding_get, _bullet.btTypedConstraintDoubleData_padding_set)

    def __init__(self):
        """__init__(btTypedConstraintDoubleData self) -> btTypedConstraintDoubleData"""
        this = _bullet.new_btTypedConstraintDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btTypedConstraintDoubleData
    __del__ = lambda self: None
btTypedConstraintDoubleData_swigregister = _bullet.btTypedConstraintDoubleData_swigregister
btTypedConstraintDoubleData_swigregister(btTypedConstraintDoubleData)

class btAngularLimit(_object):
    """Proxy of C++ btAngularLimit class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btAngularLimit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btAngularLimit, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btAngularLimit self) -> btAngularLimit"""
        this = _bullet.new_btAngularLimit()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, low, high, _softness=0.9, _biasFactor=0.3, _relaxationFactor=1.0):
        """
        set(btAngularLimit self, btScalar low, btScalar high, btScalar _softness=0.9, btScalar _biasFactor=0.3, btScalar _relaxationFactor=1.0)
        set(btAngularLimit self, btScalar low, btScalar high, btScalar _softness=0.9, btScalar _biasFactor=0.3)
        set(btAngularLimit self, btScalar low, btScalar high, btScalar _softness=0.9)
        set(btAngularLimit self, btScalar low, btScalar high)
        """
        return _bullet.btAngularLimit_set(self, low, high, _softness, _biasFactor, _relaxationFactor)


    def test(self, angle):
        """test(btAngularLimit self, btScalar const angle)"""
        return _bullet.btAngularLimit_test(self, angle)


    def getSoftness(self):
        """getSoftness(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getSoftness(self)


    def getBiasFactor(self):
        """getBiasFactor(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getBiasFactor(self)


    def getRelaxationFactor(self):
        """getRelaxationFactor(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getRelaxationFactor(self)


    def getCorrection(self):
        """getCorrection(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getCorrection(self)


    def getSign(self):
        """getSign(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getSign(self)


    def getHalfRange(self):
        """getHalfRange(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getHalfRange(self)


    def isLimit(self):
        """isLimit(btAngularLimit self) -> bool"""
        return _bullet.btAngularLimit_isLimit(self)


    def fit(self, angle):
        """fit(btAngularLimit self, btScalar & angle)"""
        return _bullet.btAngularLimit_fit(self, angle)


    def getError(self):
        """getError(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getError(self)


    def getLow(self):
        """getLow(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getLow(self)


    def getHigh(self):
        """getHigh(btAngularLimit self) -> btScalar"""
        return _bullet.btAngularLimit_getHigh(self)

    __swig_destroy__ = _bullet.delete_btAngularLimit
    __del__ = lambda self: None
btAngularLimit_swigregister = _bullet.btAngularLimit_swigregister
btAngularLimit_swigregister(btAngularLimit)

btConeTwistConstraintDataName = _bullet.btConeTwistConstraintDataName
BT_CONETWIST_FLAGS_LIN_CFM = _bullet.BT_CONETWIST_FLAGS_LIN_CFM
BT_CONETWIST_FLAGS_LIN_ERP = _bullet.BT_CONETWIST_FLAGS_LIN_ERP
BT_CONETWIST_FLAGS_ANG_CFM = _bullet.BT_CONETWIST_FLAGS_ANG_CFM
class btConeTwistConstraint(btTypedConstraint):
    """Proxy of C++ btConeTwistConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeTwistConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btConeTwistConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btConeTwistConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & rbAFrame, btTransform const & rbBFrame) -> btConeTwistConstraint
        __init__(btConeTwistConstraint self, btRigidBody rbA, btTransform const & rbAFrame) -> btConeTwistConstraint
        """
        this = _bullet.new_btConeTwistConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getInfo1NonVirtual(self, info):
        """getInfo1NonVirtual(btConeTwistConstraint self, btTypedConstraint::btConstraintInfo1 * info)"""
        return _bullet.btConeTwistConstraint_getInfo1NonVirtual(self, info)


    def getInfo2NonVirtual(self, info, transA, transB, invInertiaWorldA, invInertiaWorldB):
        """getInfo2NonVirtual(btConeTwistConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & transA, btTransform const & transB, btMatrix3x3 const & invInertiaWorldA, btMatrix3x3 const & invInertiaWorldB)"""
        return _bullet.btConeTwistConstraint_getInfo2NonVirtual(self, info, transA, transB, invInertiaWorldA, invInertiaWorldB)


    def updateRHS(self, timeStep):
        """updateRHS(btConeTwistConstraint self, btScalar timeStep)"""
        return _bullet.btConeTwistConstraint_updateRHS(self, timeStep)


    def getRigidBodyA(self):
        """getRigidBodyA(btConeTwistConstraint self) -> btRigidBody"""
        return _bullet.btConeTwistConstraint_getRigidBodyA(self)


    def getRigidBodyB(self):
        """getRigidBodyB(btConeTwistConstraint self) -> btRigidBody"""
        return _bullet.btConeTwistConstraint_getRigidBodyB(self)


    def setAngularOnly(self, angularOnly):
        """setAngularOnly(btConeTwistConstraint self, bool angularOnly)"""
        return _bullet.btConeTwistConstraint_setAngularOnly(self, angularOnly)


    def getAngularOnly(self):
        """getAngularOnly(btConeTwistConstraint self) -> bool"""
        return _bullet.btConeTwistConstraint_getAngularOnly(self)


    def getLimit(self, limitIndex):
        """getLimit(btConeTwistConstraint self, int limitIndex) -> btScalar"""
        return _bullet.btConeTwistConstraint_getLimit(self, limitIndex)


    def setLimit(self, *args):
        """
        setLimit(btConeTwistConstraint self, int limitIndex, btScalar limitValue)
        setLimit(btConeTwistConstraint self, btScalar _swingSpan1, btScalar _swingSpan2, btScalar _twistSpan, btScalar _softness=1., btScalar _biasFactor=0.3, btScalar _relaxationFactor=1.0)
        setLimit(btConeTwistConstraint self, btScalar _swingSpan1, btScalar _swingSpan2, btScalar _twistSpan, btScalar _softness=1., btScalar _biasFactor=0.3)
        setLimit(btConeTwistConstraint self, btScalar _swingSpan1, btScalar _swingSpan2, btScalar _twistSpan, btScalar _softness=1.)
        setLimit(btConeTwistConstraint self, btScalar _swingSpan1, btScalar _swingSpan2, btScalar _twistSpan)
        """
        return _bullet.btConeTwistConstraint_setLimit(self, *args)


    def getAFrame(self):
        """getAFrame(btConeTwistConstraint self) -> btTransform const &"""
        return _bullet.btConeTwistConstraint_getAFrame(self)


    def getBFrame(self):
        """getBFrame(btConeTwistConstraint self) -> btTransform const &"""
        return _bullet.btConeTwistConstraint_getBFrame(self)


    def getSolveTwistLimit(self):
        """getSolveTwistLimit(btConeTwistConstraint self) -> int"""
        return _bullet.btConeTwistConstraint_getSolveTwistLimit(self)


    def getSolveSwingLimit(self):
        """getSolveSwingLimit(btConeTwistConstraint self) -> int"""
        return _bullet.btConeTwistConstraint_getSolveSwingLimit(self)


    def getTwistLimitSign(self):
        """getTwistLimitSign(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getTwistLimitSign(self)


    def calcAngleInfo(self):
        """calcAngleInfo(btConeTwistConstraint self)"""
        return _bullet.btConeTwistConstraint_calcAngleInfo(self)


    def calcAngleInfo2(self, transA, transB, invInertiaWorldA, invInertiaWorldB):
        """calcAngleInfo2(btConeTwistConstraint self, btTransform const & transA, btTransform const & transB, btMatrix3x3 const & invInertiaWorldA, btMatrix3x3 const & invInertiaWorldB)"""
        return _bullet.btConeTwistConstraint_calcAngleInfo2(self, transA, transB, invInertiaWorldA, invInertiaWorldB)


    def getSwingSpan1(self):
        """getSwingSpan1(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getSwingSpan1(self)


    def getSwingSpan2(self):
        """getSwingSpan2(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getSwingSpan2(self)


    def getTwistSpan(self):
        """getTwistSpan(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getTwistSpan(self)


    def getLimitSoftness(self):
        """getLimitSoftness(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getLimitSoftness(self)


    def getBiasFactor(self):
        """getBiasFactor(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getBiasFactor(self)


    def getRelaxationFactor(self):
        """getRelaxationFactor(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getRelaxationFactor(self)


    def getTwistAngle(self):
        """getTwistAngle(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getTwistAngle(self)


    def isPastSwingLimit(self):
        """isPastSwingLimit(btConeTwistConstraint self) -> bool"""
        return _bullet.btConeTwistConstraint_isPastSwingLimit(self)


    def getDamping(self):
        """getDamping(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getDamping(self)


    def setDamping(self, damping):
        """setDamping(btConeTwistConstraint self, btScalar damping)"""
        return _bullet.btConeTwistConstraint_setDamping(self, damping)


    def enableMotor(self, b):
        """enableMotor(btConeTwistConstraint self, bool b)"""
        return _bullet.btConeTwistConstraint_enableMotor(self, b)


    def isMotorEnabled(self):
        """isMotorEnabled(btConeTwistConstraint self) -> bool"""
        return _bullet.btConeTwistConstraint_isMotorEnabled(self)


    def getMaxMotorImpulse(self):
        """getMaxMotorImpulse(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getMaxMotorImpulse(self)


    def isMaxMotorImpulseNormalized(self):
        """isMaxMotorImpulseNormalized(btConeTwistConstraint self) -> bool"""
        return _bullet.btConeTwistConstraint_isMaxMotorImpulseNormalized(self)


    def setMaxMotorImpulse(self, maxMotorImpulse):
        """setMaxMotorImpulse(btConeTwistConstraint self, btScalar maxMotorImpulse)"""
        return _bullet.btConeTwistConstraint_setMaxMotorImpulse(self, maxMotorImpulse)


    def setMaxMotorImpulseNormalized(self, maxMotorImpulse):
        """setMaxMotorImpulseNormalized(btConeTwistConstraint self, btScalar maxMotorImpulse)"""
        return _bullet.btConeTwistConstraint_setMaxMotorImpulseNormalized(self, maxMotorImpulse)


    def getFixThresh(self):
        """getFixThresh(btConeTwistConstraint self) -> btScalar"""
        return _bullet.btConeTwistConstraint_getFixThresh(self)


    def setFixThresh(self, fixThresh):
        """setFixThresh(btConeTwistConstraint self, btScalar fixThresh)"""
        return _bullet.btConeTwistConstraint_setFixThresh(self, fixThresh)


    def setMotorTarget(self, q):
        """setMotorTarget(btConeTwistConstraint self, btQuaternion const & q)"""
        return _bullet.btConeTwistConstraint_setMotorTarget(self, q)


    def getMotorTarget(self):
        """getMotorTarget(btConeTwistConstraint self) -> btQuaternion const &"""
        return _bullet.btConeTwistConstraint_getMotorTarget(self)


    def setMotorTargetInConstraintSpace(self, q):
        """setMotorTargetInConstraintSpace(btConeTwistConstraint self, btQuaternion const & q)"""
        return _bullet.btConeTwistConstraint_setMotorTargetInConstraintSpace(self, q)


    def GetPointForAngle(self, fAngleInRadians, fLength):
        """GetPointForAngle(btConeTwistConstraint self, btScalar fAngleInRadians, btScalar fLength) -> btVector3"""
        return _bullet.btConeTwistConstraint_GetPointForAngle(self, fAngleInRadians, fLength)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btConeTwistConstraint self, int num, btScalar value, int axis=-1)
        setParam(btConeTwistConstraint self, int num, btScalar value)
        """
        return _bullet.btConeTwistConstraint_setParam(self, num, value, axis)


    def setFrames(self, frameA, frameB):
        """setFrames(btConeTwistConstraint self, btTransform const & frameA, btTransform const & frameB)"""
        return _bullet.btConeTwistConstraint_setFrames(self, frameA, frameB)


    def getFrameOffsetA(self):
        """getFrameOffsetA(btConeTwistConstraint self) -> btTransform const &"""
        return _bullet.btConeTwistConstraint_getFrameOffsetA(self)


    def getFrameOffsetB(self):
        """getFrameOffsetB(btConeTwistConstraint self) -> btTransform const &"""
        return _bullet.btConeTwistConstraint_getFrameOffsetB(self)


    def getParam(self, num, axis=-1):
        """
        getParam(btConeTwistConstraint self, int num, int axis=-1) -> btScalar
        getParam(btConeTwistConstraint self, int num) -> btScalar
        """
        return _bullet.btConeTwistConstraint_getParam(self, num, axis)


    def getFlags(self):
        """getFlags(btConeTwistConstraint self) -> int"""
        return _bullet.btConeTwistConstraint_getFlags(self)

    __swig_destroy__ = _bullet.delete_btConeTwistConstraint
    __del__ = lambda self: None
btConeTwistConstraint_swigregister = _bullet.btConeTwistConstraint_swigregister
btConeTwistConstraint_swigregister(btConeTwistConstraint)

class btConeTwistConstraintDoubleData(_object):
    """Proxy of C++ btConeTwistConstraintDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeTwistConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConeTwistConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btConeTwistConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btConeTwistConstraintDoubleData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_typeConstraintData_get, _bullet.btConeTwistConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btConeTwistConstraintDoubleData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btConeTwistConstraintDoubleData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_rbAFrame_get, _bullet.btConeTwistConstraintDoubleData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btConeTwistConstraintDoubleData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btConeTwistConstraintDoubleData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_rbBFrame_get, _bullet.btConeTwistConstraintDoubleData_m_rbBFrame_set)
    __swig_setmethods__["m_swingSpan1"] = _bullet.btConeTwistConstraintDoubleData_m_swingSpan1_set
    __swig_getmethods__["m_swingSpan1"] = _bullet.btConeTwistConstraintDoubleData_m_swingSpan1_get
    if _newclass:
        m_swingSpan1 = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_swingSpan1_get, _bullet.btConeTwistConstraintDoubleData_m_swingSpan1_set)
    __swig_setmethods__["m_swingSpan2"] = _bullet.btConeTwistConstraintDoubleData_m_swingSpan2_set
    __swig_getmethods__["m_swingSpan2"] = _bullet.btConeTwistConstraintDoubleData_m_swingSpan2_get
    if _newclass:
        m_swingSpan2 = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_swingSpan2_get, _bullet.btConeTwistConstraintDoubleData_m_swingSpan2_set)
    __swig_setmethods__["m_twistSpan"] = _bullet.btConeTwistConstraintDoubleData_m_twistSpan_set
    __swig_getmethods__["m_twistSpan"] = _bullet.btConeTwistConstraintDoubleData_m_twistSpan_get
    if _newclass:
        m_twistSpan = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_twistSpan_get, _bullet.btConeTwistConstraintDoubleData_m_twistSpan_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btConeTwistConstraintDoubleData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btConeTwistConstraintDoubleData_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_limitSoftness_get, _bullet.btConeTwistConstraintDoubleData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = _bullet.btConeTwistConstraintDoubleData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = _bullet.btConeTwistConstraintDoubleData_m_biasFactor_get
    if _newclass:
        m_biasFactor = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_biasFactor_get, _bullet.btConeTwistConstraintDoubleData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = _bullet.btConeTwistConstraintDoubleData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = _bullet.btConeTwistConstraintDoubleData_m_relaxationFactor_get
    if _newclass:
        m_relaxationFactor = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_relaxationFactor_get, _bullet.btConeTwistConstraintDoubleData_m_relaxationFactor_set)
    __swig_setmethods__["m_damping"] = _bullet.btConeTwistConstraintDoubleData_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btConeTwistConstraintDoubleData_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btConeTwistConstraintDoubleData_m_damping_get, _bullet.btConeTwistConstraintDoubleData_m_damping_set)

    def __init__(self):
        """__init__(btConeTwistConstraintDoubleData self) -> btConeTwistConstraintDoubleData"""
        this = _bullet.new_btConeTwistConstraintDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConeTwistConstraintDoubleData
    __del__ = lambda self: None
btConeTwistConstraintDoubleData_swigregister = _bullet.btConeTwistConstraintDoubleData_swigregister
btConeTwistConstraintDoubleData_swigregister(btConeTwistConstraintDoubleData)

class btConeTwistConstraintData(_object):
    """Proxy of C++ btConeTwistConstraintData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConeTwistConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConeTwistConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btConeTwistConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btConeTwistConstraintData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btConeTwistConstraintData_m_typeConstraintData_get, _bullet.btConeTwistConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btConeTwistConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btConeTwistConstraintData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btConeTwistConstraintData_m_rbAFrame_get, _bullet.btConeTwistConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btConeTwistConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btConeTwistConstraintData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btConeTwistConstraintData_m_rbBFrame_get, _bullet.btConeTwistConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_swingSpan1"] = _bullet.btConeTwistConstraintData_m_swingSpan1_set
    __swig_getmethods__["m_swingSpan1"] = _bullet.btConeTwistConstraintData_m_swingSpan1_get
    if _newclass:
        m_swingSpan1 = _swig_property(_bullet.btConeTwistConstraintData_m_swingSpan1_get, _bullet.btConeTwistConstraintData_m_swingSpan1_set)
    __swig_setmethods__["m_swingSpan2"] = _bullet.btConeTwistConstraintData_m_swingSpan2_set
    __swig_getmethods__["m_swingSpan2"] = _bullet.btConeTwistConstraintData_m_swingSpan2_get
    if _newclass:
        m_swingSpan2 = _swig_property(_bullet.btConeTwistConstraintData_m_swingSpan2_get, _bullet.btConeTwistConstraintData_m_swingSpan2_set)
    __swig_setmethods__["m_twistSpan"] = _bullet.btConeTwistConstraintData_m_twistSpan_set
    __swig_getmethods__["m_twistSpan"] = _bullet.btConeTwistConstraintData_m_twistSpan_get
    if _newclass:
        m_twistSpan = _swig_property(_bullet.btConeTwistConstraintData_m_twistSpan_get, _bullet.btConeTwistConstraintData_m_twistSpan_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btConeTwistConstraintData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btConeTwistConstraintData_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btConeTwistConstraintData_m_limitSoftness_get, _bullet.btConeTwistConstraintData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = _bullet.btConeTwistConstraintData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = _bullet.btConeTwistConstraintData_m_biasFactor_get
    if _newclass:
        m_biasFactor = _swig_property(_bullet.btConeTwistConstraintData_m_biasFactor_get, _bullet.btConeTwistConstraintData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = _bullet.btConeTwistConstraintData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = _bullet.btConeTwistConstraintData_m_relaxationFactor_get
    if _newclass:
        m_relaxationFactor = _swig_property(_bullet.btConeTwistConstraintData_m_relaxationFactor_get, _bullet.btConeTwistConstraintData_m_relaxationFactor_set)
    __swig_setmethods__["m_damping"] = _bullet.btConeTwistConstraintData_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btConeTwistConstraintData_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btConeTwistConstraintData_m_damping_get, _bullet.btConeTwistConstraintData_m_damping_set)
    __swig_setmethods__["m_pad"] = _bullet.btConeTwistConstraintData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btConeTwistConstraintData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btConeTwistConstraintData_m_pad_get, _bullet.btConeTwistConstraintData_m_pad_set)

    def __init__(self):
        """__init__(btConeTwistConstraintData self) -> btConeTwistConstraintData"""
        this = _bullet.new_btConeTwistConstraintData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConeTwistConstraintData
    __del__ = lambda self: None
btConeTwistConstraintData_swigregister = _bullet.btConeTwistConstraintData_swigregister
btConeTwistConstraintData_swigregister(btConeTwistConstraintData)

BT_SEQUENTIAL_IMPULSE_SOLVER = _bullet.BT_SEQUENTIAL_IMPULSE_SOLVER
BT_MLCP_SOLVER = _bullet.BT_MLCP_SOLVER
BT_NNCG_SOLVER = _bullet.BT_NNCG_SOLVER
class btConstraintSolver(_object):
    """Proxy of C++ btConstraintSolver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConstraintSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConstraintSolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btConstraintSolver
    __del__ = lambda self: None

    def prepareSolve(self, arg2, arg3):
        """prepareSolve(btConstraintSolver self, int arg2, int arg3)"""
        return _bullet.btConstraintSolver_prepareSolve(self, arg2, arg3)


    def solveGroup(self, bodies, numBodies, manifold, numManifolds, constraints, numConstraints, info, debugDrawer, dispatcher):
        """solveGroup(btConstraintSolver self, btCollisionObject ** bodies, int numBodies, btPersistentManifold ** manifold, int numManifolds, btTypedConstraint ** constraints, int numConstraints, btContactSolverInfo info, btIDebugDraw debugDrawer, btDispatcher dispatcher) -> btScalar"""
        return _bullet.btConstraintSolver_solveGroup(self, bodies, numBodies, manifold, numManifolds, constraints, numConstraints, info, debugDrawer, dispatcher)


    def allSolved(self, arg2, arg3):
        """allSolved(btConstraintSolver self, btContactSolverInfo arg2, btIDebugDraw arg3)"""
        return _bullet.btConstraintSolver_allSolved(self, arg2, arg3)


    def reset(self):
        """reset(btConstraintSolver self)"""
        return _bullet.btConstraintSolver_reset(self)


    def getSolverType(self):
        """getSolverType(btConstraintSolver self) -> btConstraintSolverType"""
        return _bullet.btConstraintSolver_getSolverType(self)

btConstraintSolver_swigregister = _bullet.btConstraintSolver_swigregister
btConstraintSolver_swigregister(btConstraintSolver)

class btContactConstraint(btTypedConstraint):
    """Proxy of C++ btContactConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btContactConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btContactConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setContactManifold(self, contactManifold):
        """setContactManifold(btContactConstraint self, btPersistentManifold contactManifold)"""
        return _bullet.btContactConstraint_setContactManifold(self, contactManifold)


    def getContactManifold(self, *args):
        """
        getContactManifold(btContactConstraint self) -> btPersistentManifold
        getContactManifold(btContactConstraint self) -> btPersistentManifold
        """
        return _bullet.btContactConstraint_getContactManifold(self, *args)

    __swig_destroy__ = _bullet.delete_btContactConstraint
    __del__ = lambda self: None
btContactConstraint_swigregister = _bullet.btContactConstraint_swigregister
btContactConstraint_swigregister(btContactConstraint)


def resolveSingleCollision(body1, colObj2, contactPositionWorld, contactNormalOnB, solverInfo, distance):
    """resolveSingleCollision(btRigidBody body1, btCollisionObject colObj2, btVector3 const & contactPositionWorld, btVector3 const & contactNormalOnB, btContactSolverInfo solverInfo, btScalar distance) -> btScalar"""
    return _bullet.resolveSingleCollision(body1, colObj2, contactPositionWorld, contactNormalOnB, solverInfo, distance)

def resolveSingleBilateral(body1, pos1, body2, pos2, distance, normal, impulse, timeStep):
    """resolveSingleBilateral(btRigidBody body1, btVector3 const & pos1, btRigidBody body2, btVector3 const & pos2, btScalar distance, btVector3 const & normal, btScalar & impulse, btScalar timeStep)"""
    return _bullet.resolveSingleBilateral(body1, pos1, body2, pos2, distance, normal, impulse, timeStep)
SOLVER_RANDMIZE_ORDER = _bullet.SOLVER_RANDMIZE_ORDER
SOLVER_FRICTION_SEPARATE = _bullet.SOLVER_FRICTION_SEPARATE
SOLVER_USE_WARMSTARTING = _bullet.SOLVER_USE_WARMSTARTING
SOLVER_USE_2_FRICTION_DIRECTIONS = _bullet.SOLVER_USE_2_FRICTION_DIRECTIONS
SOLVER_ENABLE_FRICTION_DIRECTION_CACHING = _bullet.SOLVER_ENABLE_FRICTION_DIRECTION_CACHING
SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = _bullet.SOLVER_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION
SOLVER_CACHE_FRIENDLY = _bullet.SOLVER_CACHE_FRIENDLY
SOLVER_SIMD = _bullet.SOLVER_SIMD
SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = _bullet.SOLVER_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS
SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = _bullet.SOLVER_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS
class btContactSolverInfoData(_object):
    """Proxy of C++ btContactSolverInfoData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btContactSolverInfoData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btContactSolverInfoData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_tau"] = _bullet.btContactSolverInfoData_m_tau_set
    __swig_getmethods__["m_tau"] = _bullet.btContactSolverInfoData_m_tau_get
    if _newclass:
        m_tau = _swig_property(_bullet.btContactSolverInfoData_m_tau_get, _bullet.btContactSolverInfoData_m_tau_set)
    __swig_setmethods__["m_damping"] = _bullet.btContactSolverInfoData_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btContactSolverInfoData_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btContactSolverInfoData_m_damping_get, _bullet.btContactSolverInfoData_m_damping_set)
    __swig_setmethods__["m_friction"] = _bullet.btContactSolverInfoData_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btContactSolverInfoData_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btContactSolverInfoData_m_friction_get, _bullet.btContactSolverInfoData_m_friction_set)
    __swig_setmethods__["m_timeStep"] = _bullet.btContactSolverInfoData_m_timeStep_set
    __swig_getmethods__["m_timeStep"] = _bullet.btContactSolverInfoData_m_timeStep_get
    if _newclass:
        m_timeStep = _swig_property(_bullet.btContactSolverInfoData_m_timeStep_get, _bullet.btContactSolverInfoData_m_timeStep_set)
    __swig_setmethods__["m_restitution"] = _bullet.btContactSolverInfoData_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btContactSolverInfoData_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btContactSolverInfoData_m_restitution_get, _bullet.btContactSolverInfoData_m_restitution_set)
    __swig_setmethods__["m_numIterations"] = _bullet.btContactSolverInfoData_m_numIterations_set
    __swig_getmethods__["m_numIterations"] = _bullet.btContactSolverInfoData_m_numIterations_get
    if _newclass:
        m_numIterations = _swig_property(_bullet.btContactSolverInfoData_m_numIterations_get, _bullet.btContactSolverInfoData_m_numIterations_set)
    __swig_setmethods__["m_maxErrorReduction"] = _bullet.btContactSolverInfoData_m_maxErrorReduction_set
    __swig_getmethods__["m_maxErrorReduction"] = _bullet.btContactSolverInfoData_m_maxErrorReduction_get
    if _newclass:
        m_maxErrorReduction = _swig_property(_bullet.btContactSolverInfoData_m_maxErrorReduction_get, _bullet.btContactSolverInfoData_m_maxErrorReduction_set)
    __swig_setmethods__["m_sor"] = _bullet.btContactSolverInfoData_m_sor_set
    __swig_getmethods__["m_sor"] = _bullet.btContactSolverInfoData_m_sor_get
    if _newclass:
        m_sor = _swig_property(_bullet.btContactSolverInfoData_m_sor_get, _bullet.btContactSolverInfoData_m_sor_set)
    __swig_setmethods__["m_erp"] = _bullet.btContactSolverInfoData_m_erp_set
    __swig_getmethods__["m_erp"] = _bullet.btContactSolverInfoData_m_erp_get
    if _newclass:
        m_erp = _swig_property(_bullet.btContactSolverInfoData_m_erp_get, _bullet.btContactSolverInfoData_m_erp_set)
    __swig_setmethods__["m_erp2"] = _bullet.btContactSolverInfoData_m_erp2_set
    __swig_getmethods__["m_erp2"] = _bullet.btContactSolverInfoData_m_erp2_get
    if _newclass:
        m_erp2 = _swig_property(_bullet.btContactSolverInfoData_m_erp2_get, _bullet.btContactSolverInfoData_m_erp2_set)
    __swig_setmethods__["m_globalCfm"] = _bullet.btContactSolverInfoData_m_globalCfm_set
    __swig_getmethods__["m_globalCfm"] = _bullet.btContactSolverInfoData_m_globalCfm_get
    if _newclass:
        m_globalCfm = _swig_property(_bullet.btContactSolverInfoData_m_globalCfm_get, _bullet.btContactSolverInfoData_m_globalCfm_set)
    __swig_setmethods__["m_splitImpulse"] = _bullet.btContactSolverInfoData_m_splitImpulse_set
    __swig_getmethods__["m_splitImpulse"] = _bullet.btContactSolverInfoData_m_splitImpulse_get
    if _newclass:
        m_splitImpulse = _swig_property(_bullet.btContactSolverInfoData_m_splitImpulse_get, _bullet.btContactSolverInfoData_m_splitImpulse_set)
    __swig_setmethods__["m_splitImpulsePenetrationThreshold"] = _bullet.btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set
    __swig_getmethods__["m_splitImpulsePenetrationThreshold"] = _bullet.btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get
    if _newclass:
        m_splitImpulsePenetrationThreshold = _swig_property(_bullet.btContactSolverInfoData_m_splitImpulsePenetrationThreshold_get, _bullet.btContactSolverInfoData_m_splitImpulsePenetrationThreshold_set)
    __swig_setmethods__["m_splitImpulseTurnErp"] = _bullet.btContactSolverInfoData_m_splitImpulseTurnErp_set
    __swig_getmethods__["m_splitImpulseTurnErp"] = _bullet.btContactSolverInfoData_m_splitImpulseTurnErp_get
    if _newclass:
        m_splitImpulseTurnErp = _swig_property(_bullet.btContactSolverInfoData_m_splitImpulseTurnErp_get, _bullet.btContactSolverInfoData_m_splitImpulseTurnErp_set)
    __swig_setmethods__["m_linearSlop"] = _bullet.btContactSolverInfoData_m_linearSlop_set
    __swig_getmethods__["m_linearSlop"] = _bullet.btContactSolverInfoData_m_linearSlop_get
    if _newclass:
        m_linearSlop = _swig_property(_bullet.btContactSolverInfoData_m_linearSlop_get, _bullet.btContactSolverInfoData_m_linearSlop_set)
    __swig_setmethods__["m_warmstartingFactor"] = _bullet.btContactSolverInfoData_m_warmstartingFactor_set
    __swig_getmethods__["m_warmstartingFactor"] = _bullet.btContactSolverInfoData_m_warmstartingFactor_get
    if _newclass:
        m_warmstartingFactor = _swig_property(_bullet.btContactSolverInfoData_m_warmstartingFactor_get, _bullet.btContactSolverInfoData_m_warmstartingFactor_set)
    __swig_setmethods__["m_solverMode"] = _bullet.btContactSolverInfoData_m_solverMode_set
    __swig_getmethods__["m_solverMode"] = _bullet.btContactSolverInfoData_m_solverMode_get
    if _newclass:
        m_solverMode = _swig_property(_bullet.btContactSolverInfoData_m_solverMode_get, _bullet.btContactSolverInfoData_m_solverMode_set)
    __swig_setmethods__["m_restingContactRestitutionThreshold"] = _bullet.btContactSolverInfoData_m_restingContactRestitutionThreshold_set
    __swig_getmethods__["m_restingContactRestitutionThreshold"] = _bullet.btContactSolverInfoData_m_restingContactRestitutionThreshold_get
    if _newclass:
        m_restingContactRestitutionThreshold = _swig_property(_bullet.btContactSolverInfoData_m_restingContactRestitutionThreshold_get, _bullet.btContactSolverInfoData_m_restingContactRestitutionThreshold_set)
    __swig_setmethods__["m_minimumSolverBatchSize"] = _bullet.btContactSolverInfoData_m_minimumSolverBatchSize_set
    __swig_getmethods__["m_minimumSolverBatchSize"] = _bullet.btContactSolverInfoData_m_minimumSolverBatchSize_get
    if _newclass:
        m_minimumSolverBatchSize = _swig_property(_bullet.btContactSolverInfoData_m_minimumSolverBatchSize_get, _bullet.btContactSolverInfoData_m_minimumSolverBatchSize_set)
    __swig_setmethods__["m_maxGyroscopicForce"] = _bullet.btContactSolverInfoData_m_maxGyroscopicForce_set
    __swig_getmethods__["m_maxGyroscopicForce"] = _bullet.btContactSolverInfoData_m_maxGyroscopicForce_get
    if _newclass:
        m_maxGyroscopicForce = _swig_property(_bullet.btContactSolverInfoData_m_maxGyroscopicForce_get, _bullet.btContactSolverInfoData_m_maxGyroscopicForce_set)
    __swig_setmethods__["m_singleAxisRollingFrictionThreshold"] = _bullet.btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set
    __swig_getmethods__["m_singleAxisRollingFrictionThreshold"] = _bullet.btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get
    if _newclass:
        m_singleAxisRollingFrictionThreshold = _swig_property(_bullet.btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_get, _bullet.btContactSolverInfoData_m_singleAxisRollingFrictionThreshold_set)
    __swig_setmethods__["m_leastSquaresResidualThreshold"] = _bullet.btContactSolverInfoData_m_leastSquaresResidualThreshold_set
    __swig_getmethods__["m_leastSquaresResidualThreshold"] = _bullet.btContactSolverInfoData_m_leastSquaresResidualThreshold_get
    if _newclass:
        m_leastSquaresResidualThreshold = _swig_property(_bullet.btContactSolverInfoData_m_leastSquaresResidualThreshold_get, _bullet.btContactSolverInfoData_m_leastSquaresResidualThreshold_set)

    def __init__(self):
        """__init__(btContactSolverInfoData self) -> btContactSolverInfoData"""
        this = _bullet.new_btContactSolverInfoData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btContactSolverInfoData
    __del__ = lambda self: None
btContactSolverInfoData_swigregister = _bullet.btContactSolverInfoData_swigregister
btContactSolverInfoData_swigregister(btContactSolverInfoData)

class btContactSolverInfo(btContactSolverInfoData):
    """Proxy of C++ btContactSolverInfo class."""

    __swig_setmethods__ = {}
    for _s in [btContactSolverInfoData]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btContactSolverInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [btContactSolverInfoData]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btContactSolverInfo, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btContactSolverInfo self) -> btContactSolverInfo"""
        this = _bullet.new_btContactSolverInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btContactSolverInfo
    __del__ = lambda self: None
btContactSolverInfo_swigregister = _bullet.btContactSolverInfo_swigregister
btContactSolverInfo_swigregister(btContactSolverInfo)

class btContactSolverInfoDoubleData(_object):
    """Proxy of C++ btContactSolverInfoDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btContactSolverInfoDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btContactSolverInfoDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_tau"] = _bullet.btContactSolverInfoDoubleData_m_tau_set
    __swig_getmethods__["m_tau"] = _bullet.btContactSolverInfoDoubleData_m_tau_get
    if _newclass:
        m_tau = _swig_property(_bullet.btContactSolverInfoDoubleData_m_tau_get, _bullet.btContactSolverInfoDoubleData_m_tau_set)
    __swig_setmethods__["m_damping"] = _bullet.btContactSolverInfoDoubleData_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btContactSolverInfoDoubleData_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btContactSolverInfoDoubleData_m_damping_get, _bullet.btContactSolverInfoDoubleData_m_damping_set)
    __swig_setmethods__["m_friction"] = _bullet.btContactSolverInfoDoubleData_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btContactSolverInfoDoubleData_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btContactSolverInfoDoubleData_m_friction_get, _bullet.btContactSolverInfoDoubleData_m_friction_set)
    __swig_setmethods__["m_timeStep"] = _bullet.btContactSolverInfoDoubleData_m_timeStep_set
    __swig_getmethods__["m_timeStep"] = _bullet.btContactSolverInfoDoubleData_m_timeStep_get
    if _newclass:
        m_timeStep = _swig_property(_bullet.btContactSolverInfoDoubleData_m_timeStep_get, _bullet.btContactSolverInfoDoubleData_m_timeStep_set)
    __swig_setmethods__["m_restitution"] = _bullet.btContactSolverInfoDoubleData_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btContactSolverInfoDoubleData_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btContactSolverInfoDoubleData_m_restitution_get, _bullet.btContactSolverInfoDoubleData_m_restitution_set)
    __swig_setmethods__["m_maxErrorReduction"] = _bullet.btContactSolverInfoDoubleData_m_maxErrorReduction_set
    __swig_getmethods__["m_maxErrorReduction"] = _bullet.btContactSolverInfoDoubleData_m_maxErrorReduction_get
    if _newclass:
        m_maxErrorReduction = _swig_property(_bullet.btContactSolverInfoDoubleData_m_maxErrorReduction_get, _bullet.btContactSolverInfoDoubleData_m_maxErrorReduction_set)
    __swig_setmethods__["m_sor"] = _bullet.btContactSolverInfoDoubleData_m_sor_set
    __swig_getmethods__["m_sor"] = _bullet.btContactSolverInfoDoubleData_m_sor_get
    if _newclass:
        m_sor = _swig_property(_bullet.btContactSolverInfoDoubleData_m_sor_get, _bullet.btContactSolverInfoDoubleData_m_sor_set)
    __swig_setmethods__["m_erp"] = _bullet.btContactSolverInfoDoubleData_m_erp_set
    __swig_getmethods__["m_erp"] = _bullet.btContactSolverInfoDoubleData_m_erp_get
    if _newclass:
        m_erp = _swig_property(_bullet.btContactSolverInfoDoubleData_m_erp_get, _bullet.btContactSolverInfoDoubleData_m_erp_set)
    __swig_setmethods__["m_erp2"] = _bullet.btContactSolverInfoDoubleData_m_erp2_set
    __swig_getmethods__["m_erp2"] = _bullet.btContactSolverInfoDoubleData_m_erp2_get
    if _newclass:
        m_erp2 = _swig_property(_bullet.btContactSolverInfoDoubleData_m_erp2_get, _bullet.btContactSolverInfoDoubleData_m_erp2_set)
    __swig_setmethods__["m_globalCfm"] = _bullet.btContactSolverInfoDoubleData_m_globalCfm_set
    __swig_getmethods__["m_globalCfm"] = _bullet.btContactSolverInfoDoubleData_m_globalCfm_get
    if _newclass:
        m_globalCfm = _swig_property(_bullet.btContactSolverInfoDoubleData_m_globalCfm_get, _bullet.btContactSolverInfoDoubleData_m_globalCfm_set)
    __swig_setmethods__["m_splitImpulsePenetrationThreshold"] = _bullet.btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set
    __swig_getmethods__["m_splitImpulsePenetrationThreshold"] = _bullet.btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get
    if _newclass:
        m_splitImpulsePenetrationThreshold = _swig_property(_bullet.btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_get, _bullet.btContactSolverInfoDoubleData_m_splitImpulsePenetrationThreshold_set)
    __swig_setmethods__["m_splitImpulseTurnErp"] = _bullet.btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set
    __swig_getmethods__["m_splitImpulseTurnErp"] = _bullet.btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get
    if _newclass:
        m_splitImpulseTurnErp = _swig_property(_bullet.btContactSolverInfoDoubleData_m_splitImpulseTurnErp_get, _bullet.btContactSolverInfoDoubleData_m_splitImpulseTurnErp_set)
    __swig_setmethods__["m_linearSlop"] = _bullet.btContactSolverInfoDoubleData_m_linearSlop_set
    __swig_getmethods__["m_linearSlop"] = _bullet.btContactSolverInfoDoubleData_m_linearSlop_get
    if _newclass:
        m_linearSlop = _swig_property(_bullet.btContactSolverInfoDoubleData_m_linearSlop_get, _bullet.btContactSolverInfoDoubleData_m_linearSlop_set)
    __swig_setmethods__["m_warmstartingFactor"] = _bullet.btContactSolverInfoDoubleData_m_warmstartingFactor_set
    __swig_getmethods__["m_warmstartingFactor"] = _bullet.btContactSolverInfoDoubleData_m_warmstartingFactor_get
    if _newclass:
        m_warmstartingFactor = _swig_property(_bullet.btContactSolverInfoDoubleData_m_warmstartingFactor_get, _bullet.btContactSolverInfoDoubleData_m_warmstartingFactor_set)
    __swig_setmethods__["m_maxGyroscopicForce"] = _bullet.btContactSolverInfoDoubleData_m_maxGyroscopicForce_set
    __swig_getmethods__["m_maxGyroscopicForce"] = _bullet.btContactSolverInfoDoubleData_m_maxGyroscopicForce_get
    if _newclass:
        m_maxGyroscopicForce = _swig_property(_bullet.btContactSolverInfoDoubleData_m_maxGyroscopicForce_get, _bullet.btContactSolverInfoDoubleData_m_maxGyroscopicForce_set)
    __swig_setmethods__["m_singleAxisRollingFrictionThreshold"] = _bullet.btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set
    __swig_getmethods__["m_singleAxisRollingFrictionThreshold"] = _bullet.btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get
    if _newclass:
        m_singleAxisRollingFrictionThreshold = _swig_property(_bullet.btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_get, _bullet.btContactSolverInfoDoubleData_m_singleAxisRollingFrictionThreshold_set)
    __swig_setmethods__["m_numIterations"] = _bullet.btContactSolverInfoDoubleData_m_numIterations_set
    __swig_getmethods__["m_numIterations"] = _bullet.btContactSolverInfoDoubleData_m_numIterations_get
    if _newclass:
        m_numIterations = _swig_property(_bullet.btContactSolverInfoDoubleData_m_numIterations_get, _bullet.btContactSolverInfoDoubleData_m_numIterations_set)
    __swig_setmethods__["m_solverMode"] = _bullet.btContactSolverInfoDoubleData_m_solverMode_set
    __swig_getmethods__["m_solverMode"] = _bullet.btContactSolverInfoDoubleData_m_solverMode_get
    if _newclass:
        m_solverMode = _swig_property(_bullet.btContactSolverInfoDoubleData_m_solverMode_get, _bullet.btContactSolverInfoDoubleData_m_solverMode_set)
    __swig_setmethods__["m_restingContactRestitutionThreshold"] = _bullet.btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set
    __swig_getmethods__["m_restingContactRestitutionThreshold"] = _bullet.btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get
    if _newclass:
        m_restingContactRestitutionThreshold = _swig_property(_bullet.btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_get, _bullet.btContactSolverInfoDoubleData_m_restingContactRestitutionThreshold_set)
    __swig_setmethods__["m_minimumSolverBatchSize"] = _bullet.btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set
    __swig_getmethods__["m_minimumSolverBatchSize"] = _bullet.btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get
    if _newclass:
        m_minimumSolverBatchSize = _swig_property(_bullet.btContactSolverInfoDoubleData_m_minimumSolverBatchSize_get, _bullet.btContactSolverInfoDoubleData_m_minimumSolverBatchSize_set)
    __swig_setmethods__["m_splitImpulse"] = _bullet.btContactSolverInfoDoubleData_m_splitImpulse_set
    __swig_getmethods__["m_splitImpulse"] = _bullet.btContactSolverInfoDoubleData_m_splitImpulse_get
    if _newclass:
        m_splitImpulse = _swig_property(_bullet.btContactSolverInfoDoubleData_m_splitImpulse_get, _bullet.btContactSolverInfoDoubleData_m_splitImpulse_set)
    __swig_setmethods__["m_padding"] = _bullet.btContactSolverInfoDoubleData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btContactSolverInfoDoubleData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btContactSolverInfoDoubleData_m_padding_get, _bullet.btContactSolverInfoDoubleData_m_padding_set)

    def __init__(self):
        """__init__(btContactSolverInfoDoubleData self) -> btContactSolverInfoDoubleData"""
        this = _bullet.new_btContactSolverInfoDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btContactSolverInfoDoubleData
    __del__ = lambda self: None
btContactSolverInfoDoubleData_swigregister = _bullet.btContactSolverInfoDoubleData_swigregister
btContactSolverInfoDoubleData_swigregister(btContactSolverInfoDoubleData)

class btContactSolverInfoFloatData(_object):
    """Proxy of C++ btContactSolverInfoFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btContactSolverInfoFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btContactSolverInfoFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_tau"] = _bullet.btContactSolverInfoFloatData_m_tau_set
    __swig_getmethods__["m_tau"] = _bullet.btContactSolverInfoFloatData_m_tau_get
    if _newclass:
        m_tau = _swig_property(_bullet.btContactSolverInfoFloatData_m_tau_get, _bullet.btContactSolverInfoFloatData_m_tau_set)
    __swig_setmethods__["m_damping"] = _bullet.btContactSolverInfoFloatData_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btContactSolverInfoFloatData_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btContactSolverInfoFloatData_m_damping_get, _bullet.btContactSolverInfoFloatData_m_damping_set)
    __swig_setmethods__["m_friction"] = _bullet.btContactSolverInfoFloatData_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btContactSolverInfoFloatData_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btContactSolverInfoFloatData_m_friction_get, _bullet.btContactSolverInfoFloatData_m_friction_set)
    __swig_setmethods__["m_timeStep"] = _bullet.btContactSolverInfoFloatData_m_timeStep_set
    __swig_getmethods__["m_timeStep"] = _bullet.btContactSolverInfoFloatData_m_timeStep_get
    if _newclass:
        m_timeStep = _swig_property(_bullet.btContactSolverInfoFloatData_m_timeStep_get, _bullet.btContactSolverInfoFloatData_m_timeStep_set)
    __swig_setmethods__["m_restitution"] = _bullet.btContactSolverInfoFloatData_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btContactSolverInfoFloatData_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btContactSolverInfoFloatData_m_restitution_get, _bullet.btContactSolverInfoFloatData_m_restitution_set)
    __swig_setmethods__["m_maxErrorReduction"] = _bullet.btContactSolverInfoFloatData_m_maxErrorReduction_set
    __swig_getmethods__["m_maxErrorReduction"] = _bullet.btContactSolverInfoFloatData_m_maxErrorReduction_get
    if _newclass:
        m_maxErrorReduction = _swig_property(_bullet.btContactSolverInfoFloatData_m_maxErrorReduction_get, _bullet.btContactSolverInfoFloatData_m_maxErrorReduction_set)
    __swig_setmethods__["m_sor"] = _bullet.btContactSolverInfoFloatData_m_sor_set
    __swig_getmethods__["m_sor"] = _bullet.btContactSolverInfoFloatData_m_sor_get
    if _newclass:
        m_sor = _swig_property(_bullet.btContactSolverInfoFloatData_m_sor_get, _bullet.btContactSolverInfoFloatData_m_sor_set)
    __swig_setmethods__["m_erp"] = _bullet.btContactSolverInfoFloatData_m_erp_set
    __swig_getmethods__["m_erp"] = _bullet.btContactSolverInfoFloatData_m_erp_get
    if _newclass:
        m_erp = _swig_property(_bullet.btContactSolverInfoFloatData_m_erp_get, _bullet.btContactSolverInfoFloatData_m_erp_set)
    __swig_setmethods__["m_erp2"] = _bullet.btContactSolverInfoFloatData_m_erp2_set
    __swig_getmethods__["m_erp2"] = _bullet.btContactSolverInfoFloatData_m_erp2_get
    if _newclass:
        m_erp2 = _swig_property(_bullet.btContactSolverInfoFloatData_m_erp2_get, _bullet.btContactSolverInfoFloatData_m_erp2_set)
    __swig_setmethods__["m_globalCfm"] = _bullet.btContactSolverInfoFloatData_m_globalCfm_set
    __swig_getmethods__["m_globalCfm"] = _bullet.btContactSolverInfoFloatData_m_globalCfm_get
    if _newclass:
        m_globalCfm = _swig_property(_bullet.btContactSolverInfoFloatData_m_globalCfm_get, _bullet.btContactSolverInfoFloatData_m_globalCfm_set)
    __swig_setmethods__["m_splitImpulsePenetrationThreshold"] = _bullet.btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set
    __swig_getmethods__["m_splitImpulsePenetrationThreshold"] = _bullet.btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get
    if _newclass:
        m_splitImpulsePenetrationThreshold = _swig_property(_bullet.btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_get, _bullet.btContactSolverInfoFloatData_m_splitImpulsePenetrationThreshold_set)
    __swig_setmethods__["m_splitImpulseTurnErp"] = _bullet.btContactSolverInfoFloatData_m_splitImpulseTurnErp_set
    __swig_getmethods__["m_splitImpulseTurnErp"] = _bullet.btContactSolverInfoFloatData_m_splitImpulseTurnErp_get
    if _newclass:
        m_splitImpulseTurnErp = _swig_property(_bullet.btContactSolverInfoFloatData_m_splitImpulseTurnErp_get, _bullet.btContactSolverInfoFloatData_m_splitImpulseTurnErp_set)
    __swig_setmethods__["m_linearSlop"] = _bullet.btContactSolverInfoFloatData_m_linearSlop_set
    __swig_getmethods__["m_linearSlop"] = _bullet.btContactSolverInfoFloatData_m_linearSlop_get
    if _newclass:
        m_linearSlop = _swig_property(_bullet.btContactSolverInfoFloatData_m_linearSlop_get, _bullet.btContactSolverInfoFloatData_m_linearSlop_set)
    __swig_setmethods__["m_warmstartingFactor"] = _bullet.btContactSolverInfoFloatData_m_warmstartingFactor_set
    __swig_getmethods__["m_warmstartingFactor"] = _bullet.btContactSolverInfoFloatData_m_warmstartingFactor_get
    if _newclass:
        m_warmstartingFactor = _swig_property(_bullet.btContactSolverInfoFloatData_m_warmstartingFactor_get, _bullet.btContactSolverInfoFloatData_m_warmstartingFactor_set)
    __swig_setmethods__["m_maxGyroscopicForce"] = _bullet.btContactSolverInfoFloatData_m_maxGyroscopicForce_set
    __swig_getmethods__["m_maxGyroscopicForce"] = _bullet.btContactSolverInfoFloatData_m_maxGyroscopicForce_get
    if _newclass:
        m_maxGyroscopicForce = _swig_property(_bullet.btContactSolverInfoFloatData_m_maxGyroscopicForce_get, _bullet.btContactSolverInfoFloatData_m_maxGyroscopicForce_set)
    __swig_setmethods__["m_singleAxisRollingFrictionThreshold"] = _bullet.btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set
    __swig_getmethods__["m_singleAxisRollingFrictionThreshold"] = _bullet.btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get
    if _newclass:
        m_singleAxisRollingFrictionThreshold = _swig_property(_bullet.btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_get, _bullet.btContactSolverInfoFloatData_m_singleAxisRollingFrictionThreshold_set)
    __swig_setmethods__["m_numIterations"] = _bullet.btContactSolverInfoFloatData_m_numIterations_set
    __swig_getmethods__["m_numIterations"] = _bullet.btContactSolverInfoFloatData_m_numIterations_get
    if _newclass:
        m_numIterations = _swig_property(_bullet.btContactSolverInfoFloatData_m_numIterations_get, _bullet.btContactSolverInfoFloatData_m_numIterations_set)
    __swig_setmethods__["m_solverMode"] = _bullet.btContactSolverInfoFloatData_m_solverMode_set
    __swig_getmethods__["m_solverMode"] = _bullet.btContactSolverInfoFloatData_m_solverMode_get
    if _newclass:
        m_solverMode = _swig_property(_bullet.btContactSolverInfoFloatData_m_solverMode_get, _bullet.btContactSolverInfoFloatData_m_solverMode_set)
    __swig_setmethods__["m_restingContactRestitutionThreshold"] = _bullet.btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set
    __swig_getmethods__["m_restingContactRestitutionThreshold"] = _bullet.btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get
    if _newclass:
        m_restingContactRestitutionThreshold = _swig_property(_bullet.btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_get, _bullet.btContactSolverInfoFloatData_m_restingContactRestitutionThreshold_set)
    __swig_setmethods__["m_minimumSolverBatchSize"] = _bullet.btContactSolverInfoFloatData_m_minimumSolverBatchSize_set
    __swig_getmethods__["m_minimumSolverBatchSize"] = _bullet.btContactSolverInfoFloatData_m_minimumSolverBatchSize_get
    if _newclass:
        m_minimumSolverBatchSize = _swig_property(_bullet.btContactSolverInfoFloatData_m_minimumSolverBatchSize_get, _bullet.btContactSolverInfoFloatData_m_minimumSolverBatchSize_set)
    __swig_setmethods__["m_splitImpulse"] = _bullet.btContactSolverInfoFloatData_m_splitImpulse_set
    __swig_getmethods__["m_splitImpulse"] = _bullet.btContactSolverInfoFloatData_m_splitImpulse_get
    if _newclass:
        m_splitImpulse = _swig_property(_bullet.btContactSolverInfoFloatData_m_splitImpulse_get, _bullet.btContactSolverInfoFloatData_m_splitImpulse_set)
    __swig_setmethods__["m_padding"] = _bullet.btContactSolverInfoFloatData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btContactSolverInfoFloatData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btContactSolverInfoFloatData_m_padding_get, _bullet.btContactSolverInfoFloatData_m_padding_set)

    def __init__(self):
        """__init__(btContactSolverInfoFloatData self) -> btContactSolverInfoFloatData"""
        this = _bullet.new_btContactSolverInfoFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btContactSolverInfoFloatData
    __del__ = lambda self: None
btContactSolverInfoFloatData_swigregister = _bullet.btContactSolverInfoFloatData_swigregister
btContactSolverInfoFloatData_swigregister(btContactSolverInfoFloatData)

btGeneric6DofSpring2ConstraintDataName = _bullet.btGeneric6DofSpring2ConstraintDataName
RO_XYZ = _bullet.RO_XYZ
RO_XZY = _bullet.RO_XZY
RO_YXZ = _bullet.RO_YXZ
RO_YZX = _bullet.RO_YZX
RO_ZXY = _bullet.RO_ZXY
RO_ZYX = _bullet.RO_ZYX
class btRotationalLimitMotor2(_object):
    """Proxy of C++ btRotationalLimitMotor2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRotationalLimitMotor2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRotationalLimitMotor2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_loLimit"] = _bullet.btRotationalLimitMotor2_m_loLimit_set
    __swig_getmethods__["m_loLimit"] = _bullet.btRotationalLimitMotor2_m_loLimit_get
    if _newclass:
        m_loLimit = _swig_property(_bullet.btRotationalLimitMotor2_m_loLimit_get, _bullet.btRotationalLimitMotor2_m_loLimit_set)
    __swig_setmethods__["m_hiLimit"] = _bullet.btRotationalLimitMotor2_m_hiLimit_set
    __swig_getmethods__["m_hiLimit"] = _bullet.btRotationalLimitMotor2_m_hiLimit_get
    if _newclass:
        m_hiLimit = _swig_property(_bullet.btRotationalLimitMotor2_m_hiLimit_get, _bullet.btRotationalLimitMotor2_m_hiLimit_set)
    __swig_setmethods__["m_bounce"] = _bullet.btRotationalLimitMotor2_m_bounce_set
    __swig_getmethods__["m_bounce"] = _bullet.btRotationalLimitMotor2_m_bounce_get
    if _newclass:
        m_bounce = _swig_property(_bullet.btRotationalLimitMotor2_m_bounce_get, _bullet.btRotationalLimitMotor2_m_bounce_set)
    __swig_setmethods__["m_stopERP"] = _bullet.btRotationalLimitMotor2_m_stopERP_set
    __swig_getmethods__["m_stopERP"] = _bullet.btRotationalLimitMotor2_m_stopERP_get
    if _newclass:
        m_stopERP = _swig_property(_bullet.btRotationalLimitMotor2_m_stopERP_get, _bullet.btRotationalLimitMotor2_m_stopERP_set)
    __swig_setmethods__["m_stopCFM"] = _bullet.btRotationalLimitMotor2_m_stopCFM_set
    __swig_getmethods__["m_stopCFM"] = _bullet.btRotationalLimitMotor2_m_stopCFM_get
    if _newclass:
        m_stopCFM = _swig_property(_bullet.btRotationalLimitMotor2_m_stopCFM_get, _bullet.btRotationalLimitMotor2_m_stopCFM_set)
    __swig_setmethods__["m_motorERP"] = _bullet.btRotationalLimitMotor2_m_motorERP_set
    __swig_getmethods__["m_motorERP"] = _bullet.btRotationalLimitMotor2_m_motorERP_get
    if _newclass:
        m_motorERP = _swig_property(_bullet.btRotationalLimitMotor2_m_motorERP_get, _bullet.btRotationalLimitMotor2_m_motorERP_set)
    __swig_setmethods__["m_motorCFM"] = _bullet.btRotationalLimitMotor2_m_motorCFM_set
    __swig_getmethods__["m_motorCFM"] = _bullet.btRotationalLimitMotor2_m_motorCFM_get
    if _newclass:
        m_motorCFM = _swig_property(_bullet.btRotationalLimitMotor2_m_motorCFM_get, _bullet.btRotationalLimitMotor2_m_motorCFM_set)
    __swig_setmethods__["m_enableMotor"] = _bullet.btRotationalLimitMotor2_m_enableMotor_set
    __swig_getmethods__["m_enableMotor"] = _bullet.btRotationalLimitMotor2_m_enableMotor_get
    if _newclass:
        m_enableMotor = _swig_property(_bullet.btRotationalLimitMotor2_m_enableMotor_get, _bullet.btRotationalLimitMotor2_m_enableMotor_set)
    __swig_setmethods__["m_targetVelocity"] = _bullet.btRotationalLimitMotor2_m_targetVelocity_set
    __swig_getmethods__["m_targetVelocity"] = _bullet.btRotationalLimitMotor2_m_targetVelocity_get
    if _newclass:
        m_targetVelocity = _swig_property(_bullet.btRotationalLimitMotor2_m_targetVelocity_get, _bullet.btRotationalLimitMotor2_m_targetVelocity_set)
    __swig_setmethods__["m_maxMotorForce"] = _bullet.btRotationalLimitMotor2_m_maxMotorForce_set
    __swig_getmethods__["m_maxMotorForce"] = _bullet.btRotationalLimitMotor2_m_maxMotorForce_get
    if _newclass:
        m_maxMotorForce = _swig_property(_bullet.btRotationalLimitMotor2_m_maxMotorForce_get, _bullet.btRotationalLimitMotor2_m_maxMotorForce_set)
    __swig_setmethods__["m_servoMotor"] = _bullet.btRotationalLimitMotor2_m_servoMotor_set
    __swig_getmethods__["m_servoMotor"] = _bullet.btRotationalLimitMotor2_m_servoMotor_get
    if _newclass:
        m_servoMotor = _swig_property(_bullet.btRotationalLimitMotor2_m_servoMotor_get, _bullet.btRotationalLimitMotor2_m_servoMotor_set)
    __swig_setmethods__["m_servoTarget"] = _bullet.btRotationalLimitMotor2_m_servoTarget_set
    __swig_getmethods__["m_servoTarget"] = _bullet.btRotationalLimitMotor2_m_servoTarget_get
    if _newclass:
        m_servoTarget = _swig_property(_bullet.btRotationalLimitMotor2_m_servoTarget_get, _bullet.btRotationalLimitMotor2_m_servoTarget_set)
    __swig_setmethods__["m_enableSpring"] = _bullet.btRotationalLimitMotor2_m_enableSpring_set
    __swig_getmethods__["m_enableSpring"] = _bullet.btRotationalLimitMotor2_m_enableSpring_get
    if _newclass:
        m_enableSpring = _swig_property(_bullet.btRotationalLimitMotor2_m_enableSpring_get, _bullet.btRotationalLimitMotor2_m_enableSpring_set)
    __swig_setmethods__["m_springStiffness"] = _bullet.btRotationalLimitMotor2_m_springStiffness_set
    __swig_getmethods__["m_springStiffness"] = _bullet.btRotationalLimitMotor2_m_springStiffness_get
    if _newclass:
        m_springStiffness = _swig_property(_bullet.btRotationalLimitMotor2_m_springStiffness_get, _bullet.btRotationalLimitMotor2_m_springStiffness_set)
    __swig_setmethods__["m_springStiffnessLimited"] = _bullet.btRotationalLimitMotor2_m_springStiffnessLimited_set
    __swig_getmethods__["m_springStiffnessLimited"] = _bullet.btRotationalLimitMotor2_m_springStiffnessLimited_get
    if _newclass:
        m_springStiffnessLimited = _swig_property(_bullet.btRotationalLimitMotor2_m_springStiffnessLimited_get, _bullet.btRotationalLimitMotor2_m_springStiffnessLimited_set)
    __swig_setmethods__["m_springDamping"] = _bullet.btRotationalLimitMotor2_m_springDamping_set
    __swig_getmethods__["m_springDamping"] = _bullet.btRotationalLimitMotor2_m_springDamping_get
    if _newclass:
        m_springDamping = _swig_property(_bullet.btRotationalLimitMotor2_m_springDamping_get, _bullet.btRotationalLimitMotor2_m_springDamping_set)
    __swig_setmethods__["m_springDampingLimited"] = _bullet.btRotationalLimitMotor2_m_springDampingLimited_set
    __swig_getmethods__["m_springDampingLimited"] = _bullet.btRotationalLimitMotor2_m_springDampingLimited_get
    if _newclass:
        m_springDampingLimited = _swig_property(_bullet.btRotationalLimitMotor2_m_springDampingLimited_get, _bullet.btRotationalLimitMotor2_m_springDampingLimited_set)
    __swig_setmethods__["m_equilibriumPoint"] = _bullet.btRotationalLimitMotor2_m_equilibriumPoint_set
    __swig_getmethods__["m_equilibriumPoint"] = _bullet.btRotationalLimitMotor2_m_equilibriumPoint_get
    if _newclass:
        m_equilibriumPoint = _swig_property(_bullet.btRotationalLimitMotor2_m_equilibriumPoint_get, _bullet.btRotationalLimitMotor2_m_equilibriumPoint_set)
    __swig_setmethods__["m_currentLimitError"] = _bullet.btRotationalLimitMotor2_m_currentLimitError_set
    __swig_getmethods__["m_currentLimitError"] = _bullet.btRotationalLimitMotor2_m_currentLimitError_get
    if _newclass:
        m_currentLimitError = _swig_property(_bullet.btRotationalLimitMotor2_m_currentLimitError_get, _bullet.btRotationalLimitMotor2_m_currentLimitError_set)
    __swig_setmethods__["m_currentLimitErrorHi"] = _bullet.btRotationalLimitMotor2_m_currentLimitErrorHi_set
    __swig_getmethods__["m_currentLimitErrorHi"] = _bullet.btRotationalLimitMotor2_m_currentLimitErrorHi_get
    if _newclass:
        m_currentLimitErrorHi = _swig_property(_bullet.btRotationalLimitMotor2_m_currentLimitErrorHi_get, _bullet.btRotationalLimitMotor2_m_currentLimitErrorHi_set)
    __swig_setmethods__["m_currentPosition"] = _bullet.btRotationalLimitMotor2_m_currentPosition_set
    __swig_getmethods__["m_currentPosition"] = _bullet.btRotationalLimitMotor2_m_currentPosition_get
    if _newclass:
        m_currentPosition = _swig_property(_bullet.btRotationalLimitMotor2_m_currentPosition_get, _bullet.btRotationalLimitMotor2_m_currentPosition_set)
    __swig_setmethods__["m_currentLimit"] = _bullet.btRotationalLimitMotor2_m_currentLimit_set
    __swig_getmethods__["m_currentLimit"] = _bullet.btRotationalLimitMotor2_m_currentLimit_get
    if _newclass:
        m_currentLimit = _swig_property(_bullet.btRotationalLimitMotor2_m_currentLimit_get, _bullet.btRotationalLimitMotor2_m_currentLimit_set)

    def __init__(self, *args):
        """
        __init__(btRotationalLimitMotor2 self) -> btRotationalLimitMotor2
        __init__(btRotationalLimitMotor2 self, btRotationalLimitMotor2 limot) -> btRotationalLimitMotor2
        """
        this = _bullet.new_btRotationalLimitMotor2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isLimited(self):
        """isLimited(btRotationalLimitMotor2 self) -> bool"""
        return _bullet.btRotationalLimitMotor2_isLimited(self)


    def testLimitValue(self, test_value):
        """testLimitValue(btRotationalLimitMotor2 self, btScalar test_value)"""
        return _bullet.btRotationalLimitMotor2_testLimitValue(self, test_value)

    __swig_destroy__ = _bullet.delete_btRotationalLimitMotor2
    __del__ = lambda self: None
btRotationalLimitMotor2_swigregister = _bullet.btRotationalLimitMotor2_swigregister
btRotationalLimitMotor2_swigregister(btRotationalLimitMotor2)

class btTranslationalLimitMotor2(_object):
    """Proxy of C++ btTranslationalLimitMotor2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTranslationalLimitMotor2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTranslationalLimitMotor2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_lowerLimit"] = _bullet.btTranslationalLimitMotor2_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btTranslationalLimitMotor2_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btTranslationalLimitMotor2_m_lowerLimit_get, _bullet.btTranslationalLimitMotor2_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btTranslationalLimitMotor2_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btTranslationalLimitMotor2_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btTranslationalLimitMotor2_m_upperLimit_get, _bullet.btTranslationalLimitMotor2_m_upperLimit_set)
    __swig_setmethods__["m_bounce"] = _bullet.btTranslationalLimitMotor2_m_bounce_set
    __swig_getmethods__["m_bounce"] = _bullet.btTranslationalLimitMotor2_m_bounce_get
    if _newclass:
        m_bounce = _swig_property(_bullet.btTranslationalLimitMotor2_m_bounce_get, _bullet.btTranslationalLimitMotor2_m_bounce_set)
    __swig_setmethods__["m_stopERP"] = _bullet.btTranslationalLimitMotor2_m_stopERP_set
    __swig_getmethods__["m_stopERP"] = _bullet.btTranslationalLimitMotor2_m_stopERP_get
    if _newclass:
        m_stopERP = _swig_property(_bullet.btTranslationalLimitMotor2_m_stopERP_get, _bullet.btTranslationalLimitMotor2_m_stopERP_set)
    __swig_setmethods__["m_stopCFM"] = _bullet.btTranslationalLimitMotor2_m_stopCFM_set
    __swig_getmethods__["m_stopCFM"] = _bullet.btTranslationalLimitMotor2_m_stopCFM_get
    if _newclass:
        m_stopCFM = _swig_property(_bullet.btTranslationalLimitMotor2_m_stopCFM_get, _bullet.btTranslationalLimitMotor2_m_stopCFM_set)
    __swig_setmethods__["m_motorERP"] = _bullet.btTranslationalLimitMotor2_m_motorERP_set
    __swig_getmethods__["m_motorERP"] = _bullet.btTranslationalLimitMotor2_m_motorERP_get
    if _newclass:
        m_motorERP = _swig_property(_bullet.btTranslationalLimitMotor2_m_motorERP_get, _bullet.btTranslationalLimitMotor2_m_motorERP_set)
    __swig_setmethods__["m_motorCFM"] = _bullet.btTranslationalLimitMotor2_m_motorCFM_set
    __swig_getmethods__["m_motorCFM"] = _bullet.btTranslationalLimitMotor2_m_motorCFM_get
    if _newclass:
        m_motorCFM = _swig_property(_bullet.btTranslationalLimitMotor2_m_motorCFM_get, _bullet.btTranslationalLimitMotor2_m_motorCFM_set)
    __swig_setmethods__["m_enableMotor"] = _bullet.btTranslationalLimitMotor2_m_enableMotor_set
    __swig_getmethods__["m_enableMotor"] = _bullet.btTranslationalLimitMotor2_m_enableMotor_get
    if _newclass:
        m_enableMotor = _swig_property(_bullet.btTranslationalLimitMotor2_m_enableMotor_get, _bullet.btTranslationalLimitMotor2_m_enableMotor_set)
    __swig_setmethods__["m_servoMotor"] = _bullet.btTranslationalLimitMotor2_m_servoMotor_set
    __swig_getmethods__["m_servoMotor"] = _bullet.btTranslationalLimitMotor2_m_servoMotor_get
    if _newclass:
        m_servoMotor = _swig_property(_bullet.btTranslationalLimitMotor2_m_servoMotor_get, _bullet.btTranslationalLimitMotor2_m_servoMotor_set)
    __swig_setmethods__["m_enableSpring"] = _bullet.btTranslationalLimitMotor2_m_enableSpring_set
    __swig_getmethods__["m_enableSpring"] = _bullet.btTranslationalLimitMotor2_m_enableSpring_get
    if _newclass:
        m_enableSpring = _swig_property(_bullet.btTranslationalLimitMotor2_m_enableSpring_get, _bullet.btTranslationalLimitMotor2_m_enableSpring_set)
    __swig_setmethods__["m_servoTarget"] = _bullet.btTranslationalLimitMotor2_m_servoTarget_set
    __swig_getmethods__["m_servoTarget"] = _bullet.btTranslationalLimitMotor2_m_servoTarget_get
    if _newclass:
        m_servoTarget = _swig_property(_bullet.btTranslationalLimitMotor2_m_servoTarget_get, _bullet.btTranslationalLimitMotor2_m_servoTarget_set)
    __swig_setmethods__["m_springStiffness"] = _bullet.btTranslationalLimitMotor2_m_springStiffness_set
    __swig_getmethods__["m_springStiffness"] = _bullet.btTranslationalLimitMotor2_m_springStiffness_get
    if _newclass:
        m_springStiffness = _swig_property(_bullet.btTranslationalLimitMotor2_m_springStiffness_get, _bullet.btTranslationalLimitMotor2_m_springStiffness_set)
    __swig_setmethods__["m_springStiffnessLimited"] = _bullet.btTranslationalLimitMotor2_m_springStiffnessLimited_set
    __swig_getmethods__["m_springStiffnessLimited"] = _bullet.btTranslationalLimitMotor2_m_springStiffnessLimited_get
    if _newclass:
        m_springStiffnessLimited = _swig_property(_bullet.btTranslationalLimitMotor2_m_springStiffnessLimited_get, _bullet.btTranslationalLimitMotor2_m_springStiffnessLimited_set)
    __swig_setmethods__["m_springDamping"] = _bullet.btTranslationalLimitMotor2_m_springDamping_set
    __swig_getmethods__["m_springDamping"] = _bullet.btTranslationalLimitMotor2_m_springDamping_get
    if _newclass:
        m_springDamping = _swig_property(_bullet.btTranslationalLimitMotor2_m_springDamping_get, _bullet.btTranslationalLimitMotor2_m_springDamping_set)
    __swig_setmethods__["m_springDampingLimited"] = _bullet.btTranslationalLimitMotor2_m_springDampingLimited_set
    __swig_getmethods__["m_springDampingLimited"] = _bullet.btTranslationalLimitMotor2_m_springDampingLimited_get
    if _newclass:
        m_springDampingLimited = _swig_property(_bullet.btTranslationalLimitMotor2_m_springDampingLimited_get, _bullet.btTranslationalLimitMotor2_m_springDampingLimited_set)
    __swig_setmethods__["m_equilibriumPoint"] = _bullet.btTranslationalLimitMotor2_m_equilibriumPoint_set
    __swig_getmethods__["m_equilibriumPoint"] = _bullet.btTranslationalLimitMotor2_m_equilibriumPoint_get
    if _newclass:
        m_equilibriumPoint = _swig_property(_bullet.btTranslationalLimitMotor2_m_equilibriumPoint_get, _bullet.btTranslationalLimitMotor2_m_equilibriumPoint_set)
    __swig_setmethods__["m_targetVelocity"] = _bullet.btTranslationalLimitMotor2_m_targetVelocity_set
    __swig_getmethods__["m_targetVelocity"] = _bullet.btTranslationalLimitMotor2_m_targetVelocity_get
    if _newclass:
        m_targetVelocity = _swig_property(_bullet.btTranslationalLimitMotor2_m_targetVelocity_get, _bullet.btTranslationalLimitMotor2_m_targetVelocity_set)
    __swig_setmethods__["m_maxMotorForce"] = _bullet.btTranslationalLimitMotor2_m_maxMotorForce_set
    __swig_getmethods__["m_maxMotorForce"] = _bullet.btTranslationalLimitMotor2_m_maxMotorForce_get
    if _newclass:
        m_maxMotorForce = _swig_property(_bullet.btTranslationalLimitMotor2_m_maxMotorForce_get, _bullet.btTranslationalLimitMotor2_m_maxMotorForce_set)
    __swig_setmethods__["m_currentLimitError"] = _bullet.btTranslationalLimitMotor2_m_currentLimitError_set
    __swig_getmethods__["m_currentLimitError"] = _bullet.btTranslationalLimitMotor2_m_currentLimitError_get
    if _newclass:
        m_currentLimitError = _swig_property(_bullet.btTranslationalLimitMotor2_m_currentLimitError_get, _bullet.btTranslationalLimitMotor2_m_currentLimitError_set)
    __swig_setmethods__["m_currentLimitErrorHi"] = _bullet.btTranslationalLimitMotor2_m_currentLimitErrorHi_set
    __swig_getmethods__["m_currentLimitErrorHi"] = _bullet.btTranslationalLimitMotor2_m_currentLimitErrorHi_get
    if _newclass:
        m_currentLimitErrorHi = _swig_property(_bullet.btTranslationalLimitMotor2_m_currentLimitErrorHi_get, _bullet.btTranslationalLimitMotor2_m_currentLimitErrorHi_set)
    __swig_setmethods__["m_currentLinearDiff"] = _bullet.btTranslationalLimitMotor2_m_currentLinearDiff_set
    __swig_getmethods__["m_currentLinearDiff"] = _bullet.btTranslationalLimitMotor2_m_currentLinearDiff_get
    if _newclass:
        m_currentLinearDiff = _swig_property(_bullet.btTranslationalLimitMotor2_m_currentLinearDiff_get, _bullet.btTranslationalLimitMotor2_m_currentLinearDiff_set)
    __swig_setmethods__["m_currentLimit"] = _bullet.btTranslationalLimitMotor2_m_currentLimit_set
    __swig_getmethods__["m_currentLimit"] = _bullet.btTranslationalLimitMotor2_m_currentLimit_get
    if _newclass:
        m_currentLimit = _swig_property(_bullet.btTranslationalLimitMotor2_m_currentLimit_get, _bullet.btTranslationalLimitMotor2_m_currentLimit_set)

    def __init__(self, *args):
        """
        __init__(btTranslationalLimitMotor2 self) -> btTranslationalLimitMotor2
        __init__(btTranslationalLimitMotor2 self, btTranslationalLimitMotor2 other) -> btTranslationalLimitMotor2
        """
        this = _bullet.new_btTranslationalLimitMotor2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isLimited(self, limitIndex):
        """isLimited(btTranslationalLimitMotor2 self, int limitIndex) -> bool"""
        return _bullet.btTranslationalLimitMotor2_isLimited(self, limitIndex)


    def testLimitValue(self, limitIndex, test_value):
        """testLimitValue(btTranslationalLimitMotor2 self, int limitIndex, btScalar test_value)"""
        return _bullet.btTranslationalLimitMotor2_testLimitValue(self, limitIndex, test_value)

    __swig_destroy__ = _bullet.delete_btTranslationalLimitMotor2
    __del__ = lambda self: None
btTranslationalLimitMotor2_swigregister = _bullet.btTranslationalLimitMotor2_swigregister
btTranslationalLimitMotor2_swigregister(btTranslationalLimitMotor2)

BT_6DOF_FLAGS_CFM_STOP2 = _bullet.BT_6DOF_FLAGS_CFM_STOP2
BT_6DOF_FLAGS_ERP_STOP2 = _bullet.BT_6DOF_FLAGS_ERP_STOP2
BT_6DOF_FLAGS_CFM_MOTO2 = _bullet.BT_6DOF_FLAGS_CFM_MOTO2
BT_6DOF_FLAGS_ERP_MOTO2 = _bullet.BT_6DOF_FLAGS_ERP_MOTO2
BT_6DOF_FLAGS_AXIS_SHIFT2 = _bullet.BT_6DOF_FLAGS_AXIS_SHIFT2
class btGeneric6DofSpring2Constraint(btTypedConstraint):
    """Proxy of C++ btGeneric6DofSpring2Constraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpring2Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpring2Constraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btGeneric6DofSpring2Constraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & frameInA, btTransform const & frameInB, RotateOrder rotOrder=RO_XYZ) -> btGeneric6DofSpring2Constraint
        __init__(btGeneric6DofSpring2Constraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & frameInA, btTransform const & frameInB) -> btGeneric6DofSpring2Constraint
        __init__(btGeneric6DofSpring2Constraint self, btRigidBody rbB, btTransform const & frameInB, RotateOrder rotOrder=RO_XYZ) -> btGeneric6DofSpring2Constraint
        __init__(btGeneric6DofSpring2Constraint self, btRigidBody rbB, btTransform const & frameInB) -> btGeneric6DofSpring2Constraint
        """
        this = _bullet.new_btGeneric6DofSpring2Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getRotationalLimitMotor(self, index):
        """getRotationalLimitMotor(btGeneric6DofSpring2Constraint self, int index) -> btRotationalLimitMotor2"""
        return _bullet.btGeneric6DofSpring2Constraint_getRotationalLimitMotor(self, index)


    def getTranslationalLimitMotor(self):
        """getTranslationalLimitMotor(btGeneric6DofSpring2Constraint self) -> btTranslationalLimitMotor2"""
        return _bullet.btGeneric6DofSpring2Constraint_getTranslationalLimitMotor(self)


    def calculateTransforms(self, *args):
        """
        calculateTransforms(btGeneric6DofSpring2Constraint self, btTransform const & transA, btTransform const & transB)
        calculateTransforms(btGeneric6DofSpring2Constraint self)
        """
        return _bullet.btGeneric6DofSpring2Constraint_calculateTransforms(self, *args)


    def getCalculatedTransformA(self):
        """getCalculatedTransformA(btGeneric6DofSpring2Constraint self) -> btTransform const &"""
        return _bullet.btGeneric6DofSpring2Constraint_getCalculatedTransformA(self)


    def getCalculatedTransformB(self):
        """getCalculatedTransformB(btGeneric6DofSpring2Constraint self) -> btTransform const &"""
        return _bullet.btGeneric6DofSpring2Constraint_getCalculatedTransformB(self)


    def getFrameOffsetA(self, *args):
        """
        getFrameOffsetA(btGeneric6DofSpring2Constraint self) -> btTransform const
        getFrameOffsetA(btGeneric6DofSpring2Constraint self) -> btTransform &
        """
        return _bullet.btGeneric6DofSpring2Constraint_getFrameOffsetA(self, *args)


    def getFrameOffsetB(self, *args):
        """
        getFrameOffsetB(btGeneric6DofSpring2Constraint self) -> btTransform const
        getFrameOffsetB(btGeneric6DofSpring2Constraint self) -> btTransform &
        """
        return _bullet.btGeneric6DofSpring2Constraint_getFrameOffsetB(self, *args)


    def getAxis(self, axis_index):
        """getAxis(btGeneric6DofSpring2Constraint self, int axis_index) -> btVector3"""
        return _bullet.btGeneric6DofSpring2Constraint_getAxis(self, axis_index)


    def getAngle(self, axis_index):
        """getAngle(btGeneric6DofSpring2Constraint self, int axis_index) -> btScalar"""
        return _bullet.btGeneric6DofSpring2Constraint_getAngle(self, axis_index)


    def getRelativePivotPosition(self, axis_index):
        """getRelativePivotPosition(btGeneric6DofSpring2Constraint self, int axis_index) -> btScalar"""
        return _bullet.btGeneric6DofSpring2Constraint_getRelativePivotPosition(self, axis_index)


    def setFrames(self, frameA, frameB):
        """setFrames(btGeneric6DofSpring2Constraint self, btTransform const & frameA, btTransform const & frameB)"""
        return _bullet.btGeneric6DofSpring2Constraint_setFrames(self, frameA, frameB)


    def setLinearLowerLimit(self, linearLower):
        """setLinearLowerLimit(btGeneric6DofSpring2Constraint self, btVector3 const & linearLower)"""
        return _bullet.btGeneric6DofSpring2Constraint_setLinearLowerLimit(self, linearLower)


    def getLinearLowerLimit(self, linearLower):
        """getLinearLowerLimit(btGeneric6DofSpring2Constraint self, btVector3 & linearLower)"""
        return _bullet.btGeneric6DofSpring2Constraint_getLinearLowerLimit(self, linearLower)


    def setLinearUpperLimit(self, linearUpper):
        """setLinearUpperLimit(btGeneric6DofSpring2Constraint self, btVector3 const & linearUpper)"""
        return _bullet.btGeneric6DofSpring2Constraint_setLinearUpperLimit(self, linearUpper)


    def getLinearUpperLimit(self, linearUpper):
        """getLinearUpperLimit(btGeneric6DofSpring2Constraint self, btVector3 & linearUpper)"""
        return _bullet.btGeneric6DofSpring2Constraint_getLinearUpperLimit(self, linearUpper)


    def setAngularLowerLimit(self, angularLower):
        """setAngularLowerLimit(btGeneric6DofSpring2Constraint self, btVector3 const & angularLower)"""
        return _bullet.btGeneric6DofSpring2Constraint_setAngularLowerLimit(self, angularLower)


    def setAngularLowerLimitReversed(self, angularLower):
        """setAngularLowerLimitReversed(btGeneric6DofSpring2Constraint self, btVector3 const & angularLower)"""
        return _bullet.btGeneric6DofSpring2Constraint_setAngularLowerLimitReversed(self, angularLower)


    def getAngularLowerLimit(self, angularLower):
        """getAngularLowerLimit(btGeneric6DofSpring2Constraint self, btVector3 & angularLower)"""
        return _bullet.btGeneric6DofSpring2Constraint_getAngularLowerLimit(self, angularLower)


    def getAngularLowerLimitReversed(self, angularLower):
        """getAngularLowerLimitReversed(btGeneric6DofSpring2Constraint self, btVector3 & angularLower)"""
        return _bullet.btGeneric6DofSpring2Constraint_getAngularLowerLimitReversed(self, angularLower)


    def setAngularUpperLimit(self, angularUpper):
        """setAngularUpperLimit(btGeneric6DofSpring2Constraint self, btVector3 const & angularUpper)"""
        return _bullet.btGeneric6DofSpring2Constraint_setAngularUpperLimit(self, angularUpper)


    def setAngularUpperLimitReversed(self, angularUpper):
        """setAngularUpperLimitReversed(btGeneric6DofSpring2Constraint self, btVector3 const & angularUpper)"""
        return _bullet.btGeneric6DofSpring2Constraint_setAngularUpperLimitReversed(self, angularUpper)


    def getAngularUpperLimit(self, angularUpper):
        """getAngularUpperLimit(btGeneric6DofSpring2Constraint self, btVector3 & angularUpper)"""
        return _bullet.btGeneric6DofSpring2Constraint_getAngularUpperLimit(self, angularUpper)


    def getAngularUpperLimitReversed(self, angularUpper):
        """getAngularUpperLimitReversed(btGeneric6DofSpring2Constraint self, btVector3 & angularUpper)"""
        return _bullet.btGeneric6DofSpring2Constraint_getAngularUpperLimitReversed(self, angularUpper)


    def setLimit(self, axis, lo, hi):
        """setLimit(btGeneric6DofSpring2Constraint self, int axis, btScalar lo, btScalar hi)"""
        return _bullet.btGeneric6DofSpring2Constraint_setLimit(self, axis, lo, hi)


    def setLimitReversed(self, axis, lo, hi):
        """setLimitReversed(btGeneric6DofSpring2Constraint self, int axis, btScalar lo, btScalar hi)"""
        return _bullet.btGeneric6DofSpring2Constraint_setLimitReversed(self, axis, lo, hi)


    def isLimited(self, limitIndex):
        """isLimited(btGeneric6DofSpring2Constraint self, int limitIndex) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_isLimited(self, limitIndex)


    def setRotationOrder(self, order):
        """setRotationOrder(btGeneric6DofSpring2Constraint self, RotateOrder order)"""
        return _bullet.btGeneric6DofSpring2Constraint_setRotationOrder(self, order)


    def getRotationOrder(self):
        """getRotationOrder(btGeneric6DofSpring2Constraint self) -> RotateOrder"""
        return _bullet.btGeneric6DofSpring2Constraint_getRotationOrder(self)


    def setAxis(self, axis1, axis2):
        """setAxis(btGeneric6DofSpring2Constraint self, btVector3 const & axis1, btVector3 const & axis2)"""
        return _bullet.btGeneric6DofSpring2Constraint_setAxis(self, axis1, axis2)


    def setBounce(self, index, bounce):
        """setBounce(btGeneric6DofSpring2Constraint self, int index, btScalar bounce)"""
        return _bullet.btGeneric6DofSpring2Constraint_setBounce(self, index, bounce)


    def enableMotor(self, index, onOff):
        """enableMotor(btGeneric6DofSpring2Constraint self, int index, bool onOff)"""
        return _bullet.btGeneric6DofSpring2Constraint_enableMotor(self, index, onOff)


    def setServo(self, index, onOff):
        """setServo(btGeneric6DofSpring2Constraint self, int index, bool onOff)"""
        return _bullet.btGeneric6DofSpring2Constraint_setServo(self, index, onOff)


    def setTargetVelocity(self, index, velocity):
        """setTargetVelocity(btGeneric6DofSpring2Constraint self, int index, btScalar velocity)"""
        return _bullet.btGeneric6DofSpring2Constraint_setTargetVelocity(self, index, velocity)


    def setServoTarget(self, index, target):
        """setServoTarget(btGeneric6DofSpring2Constraint self, int index, btScalar target)"""
        return _bullet.btGeneric6DofSpring2Constraint_setServoTarget(self, index, target)


    def setMaxMotorForce(self, index, force):
        """setMaxMotorForce(btGeneric6DofSpring2Constraint self, int index, btScalar force)"""
        return _bullet.btGeneric6DofSpring2Constraint_setMaxMotorForce(self, index, force)


    def enableSpring(self, index, onOff):
        """enableSpring(btGeneric6DofSpring2Constraint self, int index, bool onOff)"""
        return _bullet.btGeneric6DofSpring2Constraint_enableSpring(self, index, onOff)


    def setStiffness(self, index, stiffness, limitIfNeeded=True):
        """
        setStiffness(btGeneric6DofSpring2Constraint self, int index, btScalar stiffness, bool limitIfNeeded=True)
        setStiffness(btGeneric6DofSpring2Constraint self, int index, btScalar stiffness)
        """
        return _bullet.btGeneric6DofSpring2Constraint_setStiffness(self, index, stiffness, limitIfNeeded)


    def setDamping(self, index, damping, limitIfNeeded=True):
        """
        setDamping(btGeneric6DofSpring2Constraint self, int index, btScalar damping, bool limitIfNeeded=True)
        setDamping(btGeneric6DofSpring2Constraint self, int index, btScalar damping)
        """
        return _bullet.btGeneric6DofSpring2Constraint_setDamping(self, index, damping, limitIfNeeded)


    def setEquilibriumPoint(self, *args):
        """
        setEquilibriumPoint(btGeneric6DofSpring2Constraint self)
        setEquilibriumPoint(btGeneric6DofSpring2Constraint self, int index)
        setEquilibriumPoint(btGeneric6DofSpring2Constraint self, int index, btScalar val)
        """
        return _bullet.btGeneric6DofSpring2Constraint_setEquilibriumPoint(self, *args)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btGeneric6DofSpring2Constraint self, int num, btScalar value, int axis=-1)
        setParam(btGeneric6DofSpring2Constraint self, int num, btScalar value)
        """
        return _bullet.btGeneric6DofSpring2Constraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btGeneric6DofSpring2Constraint self, int num, int axis=-1) -> btScalar
        getParam(btGeneric6DofSpring2Constraint self, int num) -> btScalar
        """
        return _bullet.btGeneric6DofSpring2Constraint_getParam(self, num, axis)


    def btGetMatrixElem(mat, index):
        """btGetMatrixElem(btMatrix3x3 const & mat, int index) -> btScalar"""
        return _bullet.btGeneric6DofSpring2Constraint_btGetMatrixElem(mat, index)

    btGetMatrixElem = staticmethod(btGetMatrixElem)

    def matrixToEulerXYZ(mat, xyz):
        """matrixToEulerXYZ(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerXYZ(mat, xyz)

    matrixToEulerXYZ = staticmethod(matrixToEulerXYZ)

    def matrixToEulerXZY(mat, xyz):
        """matrixToEulerXZY(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerXZY(mat, xyz)

    matrixToEulerXZY = staticmethod(matrixToEulerXZY)

    def matrixToEulerYXZ(mat, xyz):
        """matrixToEulerYXZ(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerYXZ(mat, xyz)

    matrixToEulerYXZ = staticmethod(matrixToEulerYXZ)

    def matrixToEulerYZX(mat, xyz):
        """matrixToEulerYZX(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerYZX(mat, xyz)

    matrixToEulerYZX = staticmethod(matrixToEulerYZX)

    def matrixToEulerZXY(mat, xyz):
        """matrixToEulerZXY(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerZXY(mat, xyz)

    matrixToEulerZXY = staticmethod(matrixToEulerZXY)

    def matrixToEulerZYX(mat, xyz):
        """matrixToEulerZYX(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
        return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerZYX(mat, xyz)

    matrixToEulerZYX = staticmethod(matrixToEulerZYX)
    __swig_destroy__ = _bullet.delete_btGeneric6DofSpring2Constraint
    __del__ = lambda self: None
btGeneric6DofSpring2Constraint_swigregister = _bullet.btGeneric6DofSpring2Constraint_swigregister
btGeneric6DofSpring2Constraint_swigregister(btGeneric6DofSpring2Constraint)

def btGeneric6DofSpring2Constraint_btGetMatrixElem(mat, index):
    """btGeneric6DofSpring2Constraint_btGetMatrixElem(btMatrix3x3 const & mat, int index) -> btScalar"""
    return _bullet.btGeneric6DofSpring2Constraint_btGetMatrixElem(mat, index)

def btGeneric6DofSpring2Constraint_matrixToEulerXYZ(mat, xyz):
    """btGeneric6DofSpring2Constraint_matrixToEulerXYZ(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
    return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerXYZ(mat, xyz)

def btGeneric6DofSpring2Constraint_matrixToEulerXZY(mat, xyz):
    """btGeneric6DofSpring2Constraint_matrixToEulerXZY(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
    return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerXZY(mat, xyz)

def btGeneric6DofSpring2Constraint_matrixToEulerYXZ(mat, xyz):
    """btGeneric6DofSpring2Constraint_matrixToEulerYXZ(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
    return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerYXZ(mat, xyz)

def btGeneric6DofSpring2Constraint_matrixToEulerYZX(mat, xyz):
    """btGeneric6DofSpring2Constraint_matrixToEulerYZX(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
    return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerYZX(mat, xyz)

def btGeneric6DofSpring2Constraint_matrixToEulerZXY(mat, xyz):
    """btGeneric6DofSpring2Constraint_matrixToEulerZXY(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
    return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerZXY(mat, xyz)

def btGeneric6DofSpring2Constraint_matrixToEulerZYX(mat, xyz):
    """btGeneric6DofSpring2Constraint_matrixToEulerZYX(btMatrix3x3 const & mat, btVector3 & xyz) -> bool"""
    return _bullet.btGeneric6DofSpring2Constraint_matrixToEulerZYX(mat, xyz)

class btGeneric6DofSpring2ConstraintData(_object):
    """Proxy of C++ btGeneric6DofSpring2ConstraintData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpring2ConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpring2ConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofSpring2ConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofSpring2ConstraintData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_typeConstraintData_get, _bullet.btGeneric6DofSpring2ConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btGeneric6DofSpring2ConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btGeneric6DofSpring2ConstraintData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_rbAFrame_get, _bullet.btGeneric6DofSpring2ConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btGeneric6DofSpring2ConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btGeneric6DofSpring2ConstraintData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_rbBFrame_get, _bullet.btGeneric6DofSpring2ConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearUpperLimit_get
    if _newclass:
        m_linearUpperLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearUpperLimit_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearLowerLimit_get
    if _newclass:
        m_linearLowerLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearLowerLimit_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearLowerLimit_set)
    __swig_setmethods__["m_linearBounce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearBounce_set
    __swig_getmethods__["m_linearBounce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearBounce_get
    if _newclass:
        m_linearBounce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearBounce_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearBounce_set)
    __swig_setmethods__["m_linearStopERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearStopERP_set
    __swig_getmethods__["m_linearStopERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearStopERP_get
    if _newclass:
        m_linearStopERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearStopERP_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearStopERP_set)
    __swig_setmethods__["m_linearStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearStopCFM_set
    __swig_getmethods__["m_linearStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearStopCFM_get
    if _newclass:
        m_linearStopCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearStopCFM_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearStopCFM_set)
    __swig_setmethods__["m_linearMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorERP_set
    __swig_getmethods__["m_linearMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorERP_get
    if _newclass:
        m_linearMotorERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorERP_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorERP_set)
    __swig_setmethods__["m_linearMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorCFM_set
    __swig_getmethods__["m_linearMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorCFM_get
    if _newclass:
        m_linearMotorCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorCFM_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearMotorCFM_set)
    __swig_setmethods__["m_linearTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearTargetVelocity_set
    __swig_getmethods__["m_linearTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearTargetVelocity_get
    if _newclass:
        m_linearTargetVelocity = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearTargetVelocity_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearTargetVelocity_set)
    __swig_setmethods__["m_linearMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearMaxMotorForce_set
    __swig_getmethods__["m_linearMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearMaxMotorForce_get
    if _newclass:
        m_linearMaxMotorForce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearMaxMotorForce_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearMaxMotorForce_set)
    __swig_setmethods__["m_linearServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearServoTarget_set
    __swig_getmethods__["m_linearServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearServoTarget_get
    if _newclass:
        m_linearServoTarget = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearServoTarget_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearServoTarget_set)
    __swig_setmethods__["m_linearSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffness_set
    __swig_getmethods__["m_linearSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffness_get
    if _newclass:
        m_linearSpringStiffness = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffness_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffness_set)
    __swig_setmethods__["m_linearSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDamping_set
    __swig_getmethods__["m_linearSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDamping_get
    if _newclass:
        m_linearSpringDamping = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDamping_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDamping_set)
    __swig_setmethods__["m_linearEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearEquilibriumPoint_set
    __swig_getmethods__["m_linearEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearEquilibriumPoint_get
    if _newclass:
        m_linearEquilibriumPoint = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearEquilibriumPoint_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearEquilibriumPoint_set)
    __swig_setmethods__["m_linearEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableMotor_set
    __swig_getmethods__["m_linearEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableMotor_get
    if _newclass:
        m_linearEnableMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableMotor_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableMotor_set)
    __swig_setmethods__["m_linearServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearServoMotor_set
    __swig_getmethods__["m_linearServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearServoMotor_get
    if _newclass:
        m_linearServoMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearServoMotor_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearServoMotor_set)
    __swig_setmethods__["m_linearEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableSpring_set
    __swig_getmethods__["m_linearEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableSpring_get
    if _newclass:
        m_linearEnableSpring = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableSpring_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearEnableSpring_set)
    __swig_setmethods__["m_linearSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffnessLimited_set
    __swig_getmethods__["m_linearSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffnessLimited_get
    if _newclass:
        m_linearSpringStiffnessLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffnessLimited_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringStiffnessLimited_set)
    __swig_setmethods__["m_linearSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDampingLimited_set
    __swig_getmethods__["m_linearSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDampingLimited_get
    if _newclass:
        m_linearSpringDampingLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDampingLimited_get, _bullet.btGeneric6DofSpring2ConstraintData_m_linearSpringDampingLimited_set)
    __swig_setmethods__["m_padding1"] = _bullet.btGeneric6DofSpring2ConstraintData_m_padding1_set
    __swig_getmethods__["m_padding1"] = _bullet.btGeneric6DofSpring2ConstraintData_m_padding1_get
    if _newclass:
        m_padding1 = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_padding1_get, _bullet.btGeneric6DofSpring2ConstraintData_m_padding1_set)
    __swig_setmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularUpperLimit_get
    if _newclass:
        m_angularUpperLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularUpperLimit_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularLowerLimit_get
    if _newclass:
        m_angularLowerLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularLowerLimit_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularLowerLimit_set)
    __swig_setmethods__["m_angularBounce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularBounce_set
    __swig_getmethods__["m_angularBounce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularBounce_get
    if _newclass:
        m_angularBounce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularBounce_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularBounce_set)
    __swig_setmethods__["m_angularStopERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularStopERP_set
    __swig_getmethods__["m_angularStopERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularStopERP_get
    if _newclass:
        m_angularStopERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularStopERP_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularStopERP_set)
    __swig_setmethods__["m_angularStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularStopCFM_set
    __swig_getmethods__["m_angularStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularStopCFM_get
    if _newclass:
        m_angularStopCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularStopCFM_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularStopCFM_set)
    __swig_setmethods__["m_angularMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorERP_set
    __swig_getmethods__["m_angularMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorERP_get
    if _newclass:
        m_angularMotorERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorERP_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorERP_set)
    __swig_setmethods__["m_angularMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorCFM_set
    __swig_getmethods__["m_angularMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorCFM_get
    if _newclass:
        m_angularMotorCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorCFM_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularMotorCFM_set)
    __swig_setmethods__["m_angularTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularTargetVelocity_set
    __swig_getmethods__["m_angularTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularTargetVelocity_get
    if _newclass:
        m_angularTargetVelocity = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularTargetVelocity_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularTargetVelocity_set)
    __swig_setmethods__["m_angularMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularMaxMotorForce_set
    __swig_getmethods__["m_angularMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularMaxMotorForce_get
    if _newclass:
        m_angularMaxMotorForce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularMaxMotorForce_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularMaxMotorForce_set)
    __swig_setmethods__["m_angularServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularServoTarget_set
    __swig_getmethods__["m_angularServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularServoTarget_get
    if _newclass:
        m_angularServoTarget = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularServoTarget_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularServoTarget_set)
    __swig_setmethods__["m_angularSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffness_set
    __swig_getmethods__["m_angularSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffness_get
    if _newclass:
        m_angularSpringStiffness = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffness_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffness_set)
    __swig_setmethods__["m_angularSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDamping_set
    __swig_getmethods__["m_angularSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDamping_get
    if _newclass:
        m_angularSpringDamping = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDamping_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDamping_set)
    __swig_setmethods__["m_angularEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularEquilibriumPoint_set
    __swig_getmethods__["m_angularEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularEquilibriumPoint_get
    if _newclass:
        m_angularEquilibriumPoint = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularEquilibriumPoint_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularEquilibriumPoint_set)
    __swig_setmethods__["m_angularEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableMotor_set
    __swig_getmethods__["m_angularEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableMotor_get
    if _newclass:
        m_angularEnableMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableMotor_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableMotor_set)
    __swig_setmethods__["m_angularServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularServoMotor_set
    __swig_getmethods__["m_angularServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularServoMotor_get
    if _newclass:
        m_angularServoMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularServoMotor_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularServoMotor_set)
    __swig_setmethods__["m_angularEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableSpring_set
    __swig_getmethods__["m_angularEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableSpring_get
    if _newclass:
        m_angularEnableSpring = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableSpring_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularEnableSpring_set)
    __swig_setmethods__["m_angularSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffnessLimited_set
    __swig_getmethods__["m_angularSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffnessLimited_get
    if _newclass:
        m_angularSpringStiffnessLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffnessLimited_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringStiffnessLimited_set)
    __swig_setmethods__["m_angularSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDampingLimited_set
    __swig_getmethods__["m_angularSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDampingLimited_get
    if _newclass:
        m_angularSpringDampingLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDampingLimited_get, _bullet.btGeneric6DofSpring2ConstraintData_m_angularSpringDampingLimited_set)
    __swig_setmethods__["m_rotateOrder"] = _bullet.btGeneric6DofSpring2ConstraintData_m_rotateOrder_set
    __swig_getmethods__["m_rotateOrder"] = _bullet.btGeneric6DofSpring2ConstraintData_m_rotateOrder_get
    if _newclass:
        m_rotateOrder = _swig_property(_bullet.btGeneric6DofSpring2ConstraintData_m_rotateOrder_get, _bullet.btGeneric6DofSpring2ConstraintData_m_rotateOrder_set)

    def __init__(self):
        """__init__(btGeneric6DofSpring2ConstraintData self) -> btGeneric6DofSpring2ConstraintData"""
        this = _bullet.new_btGeneric6DofSpring2ConstraintData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeneric6DofSpring2ConstraintData
    __del__ = lambda self: None
btGeneric6DofSpring2ConstraintData_swigregister = _bullet.btGeneric6DofSpring2ConstraintData_swigregister
btGeneric6DofSpring2ConstraintData_swigregister(btGeneric6DofSpring2ConstraintData)

class btGeneric6DofSpring2ConstraintDoubleData2(_object):
    """Proxy of C++ btGeneric6DofSpring2ConstraintDoubleData2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpring2ConstraintDoubleData2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpring2ConstraintDoubleData2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_typeConstraintData_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbAFrame_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbBFrame_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearUpperLimit_get
    if _newclass:
        m_linearUpperLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearUpperLimit_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearLowerLimit_get
    if _newclass:
        m_linearLowerLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearLowerLimit_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearLowerLimit_set)
    __swig_setmethods__["m_linearBounce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearBounce_set
    __swig_getmethods__["m_linearBounce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearBounce_get
    if _newclass:
        m_linearBounce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearBounce_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearBounce_set)
    __swig_setmethods__["m_linearStopERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopERP_set
    __swig_getmethods__["m_linearStopERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopERP_get
    if _newclass:
        m_linearStopERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopERP_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopERP_set)
    __swig_setmethods__["m_linearStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopCFM_set
    __swig_getmethods__["m_linearStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopCFM_get
    if _newclass:
        m_linearStopCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopCFM_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearStopCFM_set)
    __swig_setmethods__["m_linearMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorERP_set
    __swig_getmethods__["m_linearMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorERP_get
    if _newclass:
        m_linearMotorERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorERP_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorERP_set)
    __swig_setmethods__["m_linearMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorCFM_set
    __swig_getmethods__["m_linearMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorCFM_get
    if _newclass:
        m_linearMotorCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorCFM_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMotorCFM_set)
    __swig_setmethods__["m_linearTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearTargetVelocity_set
    __swig_getmethods__["m_linearTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearTargetVelocity_get
    if _newclass:
        m_linearTargetVelocity = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearTargetVelocity_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearTargetVelocity_set)
    __swig_setmethods__["m_linearMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMaxMotorForce_set
    __swig_getmethods__["m_linearMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMaxMotorForce_get
    if _newclass:
        m_linearMaxMotorForce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMaxMotorForce_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearMaxMotorForce_set)
    __swig_setmethods__["m_linearServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoTarget_set
    __swig_getmethods__["m_linearServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoTarget_get
    if _newclass:
        m_linearServoTarget = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoTarget_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoTarget_set)
    __swig_setmethods__["m_linearSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffness_set
    __swig_getmethods__["m_linearSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffness_get
    if _newclass:
        m_linearSpringStiffness = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffness_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffness_set)
    __swig_setmethods__["m_linearSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDamping_set
    __swig_getmethods__["m_linearSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDamping_get
    if _newclass:
        m_linearSpringDamping = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDamping_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDamping_set)
    __swig_setmethods__["m_linearEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEquilibriumPoint_set
    __swig_getmethods__["m_linearEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEquilibriumPoint_get
    if _newclass:
        m_linearEquilibriumPoint = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEquilibriumPoint_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEquilibriumPoint_set)
    __swig_setmethods__["m_linearEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableMotor_set
    __swig_getmethods__["m_linearEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableMotor_get
    if _newclass:
        m_linearEnableMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableMotor_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableMotor_set)
    __swig_setmethods__["m_linearServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoMotor_set
    __swig_getmethods__["m_linearServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoMotor_get
    if _newclass:
        m_linearServoMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoMotor_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearServoMotor_set)
    __swig_setmethods__["m_linearEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableSpring_set
    __swig_getmethods__["m_linearEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableSpring_get
    if _newclass:
        m_linearEnableSpring = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableSpring_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearEnableSpring_set)
    __swig_setmethods__["m_linearSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffnessLimited_set
    __swig_getmethods__["m_linearSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffnessLimited_get
    if _newclass:
        m_linearSpringStiffnessLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffnessLimited_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringStiffnessLimited_set)
    __swig_setmethods__["m_linearSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDampingLimited_set
    __swig_getmethods__["m_linearSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDampingLimited_get
    if _newclass:
        m_linearSpringDampingLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDampingLimited_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_linearSpringDampingLimited_set)
    __swig_setmethods__["m_padding1"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_padding1_set
    __swig_getmethods__["m_padding1"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_padding1_get
    if _newclass:
        m_padding1 = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_padding1_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_padding1_set)
    __swig_setmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularUpperLimit_get
    if _newclass:
        m_angularUpperLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularUpperLimit_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularLowerLimit_get
    if _newclass:
        m_angularLowerLimit = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularLowerLimit_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularLowerLimit_set)
    __swig_setmethods__["m_angularBounce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularBounce_set
    __swig_getmethods__["m_angularBounce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularBounce_get
    if _newclass:
        m_angularBounce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularBounce_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularBounce_set)
    __swig_setmethods__["m_angularStopERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopERP_set
    __swig_getmethods__["m_angularStopERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopERP_get
    if _newclass:
        m_angularStopERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopERP_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopERP_set)
    __swig_setmethods__["m_angularStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopCFM_set
    __swig_getmethods__["m_angularStopCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopCFM_get
    if _newclass:
        m_angularStopCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopCFM_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularStopCFM_set)
    __swig_setmethods__["m_angularMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorERP_set
    __swig_getmethods__["m_angularMotorERP"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorERP_get
    if _newclass:
        m_angularMotorERP = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorERP_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorERP_set)
    __swig_setmethods__["m_angularMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorCFM_set
    __swig_getmethods__["m_angularMotorCFM"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorCFM_get
    if _newclass:
        m_angularMotorCFM = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorCFM_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMotorCFM_set)
    __swig_setmethods__["m_angularTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularTargetVelocity_set
    __swig_getmethods__["m_angularTargetVelocity"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularTargetVelocity_get
    if _newclass:
        m_angularTargetVelocity = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularTargetVelocity_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularTargetVelocity_set)
    __swig_setmethods__["m_angularMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMaxMotorForce_set
    __swig_getmethods__["m_angularMaxMotorForce"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMaxMotorForce_get
    if _newclass:
        m_angularMaxMotorForce = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMaxMotorForce_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularMaxMotorForce_set)
    __swig_setmethods__["m_angularServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoTarget_set
    __swig_getmethods__["m_angularServoTarget"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoTarget_get
    if _newclass:
        m_angularServoTarget = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoTarget_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoTarget_set)
    __swig_setmethods__["m_angularSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffness_set
    __swig_getmethods__["m_angularSpringStiffness"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffness_get
    if _newclass:
        m_angularSpringStiffness = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffness_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffness_set)
    __swig_setmethods__["m_angularSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDamping_set
    __swig_getmethods__["m_angularSpringDamping"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDamping_get
    if _newclass:
        m_angularSpringDamping = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDamping_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDamping_set)
    __swig_setmethods__["m_angularEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEquilibriumPoint_set
    __swig_getmethods__["m_angularEquilibriumPoint"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEquilibriumPoint_get
    if _newclass:
        m_angularEquilibriumPoint = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEquilibriumPoint_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEquilibriumPoint_set)
    __swig_setmethods__["m_angularEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableMotor_set
    __swig_getmethods__["m_angularEnableMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableMotor_get
    if _newclass:
        m_angularEnableMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableMotor_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableMotor_set)
    __swig_setmethods__["m_angularServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoMotor_set
    __swig_getmethods__["m_angularServoMotor"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoMotor_get
    if _newclass:
        m_angularServoMotor = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoMotor_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularServoMotor_set)
    __swig_setmethods__["m_angularEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableSpring_set
    __swig_getmethods__["m_angularEnableSpring"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableSpring_get
    if _newclass:
        m_angularEnableSpring = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableSpring_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularEnableSpring_set)
    __swig_setmethods__["m_angularSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffnessLimited_set
    __swig_getmethods__["m_angularSpringStiffnessLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffnessLimited_get
    if _newclass:
        m_angularSpringStiffnessLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffnessLimited_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringStiffnessLimited_set)
    __swig_setmethods__["m_angularSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDampingLimited_set
    __swig_getmethods__["m_angularSpringDampingLimited"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDampingLimited_get
    if _newclass:
        m_angularSpringDampingLimited = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDampingLimited_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_angularSpringDampingLimited_set)
    __swig_setmethods__["m_rotateOrder"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rotateOrder_set
    __swig_getmethods__["m_rotateOrder"] = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rotateOrder_get
    if _newclass:
        m_rotateOrder = _swig_property(_bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rotateOrder_get, _bullet.btGeneric6DofSpring2ConstraintDoubleData2_m_rotateOrder_set)

    def __init__(self):
        """__init__(btGeneric6DofSpring2ConstraintDoubleData2 self) -> btGeneric6DofSpring2ConstraintDoubleData2"""
        this = _bullet.new_btGeneric6DofSpring2ConstraintDoubleData2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeneric6DofSpring2ConstraintDoubleData2
    __del__ = lambda self: None
btGeneric6DofSpring2ConstraintDoubleData2_swigregister = _bullet.btGeneric6DofSpring2ConstraintDoubleData2_swigregister
btGeneric6DofSpring2ConstraintDoubleData2_swigregister(btGeneric6DofSpring2ConstraintDoubleData2)

class btFixedConstraint(btGeneric6DofSpring2Constraint):
    """Proxy of C++ btFixedConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btGeneric6DofSpring2Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btFixedConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofSpring2Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btFixedConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, rbA, rbB, frameInA, frameInB):
        """__init__(btFixedConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & frameInA, btTransform const & frameInB) -> btFixedConstraint"""
        this = _bullet.new_btFixedConstraint(rbA, rbB, frameInA, frameInB)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btFixedConstraint
    __del__ = lambda self: None
btFixedConstraint_swigregister = _bullet.btFixedConstraint_swigregister
btFixedConstraint_swigregister(btFixedConstraint)

btGearConstraintDataName = _bullet.btGearConstraintDataName
class btGearConstraint(btTypedConstraint):
    """Proxy of C++ btGearConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGearConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGearConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, rbA, rbB, axisInA, axisInB, ratio=1.):
        """
        __init__(btGearConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & axisInA, btVector3 const & axisInB, btScalar ratio=1.) -> btGearConstraint
        __init__(btGearConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & axisInA, btVector3 const & axisInB) -> btGearConstraint
        """
        this = _bullet.new_btGearConstraint(rbA, rbB, axisInA, axisInB, ratio)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGearConstraint
    __del__ = lambda self: None

    def setAxisA(self, axisA):
        """setAxisA(btGearConstraint self, btVector3 & axisA)"""
        return _bullet.btGearConstraint_setAxisA(self, axisA)


    def setAxisB(self, axisB):
        """setAxisB(btGearConstraint self, btVector3 & axisB)"""
        return _bullet.btGearConstraint_setAxisB(self, axisB)


    def setRatio(self, ratio):
        """setRatio(btGearConstraint self, btScalar ratio)"""
        return _bullet.btGearConstraint_setRatio(self, ratio)


    def getAxisA(self):
        """getAxisA(btGearConstraint self) -> btVector3 const &"""
        return _bullet.btGearConstraint_getAxisA(self)


    def getAxisB(self):
        """getAxisB(btGearConstraint self) -> btVector3 const &"""
        return _bullet.btGearConstraint_getAxisB(self)


    def getRatio(self):
        """getRatio(btGearConstraint self) -> btScalar"""
        return _bullet.btGearConstraint_getRatio(self)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btGearConstraint self, int num, btScalar value, int axis=-1)
        setParam(btGearConstraint self, int num, btScalar value)
        """
        return _bullet.btGearConstraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btGearConstraint self, int num, int axis=-1) -> btScalar
        getParam(btGearConstraint self, int num) -> btScalar
        """
        return _bullet.btGearConstraint_getParam(self, num, axis)

btGearConstraint_swigregister = _bullet.btGearConstraint_swigregister
btGearConstraint_swigregister(btGearConstraint)

class btGearConstraintFloatData(_object):
    """Proxy of C++ btGearConstraintFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGearConstraintFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGearConstraintFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btGearConstraintFloatData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btGearConstraintFloatData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btGearConstraintFloatData_m_typeConstraintData_get, _bullet.btGearConstraintFloatData_m_typeConstraintData_set)
    __swig_setmethods__["m_axisInA"] = _bullet.btGearConstraintFloatData_m_axisInA_set
    __swig_getmethods__["m_axisInA"] = _bullet.btGearConstraintFloatData_m_axisInA_get
    if _newclass:
        m_axisInA = _swig_property(_bullet.btGearConstraintFloatData_m_axisInA_get, _bullet.btGearConstraintFloatData_m_axisInA_set)
    __swig_setmethods__["m_axisInB"] = _bullet.btGearConstraintFloatData_m_axisInB_set
    __swig_getmethods__["m_axisInB"] = _bullet.btGearConstraintFloatData_m_axisInB_get
    if _newclass:
        m_axisInB = _swig_property(_bullet.btGearConstraintFloatData_m_axisInB_get, _bullet.btGearConstraintFloatData_m_axisInB_set)
    __swig_setmethods__["m_ratio"] = _bullet.btGearConstraintFloatData_m_ratio_set
    __swig_getmethods__["m_ratio"] = _bullet.btGearConstraintFloatData_m_ratio_get
    if _newclass:
        m_ratio = _swig_property(_bullet.btGearConstraintFloatData_m_ratio_get, _bullet.btGearConstraintFloatData_m_ratio_set)
    __swig_setmethods__["m_padding"] = _bullet.btGearConstraintFloatData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btGearConstraintFloatData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btGearConstraintFloatData_m_padding_get, _bullet.btGearConstraintFloatData_m_padding_set)

    def __init__(self):
        """__init__(btGearConstraintFloatData self) -> btGearConstraintFloatData"""
        this = _bullet.new_btGearConstraintFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGearConstraintFloatData
    __del__ = lambda self: None
btGearConstraintFloatData_swigregister = _bullet.btGearConstraintFloatData_swigregister
btGearConstraintFloatData_swigregister(btGearConstraintFloatData)

class btGearConstraintDoubleData(_object):
    """Proxy of C++ btGearConstraintDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGearConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGearConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btGearConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btGearConstraintDoubleData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btGearConstraintDoubleData_m_typeConstraintData_get, _bullet.btGearConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_axisInA"] = _bullet.btGearConstraintDoubleData_m_axisInA_set
    __swig_getmethods__["m_axisInA"] = _bullet.btGearConstraintDoubleData_m_axisInA_get
    if _newclass:
        m_axisInA = _swig_property(_bullet.btGearConstraintDoubleData_m_axisInA_get, _bullet.btGearConstraintDoubleData_m_axisInA_set)
    __swig_setmethods__["m_axisInB"] = _bullet.btGearConstraintDoubleData_m_axisInB_set
    __swig_getmethods__["m_axisInB"] = _bullet.btGearConstraintDoubleData_m_axisInB_get
    if _newclass:
        m_axisInB = _swig_property(_bullet.btGearConstraintDoubleData_m_axisInB_get, _bullet.btGearConstraintDoubleData_m_axisInB_set)
    __swig_setmethods__["m_ratio"] = _bullet.btGearConstraintDoubleData_m_ratio_set
    __swig_getmethods__["m_ratio"] = _bullet.btGearConstraintDoubleData_m_ratio_get
    if _newclass:
        m_ratio = _swig_property(_bullet.btGearConstraintDoubleData_m_ratio_get, _bullet.btGearConstraintDoubleData_m_ratio_set)

    def __init__(self):
        """__init__(btGearConstraintDoubleData self) -> btGearConstraintDoubleData"""
        this = _bullet.new_btGearConstraintDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGearConstraintDoubleData
    __del__ = lambda self: None
btGearConstraintDoubleData_swigregister = _bullet.btGearConstraintDoubleData_swigregister
btGearConstraintDoubleData_swigregister(btGearConstraintDoubleData)

btGeneric6DofConstraintDataName = _bullet.btGeneric6DofConstraintDataName
class btRotationalLimitMotor(_object):
    """Proxy of C++ btRotationalLimitMotor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRotationalLimitMotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btRotationalLimitMotor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_loLimit"] = _bullet.btRotationalLimitMotor_m_loLimit_set
    __swig_getmethods__["m_loLimit"] = _bullet.btRotationalLimitMotor_m_loLimit_get
    if _newclass:
        m_loLimit = _swig_property(_bullet.btRotationalLimitMotor_m_loLimit_get, _bullet.btRotationalLimitMotor_m_loLimit_set)
    __swig_setmethods__["m_hiLimit"] = _bullet.btRotationalLimitMotor_m_hiLimit_set
    __swig_getmethods__["m_hiLimit"] = _bullet.btRotationalLimitMotor_m_hiLimit_get
    if _newclass:
        m_hiLimit = _swig_property(_bullet.btRotationalLimitMotor_m_hiLimit_get, _bullet.btRotationalLimitMotor_m_hiLimit_set)
    __swig_setmethods__["m_targetVelocity"] = _bullet.btRotationalLimitMotor_m_targetVelocity_set
    __swig_getmethods__["m_targetVelocity"] = _bullet.btRotationalLimitMotor_m_targetVelocity_get
    if _newclass:
        m_targetVelocity = _swig_property(_bullet.btRotationalLimitMotor_m_targetVelocity_get, _bullet.btRotationalLimitMotor_m_targetVelocity_set)
    __swig_setmethods__["m_maxMotorForce"] = _bullet.btRotationalLimitMotor_m_maxMotorForce_set
    __swig_getmethods__["m_maxMotorForce"] = _bullet.btRotationalLimitMotor_m_maxMotorForce_get
    if _newclass:
        m_maxMotorForce = _swig_property(_bullet.btRotationalLimitMotor_m_maxMotorForce_get, _bullet.btRotationalLimitMotor_m_maxMotorForce_set)
    __swig_setmethods__["m_maxLimitForce"] = _bullet.btRotationalLimitMotor_m_maxLimitForce_set
    __swig_getmethods__["m_maxLimitForce"] = _bullet.btRotationalLimitMotor_m_maxLimitForce_get
    if _newclass:
        m_maxLimitForce = _swig_property(_bullet.btRotationalLimitMotor_m_maxLimitForce_get, _bullet.btRotationalLimitMotor_m_maxLimitForce_set)
    __swig_setmethods__["m_damping"] = _bullet.btRotationalLimitMotor_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btRotationalLimitMotor_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btRotationalLimitMotor_m_damping_get, _bullet.btRotationalLimitMotor_m_damping_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btRotationalLimitMotor_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btRotationalLimitMotor_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btRotationalLimitMotor_m_limitSoftness_get, _bullet.btRotationalLimitMotor_m_limitSoftness_set)
    __swig_setmethods__["m_normalCFM"] = _bullet.btRotationalLimitMotor_m_normalCFM_set
    __swig_getmethods__["m_normalCFM"] = _bullet.btRotationalLimitMotor_m_normalCFM_get
    if _newclass:
        m_normalCFM = _swig_property(_bullet.btRotationalLimitMotor_m_normalCFM_get, _bullet.btRotationalLimitMotor_m_normalCFM_set)
    __swig_setmethods__["m_stopERP"] = _bullet.btRotationalLimitMotor_m_stopERP_set
    __swig_getmethods__["m_stopERP"] = _bullet.btRotationalLimitMotor_m_stopERP_get
    if _newclass:
        m_stopERP = _swig_property(_bullet.btRotationalLimitMotor_m_stopERP_get, _bullet.btRotationalLimitMotor_m_stopERP_set)
    __swig_setmethods__["m_stopCFM"] = _bullet.btRotationalLimitMotor_m_stopCFM_set
    __swig_getmethods__["m_stopCFM"] = _bullet.btRotationalLimitMotor_m_stopCFM_get
    if _newclass:
        m_stopCFM = _swig_property(_bullet.btRotationalLimitMotor_m_stopCFM_get, _bullet.btRotationalLimitMotor_m_stopCFM_set)
    __swig_setmethods__["m_bounce"] = _bullet.btRotationalLimitMotor_m_bounce_set
    __swig_getmethods__["m_bounce"] = _bullet.btRotationalLimitMotor_m_bounce_get
    if _newclass:
        m_bounce = _swig_property(_bullet.btRotationalLimitMotor_m_bounce_get, _bullet.btRotationalLimitMotor_m_bounce_set)
    __swig_setmethods__["m_enableMotor"] = _bullet.btRotationalLimitMotor_m_enableMotor_set
    __swig_getmethods__["m_enableMotor"] = _bullet.btRotationalLimitMotor_m_enableMotor_get
    if _newclass:
        m_enableMotor = _swig_property(_bullet.btRotationalLimitMotor_m_enableMotor_get, _bullet.btRotationalLimitMotor_m_enableMotor_set)
    __swig_setmethods__["m_currentLimitError"] = _bullet.btRotationalLimitMotor_m_currentLimitError_set
    __swig_getmethods__["m_currentLimitError"] = _bullet.btRotationalLimitMotor_m_currentLimitError_get
    if _newclass:
        m_currentLimitError = _swig_property(_bullet.btRotationalLimitMotor_m_currentLimitError_get, _bullet.btRotationalLimitMotor_m_currentLimitError_set)
    __swig_setmethods__["m_currentPosition"] = _bullet.btRotationalLimitMotor_m_currentPosition_set
    __swig_getmethods__["m_currentPosition"] = _bullet.btRotationalLimitMotor_m_currentPosition_get
    if _newclass:
        m_currentPosition = _swig_property(_bullet.btRotationalLimitMotor_m_currentPosition_get, _bullet.btRotationalLimitMotor_m_currentPosition_set)
    __swig_setmethods__["m_currentLimit"] = _bullet.btRotationalLimitMotor_m_currentLimit_set
    __swig_getmethods__["m_currentLimit"] = _bullet.btRotationalLimitMotor_m_currentLimit_get
    if _newclass:
        m_currentLimit = _swig_property(_bullet.btRotationalLimitMotor_m_currentLimit_get, _bullet.btRotationalLimitMotor_m_currentLimit_set)
    __swig_setmethods__["m_accumulatedImpulse"] = _bullet.btRotationalLimitMotor_m_accumulatedImpulse_set
    __swig_getmethods__["m_accumulatedImpulse"] = _bullet.btRotationalLimitMotor_m_accumulatedImpulse_get
    if _newclass:
        m_accumulatedImpulse = _swig_property(_bullet.btRotationalLimitMotor_m_accumulatedImpulse_get, _bullet.btRotationalLimitMotor_m_accumulatedImpulse_set)

    def __init__(self, *args):
        """
        __init__(btRotationalLimitMotor self) -> btRotationalLimitMotor
        __init__(btRotationalLimitMotor self, btRotationalLimitMotor limot) -> btRotationalLimitMotor
        """
        this = _bullet.new_btRotationalLimitMotor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isLimited(self):
        """isLimited(btRotationalLimitMotor self) -> bool"""
        return _bullet.btRotationalLimitMotor_isLimited(self)


    def needApplyTorques(self):
        """needApplyTorques(btRotationalLimitMotor self) -> bool"""
        return _bullet.btRotationalLimitMotor_needApplyTorques(self)


    def testLimitValue(self, test_value):
        """testLimitValue(btRotationalLimitMotor self, btScalar test_value) -> int"""
        return _bullet.btRotationalLimitMotor_testLimitValue(self, test_value)


    def solveAngularLimits(self, timeStep, axis, jacDiagABInv, body0, body1):
        """solveAngularLimits(btRotationalLimitMotor self, btScalar timeStep, btVector3 & axis, btScalar jacDiagABInv, btRigidBody body0, btRigidBody body1) -> btScalar"""
        return _bullet.btRotationalLimitMotor_solveAngularLimits(self, timeStep, axis, jacDiagABInv, body0, body1)

    __swig_destroy__ = _bullet.delete_btRotationalLimitMotor
    __del__ = lambda self: None
btRotationalLimitMotor_swigregister = _bullet.btRotationalLimitMotor_swigregister
btRotationalLimitMotor_swigregister(btRotationalLimitMotor)

class btTranslationalLimitMotor(_object):
    """Proxy of C++ btTranslationalLimitMotor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTranslationalLimitMotor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTranslationalLimitMotor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_lowerLimit"] = _bullet.btTranslationalLimitMotor_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btTranslationalLimitMotor_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btTranslationalLimitMotor_m_lowerLimit_get, _bullet.btTranslationalLimitMotor_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btTranslationalLimitMotor_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btTranslationalLimitMotor_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btTranslationalLimitMotor_m_upperLimit_get, _bullet.btTranslationalLimitMotor_m_upperLimit_set)
    __swig_setmethods__["m_accumulatedImpulse"] = _bullet.btTranslationalLimitMotor_m_accumulatedImpulse_set
    __swig_getmethods__["m_accumulatedImpulse"] = _bullet.btTranslationalLimitMotor_m_accumulatedImpulse_get
    if _newclass:
        m_accumulatedImpulse = _swig_property(_bullet.btTranslationalLimitMotor_m_accumulatedImpulse_get, _bullet.btTranslationalLimitMotor_m_accumulatedImpulse_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btTranslationalLimitMotor_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btTranslationalLimitMotor_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btTranslationalLimitMotor_m_limitSoftness_get, _bullet.btTranslationalLimitMotor_m_limitSoftness_set)
    __swig_setmethods__["m_damping"] = _bullet.btTranslationalLimitMotor_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btTranslationalLimitMotor_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btTranslationalLimitMotor_m_damping_get, _bullet.btTranslationalLimitMotor_m_damping_set)
    __swig_setmethods__["m_restitution"] = _bullet.btTranslationalLimitMotor_m_restitution_set
    __swig_getmethods__["m_restitution"] = _bullet.btTranslationalLimitMotor_m_restitution_get
    if _newclass:
        m_restitution = _swig_property(_bullet.btTranslationalLimitMotor_m_restitution_get, _bullet.btTranslationalLimitMotor_m_restitution_set)
    __swig_setmethods__["m_normalCFM"] = _bullet.btTranslationalLimitMotor_m_normalCFM_set
    __swig_getmethods__["m_normalCFM"] = _bullet.btTranslationalLimitMotor_m_normalCFM_get
    if _newclass:
        m_normalCFM = _swig_property(_bullet.btTranslationalLimitMotor_m_normalCFM_get, _bullet.btTranslationalLimitMotor_m_normalCFM_set)
    __swig_setmethods__["m_stopERP"] = _bullet.btTranslationalLimitMotor_m_stopERP_set
    __swig_getmethods__["m_stopERP"] = _bullet.btTranslationalLimitMotor_m_stopERP_get
    if _newclass:
        m_stopERP = _swig_property(_bullet.btTranslationalLimitMotor_m_stopERP_get, _bullet.btTranslationalLimitMotor_m_stopERP_set)
    __swig_setmethods__["m_stopCFM"] = _bullet.btTranslationalLimitMotor_m_stopCFM_set
    __swig_getmethods__["m_stopCFM"] = _bullet.btTranslationalLimitMotor_m_stopCFM_get
    if _newclass:
        m_stopCFM = _swig_property(_bullet.btTranslationalLimitMotor_m_stopCFM_get, _bullet.btTranslationalLimitMotor_m_stopCFM_set)
    __swig_setmethods__["m_enableMotor"] = _bullet.btTranslationalLimitMotor_m_enableMotor_set
    __swig_getmethods__["m_enableMotor"] = _bullet.btTranslationalLimitMotor_m_enableMotor_get
    if _newclass:
        m_enableMotor = _swig_property(_bullet.btTranslationalLimitMotor_m_enableMotor_get, _bullet.btTranslationalLimitMotor_m_enableMotor_set)
    __swig_setmethods__["m_targetVelocity"] = _bullet.btTranslationalLimitMotor_m_targetVelocity_set
    __swig_getmethods__["m_targetVelocity"] = _bullet.btTranslationalLimitMotor_m_targetVelocity_get
    if _newclass:
        m_targetVelocity = _swig_property(_bullet.btTranslationalLimitMotor_m_targetVelocity_get, _bullet.btTranslationalLimitMotor_m_targetVelocity_set)
    __swig_setmethods__["m_maxMotorForce"] = _bullet.btTranslationalLimitMotor_m_maxMotorForce_set
    __swig_getmethods__["m_maxMotorForce"] = _bullet.btTranslationalLimitMotor_m_maxMotorForce_get
    if _newclass:
        m_maxMotorForce = _swig_property(_bullet.btTranslationalLimitMotor_m_maxMotorForce_get, _bullet.btTranslationalLimitMotor_m_maxMotorForce_set)
    __swig_setmethods__["m_currentLimitError"] = _bullet.btTranslationalLimitMotor_m_currentLimitError_set
    __swig_getmethods__["m_currentLimitError"] = _bullet.btTranslationalLimitMotor_m_currentLimitError_get
    if _newclass:
        m_currentLimitError = _swig_property(_bullet.btTranslationalLimitMotor_m_currentLimitError_get, _bullet.btTranslationalLimitMotor_m_currentLimitError_set)
    __swig_setmethods__["m_currentLinearDiff"] = _bullet.btTranslationalLimitMotor_m_currentLinearDiff_set
    __swig_getmethods__["m_currentLinearDiff"] = _bullet.btTranslationalLimitMotor_m_currentLinearDiff_get
    if _newclass:
        m_currentLinearDiff = _swig_property(_bullet.btTranslationalLimitMotor_m_currentLinearDiff_get, _bullet.btTranslationalLimitMotor_m_currentLinearDiff_set)
    __swig_setmethods__["m_currentLimit"] = _bullet.btTranslationalLimitMotor_m_currentLimit_set
    __swig_getmethods__["m_currentLimit"] = _bullet.btTranslationalLimitMotor_m_currentLimit_get
    if _newclass:
        m_currentLimit = _swig_property(_bullet.btTranslationalLimitMotor_m_currentLimit_get, _bullet.btTranslationalLimitMotor_m_currentLimit_set)

    def __init__(self, *args):
        """
        __init__(btTranslationalLimitMotor self) -> btTranslationalLimitMotor
        __init__(btTranslationalLimitMotor self, btTranslationalLimitMotor other) -> btTranslationalLimitMotor
        """
        this = _bullet.new_btTranslationalLimitMotor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def isLimited(self, limitIndex):
        """isLimited(btTranslationalLimitMotor self, int limitIndex) -> bool"""
        return _bullet.btTranslationalLimitMotor_isLimited(self, limitIndex)


    def needApplyForce(self, limitIndex):
        """needApplyForce(btTranslationalLimitMotor self, int limitIndex) -> bool"""
        return _bullet.btTranslationalLimitMotor_needApplyForce(self, limitIndex)


    def testLimitValue(self, limitIndex, test_value):
        """testLimitValue(btTranslationalLimitMotor self, int limitIndex, btScalar test_value) -> int"""
        return _bullet.btTranslationalLimitMotor_testLimitValue(self, limitIndex, test_value)


    def solveLinearAxis(self, timeStep, jacDiagABInv, body1, pointInA, body2, pointInB, limit_index, axis_normal_on_a, anchorPos):
        """solveLinearAxis(btTranslationalLimitMotor self, btScalar timeStep, btScalar jacDiagABInv, btRigidBody body1, btVector3 const & pointInA, btRigidBody body2, btVector3 const & pointInB, int limit_index, btVector3 const & axis_normal_on_a, btVector3 const & anchorPos) -> btScalar"""
        return _bullet.btTranslationalLimitMotor_solveLinearAxis(self, timeStep, jacDiagABInv, body1, pointInA, body2, pointInB, limit_index, axis_normal_on_a, anchorPos)

    __swig_destroy__ = _bullet.delete_btTranslationalLimitMotor
    __del__ = lambda self: None
btTranslationalLimitMotor_swigregister = _bullet.btTranslationalLimitMotor_swigregister
btTranslationalLimitMotor_swigregister(btTranslationalLimitMotor)

BT_6DOF_FLAGS_CFM_NORM = _bullet.BT_6DOF_FLAGS_CFM_NORM
BT_6DOF_FLAGS_CFM_STOP = _bullet.BT_6DOF_FLAGS_CFM_STOP
BT_6DOF_FLAGS_ERP_STOP = _bullet.BT_6DOF_FLAGS_ERP_STOP
BT_6DOF_FLAGS_AXIS_SHIFT = _bullet.BT_6DOF_FLAGS_AXIS_SHIFT
class btGeneric6DofConstraint(btTypedConstraint):
    """Proxy of C++ btGeneric6DofConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_useSolveConstraintObsolete"] = _bullet.btGeneric6DofConstraint_m_useSolveConstraintObsolete_set
    __swig_getmethods__["m_useSolveConstraintObsolete"] = _bullet.btGeneric6DofConstraint_m_useSolveConstraintObsolete_get
    if _newclass:
        m_useSolveConstraintObsolete = _swig_property(_bullet.btGeneric6DofConstraint_m_useSolveConstraintObsolete_get, _bullet.btGeneric6DofConstraint_m_useSolveConstraintObsolete_set)

    def __init__(self, *args):
        """
        __init__(btGeneric6DofConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & frameInA, btTransform const & frameInB, bool useLinearReferenceFrameA) -> btGeneric6DofConstraint
        __init__(btGeneric6DofConstraint self, btRigidBody rbB, btTransform const & frameInB, bool useLinearReferenceFrameB) -> btGeneric6DofConstraint
        """
        this = _bullet.new_btGeneric6DofConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calculateTransforms(self, *args):
        """
        calculateTransforms(btGeneric6DofConstraint self, btTransform const & transA, btTransform const & transB)
        calculateTransforms(btGeneric6DofConstraint self)
        """
        return _bullet.btGeneric6DofConstraint_calculateTransforms(self, *args)


    def getCalculatedTransformA(self):
        """getCalculatedTransformA(btGeneric6DofConstraint self) -> btTransform const &"""
        return _bullet.btGeneric6DofConstraint_getCalculatedTransformA(self)


    def getCalculatedTransformB(self):
        """getCalculatedTransformB(btGeneric6DofConstraint self) -> btTransform const &"""
        return _bullet.btGeneric6DofConstraint_getCalculatedTransformB(self)


    def getFrameOffsetA(self, *args):
        """
        getFrameOffsetA(btGeneric6DofConstraint self) -> btTransform const
        getFrameOffsetA(btGeneric6DofConstraint self) -> btTransform &
        """
        return _bullet.btGeneric6DofConstraint_getFrameOffsetA(self, *args)


    def getFrameOffsetB(self, *args):
        """
        getFrameOffsetB(btGeneric6DofConstraint self) -> btTransform const
        getFrameOffsetB(btGeneric6DofConstraint self) -> btTransform &
        """
        return _bullet.btGeneric6DofConstraint_getFrameOffsetB(self, *args)


    def getInfo1NonVirtual(self, info):
        """getInfo1NonVirtual(btGeneric6DofConstraint self, btTypedConstraint::btConstraintInfo1 * info)"""
        return _bullet.btGeneric6DofConstraint_getInfo1NonVirtual(self, info)


    def getInfo2NonVirtual(self, info, transA, transB, linVelA, linVelB, angVelA, angVelB):
        """getInfo2NonVirtual(btGeneric6DofConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & transA, btTransform const & transB, btVector3 const & linVelA, btVector3 const & linVelB, btVector3 const & angVelA, btVector3 const & angVelB)"""
        return _bullet.btGeneric6DofConstraint_getInfo2NonVirtual(self, info, transA, transB, linVelA, linVelB, angVelA, angVelB)


    def updateRHS(self, timeStep):
        """updateRHS(btGeneric6DofConstraint self, btScalar timeStep)"""
        return _bullet.btGeneric6DofConstraint_updateRHS(self, timeStep)


    def getAxis(self, axis_index):
        """getAxis(btGeneric6DofConstraint self, int axis_index) -> btVector3"""
        return _bullet.btGeneric6DofConstraint_getAxis(self, axis_index)


    def getAngle(self, axis_index):
        """getAngle(btGeneric6DofConstraint self, int axis_index) -> btScalar"""
        return _bullet.btGeneric6DofConstraint_getAngle(self, axis_index)


    def getRelativePivotPosition(self, axis_index):
        """getRelativePivotPosition(btGeneric6DofConstraint self, int axis_index) -> btScalar"""
        return _bullet.btGeneric6DofConstraint_getRelativePivotPosition(self, axis_index)


    def setFrames(self, frameA, frameB):
        """setFrames(btGeneric6DofConstraint self, btTransform const & frameA, btTransform const & frameB)"""
        return _bullet.btGeneric6DofConstraint_setFrames(self, frameA, frameB)


    def testAngularLimitMotor(self, axis_index):
        """testAngularLimitMotor(btGeneric6DofConstraint self, int axis_index) -> bool"""
        return _bullet.btGeneric6DofConstraint_testAngularLimitMotor(self, axis_index)


    def setLinearLowerLimit(self, linearLower):
        """setLinearLowerLimit(btGeneric6DofConstraint self, btVector3 const & linearLower)"""
        return _bullet.btGeneric6DofConstraint_setLinearLowerLimit(self, linearLower)


    def getLinearLowerLimit(self, linearLower):
        """getLinearLowerLimit(btGeneric6DofConstraint self, btVector3 & linearLower)"""
        return _bullet.btGeneric6DofConstraint_getLinearLowerLimit(self, linearLower)


    def setLinearUpperLimit(self, linearUpper):
        """setLinearUpperLimit(btGeneric6DofConstraint self, btVector3 const & linearUpper)"""
        return _bullet.btGeneric6DofConstraint_setLinearUpperLimit(self, linearUpper)


    def getLinearUpperLimit(self, linearUpper):
        """getLinearUpperLimit(btGeneric6DofConstraint self, btVector3 & linearUpper)"""
        return _bullet.btGeneric6DofConstraint_getLinearUpperLimit(self, linearUpper)


    def setAngularLowerLimit(self, angularLower):
        """setAngularLowerLimit(btGeneric6DofConstraint self, btVector3 const & angularLower)"""
        return _bullet.btGeneric6DofConstraint_setAngularLowerLimit(self, angularLower)


    def getAngularLowerLimit(self, angularLower):
        """getAngularLowerLimit(btGeneric6DofConstraint self, btVector3 & angularLower)"""
        return _bullet.btGeneric6DofConstraint_getAngularLowerLimit(self, angularLower)


    def setAngularUpperLimit(self, angularUpper):
        """setAngularUpperLimit(btGeneric6DofConstraint self, btVector3 const & angularUpper)"""
        return _bullet.btGeneric6DofConstraint_setAngularUpperLimit(self, angularUpper)


    def getAngularUpperLimit(self, angularUpper):
        """getAngularUpperLimit(btGeneric6DofConstraint self, btVector3 & angularUpper)"""
        return _bullet.btGeneric6DofConstraint_getAngularUpperLimit(self, angularUpper)


    def getRotationalLimitMotor(self, index):
        """getRotationalLimitMotor(btGeneric6DofConstraint self, int index) -> btRotationalLimitMotor"""
        return _bullet.btGeneric6DofConstraint_getRotationalLimitMotor(self, index)


    def getTranslationalLimitMotor(self):
        """getTranslationalLimitMotor(btGeneric6DofConstraint self) -> btTranslationalLimitMotor"""
        return _bullet.btGeneric6DofConstraint_getTranslationalLimitMotor(self)


    def setLimit(self, axis, lo, hi):
        """setLimit(btGeneric6DofConstraint self, int axis, btScalar lo, btScalar hi)"""
        return _bullet.btGeneric6DofConstraint_setLimit(self, axis, lo, hi)


    def isLimited(self, limitIndex):
        """isLimited(btGeneric6DofConstraint self, int limitIndex) -> bool"""
        return _bullet.btGeneric6DofConstraint_isLimited(self, limitIndex)


    def calcAnchorPos(self):
        """calcAnchorPos(btGeneric6DofConstraint self)"""
        return _bullet.btGeneric6DofConstraint_calcAnchorPos(self)


    def get_limit_motor_info2(self, limot, transA, transB, linVelA, linVelB, angVelA, angVelB, info, row, ax1, rotational, rotAllowed=False):
        """
        get_limit_motor_info2(btGeneric6DofConstraint self, btRotationalLimitMotor limot, btTransform const & transA, btTransform const & transB, btVector3 const & linVelA, btVector3 const & linVelB, btVector3 const & angVelA, btVector3 const & angVelB, btTypedConstraint::btConstraintInfo2 * info, int row, btVector3 & ax1, int rotational, int rotAllowed=False) -> int
        get_limit_motor_info2(btGeneric6DofConstraint self, btRotationalLimitMotor limot, btTransform const & transA, btTransform const & transB, btVector3 const & linVelA, btVector3 const & linVelB, btVector3 const & angVelA, btVector3 const & angVelB, btTypedConstraint::btConstraintInfo2 * info, int row, btVector3 & ax1, int rotational) -> int
        """
        return _bullet.btGeneric6DofConstraint_get_limit_motor_info2(self, limot, transA, transB, linVelA, linVelB, angVelA, angVelB, info, row, ax1, rotational, rotAllowed)


    def getUseFrameOffset(self):
        """getUseFrameOffset(btGeneric6DofConstraint self) -> bool"""
        return _bullet.btGeneric6DofConstraint_getUseFrameOffset(self)


    def setUseFrameOffset(self, frameOffsetOnOff):
        """setUseFrameOffset(btGeneric6DofConstraint self, bool frameOffsetOnOff)"""
        return _bullet.btGeneric6DofConstraint_setUseFrameOffset(self, frameOffsetOnOff)


    def getUseLinearReferenceFrameA(self):
        """getUseLinearReferenceFrameA(btGeneric6DofConstraint self) -> bool"""
        return _bullet.btGeneric6DofConstraint_getUseLinearReferenceFrameA(self)


    def setUseLinearReferenceFrameA(self, linearReferenceFrameA):
        """setUseLinearReferenceFrameA(btGeneric6DofConstraint self, bool linearReferenceFrameA)"""
        return _bullet.btGeneric6DofConstraint_setUseLinearReferenceFrameA(self, linearReferenceFrameA)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btGeneric6DofConstraint self, int num, btScalar value, int axis=-1)
        setParam(btGeneric6DofConstraint self, int num, btScalar value)
        """
        return _bullet.btGeneric6DofConstraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btGeneric6DofConstraint self, int num, int axis=-1) -> btScalar
        getParam(btGeneric6DofConstraint self, int num) -> btScalar
        """
        return _bullet.btGeneric6DofConstraint_getParam(self, num, axis)


    def setAxis(self, axis1, axis2):
        """setAxis(btGeneric6DofConstraint self, btVector3 const & axis1, btVector3 const & axis2)"""
        return _bullet.btGeneric6DofConstraint_setAxis(self, axis1, axis2)


    def getFlags(self):
        """getFlags(btGeneric6DofConstraint self) -> int"""
        return _bullet.btGeneric6DofConstraint_getFlags(self)

    __swig_destroy__ = _bullet.delete_btGeneric6DofConstraint
    __del__ = lambda self: None
btGeneric6DofConstraint_swigregister = _bullet.btGeneric6DofConstraint_swigregister
btGeneric6DofConstraint_swigregister(btGeneric6DofConstraint)

class btGeneric6DofConstraintData(_object):
    """Proxy of C++ btGeneric6DofConstraintData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofConstraintData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btGeneric6DofConstraintData_m_typeConstraintData_get, _bullet.btGeneric6DofConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btGeneric6DofConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btGeneric6DofConstraintData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btGeneric6DofConstraintData_m_rbAFrame_get, _bullet.btGeneric6DofConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btGeneric6DofConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btGeneric6DofConstraintData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btGeneric6DofConstraintData_m_rbBFrame_get, _bullet.btGeneric6DofConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofConstraintData_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofConstraintData_m_linearUpperLimit_get
    if _newclass:
        m_linearUpperLimit = _swig_property(_bullet.btGeneric6DofConstraintData_m_linearUpperLimit_get, _bullet.btGeneric6DofConstraintData_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofConstraintData_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofConstraintData_m_linearLowerLimit_get
    if _newclass:
        m_linearLowerLimit = _swig_property(_bullet.btGeneric6DofConstraintData_m_linearLowerLimit_get, _bullet.btGeneric6DofConstraintData_m_linearLowerLimit_set)
    __swig_setmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofConstraintData_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofConstraintData_m_angularUpperLimit_get
    if _newclass:
        m_angularUpperLimit = _swig_property(_bullet.btGeneric6DofConstraintData_m_angularUpperLimit_get, _bullet.btGeneric6DofConstraintData_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofConstraintData_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofConstraintData_m_angularLowerLimit_get
    if _newclass:
        m_angularLowerLimit = _swig_property(_bullet.btGeneric6DofConstraintData_m_angularLowerLimit_get, _bullet.btGeneric6DofConstraintData_m_angularLowerLimit_set)
    __swig_setmethods__["m_useLinearReferenceFrameA"] = _bullet.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set
    __swig_getmethods__["m_useLinearReferenceFrameA"] = _bullet.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get
    if _newclass:
        m_useLinearReferenceFrameA = _swig_property(_bullet.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_get, _bullet.btGeneric6DofConstraintData_m_useLinearReferenceFrameA_set)
    __swig_setmethods__["m_useOffsetForConstraintFrame"] = _bullet.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set
    __swig_getmethods__["m_useOffsetForConstraintFrame"] = _bullet.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get
    if _newclass:
        m_useOffsetForConstraintFrame = _swig_property(_bullet.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_get, _bullet.btGeneric6DofConstraintData_m_useOffsetForConstraintFrame_set)

    def __init__(self):
        """__init__(btGeneric6DofConstraintData self) -> btGeneric6DofConstraintData"""
        this = _bullet.new_btGeneric6DofConstraintData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeneric6DofConstraintData
    __del__ = lambda self: None
btGeneric6DofConstraintData_swigregister = _bullet.btGeneric6DofConstraintData_swigregister
btGeneric6DofConstraintData_swigregister(btGeneric6DofConstraintData)

class btGeneric6DofConstraintDoubleData2(_object):
    """Proxy of C++ btGeneric6DofConstraintDoubleData2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofConstraintDoubleData2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofConstraintDoubleData2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofConstraintDoubleData2_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btGeneric6DofConstraintDoubleData2_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_typeConstraintData_get, _bullet.btGeneric6DofConstraintDoubleData2_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btGeneric6DofConstraintDoubleData2_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btGeneric6DofConstraintDoubleData2_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_rbAFrame_get, _bullet.btGeneric6DofConstraintDoubleData2_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btGeneric6DofConstraintDoubleData2_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btGeneric6DofConstraintDoubleData2_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_rbBFrame_get, _bullet.btGeneric6DofConstraintDoubleData2_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_get
    if _newclass:
        m_linearUpperLimit = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_get, _bullet.btGeneric6DofConstraintDoubleData2_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_get
    if _newclass:
        m_linearLowerLimit = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_get, _bullet.btGeneric6DofConstraintDoubleData2_m_linearLowerLimit_set)
    __swig_setmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_get
    if _newclass:
        m_angularUpperLimit = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_get, _bullet.btGeneric6DofConstraintDoubleData2_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = _bullet.btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_get
    if _newclass:
        m_angularLowerLimit = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_get, _bullet.btGeneric6DofConstraintDoubleData2_m_angularLowerLimit_set)
    __swig_setmethods__["m_useLinearReferenceFrameA"] = _bullet.btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_set
    __swig_getmethods__["m_useLinearReferenceFrameA"] = _bullet.btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_get
    if _newclass:
        m_useLinearReferenceFrameA = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_get, _bullet.btGeneric6DofConstraintDoubleData2_m_useLinearReferenceFrameA_set)
    __swig_setmethods__["m_useOffsetForConstraintFrame"] = _bullet.btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_set
    __swig_getmethods__["m_useOffsetForConstraintFrame"] = _bullet.btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_get
    if _newclass:
        m_useOffsetForConstraintFrame = _swig_property(_bullet.btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_get, _bullet.btGeneric6DofConstraintDoubleData2_m_useOffsetForConstraintFrame_set)

    def __init__(self):
        """__init__(btGeneric6DofConstraintDoubleData2 self) -> btGeneric6DofConstraintDoubleData2"""
        this = _bullet.new_btGeneric6DofConstraintDoubleData2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeneric6DofConstraintDoubleData2
    __del__ = lambda self: None
btGeneric6DofConstraintDoubleData2_swigregister = _bullet.btGeneric6DofConstraintDoubleData2_swigregister
btGeneric6DofConstraintDoubleData2_swigregister(btGeneric6DofConstraintDoubleData2)

btGeneric6DofSpringConstraintDataName = _bullet.btGeneric6DofSpringConstraintDataName
class btGeneric6DofSpringConstraint(btGeneric6DofConstraint):
    """Proxy of C++ btGeneric6DofSpringConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btGeneric6DofConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpringConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpringConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btGeneric6DofSpringConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & frameInA, btTransform const & frameInB, bool useLinearReferenceFrameA) -> btGeneric6DofSpringConstraint
        __init__(btGeneric6DofSpringConstraint self, btRigidBody rbB, btTransform const & frameInB, bool useLinearReferenceFrameB) -> btGeneric6DofSpringConstraint
        """
        this = _bullet.new_btGeneric6DofSpringConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def enableSpring(self, index, onOff):
        """enableSpring(btGeneric6DofSpringConstraint self, int index, bool onOff)"""
        return _bullet.btGeneric6DofSpringConstraint_enableSpring(self, index, onOff)


    def setStiffness(self, index, stiffness):
        """setStiffness(btGeneric6DofSpringConstraint self, int index, btScalar stiffness)"""
        return _bullet.btGeneric6DofSpringConstraint_setStiffness(self, index, stiffness)


    def setDamping(self, index, damping):
        """setDamping(btGeneric6DofSpringConstraint self, int index, btScalar damping)"""
        return _bullet.btGeneric6DofSpringConstraint_setDamping(self, index, damping)


    def setEquilibriumPoint(self, *args):
        """
        setEquilibriumPoint(btGeneric6DofSpringConstraint self)
        setEquilibriumPoint(btGeneric6DofSpringConstraint self, int index)
        setEquilibriumPoint(btGeneric6DofSpringConstraint self, int index, btScalar val)
        """
        return _bullet.btGeneric6DofSpringConstraint_setEquilibriumPoint(self, *args)


    def isSpringEnabled(self, index):
        """isSpringEnabled(btGeneric6DofSpringConstraint self, int index) -> bool"""
        return _bullet.btGeneric6DofSpringConstraint_isSpringEnabled(self, index)


    def getStiffness(self, index):
        """getStiffness(btGeneric6DofSpringConstraint self, int index) -> btScalar"""
        return _bullet.btGeneric6DofSpringConstraint_getStiffness(self, index)


    def getDamping(self, index):
        """getDamping(btGeneric6DofSpringConstraint self, int index) -> btScalar"""
        return _bullet.btGeneric6DofSpringConstraint_getDamping(self, index)


    def getEquilibriumPoint(self, index):
        """getEquilibriumPoint(btGeneric6DofSpringConstraint self, int index) -> btScalar"""
        return _bullet.btGeneric6DofSpringConstraint_getEquilibriumPoint(self, index)


    def setAxis(self, axis1, axis2):
        """setAxis(btGeneric6DofSpringConstraint self, btVector3 const & axis1, btVector3 const & axis2)"""
        return _bullet.btGeneric6DofSpringConstraint_setAxis(self, axis1, axis2)

    __swig_destroy__ = _bullet.delete_btGeneric6DofSpringConstraint
    __del__ = lambda self: None
btGeneric6DofSpringConstraint_swigregister = _bullet.btGeneric6DofSpringConstraint_swigregister
btGeneric6DofSpringConstraint_swigregister(btGeneric6DofSpringConstraint)

class btGeneric6DofSpringConstraintData(_object):
    """Proxy of C++ btGeneric6DofSpringConstraintData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpringConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpringConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_6dofData"] = _bullet.btGeneric6DofSpringConstraintData_m_6dofData_set
    __swig_getmethods__["m_6dofData"] = _bullet.btGeneric6DofSpringConstraintData_m_6dofData_get
    if _newclass:
        m_6dofData = _swig_property(_bullet.btGeneric6DofSpringConstraintData_m_6dofData_get, _bullet.btGeneric6DofSpringConstraintData_m_6dofData_set)
    __swig_setmethods__["m_springEnabled"] = _bullet.btGeneric6DofSpringConstraintData_m_springEnabled_set
    __swig_getmethods__["m_springEnabled"] = _bullet.btGeneric6DofSpringConstraintData_m_springEnabled_get
    if _newclass:
        m_springEnabled = _swig_property(_bullet.btGeneric6DofSpringConstraintData_m_springEnabled_get, _bullet.btGeneric6DofSpringConstraintData_m_springEnabled_set)
    __swig_setmethods__["m_equilibriumPoint"] = _bullet.btGeneric6DofSpringConstraintData_m_equilibriumPoint_set
    __swig_getmethods__["m_equilibriumPoint"] = _bullet.btGeneric6DofSpringConstraintData_m_equilibriumPoint_get
    if _newclass:
        m_equilibriumPoint = _swig_property(_bullet.btGeneric6DofSpringConstraintData_m_equilibriumPoint_get, _bullet.btGeneric6DofSpringConstraintData_m_equilibriumPoint_set)
    __swig_setmethods__["m_springStiffness"] = _bullet.btGeneric6DofSpringConstraintData_m_springStiffness_set
    __swig_getmethods__["m_springStiffness"] = _bullet.btGeneric6DofSpringConstraintData_m_springStiffness_get
    if _newclass:
        m_springStiffness = _swig_property(_bullet.btGeneric6DofSpringConstraintData_m_springStiffness_get, _bullet.btGeneric6DofSpringConstraintData_m_springStiffness_set)
    __swig_setmethods__["m_springDamping"] = _bullet.btGeneric6DofSpringConstraintData_m_springDamping_set
    __swig_getmethods__["m_springDamping"] = _bullet.btGeneric6DofSpringConstraintData_m_springDamping_get
    if _newclass:
        m_springDamping = _swig_property(_bullet.btGeneric6DofSpringConstraintData_m_springDamping_get, _bullet.btGeneric6DofSpringConstraintData_m_springDamping_set)

    def __init__(self):
        """__init__(btGeneric6DofSpringConstraintData self) -> btGeneric6DofSpringConstraintData"""
        this = _bullet.new_btGeneric6DofSpringConstraintData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeneric6DofSpringConstraintData
    __del__ = lambda self: None
btGeneric6DofSpringConstraintData_swigregister = _bullet.btGeneric6DofSpringConstraintData_swigregister
btGeneric6DofSpringConstraintData_swigregister(btGeneric6DofSpringConstraintData)

class btGeneric6DofSpringConstraintDoubleData2(_object):
    """Proxy of C++ btGeneric6DofSpringConstraintDoubleData2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeneric6DofSpringConstraintDoubleData2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeneric6DofSpringConstraintDoubleData2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_6dofData"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_6dofData_set
    __swig_getmethods__["m_6dofData"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_6dofData_get
    if _newclass:
        m_6dofData = _swig_property(_bullet.btGeneric6DofSpringConstraintDoubleData2_m_6dofData_get, _bullet.btGeneric6DofSpringConstraintDoubleData2_m_6dofData_set)
    __swig_setmethods__["m_springEnabled"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_set
    __swig_getmethods__["m_springEnabled"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_get
    if _newclass:
        m_springEnabled = _swig_property(_bullet.btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_get, _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springEnabled_set)
    __swig_setmethods__["m_equilibriumPoint"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_set
    __swig_getmethods__["m_equilibriumPoint"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_get
    if _newclass:
        m_equilibriumPoint = _swig_property(_bullet.btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_get, _bullet.btGeneric6DofSpringConstraintDoubleData2_m_equilibriumPoint_set)
    __swig_setmethods__["m_springStiffness"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_set
    __swig_getmethods__["m_springStiffness"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_get
    if _newclass:
        m_springStiffness = _swig_property(_bullet.btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_get, _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springStiffness_set)
    __swig_setmethods__["m_springDamping"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springDamping_set
    __swig_getmethods__["m_springDamping"] = _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springDamping_get
    if _newclass:
        m_springDamping = _swig_property(_bullet.btGeneric6DofSpringConstraintDoubleData2_m_springDamping_get, _bullet.btGeneric6DofSpringConstraintDoubleData2_m_springDamping_set)

    def __init__(self):
        """__init__(btGeneric6DofSpringConstraintDoubleData2 self) -> btGeneric6DofSpringConstraintDoubleData2"""
        this = _bullet.new_btGeneric6DofSpringConstraintDoubleData2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeneric6DofSpringConstraintDoubleData2
    __del__ = lambda self: None
btGeneric6DofSpringConstraintDoubleData2_swigregister = _bullet.btGeneric6DofSpringConstraintDoubleData2_swigregister
btGeneric6DofSpringConstraintDoubleData2_swigregister(btGeneric6DofSpringConstraintDoubleData2)

class btHinge2Constraint(btGeneric6DofSpring2Constraint):
    """Proxy of C++ btHinge2Constraint class."""

    __swig_setmethods__ = {}
    for _s in [btGeneric6DofSpring2Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHinge2Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofSpring2Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHinge2Constraint, name)
    __repr__ = _swig_repr

    def __init__(self, rbA, rbB, anchor, axis1, axis2):
        """__init__(btHinge2Constraint self, btRigidBody rbA, btRigidBody rbB, btVector3 & anchor, btVector3 & axis1, btVector3 & axis2) -> btHinge2Constraint"""
        this = _bullet.new_btHinge2Constraint(rbA, rbB, anchor, axis1, axis2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getAnchor(self):
        """getAnchor(btHinge2Constraint self) -> btVector3 const &"""
        return _bullet.btHinge2Constraint_getAnchor(self)


    def getAnchor2(self):
        """getAnchor2(btHinge2Constraint self) -> btVector3 const &"""
        return _bullet.btHinge2Constraint_getAnchor2(self)


    def getAxis1(self):
        """getAxis1(btHinge2Constraint self) -> btVector3 const &"""
        return _bullet.btHinge2Constraint_getAxis1(self)


    def getAxis2(self):
        """getAxis2(btHinge2Constraint self) -> btVector3 const &"""
        return _bullet.btHinge2Constraint_getAxis2(self)


    def getAngle1(self):
        """getAngle1(btHinge2Constraint self) -> btScalar"""
        return _bullet.btHinge2Constraint_getAngle1(self)


    def getAngle2(self):
        """getAngle2(btHinge2Constraint self) -> btScalar"""
        return _bullet.btHinge2Constraint_getAngle2(self)


    def setUpperLimit(self, ang1max):
        """setUpperLimit(btHinge2Constraint self, btScalar ang1max)"""
        return _bullet.btHinge2Constraint_setUpperLimit(self, ang1max)


    def setLowerLimit(self, ang1min):
        """setLowerLimit(btHinge2Constraint self, btScalar ang1min)"""
        return _bullet.btHinge2Constraint_setLowerLimit(self, ang1min)

    __swig_destroy__ = _bullet.delete_btHinge2Constraint
    __del__ = lambda self: None
btHinge2Constraint_swigregister = _bullet.btHinge2Constraint_swigregister
btHinge2Constraint_swigregister(btHinge2Constraint)

_BT_USE_CENTER_LIMIT_ = _bullet._BT_USE_CENTER_LIMIT_
btHingeConstraintDataName = _bullet.btHingeConstraintDataName
BT_HINGE_FLAGS_CFM_STOP = _bullet.BT_HINGE_FLAGS_CFM_STOP
BT_HINGE_FLAGS_ERP_STOP = _bullet.BT_HINGE_FLAGS_ERP_STOP
BT_HINGE_FLAGS_CFM_NORM = _bullet.BT_HINGE_FLAGS_CFM_NORM
BT_HINGE_FLAGS_ERP_NORM = _bullet.BT_HINGE_FLAGS_ERP_NORM
class btHingeConstraint(btTypedConstraint):
    """Proxy of C++ btHingeConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btHingeConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & pivotInA, btVector3 const & pivotInB, btVector3 const & axisInA, btVector3 const & axisInB, bool useReferenceFrameA=False) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & pivotInA, btVector3 const & pivotInB, btVector3 const & axisInA, btVector3 const & axisInB) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btVector3 const & pivotInA, btVector3 const & axisInA, bool useReferenceFrameA=False) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btVector3 const & pivotInA, btVector3 const & axisInA) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & rbAFrame, btTransform const & rbBFrame, bool useReferenceFrameA=False) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & rbAFrame, btTransform const & rbBFrame) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btTransform const & rbAFrame, bool useReferenceFrameA=False) -> btHingeConstraint
        __init__(btHingeConstraint self, btRigidBody rbA, btTransform const & rbAFrame) -> btHingeConstraint
        """
        this = _bullet.new_btHingeConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getInfo1NonVirtual(self, info):
        """getInfo1NonVirtual(btHingeConstraint self, btTypedConstraint::btConstraintInfo1 * info)"""
        return _bullet.btHingeConstraint_getInfo1NonVirtual(self, info)


    def getInfo2NonVirtual(self, info, transA, transB, angVelA, angVelB):
        """getInfo2NonVirtual(btHingeConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & transA, btTransform const & transB, btVector3 const & angVelA, btVector3 const & angVelB)"""
        return _bullet.btHingeConstraint_getInfo2NonVirtual(self, info, transA, transB, angVelA, angVelB)


    def getInfo2Internal(self, info, transA, transB, angVelA, angVelB):
        """getInfo2Internal(btHingeConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & transA, btTransform const & transB, btVector3 const & angVelA, btVector3 const & angVelB)"""
        return _bullet.btHingeConstraint_getInfo2Internal(self, info, transA, transB, angVelA, angVelB)


    def getInfo2InternalUsingFrameOffset(self, info, transA, transB, angVelA, angVelB):
        """getInfo2InternalUsingFrameOffset(btHingeConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & transA, btTransform const & transB, btVector3 const & angVelA, btVector3 const & angVelB)"""
        return _bullet.btHingeConstraint_getInfo2InternalUsingFrameOffset(self, info, transA, transB, angVelA, angVelB)


    def updateRHS(self, timeStep):
        """updateRHS(btHingeConstraint self, btScalar timeStep)"""
        return _bullet.btHingeConstraint_updateRHS(self, timeStep)


    def getRigidBodyA(self, *args):
        """
        getRigidBodyA(btHingeConstraint self) -> btRigidBody
        getRigidBodyA(btHingeConstraint self) -> btRigidBody
        """
        return _bullet.btHingeConstraint_getRigidBodyA(self, *args)


    def getRigidBodyB(self, *args):
        """
        getRigidBodyB(btHingeConstraint self) -> btRigidBody
        getRigidBodyB(btHingeConstraint self) -> btRigidBody
        """
        return _bullet.btHingeConstraint_getRigidBodyB(self, *args)


    def getFrameOffsetA(self):
        """getFrameOffsetA(btHingeConstraint self) -> btTransform &"""
        return _bullet.btHingeConstraint_getFrameOffsetA(self)


    def getFrameOffsetB(self):
        """getFrameOffsetB(btHingeConstraint self) -> btTransform &"""
        return _bullet.btHingeConstraint_getFrameOffsetB(self)


    def setFrames(self, frameA, frameB):
        """setFrames(btHingeConstraint self, btTransform const & frameA, btTransform const & frameB)"""
        return _bullet.btHingeConstraint_setFrames(self, frameA, frameB)


    def setAngularOnly(self, angularOnly):
        """setAngularOnly(btHingeConstraint self, bool angularOnly)"""
        return _bullet.btHingeConstraint_setAngularOnly(self, angularOnly)


    def enableAngularMotor(self, enableMotor, targetVelocity, maxMotorImpulse):
        """enableAngularMotor(btHingeConstraint self, bool enableMotor, btScalar targetVelocity, btScalar maxMotorImpulse)"""
        return _bullet.btHingeConstraint_enableAngularMotor(self, enableMotor, targetVelocity, maxMotorImpulse)


    def enableMotor(self, enableMotor):
        """enableMotor(btHingeConstraint self, bool enableMotor)"""
        return _bullet.btHingeConstraint_enableMotor(self, enableMotor)


    def setMaxMotorImpulse(self, maxMotorImpulse):
        """setMaxMotorImpulse(btHingeConstraint self, btScalar maxMotorImpulse)"""
        return _bullet.btHingeConstraint_setMaxMotorImpulse(self, maxMotorImpulse)


    def setMotorTargetVelocity(self, motorTargetVelocity):
        """setMotorTargetVelocity(btHingeConstraint self, btScalar motorTargetVelocity)"""
        return _bullet.btHingeConstraint_setMotorTargetVelocity(self, motorTargetVelocity)


    def setMotorTarget(self, *args):
        """
        setMotorTarget(btHingeConstraint self, btQuaternion const & qAinB, btScalar dt)
        setMotorTarget(btHingeConstraint self, btScalar targetAngle, btScalar dt)
        """
        return _bullet.btHingeConstraint_setMotorTarget(self, *args)


    def setLimit(self, low, high, _softness=0.9, _biasFactor=0.3, _relaxationFactor=1.0):
        """
        setLimit(btHingeConstraint self, btScalar low, btScalar high, btScalar _softness=0.9, btScalar _biasFactor=0.3, btScalar _relaxationFactor=1.0)
        setLimit(btHingeConstraint self, btScalar low, btScalar high, btScalar _softness=0.9, btScalar _biasFactor=0.3)
        setLimit(btHingeConstraint self, btScalar low, btScalar high, btScalar _softness=0.9)
        setLimit(btHingeConstraint self, btScalar low, btScalar high)
        """
        return _bullet.btHingeConstraint_setLimit(self, low, high, _softness, _biasFactor, _relaxationFactor)


    def getLimitSoftness(self):
        """getLimitSoftness(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getLimitSoftness(self)


    def getLimitBiasFactor(self):
        """getLimitBiasFactor(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getLimitBiasFactor(self)


    def getLimitRelaxationFactor(self):
        """getLimitRelaxationFactor(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getLimitRelaxationFactor(self)


    def setAxis(self, axisInA):
        """setAxis(btHingeConstraint self, btVector3 & axisInA)"""
        return _bullet.btHingeConstraint_setAxis(self, axisInA)


    def hasLimit(self):
        """hasLimit(btHingeConstraint self) -> bool"""
        return _bullet.btHingeConstraint_hasLimit(self)


    def getLowerLimit(self):
        """getLowerLimit(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getLowerLimit(self)


    def getUpperLimit(self):
        """getUpperLimit(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getUpperLimit(self)


    def getHingeAngle(self, *args):
        """
        getHingeAngle(btHingeConstraint self) -> btScalar
        getHingeAngle(btHingeConstraint self, btTransform const & transA, btTransform const & transB) -> btScalar
        """
        return _bullet.btHingeConstraint_getHingeAngle(self, *args)


    def testLimit(self, transA, transB):
        """testLimit(btHingeConstraint self, btTransform const & transA, btTransform const & transB)"""
        return _bullet.btHingeConstraint_testLimit(self, transA, transB)


    def getAFrame(self, *args):
        """
        getAFrame(btHingeConstraint self) -> btTransform const
        getAFrame(btHingeConstraint self) -> btTransform &
        """
        return _bullet.btHingeConstraint_getAFrame(self, *args)


    def getBFrame(self, *args):
        """
        getBFrame(btHingeConstraint self) -> btTransform const
        getBFrame(btHingeConstraint self) -> btTransform &
        """
        return _bullet.btHingeConstraint_getBFrame(self, *args)


    def getSolveLimit(self):
        """getSolveLimit(btHingeConstraint self) -> int"""
        return _bullet.btHingeConstraint_getSolveLimit(self)


    def getLimitSign(self):
        """getLimitSign(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getLimitSign(self)


    def getAngularOnly(self):
        """getAngularOnly(btHingeConstraint self) -> bool"""
        return _bullet.btHingeConstraint_getAngularOnly(self)


    def getEnableAngularMotor(self):
        """getEnableAngularMotor(btHingeConstraint self) -> bool"""
        return _bullet.btHingeConstraint_getEnableAngularMotor(self)


    def getMotorTargetVelosity(self):
        """getMotorTargetVelosity(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getMotorTargetVelosity(self)


    def getMaxMotorImpulse(self):
        """getMaxMotorImpulse(btHingeConstraint self) -> btScalar"""
        return _bullet.btHingeConstraint_getMaxMotorImpulse(self)


    def getUseFrameOffset(self):
        """getUseFrameOffset(btHingeConstraint self) -> bool"""
        return _bullet.btHingeConstraint_getUseFrameOffset(self)


    def setUseFrameOffset(self, frameOffsetOnOff):
        """setUseFrameOffset(btHingeConstraint self, bool frameOffsetOnOff)"""
        return _bullet.btHingeConstraint_setUseFrameOffset(self, frameOffsetOnOff)


    def getUseReferenceFrameA(self):
        """getUseReferenceFrameA(btHingeConstraint self) -> bool"""
        return _bullet.btHingeConstraint_getUseReferenceFrameA(self)


    def setUseReferenceFrameA(self, useReferenceFrameA):
        """setUseReferenceFrameA(btHingeConstraint self, bool useReferenceFrameA)"""
        return _bullet.btHingeConstraint_setUseReferenceFrameA(self, useReferenceFrameA)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btHingeConstraint self, int num, btScalar value, int axis=-1)
        setParam(btHingeConstraint self, int num, btScalar value)
        """
        return _bullet.btHingeConstraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btHingeConstraint self, int num, int axis=-1) -> btScalar
        getParam(btHingeConstraint self, int num) -> btScalar
        """
        return _bullet.btHingeConstraint_getParam(self, num, axis)


    def getFlags(self):
        """getFlags(btHingeConstraint self) -> int"""
        return _bullet.btHingeConstraint_getFlags(self)

    __swig_destroy__ = _bullet.delete_btHingeConstraint
    __del__ = lambda self: None
btHingeConstraint_swigregister = _bullet.btHingeConstraint_swigregister
btHingeConstraint_swigregister(btHingeConstraint)

class btHingeConstraintDoubleData(_object):
    """Proxy of C++ btHingeConstraintDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btHingeConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btHingeConstraintDoubleData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btHingeConstraintDoubleData_m_typeConstraintData_get, _bullet.btHingeConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btHingeConstraintDoubleData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btHingeConstraintDoubleData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btHingeConstraintDoubleData_m_rbAFrame_get, _bullet.btHingeConstraintDoubleData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btHingeConstraintDoubleData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btHingeConstraintDoubleData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btHingeConstraintDoubleData_m_rbBFrame_get, _bullet.btHingeConstraintDoubleData_m_rbBFrame_set)
    __swig_setmethods__["m_useReferenceFrameA"] = _bullet.btHingeConstraintDoubleData_m_useReferenceFrameA_set
    __swig_getmethods__["m_useReferenceFrameA"] = _bullet.btHingeConstraintDoubleData_m_useReferenceFrameA_get
    if _newclass:
        m_useReferenceFrameA = _swig_property(_bullet.btHingeConstraintDoubleData_m_useReferenceFrameA_get, _bullet.btHingeConstraintDoubleData_m_useReferenceFrameA_set)
    __swig_setmethods__["m_angularOnly"] = _bullet.btHingeConstraintDoubleData_m_angularOnly_set
    __swig_getmethods__["m_angularOnly"] = _bullet.btHingeConstraintDoubleData_m_angularOnly_get
    if _newclass:
        m_angularOnly = _swig_property(_bullet.btHingeConstraintDoubleData_m_angularOnly_get, _bullet.btHingeConstraintDoubleData_m_angularOnly_set)
    __swig_setmethods__["m_enableAngularMotor"] = _bullet.btHingeConstraintDoubleData_m_enableAngularMotor_set
    __swig_getmethods__["m_enableAngularMotor"] = _bullet.btHingeConstraintDoubleData_m_enableAngularMotor_get
    if _newclass:
        m_enableAngularMotor = _swig_property(_bullet.btHingeConstraintDoubleData_m_enableAngularMotor_get, _bullet.btHingeConstraintDoubleData_m_enableAngularMotor_set)
    __swig_setmethods__["m_motorTargetVelocity"] = _bullet.btHingeConstraintDoubleData_m_motorTargetVelocity_set
    __swig_getmethods__["m_motorTargetVelocity"] = _bullet.btHingeConstraintDoubleData_m_motorTargetVelocity_get
    if _newclass:
        m_motorTargetVelocity = _swig_property(_bullet.btHingeConstraintDoubleData_m_motorTargetVelocity_get, _bullet.btHingeConstraintDoubleData_m_motorTargetVelocity_set)
    __swig_setmethods__["m_maxMotorImpulse"] = _bullet.btHingeConstraintDoubleData_m_maxMotorImpulse_set
    __swig_getmethods__["m_maxMotorImpulse"] = _bullet.btHingeConstraintDoubleData_m_maxMotorImpulse_get
    if _newclass:
        m_maxMotorImpulse = _swig_property(_bullet.btHingeConstraintDoubleData_m_maxMotorImpulse_get, _bullet.btHingeConstraintDoubleData_m_maxMotorImpulse_set)
    __swig_setmethods__["m_lowerLimit"] = _bullet.btHingeConstraintDoubleData_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btHingeConstraintDoubleData_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btHingeConstraintDoubleData_m_lowerLimit_get, _bullet.btHingeConstraintDoubleData_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btHingeConstraintDoubleData_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btHingeConstraintDoubleData_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btHingeConstraintDoubleData_m_upperLimit_get, _bullet.btHingeConstraintDoubleData_m_upperLimit_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btHingeConstraintDoubleData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btHingeConstraintDoubleData_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btHingeConstraintDoubleData_m_limitSoftness_get, _bullet.btHingeConstraintDoubleData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = _bullet.btHingeConstraintDoubleData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = _bullet.btHingeConstraintDoubleData_m_biasFactor_get
    if _newclass:
        m_biasFactor = _swig_property(_bullet.btHingeConstraintDoubleData_m_biasFactor_get, _bullet.btHingeConstraintDoubleData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = _bullet.btHingeConstraintDoubleData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = _bullet.btHingeConstraintDoubleData_m_relaxationFactor_get
    if _newclass:
        m_relaxationFactor = _swig_property(_bullet.btHingeConstraintDoubleData_m_relaxationFactor_get, _bullet.btHingeConstraintDoubleData_m_relaxationFactor_set)

    def __init__(self):
        """__init__(btHingeConstraintDoubleData self) -> btHingeConstraintDoubleData"""
        this = _bullet.new_btHingeConstraintDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btHingeConstraintDoubleData
    __del__ = lambda self: None
btHingeConstraintDoubleData_swigregister = _bullet.btHingeConstraintDoubleData_swigregister
btHingeConstraintDoubleData_swigregister(btHingeConstraintDoubleData)

class btHingeAccumulatedAngleConstraint(btHingeConstraint):
    """Proxy of C++ btHingeAccumulatedAngleConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btHingeConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeAccumulatedAngleConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btHingeConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeAccumulatedAngleConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & pivotInA, btVector3 const & pivotInB, btVector3 const & axisInA, btVector3 const & axisInB, bool useReferenceFrameA=False) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & pivotInA, btVector3 const & pivotInB, btVector3 const & axisInA, btVector3 const & axisInB) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btVector3 const & pivotInA, btVector3 const & axisInA, bool useReferenceFrameA=False) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btVector3 const & pivotInA, btVector3 const & axisInA) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & rbAFrame, btTransform const & rbBFrame, bool useReferenceFrameA=False) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & rbAFrame, btTransform const & rbBFrame) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btTransform const & rbAFrame, bool useReferenceFrameA=False) -> btHingeAccumulatedAngleConstraint
        __init__(btHingeAccumulatedAngleConstraint self, btRigidBody rbA, btTransform const & rbAFrame) -> btHingeAccumulatedAngleConstraint
        """
        this = _bullet.new_btHingeAccumulatedAngleConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getAccumulatedHingeAngle(self):
        """getAccumulatedHingeAngle(btHingeAccumulatedAngleConstraint self) -> btScalar"""
        return _bullet.btHingeAccumulatedAngleConstraint_getAccumulatedHingeAngle(self)


    def setAccumulatedHingeAngle(self, accAngle):
        """setAccumulatedHingeAngle(btHingeAccumulatedAngleConstraint self, btScalar accAngle)"""
        return _bullet.btHingeAccumulatedAngleConstraint_setAccumulatedHingeAngle(self, accAngle)

    __swig_destroy__ = _bullet.delete_btHingeAccumulatedAngleConstraint
    __del__ = lambda self: None
btHingeAccumulatedAngleConstraint_swigregister = _bullet.btHingeAccumulatedAngleConstraint_swigregister
btHingeAccumulatedAngleConstraint_swigregister(btHingeAccumulatedAngleConstraint)

class btHingeConstraintFloatData(_object):
    """Proxy of C++ btHingeConstraintFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraintFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraintFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btHingeConstraintFloatData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btHingeConstraintFloatData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btHingeConstraintFloatData_m_typeConstraintData_get, _bullet.btHingeConstraintFloatData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btHingeConstraintFloatData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btHingeConstraintFloatData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btHingeConstraintFloatData_m_rbAFrame_get, _bullet.btHingeConstraintFloatData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btHingeConstraintFloatData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btHingeConstraintFloatData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btHingeConstraintFloatData_m_rbBFrame_get, _bullet.btHingeConstraintFloatData_m_rbBFrame_set)
    __swig_setmethods__["m_useReferenceFrameA"] = _bullet.btHingeConstraintFloatData_m_useReferenceFrameA_set
    __swig_getmethods__["m_useReferenceFrameA"] = _bullet.btHingeConstraintFloatData_m_useReferenceFrameA_get
    if _newclass:
        m_useReferenceFrameA = _swig_property(_bullet.btHingeConstraintFloatData_m_useReferenceFrameA_get, _bullet.btHingeConstraintFloatData_m_useReferenceFrameA_set)
    __swig_setmethods__["m_angularOnly"] = _bullet.btHingeConstraintFloatData_m_angularOnly_set
    __swig_getmethods__["m_angularOnly"] = _bullet.btHingeConstraintFloatData_m_angularOnly_get
    if _newclass:
        m_angularOnly = _swig_property(_bullet.btHingeConstraintFloatData_m_angularOnly_get, _bullet.btHingeConstraintFloatData_m_angularOnly_set)
    __swig_setmethods__["m_enableAngularMotor"] = _bullet.btHingeConstraintFloatData_m_enableAngularMotor_set
    __swig_getmethods__["m_enableAngularMotor"] = _bullet.btHingeConstraintFloatData_m_enableAngularMotor_get
    if _newclass:
        m_enableAngularMotor = _swig_property(_bullet.btHingeConstraintFloatData_m_enableAngularMotor_get, _bullet.btHingeConstraintFloatData_m_enableAngularMotor_set)
    __swig_setmethods__["m_motorTargetVelocity"] = _bullet.btHingeConstraintFloatData_m_motorTargetVelocity_set
    __swig_getmethods__["m_motorTargetVelocity"] = _bullet.btHingeConstraintFloatData_m_motorTargetVelocity_get
    if _newclass:
        m_motorTargetVelocity = _swig_property(_bullet.btHingeConstraintFloatData_m_motorTargetVelocity_get, _bullet.btHingeConstraintFloatData_m_motorTargetVelocity_set)
    __swig_setmethods__["m_maxMotorImpulse"] = _bullet.btHingeConstraintFloatData_m_maxMotorImpulse_set
    __swig_getmethods__["m_maxMotorImpulse"] = _bullet.btHingeConstraintFloatData_m_maxMotorImpulse_get
    if _newclass:
        m_maxMotorImpulse = _swig_property(_bullet.btHingeConstraintFloatData_m_maxMotorImpulse_get, _bullet.btHingeConstraintFloatData_m_maxMotorImpulse_set)
    __swig_setmethods__["m_lowerLimit"] = _bullet.btHingeConstraintFloatData_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btHingeConstraintFloatData_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btHingeConstraintFloatData_m_lowerLimit_get, _bullet.btHingeConstraintFloatData_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btHingeConstraintFloatData_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btHingeConstraintFloatData_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btHingeConstraintFloatData_m_upperLimit_get, _bullet.btHingeConstraintFloatData_m_upperLimit_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btHingeConstraintFloatData_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btHingeConstraintFloatData_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btHingeConstraintFloatData_m_limitSoftness_get, _bullet.btHingeConstraintFloatData_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = _bullet.btHingeConstraintFloatData_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = _bullet.btHingeConstraintFloatData_m_biasFactor_get
    if _newclass:
        m_biasFactor = _swig_property(_bullet.btHingeConstraintFloatData_m_biasFactor_get, _bullet.btHingeConstraintFloatData_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = _bullet.btHingeConstraintFloatData_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = _bullet.btHingeConstraintFloatData_m_relaxationFactor_get
    if _newclass:
        m_relaxationFactor = _swig_property(_bullet.btHingeConstraintFloatData_m_relaxationFactor_get, _bullet.btHingeConstraintFloatData_m_relaxationFactor_set)

    def __init__(self):
        """__init__(btHingeConstraintFloatData self) -> btHingeConstraintFloatData"""
        this = _bullet.new_btHingeConstraintFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btHingeConstraintFloatData
    __del__ = lambda self: None
btHingeConstraintFloatData_swigregister = _bullet.btHingeConstraintFloatData_swigregister
btHingeConstraintFloatData_swigregister(btHingeConstraintFloatData)

class btHingeConstraintDoubleData2(_object):
    """Proxy of C++ btHingeConstraintDoubleData2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btHingeConstraintDoubleData2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btHingeConstraintDoubleData2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btHingeConstraintDoubleData2_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btHingeConstraintDoubleData2_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btHingeConstraintDoubleData2_m_typeConstraintData_get, _bullet.btHingeConstraintDoubleData2_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btHingeConstraintDoubleData2_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btHingeConstraintDoubleData2_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btHingeConstraintDoubleData2_m_rbAFrame_get, _bullet.btHingeConstraintDoubleData2_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btHingeConstraintDoubleData2_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btHingeConstraintDoubleData2_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btHingeConstraintDoubleData2_m_rbBFrame_get, _bullet.btHingeConstraintDoubleData2_m_rbBFrame_set)
    __swig_setmethods__["m_useReferenceFrameA"] = _bullet.btHingeConstraintDoubleData2_m_useReferenceFrameA_set
    __swig_getmethods__["m_useReferenceFrameA"] = _bullet.btHingeConstraintDoubleData2_m_useReferenceFrameA_get
    if _newclass:
        m_useReferenceFrameA = _swig_property(_bullet.btHingeConstraintDoubleData2_m_useReferenceFrameA_get, _bullet.btHingeConstraintDoubleData2_m_useReferenceFrameA_set)
    __swig_setmethods__["m_angularOnly"] = _bullet.btHingeConstraintDoubleData2_m_angularOnly_set
    __swig_getmethods__["m_angularOnly"] = _bullet.btHingeConstraintDoubleData2_m_angularOnly_get
    if _newclass:
        m_angularOnly = _swig_property(_bullet.btHingeConstraintDoubleData2_m_angularOnly_get, _bullet.btHingeConstraintDoubleData2_m_angularOnly_set)
    __swig_setmethods__["m_enableAngularMotor"] = _bullet.btHingeConstraintDoubleData2_m_enableAngularMotor_set
    __swig_getmethods__["m_enableAngularMotor"] = _bullet.btHingeConstraintDoubleData2_m_enableAngularMotor_get
    if _newclass:
        m_enableAngularMotor = _swig_property(_bullet.btHingeConstraintDoubleData2_m_enableAngularMotor_get, _bullet.btHingeConstraintDoubleData2_m_enableAngularMotor_set)
    __swig_setmethods__["m_motorTargetVelocity"] = _bullet.btHingeConstraintDoubleData2_m_motorTargetVelocity_set
    __swig_getmethods__["m_motorTargetVelocity"] = _bullet.btHingeConstraintDoubleData2_m_motorTargetVelocity_get
    if _newclass:
        m_motorTargetVelocity = _swig_property(_bullet.btHingeConstraintDoubleData2_m_motorTargetVelocity_get, _bullet.btHingeConstraintDoubleData2_m_motorTargetVelocity_set)
    __swig_setmethods__["m_maxMotorImpulse"] = _bullet.btHingeConstraintDoubleData2_m_maxMotorImpulse_set
    __swig_getmethods__["m_maxMotorImpulse"] = _bullet.btHingeConstraintDoubleData2_m_maxMotorImpulse_get
    if _newclass:
        m_maxMotorImpulse = _swig_property(_bullet.btHingeConstraintDoubleData2_m_maxMotorImpulse_get, _bullet.btHingeConstraintDoubleData2_m_maxMotorImpulse_set)
    __swig_setmethods__["m_lowerLimit"] = _bullet.btHingeConstraintDoubleData2_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btHingeConstraintDoubleData2_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btHingeConstraintDoubleData2_m_lowerLimit_get, _bullet.btHingeConstraintDoubleData2_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btHingeConstraintDoubleData2_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btHingeConstraintDoubleData2_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btHingeConstraintDoubleData2_m_upperLimit_get, _bullet.btHingeConstraintDoubleData2_m_upperLimit_set)
    __swig_setmethods__["m_limitSoftness"] = _bullet.btHingeConstraintDoubleData2_m_limitSoftness_set
    __swig_getmethods__["m_limitSoftness"] = _bullet.btHingeConstraintDoubleData2_m_limitSoftness_get
    if _newclass:
        m_limitSoftness = _swig_property(_bullet.btHingeConstraintDoubleData2_m_limitSoftness_get, _bullet.btHingeConstraintDoubleData2_m_limitSoftness_set)
    __swig_setmethods__["m_biasFactor"] = _bullet.btHingeConstraintDoubleData2_m_biasFactor_set
    __swig_getmethods__["m_biasFactor"] = _bullet.btHingeConstraintDoubleData2_m_biasFactor_get
    if _newclass:
        m_biasFactor = _swig_property(_bullet.btHingeConstraintDoubleData2_m_biasFactor_get, _bullet.btHingeConstraintDoubleData2_m_biasFactor_set)
    __swig_setmethods__["m_relaxationFactor"] = _bullet.btHingeConstraintDoubleData2_m_relaxationFactor_set
    __swig_getmethods__["m_relaxationFactor"] = _bullet.btHingeConstraintDoubleData2_m_relaxationFactor_get
    if _newclass:
        m_relaxationFactor = _swig_property(_bullet.btHingeConstraintDoubleData2_m_relaxationFactor_get, _bullet.btHingeConstraintDoubleData2_m_relaxationFactor_set)
    __swig_setmethods__["m_padding1"] = _bullet.btHingeConstraintDoubleData2_m_padding1_set
    __swig_getmethods__["m_padding1"] = _bullet.btHingeConstraintDoubleData2_m_padding1_get
    if _newclass:
        m_padding1 = _swig_property(_bullet.btHingeConstraintDoubleData2_m_padding1_get, _bullet.btHingeConstraintDoubleData2_m_padding1_set)

    def __init__(self):
        """__init__(btHingeConstraintDoubleData2 self) -> btHingeConstraintDoubleData2"""
        this = _bullet.new_btHingeConstraintDoubleData2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btHingeConstraintDoubleData2
    __del__ = lambda self: None
btHingeConstraintDoubleData2_swigregister = _bullet.btHingeConstraintDoubleData2_swigregister
btHingeConstraintDoubleData2_swigregister(btHingeConstraintDoubleData2)

btPoint2PointConstraintDataName = _bullet.btPoint2PointConstraintDataName
class btConstraintSetting(_object):
    """Proxy of C++ btConstraintSetting class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConstraintSetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConstraintSetting, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btConstraintSetting self) -> btConstraintSetting"""
        this = _bullet.new_btConstraintSetting()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_tau"] = _bullet.btConstraintSetting_m_tau_set
    __swig_getmethods__["m_tau"] = _bullet.btConstraintSetting_m_tau_get
    if _newclass:
        m_tau = _swig_property(_bullet.btConstraintSetting_m_tau_get, _bullet.btConstraintSetting_m_tau_set)
    __swig_setmethods__["m_damping"] = _bullet.btConstraintSetting_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.btConstraintSetting_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.btConstraintSetting_m_damping_get, _bullet.btConstraintSetting_m_damping_set)
    __swig_setmethods__["m_impulseClamp"] = _bullet.btConstraintSetting_m_impulseClamp_set
    __swig_getmethods__["m_impulseClamp"] = _bullet.btConstraintSetting_m_impulseClamp_get
    if _newclass:
        m_impulseClamp = _swig_property(_bullet.btConstraintSetting_m_impulseClamp_get, _bullet.btConstraintSetting_m_impulseClamp_set)
    __swig_destroy__ = _bullet.delete_btConstraintSetting
    __del__ = lambda self: None
btConstraintSetting_swigregister = _bullet.btConstraintSetting_swigregister
btConstraintSetting_swigregister(btConstraintSetting)

BT_P2P_FLAGS_ERP = _bullet.BT_P2P_FLAGS_ERP
BT_P2P_FLAGS_CFM = _bullet.BT_P2P_FLAGS_CFM
class btPoint2PointConstraint(btTypedConstraint):
    """Proxy of C++ btPoint2PointConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_useSolveConstraintObsolete"] = _bullet.btPoint2PointConstraint_m_useSolveConstraintObsolete_set
    __swig_getmethods__["m_useSolveConstraintObsolete"] = _bullet.btPoint2PointConstraint_m_useSolveConstraintObsolete_get
    if _newclass:
        m_useSolveConstraintObsolete = _swig_property(_bullet.btPoint2PointConstraint_m_useSolveConstraintObsolete_get, _bullet.btPoint2PointConstraint_m_useSolveConstraintObsolete_set)
    __swig_setmethods__["m_setting"] = _bullet.btPoint2PointConstraint_m_setting_set
    __swig_getmethods__["m_setting"] = _bullet.btPoint2PointConstraint_m_setting_get
    if _newclass:
        m_setting = _swig_property(_bullet.btPoint2PointConstraint_m_setting_get, _bullet.btPoint2PointConstraint_m_setting_set)

    def __init__(self, *args):
        """
        __init__(btPoint2PointConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & pivotInA, btVector3 const & pivotInB) -> btPoint2PointConstraint
        __init__(btPoint2PointConstraint self, btRigidBody rbA, btVector3 const & pivotInA) -> btPoint2PointConstraint
        """
        this = _bullet.new_btPoint2PointConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getInfo1NonVirtual(self, info):
        """getInfo1NonVirtual(btPoint2PointConstraint self, btTypedConstraint::btConstraintInfo1 * info)"""
        return _bullet.btPoint2PointConstraint_getInfo1NonVirtual(self, info)


    def getInfo2NonVirtual(self, info, body0_trans, body1_trans):
        """getInfo2NonVirtual(btPoint2PointConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & body0_trans, btTransform const & body1_trans)"""
        return _bullet.btPoint2PointConstraint_getInfo2NonVirtual(self, info, body0_trans, body1_trans)


    def updateRHS(self, timeStep):
        """updateRHS(btPoint2PointConstraint self, btScalar timeStep)"""
        return _bullet.btPoint2PointConstraint_updateRHS(self, timeStep)


    def setPivotA(self, pivotA):
        """setPivotA(btPoint2PointConstraint self, btVector3 const & pivotA)"""
        return _bullet.btPoint2PointConstraint_setPivotA(self, pivotA)


    def setPivotB(self, pivotB):
        """setPivotB(btPoint2PointConstraint self, btVector3 const & pivotB)"""
        return _bullet.btPoint2PointConstraint_setPivotB(self, pivotB)


    def getPivotInA(self):
        """getPivotInA(btPoint2PointConstraint self) -> btVector3 const &"""
        return _bullet.btPoint2PointConstraint_getPivotInA(self)


    def getPivotInB(self):
        """getPivotInB(btPoint2PointConstraint self) -> btVector3 const &"""
        return _bullet.btPoint2PointConstraint_getPivotInB(self)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btPoint2PointConstraint self, int num, btScalar value, int axis=-1)
        setParam(btPoint2PointConstraint self, int num, btScalar value)
        """
        return _bullet.btPoint2PointConstraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btPoint2PointConstraint self, int num, int axis=-1) -> btScalar
        getParam(btPoint2PointConstraint self, int num) -> btScalar
        """
        return _bullet.btPoint2PointConstraint_getParam(self, num, axis)


    def getFlags(self):
        """getFlags(btPoint2PointConstraint self) -> int"""
        return _bullet.btPoint2PointConstraint_getFlags(self)

    __swig_destroy__ = _bullet.delete_btPoint2PointConstraint
    __del__ = lambda self: None
btPoint2PointConstraint_swigregister = _bullet.btPoint2PointConstraint_swigregister
btPoint2PointConstraint_swigregister(btPoint2PointConstraint)

class btPoint2PointConstraintFloatData(_object):
    """Proxy of C++ btPoint2PointConstraintFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraintFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraintFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btPoint2PointConstraintFloatData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btPoint2PointConstraintFloatData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btPoint2PointConstraintFloatData_m_typeConstraintData_get, _bullet.btPoint2PointConstraintFloatData_m_typeConstraintData_set)
    __swig_setmethods__["m_pivotInA"] = _bullet.btPoint2PointConstraintFloatData_m_pivotInA_set
    __swig_getmethods__["m_pivotInA"] = _bullet.btPoint2PointConstraintFloatData_m_pivotInA_get
    if _newclass:
        m_pivotInA = _swig_property(_bullet.btPoint2PointConstraintFloatData_m_pivotInA_get, _bullet.btPoint2PointConstraintFloatData_m_pivotInA_set)
    __swig_setmethods__["m_pivotInB"] = _bullet.btPoint2PointConstraintFloatData_m_pivotInB_set
    __swig_getmethods__["m_pivotInB"] = _bullet.btPoint2PointConstraintFloatData_m_pivotInB_get
    if _newclass:
        m_pivotInB = _swig_property(_bullet.btPoint2PointConstraintFloatData_m_pivotInB_get, _bullet.btPoint2PointConstraintFloatData_m_pivotInB_set)

    def __init__(self):
        """__init__(btPoint2PointConstraintFloatData self) -> btPoint2PointConstraintFloatData"""
        this = _bullet.new_btPoint2PointConstraintFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPoint2PointConstraintFloatData
    __del__ = lambda self: None
btPoint2PointConstraintFloatData_swigregister = _bullet.btPoint2PointConstraintFloatData_swigregister
btPoint2PointConstraintFloatData_swigregister(btPoint2PointConstraintFloatData)

class btPoint2PointConstraintDoubleData2(_object):
    """Proxy of C++ btPoint2PointConstraintDoubleData2 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraintDoubleData2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraintDoubleData2, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btPoint2PointConstraintDoubleData2_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btPoint2PointConstraintDoubleData2_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btPoint2PointConstraintDoubleData2_m_typeConstraintData_get, _bullet.btPoint2PointConstraintDoubleData2_m_typeConstraintData_set)
    __swig_setmethods__["m_pivotInA"] = _bullet.btPoint2PointConstraintDoubleData2_m_pivotInA_set
    __swig_getmethods__["m_pivotInA"] = _bullet.btPoint2PointConstraintDoubleData2_m_pivotInA_get
    if _newclass:
        m_pivotInA = _swig_property(_bullet.btPoint2PointConstraintDoubleData2_m_pivotInA_get, _bullet.btPoint2PointConstraintDoubleData2_m_pivotInA_set)
    __swig_setmethods__["m_pivotInB"] = _bullet.btPoint2PointConstraintDoubleData2_m_pivotInB_set
    __swig_getmethods__["m_pivotInB"] = _bullet.btPoint2PointConstraintDoubleData2_m_pivotInB_get
    if _newclass:
        m_pivotInB = _swig_property(_bullet.btPoint2PointConstraintDoubleData2_m_pivotInB_get, _bullet.btPoint2PointConstraintDoubleData2_m_pivotInB_set)

    def __init__(self):
        """__init__(btPoint2PointConstraintDoubleData2 self) -> btPoint2PointConstraintDoubleData2"""
        this = _bullet.new_btPoint2PointConstraintDoubleData2()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPoint2PointConstraintDoubleData2
    __del__ = lambda self: None
btPoint2PointConstraintDoubleData2_swigregister = _bullet.btPoint2PointConstraintDoubleData2_swigregister
btPoint2PointConstraintDoubleData2_swigregister(btPoint2PointConstraintDoubleData2)

class btPoint2PointConstraintDoubleData(_object):
    """Proxy of C++ btPoint2PointConstraintDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoint2PointConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPoint2PointConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btPoint2PointConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btPoint2PointConstraintDoubleData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btPoint2PointConstraintDoubleData_m_typeConstraintData_get, _bullet.btPoint2PointConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_pivotInA"] = _bullet.btPoint2PointConstraintDoubleData_m_pivotInA_set
    __swig_getmethods__["m_pivotInA"] = _bullet.btPoint2PointConstraintDoubleData_m_pivotInA_get
    if _newclass:
        m_pivotInA = _swig_property(_bullet.btPoint2PointConstraintDoubleData_m_pivotInA_get, _bullet.btPoint2PointConstraintDoubleData_m_pivotInA_set)
    __swig_setmethods__["m_pivotInB"] = _bullet.btPoint2PointConstraintDoubleData_m_pivotInB_set
    __swig_getmethods__["m_pivotInB"] = _bullet.btPoint2PointConstraintDoubleData_m_pivotInB_get
    if _newclass:
        m_pivotInB = _swig_property(_bullet.btPoint2PointConstraintDoubleData_m_pivotInB_get, _bullet.btPoint2PointConstraintDoubleData_m_pivotInB_set)

    def __init__(self):
        """__init__(btPoint2PointConstraintDoubleData self) -> btPoint2PointConstraintDoubleData"""
        this = _bullet.new_btPoint2PointConstraintDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPoint2PointConstraintDoubleData
    __del__ = lambda self: None
btPoint2PointConstraintDoubleData_swigregister = _bullet.btPoint2PointConstraintDoubleData_swigregister
btPoint2PointConstraintDoubleData_swigregister(btPoint2PointConstraintDoubleData)

btSliderConstraintDataName = _bullet.btSliderConstraintDataName
BT_SLIDER_FLAGS_CFM_DIRLIN = _bullet.BT_SLIDER_FLAGS_CFM_DIRLIN
BT_SLIDER_FLAGS_ERP_DIRLIN = _bullet.BT_SLIDER_FLAGS_ERP_DIRLIN
BT_SLIDER_FLAGS_CFM_DIRANG = _bullet.BT_SLIDER_FLAGS_CFM_DIRANG
BT_SLIDER_FLAGS_ERP_DIRANG = _bullet.BT_SLIDER_FLAGS_ERP_DIRANG
BT_SLIDER_FLAGS_CFM_ORTLIN = _bullet.BT_SLIDER_FLAGS_CFM_ORTLIN
BT_SLIDER_FLAGS_ERP_ORTLIN = _bullet.BT_SLIDER_FLAGS_ERP_ORTLIN
BT_SLIDER_FLAGS_CFM_ORTANG = _bullet.BT_SLIDER_FLAGS_CFM_ORTANG
BT_SLIDER_FLAGS_ERP_ORTANG = _bullet.BT_SLIDER_FLAGS_ERP_ORTANG
BT_SLIDER_FLAGS_CFM_LIMLIN = _bullet.BT_SLIDER_FLAGS_CFM_LIMLIN
BT_SLIDER_FLAGS_ERP_LIMLIN = _bullet.BT_SLIDER_FLAGS_ERP_LIMLIN
BT_SLIDER_FLAGS_CFM_LIMANG = _bullet.BT_SLIDER_FLAGS_CFM_LIMANG
BT_SLIDER_FLAGS_ERP_LIMANG = _bullet.BT_SLIDER_FLAGS_ERP_LIMANG
class btSliderConstraint(btTypedConstraint):
    """Proxy of C++ btSliderConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSliderConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btTypedConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSliderConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btSliderConstraint self, btRigidBody rbA, btRigidBody rbB, btTransform const & frameInA, btTransform const & frameInB, bool useLinearReferenceFrameA) -> btSliderConstraint
        __init__(btSliderConstraint self, btRigidBody rbB, btTransform const & frameInB, bool useLinearReferenceFrameA) -> btSliderConstraint
        """
        this = _bullet.new_btSliderConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getInfo1NonVirtual(self, info):
        """getInfo1NonVirtual(btSliderConstraint self, btTypedConstraint::btConstraintInfo1 * info)"""
        return _bullet.btSliderConstraint_getInfo1NonVirtual(self, info)


    def getInfo2NonVirtual(self, info, transA, transB, linVelA, linVelB, rbAinvMass, rbBinvMass):
        """getInfo2NonVirtual(btSliderConstraint self, btTypedConstraint::btConstraintInfo2 * info, btTransform const & transA, btTransform const & transB, btVector3 const & linVelA, btVector3 const & linVelB, btScalar rbAinvMass, btScalar rbBinvMass)"""
        return _bullet.btSliderConstraint_getInfo2NonVirtual(self, info, transA, transB, linVelA, linVelB, rbAinvMass, rbBinvMass)


    def getRigidBodyA(self):
        """getRigidBodyA(btSliderConstraint self) -> btRigidBody"""
        return _bullet.btSliderConstraint_getRigidBodyA(self)


    def getRigidBodyB(self):
        """getRigidBodyB(btSliderConstraint self) -> btRigidBody"""
        return _bullet.btSliderConstraint_getRigidBodyB(self)


    def getCalculatedTransformA(self):
        """getCalculatedTransformA(btSliderConstraint self) -> btTransform const &"""
        return _bullet.btSliderConstraint_getCalculatedTransformA(self)


    def getCalculatedTransformB(self):
        """getCalculatedTransformB(btSliderConstraint self) -> btTransform const &"""
        return _bullet.btSliderConstraint_getCalculatedTransformB(self)


    def getFrameOffsetA(self, *args):
        """
        getFrameOffsetA(btSliderConstraint self) -> btTransform const
        getFrameOffsetA(btSliderConstraint self) -> btTransform &
        """
        return _bullet.btSliderConstraint_getFrameOffsetA(self, *args)


    def getFrameOffsetB(self, *args):
        """
        getFrameOffsetB(btSliderConstraint self) -> btTransform const
        getFrameOffsetB(btSliderConstraint self) -> btTransform &
        """
        return _bullet.btSliderConstraint_getFrameOffsetB(self, *args)


    def getLowerLinLimit(self):
        """getLowerLinLimit(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getLowerLinLimit(self)


    def setLowerLinLimit(self, lowerLimit):
        """setLowerLinLimit(btSliderConstraint self, btScalar lowerLimit)"""
        return _bullet.btSliderConstraint_setLowerLinLimit(self, lowerLimit)


    def getUpperLinLimit(self):
        """getUpperLinLimit(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getUpperLinLimit(self)


    def setUpperLinLimit(self, upperLimit):
        """setUpperLinLimit(btSliderConstraint self, btScalar upperLimit)"""
        return _bullet.btSliderConstraint_setUpperLinLimit(self, upperLimit)


    def getLowerAngLimit(self):
        """getLowerAngLimit(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getLowerAngLimit(self)


    def setLowerAngLimit(self, lowerLimit):
        """setLowerAngLimit(btSliderConstraint self, btScalar lowerLimit)"""
        return _bullet.btSliderConstraint_setLowerAngLimit(self, lowerLimit)


    def getUpperAngLimit(self):
        """getUpperAngLimit(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getUpperAngLimit(self)


    def setUpperAngLimit(self, upperLimit):
        """setUpperAngLimit(btSliderConstraint self, btScalar upperLimit)"""
        return _bullet.btSliderConstraint_setUpperAngLimit(self, upperLimit)


    def getUseLinearReferenceFrameA(self):
        """getUseLinearReferenceFrameA(btSliderConstraint self) -> bool"""
        return _bullet.btSliderConstraint_getUseLinearReferenceFrameA(self)


    def getSoftnessDirLin(self):
        """getSoftnessDirLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getSoftnessDirLin(self)


    def getRestitutionDirLin(self):
        """getRestitutionDirLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getRestitutionDirLin(self)


    def getDampingDirLin(self):
        """getDampingDirLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getDampingDirLin(self)


    def getSoftnessDirAng(self):
        """getSoftnessDirAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getSoftnessDirAng(self)


    def getRestitutionDirAng(self):
        """getRestitutionDirAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getRestitutionDirAng(self)


    def getDampingDirAng(self):
        """getDampingDirAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getDampingDirAng(self)


    def getSoftnessLimLin(self):
        """getSoftnessLimLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getSoftnessLimLin(self)


    def getRestitutionLimLin(self):
        """getRestitutionLimLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getRestitutionLimLin(self)


    def getDampingLimLin(self):
        """getDampingLimLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getDampingLimLin(self)


    def getSoftnessLimAng(self):
        """getSoftnessLimAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getSoftnessLimAng(self)


    def getRestitutionLimAng(self):
        """getRestitutionLimAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getRestitutionLimAng(self)


    def getDampingLimAng(self):
        """getDampingLimAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getDampingLimAng(self)


    def getSoftnessOrthoLin(self):
        """getSoftnessOrthoLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getSoftnessOrthoLin(self)


    def getRestitutionOrthoLin(self):
        """getRestitutionOrthoLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getRestitutionOrthoLin(self)


    def getDampingOrthoLin(self):
        """getDampingOrthoLin(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getDampingOrthoLin(self)


    def getSoftnessOrthoAng(self):
        """getSoftnessOrthoAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getSoftnessOrthoAng(self)


    def getRestitutionOrthoAng(self):
        """getRestitutionOrthoAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getRestitutionOrthoAng(self)


    def getDampingOrthoAng(self):
        """getDampingOrthoAng(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getDampingOrthoAng(self)


    def setSoftnessDirLin(self, softnessDirLin):
        """setSoftnessDirLin(btSliderConstraint self, btScalar softnessDirLin)"""
        return _bullet.btSliderConstraint_setSoftnessDirLin(self, softnessDirLin)


    def setRestitutionDirLin(self, restitutionDirLin):
        """setRestitutionDirLin(btSliderConstraint self, btScalar restitutionDirLin)"""
        return _bullet.btSliderConstraint_setRestitutionDirLin(self, restitutionDirLin)


    def setDampingDirLin(self, dampingDirLin):
        """setDampingDirLin(btSliderConstraint self, btScalar dampingDirLin)"""
        return _bullet.btSliderConstraint_setDampingDirLin(self, dampingDirLin)


    def setSoftnessDirAng(self, softnessDirAng):
        """setSoftnessDirAng(btSliderConstraint self, btScalar softnessDirAng)"""
        return _bullet.btSliderConstraint_setSoftnessDirAng(self, softnessDirAng)


    def setRestitutionDirAng(self, restitutionDirAng):
        """setRestitutionDirAng(btSliderConstraint self, btScalar restitutionDirAng)"""
        return _bullet.btSliderConstraint_setRestitutionDirAng(self, restitutionDirAng)


    def setDampingDirAng(self, dampingDirAng):
        """setDampingDirAng(btSliderConstraint self, btScalar dampingDirAng)"""
        return _bullet.btSliderConstraint_setDampingDirAng(self, dampingDirAng)


    def setSoftnessLimLin(self, softnessLimLin):
        """setSoftnessLimLin(btSliderConstraint self, btScalar softnessLimLin)"""
        return _bullet.btSliderConstraint_setSoftnessLimLin(self, softnessLimLin)


    def setRestitutionLimLin(self, restitutionLimLin):
        """setRestitutionLimLin(btSliderConstraint self, btScalar restitutionLimLin)"""
        return _bullet.btSliderConstraint_setRestitutionLimLin(self, restitutionLimLin)


    def setDampingLimLin(self, dampingLimLin):
        """setDampingLimLin(btSliderConstraint self, btScalar dampingLimLin)"""
        return _bullet.btSliderConstraint_setDampingLimLin(self, dampingLimLin)


    def setSoftnessLimAng(self, softnessLimAng):
        """setSoftnessLimAng(btSliderConstraint self, btScalar softnessLimAng)"""
        return _bullet.btSliderConstraint_setSoftnessLimAng(self, softnessLimAng)


    def setRestitutionLimAng(self, restitutionLimAng):
        """setRestitutionLimAng(btSliderConstraint self, btScalar restitutionLimAng)"""
        return _bullet.btSliderConstraint_setRestitutionLimAng(self, restitutionLimAng)


    def setDampingLimAng(self, dampingLimAng):
        """setDampingLimAng(btSliderConstraint self, btScalar dampingLimAng)"""
        return _bullet.btSliderConstraint_setDampingLimAng(self, dampingLimAng)


    def setSoftnessOrthoLin(self, softnessOrthoLin):
        """setSoftnessOrthoLin(btSliderConstraint self, btScalar softnessOrthoLin)"""
        return _bullet.btSliderConstraint_setSoftnessOrthoLin(self, softnessOrthoLin)


    def setRestitutionOrthoLin(self, restitutionOrthoLin):
        """setRestitutionOrthoLin(btSliderConstraint self, btScalar restitutionOrthoLin)"""
        return _bullet.btSliderConstraint_setRestitutionOrthoLin(self, restitutionOrthoLin)


    def setDampingOrthoLin(self, dampingOrthoLin):
        """setDampingOrthoLin(btSliderConstraint self, btScalar dampingOrthoLin)"""
        return _bullet.btSliderConstraint_setDampingOrthoLin(self, dampingOrthoLin)


    def setSoftnessOrthoAng(self, softnessOrthoAng):
        """setSoftnessOrthoAng(btSliderConstraint self, btScalar softnessOrthoAng)"""
        return _bullet.btSliderConstraint_setSoftnessOrthoAng(self, softnessOrthoAng)


    def setRestitutionOrthoAng(self, restitutionOrthoAng):
        """setRestitutionOrthoAng(btSliderConstraint self, btScalar restitutionOrthoAng)"""
        return _bullet.btSliderConstraint_setRestitutionOrthoAng(self, restitutionOrthoAng)


    def setDampingOrthoAng(self, dampingOrthoAng):
        """setDampingOrthoAng(btSliderConstraint self, btScalar dampingOrthoAng)"""
        return _bullet.btSliderConstraint_setDampingOrthoAng(self, dampingOrthoAng)


    def setPoweredLinMotor(self, onOff):
        """setPoweredLinMotor(btSliderConstraint self, bool onOff)"""
        return _bullet.btSliderConstraint_setPoweredLinMotor(self, onOff)


    def getPoweredLinMotor(self):
        """getPoweredLinMotor(btSliderConstraint self) -> bool"""
        return _bullet.btSliderConstraint_getPoweredLinMotor(self)


    def setTargetLinMotorVelocity(self, targetLinMotorVelocity):
        """setTargetLinMotorVelocity(btSliderConstraint self, btScalar targetLinMotorVelocity)"""
        return _bullet.btSliderConstraint_setTargetLinMotorVelocity(self, targetLinMotorVelocity)


    def getTargetLinMotorVelocity(self):
        """getTargetLinMotorVelocity(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getTargetLinMotorVelocity(self)


    def setMaxLinMotorForce(self, maxLinMotorForce):
        """setMaxLinMotorForce(btSliderConstraint self, btScalar maxLinMotorForce)"""
        return _bullet.btSliderConstraint_setMaxLinMotorForce(self, maxLinMotorForce)


    def getMaxLinMotorForce(self):
        """getMaxLinMotorForce(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getMaxLinMotorForce(self)


    def setPoweredAngMotor(self, onOff):
        """setPoweredAngMotor(btSliderConstraint self, bool onOff)"""
        return _bullet.btSliderConstraint_setPoweredAngMotor(self, onOff)


    def getPoweredAngMotor(self):
        """getPoweredAngMotor(btSliderConstraint self) -> bool"""
        return _bullet.btSliderConstraint_getPoweredAngMotor(self)


    def setTargetAngMotorVelocity(self, targetAngMotorVelocity):
        """setTargetAngMotorVelocity(btSliderConstraint self, btScalar targetAngMotorVelocity)"""
        return _bullet.btSliderConstraint_setTargetAngMotorVelocity(self, targetAngMotorVelocity)


    def getTargetAngMotorVelocity(self):
        """getTargetAngMotorVelocity(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getTargetAngMotorVelocity(self)


    def setMaxAngMotorForce(self, maxAngMotorForce):
        """setMaxAngMotorForce(btSliderConstraint self, btScalar maxAngMotorForce)"""
        return _bullet.btSliderConstraint_setMaxAngMotorForce(self, maxAngMotorForce)


    def getMaxAngMotorForce(self):
        """getMaxAngMotorForce(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getMaxAngMotorForce(self)


    def getLinearPos(self):
        """getLinearPos(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getLinearPos(self)


    def getAngularPos(self):
        """getAngularPos(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getAngularPos(self)


    def getSolveLinLimit(self):
        """getSolveLinLimit(btSliderConstraint self) -> bool"""
        return _bullet.btSliderConstraint_getSolveLinLimit(self)


    def getLinDepth(self):
        """getLinDepth(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getLinDepth(self)


    def getSolveAngLimit(self):
        """getSolveAngLimit(btSliderConstraint self) -> bool"""
        return _bullet.btSliderConstraint_getSolveAngLimit(self)


    def getAngDepth(self):
        """getAngDepth(btSliderConstraint self) -> btScalar"""
        return _bullet.btSliderConstraint_getAngDepth(self)


    def calculateTransforms(self, transA, transB):
        """calculateTransforms(btSliderConstraint self, btTransform const & transA, btTransform const & transB)"""
        return _bullet.btSliderConstraint_calculateTransforms(self, transA, transB)


    def testLinLimits(self):
        """testLinLimits(btSliderConstraint self)"""
        return _bullet.btSliderConstraint_testLinLimits(self)


    def testAngLimits(self):
        """testAngLimits(btSliderConstraint self)"""
        return _bullet.btSliderConstraint_testAngLimits(self)


    def getAncorInA(self):
        """getAncorInA(btSliderConstraint self) -> btVector3"""
        return _bullet.btSliderConstraint_getAncorInA(self)


    def getAncorInB(self):
        """getAncorInB(btSliderConstraint self) -> btVector3"""
        return _bullet.btSliderConstraint_getAncorInB(self)


    def getUseFrameOffset(self):
        """getUseFrameOffset(btSliderConstraint self) -> bool"""
        return _bullet.btSliderConstraint_getUseFrameOffset(self)


    def setUseFrameOffset(self, frameOffsetOnOff):
        """setUseFrameOffset(btSliderConstraint self, bool frameOffsetOnOff)"""
        return _bullet.btSliderConstraint_setUseFrameOffset(self, frameOffsetOnOff)


    def setFrames(self, frameA, frameB):
        """setFrames(btSliderConstraint self, btTransform const & frameA, btTransform const & frameB)"""
        return _bullet.btSliderConstraint_setFrames(self, frameA, frameB)


    def setParam(self, num, value, axis=-1):
        """
        setParam(btSliderConstraint self, int num, btScalar value, int axis=-1)
        setParam(btSliderConstraint self, int num, btScalar value)
        """
        return _bullet.btSliderConstraint_setParam(self, num, value, axis)


    def getParam(self, num, axis=-1):
        """
        getParam(btSliderConstraint self, int num, int axis=-1) -> btScalar
        getParam(btSliderConstraint self, int num) -> btScalar
        """
        return _bullet.btSliderConstraint_getParam(self, num, axis)


    def getFlags(self):
        """getFlags(btSliderConstraint self) -> int"""
        return _bullet.btSliderConstraint_getFlags(self)

    __swig_destroy__ = _bullet.delete_btSliderConstraint
    __del__ = lambda self: None
btSliderConstraint_swigregister = _bullet.btSliderConstraint_swigregister
btSliderConstraint_swigregister(btSliderConstraint)

class btSliderConstraintData(_object):
    """Proxy of C++ btSliderConstraintData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSliderConstraintData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSliderConstraintData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btSliderConstraintData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btSliderConstraintData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btSliderConstraintData_m_typeConstraintData_get, _bullet.btSliderConstraintData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btSliderConstraintData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btSliderConstraintData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btSliderConstraintData_m_rbAFrame_get, _bullet.btSliderConstraintData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btSliderConstraintData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btSliderConstraintData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btSliderConstraintData_m_rbBFrame_get, _bullet.btSliderConstraintData_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = _bullet.btSliderConstraintData_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = _bullet.btSliderConstraintData_m_linearUpperLimit_get
    if _newclass:
        m_linearUpperLimit = _swig_property(_bullet.btSliderConstraintData_m_linearUpperLimit_get, _bullet.btSliderConstraintData_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = _bullet.btSliderConstraintData_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = _bullet.btSliderConstraintData_m_linearLowerLimit_get
    if _newclass:
        m_linearLowerLimit = _swig_property(_bullet.btSliderConstraintData_m_linearLowerLimit_get, _bullet.btSliderConstraintData_m_linearLowerLimit_set)
    __swig_setmethods__["m_angularUpperLimit"] = _bullet.btSliderConstraintData_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = _bullet.btSliderConstraintData_m_angularUpperLimit_get
    if _newclass:
        m_angularUpperLimit = _swig_property(_bullet.btSliderConstraintData_m_angularUpperLimit_get, _bullet.btSliderConstraintData_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = _bullet.btSliderConstraintData_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = _bullet.btSliderConstraintData_m_angularLowerLimit_get
    if _newclass:
        m_angularLowerLimit = _swig_property(_bullet.btSliderConstraintData_m_angularLowerLimit_get, _bullet.btSliderConstraintData_m_angularLowerLimit_set)
    __swig_setmethods__["m_useLinearReferenceFrameA"] = _bullet.btSliderConstraintData_m_useLinearReferenceFrameA_set
    __swig_getmethods__["m_useLinearReferenceFrameA"] = _bullet.btSliderConstraintData_m_useLinearReferenceFrameA_get
    if _newclass:
        m_useLinearReferenceFrameA = _swig_property(_bullet.btSliderConstraintData_m_useLinearReferenceFrameA_get, _bullet.btSliderConstraintData_m_useLinearReferenceFrameA_set)
    __swig_setmethods__["m_useOffsetForConstraintFrame"] = _bullet.btSliderConstraintData_m_useOffsetForConstraintFrame_set
    __swig_getmethods__["m_useOffsetForConstraintFrame"] = _bullet.btSliderConstraintData_m_useOffsetForConstraintFrame_get
    if _newclass:
        m_useOffsetForConstraintFrame = _swig_property(_bullet.btSliderConstraintData_m_useOffsetForConstraintFrame_get, _bullet.btSliderConstraintData_m_useOffsetForConstraintFrame_set)

    def __init__(self):
        """__init__(btSliderConstraintData self) -> btSliderConstraintData"""
        this = _bullet.new_btSliderConstraintData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSliderConstraintData
    __del__ = lambda self: None
btSliderConstraintData_swigregister = _bullet.btSliderConstraintData_swigregister
btSliderConstraintData_swigregister(btSliderConstraintData)

class btSliderConstraintDoubleData(_object):
    """Proxy of C++ btSliderConstraintDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSliderConstraintDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSliderConstraintDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_typeConstraintData"] = _bullet.btSliderConstraintDoubleData_m_typeConstraintData_set
    __swig_getmethods__["m_typeConstraintData"] = _bullet.btSliderConstraintDoubleData_m_typeConstraintData_get
    if _newclass:
        m_typeConstraintData = _swig_property(_bullet.btSliderConstraintDoubleData_m_typeConstraintData_get, _bullet.btSliderConstraintDoubleData_m_typeConstraintData_set)
    __swig_setmethods__["m_rbAFrame"] = _bullet.btSliderConstraintDoubleData_m_rbAFrame_set
    __swig_getmethods__["m_rbAFrame"] = _bullet.btSliderConstraintDoubleData_m_rbAFrame_get
    if _newclass:
        m_rbAFrame = _swig_property(_bullet.btSliderConstraintDoubleData_m_rbAFrame_get, _bullet.btSliderConstraintDoubleData_m_rbAFrame_set)
    __swig_setmethods__["m_rbBFrame"] = _bullet.btSliderConstraintDoubleData_m_rbBFrame_set
    __swig_getmethods__["m_rbBFrame"] = _bullet.btSliderConstraintDoubleData_m_rbBFrame_get
    if _newclass:
        m_rbBFrame = _swig_property(_bullet.btSliderConstraintDoubleData_m_rbBFrame_get, _bullet.btSliderConstraintDoubleData_m_rbBFrame_set)
    __swig_setmethods__["m_linearUpperLimit"] = _bullet.btSliderConstraintDoubleData_m_linearUpperLimit_set
    __swig_getmethods__["m_linearUpperLimit"] = _bullet.btSliderConstraintDoubleData_m_linearUpperLimit_get
    if _newclass:
        m_linearUpperLimit = _swig_property(_bullet.btSliderConstraintDoubleData_m_linearUpperLimit_get, _bullet.btSliderConstraintDoubleData_m_linearUpperLimit_set)
    __swig_setmethods__["m_linearLowerLimit"] = _bullet.btSliderConstraintDoubleData_m_linearLowerLimit_set
    __swig_getmethods__["m_linearLowerLimit"] = _bullet.btSliderConstraintDoubleData_m_linearLowerLimit_get
    if _newclass:
        m_linearLowerLimit = _swig_property(_bullet.btSliderConstraintDoubleData_m_linearLowerLimit_get, _bullet.btSliderConstraintDoubleData_m_linearLowerLimit_set)
    __swig_setmethods__["m_angularUpperLimit"] = _bullet.btSliderConstraintDoubleData_m_angularUpperLimit_set
    __swig_getmethods__["m_angularUpperLimit"] = _bullet.btSliderConstraintDoubleData_m_angularUpperLimit_get
    if _newclass:
        m_angularUpperLimit = _swig_property(_bullet.btSliderConstraintDoubleData_m_angularUpperLimit_get, _bullet.btSliderConstraintDoubleData_m_angularUpperLimit_set)
    __swig_setmethods__["m_angularLowerLimit"] = _bullet.btSliderConstraintDoubleData_m_angularLowerLimit_set
    __swig_getmethods__["m_angularLowerLimit"] = _bullet.btSliderConstraintDoubleData_m_angularLowerLimit_get
    if _newclass:
        m_angularLowerLimit = _swig_property(_bullet.btSliderConstraintDoubleData_m_angularLowerLimit_get, _bullet.btSliderConstraintDoubleData_m_angularLowerLimit_set)
    __swig_setmethods__["m_useLinearReferenceFrameA"] = _bullet.btSliderConstraintDoubleData_m_useLinearReferenceFrameA_set
    __swig_getmethods__["m_useLinearReferenceFrameA"] = _bullet.btSliderConstraintDoubleData_m_useLinearReferenceFrameA_get
    if _newclass:
        m_useLinearReferenceFrameA = _swig_property(_bullet.btSliderConstraintDoubleData_m_useLinearReferenceFrameA_get, _bullet.btSliderConstraintDoubleData_m_useLinearReferenceFrameA_set)
    __swig_setmethods__["m_useOffsetForConstraintFrame"] = _bullet.btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_set
    __swig_getmethods__["m_useOffsetForConstraintFrame"] = _bullet.btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_get
    if _newclass:
        m_useOffsetForConstraintFrame = _swig_property(_bullet.btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_get, _bullet.btSliderConstraintDoubleData_m_useOffsetForConstraintFrame_set)

    def __init__(self):
        """__init__(btSliderConstraintDoubleData self) -> btSliderConstraintDoubleData"""
        this = _bullet.new_btSliderConstraintDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSliderConstraintDoubleData
    __del__ = lambda self: None
btSliderConstraintDoubleData_swigregister = _bullet.btSliderConstraintDoubleData_swigregister
btSliderConstraintDoubleData_swigregister(btSliderConstraintDoubleData)

class btSolve2LinearConstraint(_object):
    """Proxy of C++ btSolve2LinearConstraint class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSolve2LinearConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSolve2LinearConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, tau, damping):
        """__init__(btSolve2LinearConstraint self, btScalar tau, btScalar damping) -> btSolve2LinearConstraint"""
        this = _bullet.new_btSolve2LinearConstraint(tau, damping)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resolveUnilateralPairConstraint(self, body0, body1, world2A, world2B, invInertiaADiag, invMassA, linvelA, angvelA, rel_posA1, invInertiaBDiag, invMassB, linvelB, angvelB, rel_posA2, depthA, normalA, rel_posB1, rel_posB2, depthB, normalB, imp0, imp1):
        """resolveUnilateralPairConstraint(btSolve2LinearConstraint self, btRigidBody body0, btRigidBody body1, btMatrix3x3 const & world2A, btMatrix3x3 const & world2B, btVector3 const & invInertiaADiag, btScalar const invMassA, btVector3 const & linvelA, btVector3 const & angvelA, btVector3 const & rel_posA1, btVector3 const & invInertiaBDiag, btScalar const invMassB, btVector3 const & linvelB, btVector3 const & angvelB, btVector3 const & rel_posA2, btScalar depthA, btVector3 const & normalA, btVector3 const & rel_posB1, btVector3 const & rel_posB2, btScalar depthB, btVector3 const & normalB, btScalar & imp0, btScalar & imp1)"""
        return _bullet.btSolve2LinearConstraint_resolveUnilateralPairConstraint(self, body0, body1, world2A, world2B, invInertiaADiag, invMassA, linvelA, angvelA, rel_posA1, invInertiaBDiag, invMassB, linvelB, angvelB, rel_posA2, depthA, normalA, rel_posB1, rel_posB2, depthB, normalB, imp0, imp1)


    def resolveBilateralPairConstraint(self, body0, body1, world2A, world2B, invInertiaADiag, invMassA, linvelA, angvelA, rel_posA1, invInertiaBDiag, invMassB, linvelB, angvelB, rel_posA2, depthA, normalA, rel_posB1, rel_posB2, depthB, normalB, imp0, imp1):
        """resolveBilateralPairConstraint(btSolve2LinearConstraint self, btRigidBody body0, btRigidBody body1, btMatrix3x3 const & world2A, btMatrix3x3 const & world2B, btVector3 const & invInertiaADiag, btScalar const invMassA, btVector3 const & linvelA, btVector3 const & angvelA, btVector3 const & rel_posA1, btVector3 const & invInertiaBDiag, btScalar const invMassB, btVector3 const & linvelB, btVector3 const & angvelB, btVector3 const & rel_posA2, btScalar depthA, btVector3 const & normalA, btVector3 const & rel_posB1, btVector3 const & rel_posB2, btScalar depthB, btVector3 const & normalB, btScalar & imp0, btScalar & imp1)"""
        return _bullet.btSolve2LinearConstraint_resolveBilateralPairConstraint(self, body0, body1, world2A, world2B, invInertiaADiag, invMassA, linvelA, angvelA, rel_posA1, invInertiaBDiag, invMassB, linvelB, angvelB, rel_posA2, depthA, normalA, rel_posB1, rel_posB2, depthB, normalB, imp0, imp1)

    __swig_destroy__ = _bullet.delete_btSolve2LinearConstraint
    __del__ = lambda self: None
btSolve2LinearConstraint_swigregister = _bullet.btSolve2LinearConstraint_swigregister
btSolve2LinearConstraint_swigregister(btSolve2LinearConstraint)

class btUniversalConstraint(btGeneric6DofConstraint):
    """Proxy of C++ btUniversalConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btGeneric6DofConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btUniversalConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btGeneric6DofConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btUniversalConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, rbA, rbB, anchor, axis1, axis2):
        """__init__(btUniversalConstraint self, btRigidBody rbA, btRigidBody rbB, btVector3 const & anchor, btVector3 const & axis1, btVector3 const & axis2) -> btUniversalConstraint"""
        this = _bullet.new_btUniversalConstraint(rbA, rbB, anchor, axis1, axis2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getAnchor(self):
        """getAnchor(btUniversalConstraint self) -> btVector3 const &"""
        return _bullet.btUniversalConstraint_getAnchor(self)


    def getAnchor2(self):
        """getAnchor2(btUniversalConstraint self) -> btVector3 const &"""
        return _bullet.btUniversalConstraint_getAnchor2(self)


    def getAxis1(self):
        """getAxis1(btUniversalConstraint self) -> btVector3 const &"""
        return _bullet.btUniversalConstraint_getAxis1(self)


    def getAxis2(self):
        """getAxis2(btUniversalConstraint self) -> btVector3 const &"""
        return _bullet.btUniversalConstraint_getAxis2(self)


    def getAngle1(self):
        """getAngle1(btUniversalConstraint self) -> btScalar"""
        return _bullet.btUniversalConstraint_getAngle1(self)


    def getAngle2(self):
        """getAngle2(btUniversalConstraint self) -> btScalar"""
        return _bullet.btUniversalConstraint_getAngle2(self)


    def setUpperLimit(self, ang1max, ang2max):
        """setUpperLimit(btUniversalConstraint self, btScalar ang1max, btScalar ang2max)"""
        return _bullet.btUniversalConstraint_setUpperLimit(self, ang1max, ang2max)


    def setLowerLimit(self, ang1min, ang2min):
        """setLowerLimit(btUniversalConstraint self, btScalar ang1min, btScalar ang2min)"""
        return _bullet.btUniversalConstraint_setLowerLimit(self, ang1min, ang2min)


    def setAxis(self, axis1, axis2):
        """setAxis(btUniversalConstraint self, btVector3 const & axis1, btVector3 const & axis2)"""
        return _bullet.btUniversalConstraint_setAxis(self, axis1, axis2)

    __swig_destroy__ = _bullet.delete_btUniversalConstraint
    __del__ = lambda self: None
btUniversalConstraint_swigregister = _bullet.btUniversalConstraint_swigregister
btUniversalConstraint_swigregister(btUniversalConstraint)

BT_SIMPLE_DYNAMICS_WORLD = _bullet.BT_SIMPLE_DYNAMICS_WORLD
BT_DISCRETE_DYNAMICS_WORLD = _bullet.BT_DISCRETE_DYNAMICS_WORLD
BT_CONTINUOUS_DYNAMICS_WORLD = _bullet.BT_CONTINUOUS_DYNAMICS_WORLD
BT_SOFT_RIGID_DYNAMICS_WORLD = _bullet.BT_SOFT_RIGID_DYNAMICS_WORLD
BT_GPU_DYNAMICS_WORLD = _bullet.BT_GPU_DYNAMICS_WORLD
BT_SOFT_MULTIBODY_DYNAMICS_WORLD = _bullet.BT_SOFT_MULTIBODY_DYNAMICS_WORLD
class btDynamicsWorld(btCollisionWorld):
    """Proxy of C++ btDynamicsWorld class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionWorld]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionWorld]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDynamicsWorld, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btDynamicsWorld
    __del__ = lambda self: None

    def stepSimulation(self, *args):
        """
        stepSimulation(btDynamicsWorld self, btScalar timeStep, int maxSubSteps=1, btScalar fixedTimeStep) -> int
        stepSimulation(btDynamicsWorld self, btScalar timeStep, int maxSubSteps=1) -> int
        stepSimulation(btDynamicsWorld self, btScalar timeStep) -> int
        """
        return _bullet.btDynamicsWorld_stepSimulation(self, *args)


    def addConstraint(self, constraint, disableCollisionsBetweenLinkedBodies=False):
        """
        addConstraint(btDynamicsWorld self, btTypedConstraint constraint, bool disableCollisionsBetweenLinkedBodies=False)
        addConstraint(btDynamicsWorld self, btTypedConstraint constraint)
        """
        return _bullet.btDynamicsWorld_addConstraint(self, constraint, disableCollisionsBetweenLinkedBodies)


    def removeConstraint(self, constraint):
        """removeConstraint(btDynamicsWorld self, btTypedConstraint constraint)"""
        return _bullet.btDynamicsWorld_removeConstraint(self, constraint)


    def addAction(self, action):
        """addAction(btDynamicsWorld self, btActionInterface action)"""
        return _bullet.btDynamicsWorld_addAction(self, action)


    def removeAction(self, action):
        """removeAction(btDynamicsWorld self, btActionInterface action)"""
        return _bullet.btDynamicsWorld_removeAction(self, action)


    def setGravity(self, gravity):
        """setGravity(btDynamicsWorld self, btVector3 const & gravity)"""
        return _bullet.btDynamicsWorld_setGravity(self, gravity)


    def getGravity(self):
        """getGravity(btDynamicsWorld self) -> btVector3"""
        return _bullet.btDynamicsWorld_getGravity(self)


    def synchronizeMotionStates(self):
        """synchronizeMotionStates(btDynamicsWorld self)"""
        return _bullet.btDynamicsWorld_synchronizeMotionStates(self)


    def addRigidBody(self, *args):
        """
        addRigidBody(btDynamicsWorld self, btRigidBody body)
        addRigidBody(btDynamicsWorld self, btRigidBody body, int group, int mask)
        """
        return _bullet.btDynamicsWorld_addRigidBody(self, *args)


    def removeRigidBody(self, body):
        """removeRigidBody(btDynamicsWorld self, btRigidBody body)"""
        return _bullet.btDynamicsWorld_removeRigidBody(self, body)


    def setConstraintSolver(self, solver):
        """setConstraintSolver(btDynamicsWorld self, btConstraintSolver solver)"""
        return _bullet.btDynamicsWorld_setConstraintSolver(self, solver)


    def getConstraintSolver(self):
        """getConstraintSolver(btDynamicsWorld self) -> btConstraintSolver"""
        return _bullet.btDynamicsWorld_getConstraintSolver(self)


    def getNumConstraints(self):
        """getNumConstraints(btDynamicsWorld self) -> int"""
        return _bullet.btDynamicsWorld_getNumConstraints(self)


    def getConstraint(self, *args):
        """
        getConstraint(btDynamicsWorld self, int index) -> btTypedConstraint
        getConstraint(btDynamicsWorld self, int index) -> btTypedConstraint
        """
        return _bullet.btDynamicsWorld_getConstraint(self, *args)


    def getWorldType(self):
        """getWorldType(btDynamicsWorld self) -> btDynamicsWorldType"""
        return _bullet.btDynamicsWorld_getWorldType(self)


    def clearForces(self):
        """clearForces(btDynamicsWorld self)"""
        return _bullet.btDynamicsWorld_clearForces(self)


    def setInternalTickCallback(self, cb, worldUserInfo=None, isPreTick=False):
        """
        setInternalTickCallback(btDynamicsWorld self, btInternalTickCallback cb, void * worldUserInfo=None, bool isPreTick=False)
        setInternalTickCallback(btDynamicsWorld self, btInternalTickCallback cb, void * worldUserInfo=None)
        setInternalTickCallback(btDynamicsWorld self, btInternalTickCallback cb)
        """
        return _bullet.btDynamicsWorld_setInternalTickCallback(self, cb, worldUserInfo, isPreTick)


    def setWorldUserInfo(self, worldUserInfo):
        """setWorldUserInfo(btDynamicsWorld self, void * worldUserInfo)"""
        return _bullet.btDynamicsWorld_setWorldUserInfo(self, worldUserInfo)


    def getWorldUserInfo(self):
        """getWorldUserInfo(btDynamicsWorld self) -> void *"""
        return _bullet.btDynamicsWorld_getWorldUserInfo(self)


    def getSolverInfo(self):
        """getSolverInfo(btDynamicsWorld self) -> btContactSolverInfo"""
        return _bullet.btDynamicsWorld_getSolverInfo(self)


    def addVehicle(self, vehicle):
        """addVehicle(btDynamicsWorld self, btActionInterface vehicle)"""
        return _bullet.btDynamicsWorld_addVehicle(self, vehicle)


    def removeVehicle(self, vehicle):
        """removeVehicle(btDynamicsWorld self, btActionInterface vehicle)"""
        return _bullet.btDynamicsWorld_removeVehicle(self, vehicle)


    def addCharacter(self, character):
        """addCharacter(btDynamicsWorld self, btActionInterface character)"""
        return _bullet.btDynamicsWorld_addCharacter(self, character)


    def removeCharacter(self, character):
        """removeCharacter(btDynamicsWorld self, btActionInterface character)"""
        return _bullet.btDynamicsWorld_removeCharacter(self, character)

btDynamicsWorld_swigregister = _bullet.btDynamicsWorld_swigregister
btDynamicsWorld_swigregister(btDynamicsWorld)

class btDynamicsWorldDoubleData(_object):
    """Proxy of C++ btDynamicsWorldDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDynamicsWorldDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDynamicsWorldDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_solverInfo"] = _bullet.btDynamicsWorldDoubleData_m_solverInfo_set
    __swig_getmethods__["m_solverInfo"] = _bullet.btDynamicsWorldDoubleData_m_solverInfo_get
    if _newclass:
        m_solverInfo = _swig_property(_bullet.btDynamicsWorldDoubleData_m_solverInfo_get, _bullet.btDynamicsWorldDoubleData_m_solverInfo_set)
    __swig_setmethods__["m_gravity"] = _bullet.btDynamicsWorldDoubleData_m_gravity_set
    __swig_getmethods__["m_gravity"] = _bullet.btDynamicsWorldDoubleData_m_gravity_get
    if _newclass:
        m_gravity = _swig_property(_bullet.btDynamicsWorldDoubleData_m_gravity_get, _bullet.btDynamicsWorldDoubleData_m_gravity_set)

    def __init__(self):
        """__init__(btDynamicsWorldDoubleData self) -> btDynamicsWorldDoubleData"""
        this = _bullet.new_btDynamicsWorldDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDynamicsWorldDoubleData
    __del__ = lambda self: None
btDynamicsWorldDoubleData_swigregister = _bullet.btDynamicsWorldDoubleData_swigregister
btDynamicsWorldDoubleData_swigregister(btDynamicsWorldDoubleData)

class btDynamicsWorldFloatData(_object):
    """Proxy of C++ btDynamicsWorldFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDynamicsWorldFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDynamicsWorldFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_solverInfo"] = _bullet.btDynamicsWorldFloatData_m_solverInfo_set
    __swig_getmethods__["m_solverInfo"] = _bullet.btDynamicsWorldFloatData_m_solverInfo_get
    if _newclass:
        m_solverInfo = _swig_property(_bullet.btDynamicsWorldFloatData_m_solverInfo_get, _bullet.btDynamicsWorldFloatData_m_solverInfo_set)
    __swig_setmethods__["m_gravity"] = _bullet.btDynamicsWorldFloatData_m_gravity_set
    __swig_getmethods__["m_gravity"] = _bullet.btDynamicsWorldFloatData_m_gravity_get
    if _newclass:
        m_gravity = _swig_property(_bullet.btDynamicsWorldFloatData_m_gravity_get, _bullet.btDynamicsWorldFloatData_m_gravity_set)

    def __init__(self):
        """__init__(btDynamicsWorldFloatData self) -> btDynamicsWorldFloatData"""
        this = _bullet.new_btDynamicsWorldFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDynamicsWorldFloatData
    __del__ = lambda self: None
btDynamicsWorldFloatData_swigregister = _bullet.btDynamicsWorldFloatData_swigregister
btDynamicsWorldFloatData_swigregister(btDynamicsWorldFloatData)

class btSpinMutex(_object):
    """Proxy of C++ btSpinMutex class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSpinMutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSpinMutex, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btSpinMutex self) -> btSpinMutex"""
        this = _bullet.new_btSpinMutex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def lock(self):
        """lock(btSpinMutex self)"""
        return _bullet.btSpinMutex_lock(self)


    def unlock(self):
        """unlock(btSpinMutex self)"""
        return _bullet.btSpinMutex_unlock(self)


    def tryLock(self):
        """tryLock(btSpinMutex self) -> bool"""
        return _bullet.btSpinMutex_tryLock(self)

    __swig_destroy__ = _bullet.delete_btSpinMutex
    __del__ = lambda self: None
btSpinMutex_swigregister = _bullet.btSpinMutex_swigregister
btSpinMutex_swigregister(btSpinMutex)


def btMutexLock(arg1):
    """btMutexLock(btSpinMutex arg1)"""
    return _bullet.btMutexLock(arg1)

def btMutexUnlock(arg1):
    """btMutexUnlock(btSpinMutex arg1)"""
    return _bullet.btMutexUnlock(arg1)

def btMutexTryLock(arg1):
    """btMutexTryLock(btSpinMutex arg1) -> bool"""
    return _bullet.btMutexTryLock(arg1)
class btDiscreteDynamicsWorld(btDynamicsWorld):
    """Proxy of C++ btDiscreteDynamicsWorld class."""

    __swig_setmethods__ = {}
    for _s in [btDynamicsWorld]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDiscreteDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btDynamicsWorld]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDiscreteDynamicsWorld, name)
    __repr__ = _swig_repr

    def __init__(self, dispatcher, pairCache, constraintSolver, collisionConfiguration):
        """__init__(btDiscreteDynamicsWorld self, btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) -> btDiscreteDynamicsWorld"""
        this = _bullet.new_btDiscreteDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDiscreteDynamicsWorld
    __del__ = lambda self: None

    def stepSimulation(self, *args):
        """
        stepSimulation(btDiscreteDynamicsWorld self, btScalar timeStep, int maxSubSteps=1, btScalar fixedTimeStep) -> int
        stepSimulation(btDiscreteDynamicsWorld self, btScalar timeStep, int maxSubSteps=1) -> int
        stepSimulation(btDiscreteDynamicsWorld self, btScalar timeStep) -> int
        """
        return _bullet.btDiscreteDynamicsWorld_stepSimulation(self, *args)


    def synchronizeSingleMotionState(self, body):
        """synchronizeSingleMotionState(btDiscreteDynamicsWorld self, btRigidBody body)"""
        return _bullet.btDiscreteDynamicsWorld_synchronizeSingleMotionState(self, body)


    def addConstraint(self, constraint, disableCollisionsBetweenLinkedBodies=False):
        """
        addConstraint(btDiscreteDynamicsWorld self, btTypedConstraint constraint, bool disableCollisionsBetweenLinkedBodies=False)
        addConstraint(btDiscreteDynamicsWorld self, btTypedConstraint constraint)
        """
        return _bullet.btDiscreteDynamicsWorld_addConstraint(self, constraint, disableCollisionsBetweenLinkedBodies)


    def getSimulationIslandManager(self, *args):
        """
        getSimulationIslandManager(btDiscreteDynamicsWorld self) -> btSimulationIslandManager
        getSimulationIslandManager(btDiscreteDynamicsWorld self) -> btSimulationIslandManager
        """
        return _bullet.btDiscreteDynamicsWorld_getSimulationIslandManager(self, *args)


    def getCollisionWorld(self):
        """getCollisionWorld(btDiscreteDynamicsWorld self) -> btCollisionWorld"""
        return _bullet.btDiscreteDynamicsWorld_getCollisionWorld(self)


    def addCollisionObject(self, *args):
        """
        addCollisionObject(btDiscreteDynamicsWorld self, btCollisionObject collisionObject, int collisionFilterGroup, int collisionFilterMask)
        addCollisionObject(btDiscreteDynamicsWorld self, btCollisionObject collisionObject, int collisionFilterGroup)
        addCollisionObject(btDiscreteDynamicsWorld self, btCollisionObject collisionObject)
        """
        return _bullet.btDiscreteDynamicsWorld_addCollisionObject(self, *args)


    def addRigidBody(self, *args):
        """
        addRigidBody(btDiscreteDynamicsWorld self, btRigidBody body)
        addRigidBody(btDiscreteDynamicsWorld self, btRigidBody body, int group, int mask)
        """
        return _bullet.btDiscreteDynamicsWorld_addRigidBody(self, *args)


    def debugDrawConstraint(self, constraint):
        """debugDrawConstraint(btDiscreteDynamicsWorld self, btTypedConstraint constraint)"""
        return _bullet.btDiscreteDynamicsWorld_debugDrawConstraint(self, constraint)


    def getConstraint(self, *args):
        """
        getConstraint(btDiscreteDynamicsWorld self, int index) -> btTypedConstraint
        getConstraint(btDiscreteDynamicsWorld self, int index) -> btTypedConstraint
        """
        return _bullet.btDiscreteDynamicsWorld_getConstraint(self, *args)


    def applyGravity(self):
        """applyGravity(btDiscreteDynamicsWorld self)"""
        return _bullet.btDiscreteDynamicsWorld_applyGravity(self)


    def setNumTasks(self, numTasks):
        """setNumTasks(btDiscreteDynamicsWorld self, int numTasks)"""
        return _bullet.btDiscreteDynamicsWorld_setNumTasks(self, numTasks)


    def updateVehicles(self, timeStep):
        """updateVehicles(btDiscreteDynamicsWorld self, btScalar timeStep)"""
        return _bullet.btDiscreteDynamicsWorld_updateVehicles(self, timeStep)


    def setSynchronizeAllMotionStates(self, synchronizeAll):
        """setSynchronizeAllMotionStates(btDiscreteDynamicsWorld self, bool synchronizeAll)"""
        return _bullet.btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(self, synchronizeAll)


    def getSynchronizeAllMotionStates(self):
        """getSynchronizeAllMotionStates(btDiscreteDynamicsWorld self) -> bool"""
        return _bullet.btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(self)


    def setApplySpeculativeContactRestitution(self, enable):
        """setApplySpeculativeContactRestitution(btDiscreteDynamicsWorld self, bool enable)"""
        return _bullet.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(self, enable)


    def getApplySpeculativeContactRestitution(self):
        """getApplySpeculativeContactRestitution(btDiscreteDynamicsWorld self) -> bool"""
        return _bullet.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(self)


    def setLatencyMotionStateInterpolation(self, latencyInterpolation):
        """setLatencyMotionStateInterpolation(btDiscreteDynamicsWorld self, bool latencyInterpolation)"""
        return _bullet.btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation(self, latencyInterpolation)


    def getLatencyMotionStateInterpolation(self):
        """getLatencyMotionStateInterpolation(btDiscreteDynamicsWorld self) -> bool"""
        return _bullet.btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation(self)

btDiscreteDynamicsWorld_swigregister = _bullet.btDiscreteDynamicsWorld_swigregister
btDiscreteDynamicsWorld_swigregister(btDiscreteDynamicsWorld)

class btSimpleDynamicsWorld(btDynamicsWorld):
    """Proxy of C++ btSimpleDynamicsWorld class."""

    __swig_setmethods__ = {}
    for _s in [btDynamicsWorld]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSimpleDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btDynamicsWorld]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSimpleDynamicsWorld, name)
    __repr__ = _swig_repr

    def __init__(self, dispatcher, pairCache, constraintSolver, collisionConfiguration):
        """__init__(btSimpleDynamicsWorld self, btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) -> btSimpleDynamicsWorld"""
        this = _bullet.new_btSimpleDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSimpleDynamicsWorld
    __del__ = lambda self: None

    def stepSimulation(self, *args):
        """
        stepSimulation(btSimpleDynamicsWorld self, btScalar timeStep, int maxSubSteps=1, btScalar fixedTimeStep) -> int
        stepSimulation(btSimpleDynamicsWorld self, btScalar timeStep, int maxSubSteps=1) -> int
        stepSimulation(btSimpleDynamicsWorld self, btScalar timeStep) -> int
        """
        return _bullet.btSimpleDynamicsWorld_stepSimulation(self, *args)


    def addRigidBody(self, *args):
        """
        addRigidBody(btSimpleDynamicsWorld self, btRigidBody body)
        addRigidBody(btSimpleDynamicsWorld self, btRigidBody body, int group, int mask)
        """
        return _bullet.btSimpleDynamicsWorld_addRigidBody(self, *args)

btSimpleDynamicsWorld_swigregister = _bullet.btSimpleDynamicsWorld_swigregister
btSimpleDynamicsWorld_swigregister(btSimpleDynamicsWorld)

btMultiBodyDataName = _bullet.btMultiBodyDataName
btMultiBodyLinkDataName = _bullet.btMultiBodyLinkDataName
BT_MULTIBODYLINKFLAGS_DISABLE_PARENT_COLLISION = _bullet.BT_MULTIBODYLINKFLAGS_DISABLE_PARENT_COLLISION
class btSpatialForceVector(_object):
    """Proxy of C++ btSpatialForceVector class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSpatialForceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSpatialForceVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_topVec"] = _bullet.btSpatialForceVector_m_topVec_set
    __swig_getmethods__["m_topVec"] = _bullet.btSpatialForceVector_m_topVec_get
    if _newclass:
        m_topVec = _swig_property(_bullet.btSpatialForceVector_m_topVec_get, _bullet.btSpatialForceVector_m_topVec_set)
    __swig_setmethods__["m_bottomVec"] = _bullet.btSpatialForceVector_m_bottomVec_set
    __swig_getmethods__["m_bottomVec"] = _bullet.btSpatialForceVector_m_bottomVec_get
    if _newclass:
        m_bottomVec = _swig_property(_bullet.btSpatialForceVector_m_bottomVec_get, _bullet.btSpatialForceVector_m_bottomVec_set)

    def __init__(self, *args):
        """
        __init__(btSpatialForceVector self) -> btSpatialForceVector
        __init__(btSpatialForceVector self, btVector3 const & angular, btVector3 const & linear) -> btSpatialForceVector
        __init__(btSpatialForceVector self, btScalar const & ax, btScalar const & ay, btScalar const & az, btScalar const & lx, btScalar const & ly, btScalar const & lz) -> btSpatialForceVector
        """
        this = _bullet.new_btSpatialForceVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setVector(self, angular, linear):
        """setVector(btSpatialForceVector self, btVector3 const & angular, btVector3 const & linear)"""
        return _bullet.btSpatialForceVector_setVector(self, angular, linear)


    def setValue(self, ax, ay, az, lx, ly, lz):
        """setValue(btSpatialForceVector self, btScalar const & ax, btScalar const & ay, btScalar const & az, btScalar const & lx, btScalar const & ly, btScalar const & lz)"""
        return _bullet.btSpatialForceVector_setValue(self, ax, ay, az, lx, ly, lz)


    def addVector(self, angular, linear):
        """addVector(btSpatialForceVector self, btVector3 const & angular, btVector3 const & linear)"""
        return _bullet.btSpatialForceVector_addVector(self, angular, linear)


    def addValue(self, ax, ay, az, lx, ly, lz):
        """addValue(btSpatialForceVector self, btScalar const & ax, btScalar const & ay, btScalar const & az, btScalar const & lx, btScalar const & ly, btScalar const & lz)"""
        return _bullet.btSpatialForceVector_addValue(self, ax, ay, az, lx, ly, lz)


    def getLinear(self):
        """getLinear(btSpatialForceVector self) -> btVector3 const &"""
        return _bullet.btSpatialForceVector_getLinear(self)


    def getAngular(self):
        """getAngular(btSpatialForceVector self) -> btVector3 const &"""
        return _bullet.btSpatialForceVector_getAngular(self)


    def setLinear(self, linear):
        """setLinear(btSpatialForceVector self, btVector3 const & linear)"""
        return _bullet.btSpatialForceVector_setLinear(self, linear)


    def setAngular(self, angular):
        """setAngular(btSpatialForceVector self, btVector3 const & angular)"""
        return _bullet.btSpatialForceVector_setAngular(self, angular)


    def addAngular(self, angular):
        """addAngular(btSpatialForceVector self, btVector3 const & angular)"""
        return _bullet.btSpatialForceVector_addAngular(self, angular)


    def addLinear(self, linear):
        """addLinear(btSpatialForceVector self, btVector3 const & linear)"""
        return _bullet.btSpatialForceVector_addLinear(self, linear)


    def setZero(self):
        """setZero(btSpatialForceVector self)"""
        return _bullet.btSpatialForceVector_setZero(self)


    def __iadd__(self, vec):
        """__iadd__(btSpatialForceVector self, btSpatialForceVector vec) -> btSpatialForceVector"""
        return _bullet.btSpatialForceVector___iadd__(self, vec)


    def __isub__(self, vec):
        """__isub__(btSpatialForceVector self, btSpatialForceVector vec) -> btSpatialForceVector"""
        return _bullet.btSpatialForceVector___isub__(self, vec)


    def __sub__(self, vec):
        """__sub__(btSpatialForceVector self, btSpatialForceVector vec) -> btSpatialForceVector"""
        return _bullet.btSpatialForceVector___sub__(self, vec)


    def __add__(self, vec):
        """__add__(btSpatialForceVector self, btSpatialForceVector vec) -> btSpatialForceVector"""
        return _bullet.btSpatialForceVector___add__(self, vec)


    def __neg__(self):
        """__neg__(btSpatialForceVector self) -> btSpatialForceVector"""
        return _bullet.btSpatialForceVector___neg__(self)


    def __mul__(self, s):
        """__mul__(btSpatialForceVector self, btScalar const & s) -> btSpatialForceVector"""
        return _bullet.btSpatialForceVector___mul__(self, s)

    __swig_destroy__ = _bullet.delete_btSpatialForceVector
    __del__ = lambda self: None
btSpatialForceVector_swigregister = _bullet.btSpatialForceVector_swigregister
btSpatialForceVector_swigregister(btSpatialForceVector)

class btSpatialMotionVector(_object):
    """Proxy of C++ btSpatialMotionVector class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSpatialMotionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSpatialMotionVector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_topVec"] = _bullet.btSpatialMotionVector_m_topVec_set
    __swig_getmethods__["m_topVec"] = _bullet.btSpatialMotionVector_m_topVec_get
    if _newclass:
        m_topVec = _swig_property(_bullet.btSpatialMotionVector_m_topVec_get, _bullet.btSpatialMotionVector_m_topVec_set)
    __swig_setmethods__["m_bottomVec"] = _bullet.btSpatialMotionVector_m_bottomVec_set
    __swig_getmethods__["m_bottomVec"] = _bullet.btSpatialMotionVector_m_bottomVec_get
    if _newclass:
        m_bottomVec = _swig_property(_bullet.btSpatialMotionVector_m_bottomVec_get, _bullet.btSpatialMotionVector_m_bottomVec_set)

    def __init__(self, *args):
        """
        __init__(btSpatialMotionVector self) -> btSpatialMotionVector
        __init__(btSpatialMotionVector self, btVector3 const & angular, btVector3 const & linear) -> btSpatialMotionVector
        """
        this = _bullet.new_btSpatialMotionVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setVector(self, angular, linear):
        """setVector(btSpatialMotionVector self, btVector3 const & angular, btVector3 const & linear)"""
        return _bullet.btSpatialMotionVector_setVector(self, angular, linear)


    def setValue(self, ax, ay, az, lx, ly, lz):
        """setValue(btSpatialMotionVector self, btScalar const & ax, btScalar const & ay, btScalar const & az, btScalar const & lx, btScalar const & ly, btScalar const & lz)"""
        return _bullet.btSpatialMotionVector_setValue(self, ax, ay, az, lx, ly, lz)


    def addVector(self, angular, linear):
        """addVector(btSpatialMotionVector self, btVector3 const & angular, btVector3 const & linear)"""
        return _bullet.btSpatialMotionVector_addVector(self, angular, linear)


    def addValue(self, ax, ay, az, lx, ly, lz):
        """addValue(btSpatialMotionVector self, btScalar const & ax, btScalar const & ay, btScalar const & az, btScalar const & lx, btScalar const & ly, btScalar const & lz)"""
        return _bullet.btSpatialMotionVector_addValue(self, ax, ay, az, lx, ly, lz)


    def getAngular(self):
        """getAngular(btSpatialMotionVector self) -> btVector3 const &"""
        return _bullet.btSpatialMotionVector_getAngular(self)


    def getLinear(self):
        """getLinear(btSpatialMotionVector self) -> btVector3 const &"""
        return _bullet.btSpatialMotionVector_getLinear(self)


    def setAngular(self, angular):
        """setAngular(btSpatialMotionVector self, btVector3 const & angular)"""
        return _bullet.btSpatialMotionVector_setAngular(self, angular)


    def setLinear(self, linear):
        """setLinear(btSpatialMotionVector self, btVector3 const & linear)"""
        return _bullet.btSpatialMotionVector_setLinear(self, linear)


    def addAngular(self, angular):
        """addAngular(btSpatialMotionVector self, btVector3 const & angular)"""
        return _bullet.btSpatialMotionVector_addAngular(self, angular)


    def addLinear(self, linear):
        """addLinear(btSpatialMotionVector self, btVector3 const & linear)"""
        return _bullet.btSpatialMotionVector_addLinear(self, linear)


    def setZero(self):
        """setZero(btSpatialMotionVector self)"""
        return _bullet.btSpatialMotionVector_setZero(self)


    def dot(self, b):
        """dot(btSpatialMotionVector self, btSpatialForceVector b) -> btScalar"""
        return _bullet.btSpatialMotionVector_dot(self, b)


    def __iadd__(self, vec):
        """__iadd__(btSpatialMotionVector self, btSpatialMotionVector vec) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___iadd__(self, vec)


    def __isub__(self, vec):
        """__isub__(btSpatialMotionVector self, btSpatialMotionVector vec) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___isub__(self, vec)


    def __imul__(self, s):
        """__imul__(btSpatialMotionVector self, btScalar const & s) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___imul__(self, s)


    def __sub__(self, vec):
        """__sub__(btSpatialMotionVector self, btSpatialMotionVector vec) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___sub__(self, vec)


    def __add__(self, vec):
        """__add__(btSpatialMotionVector self, btSpatialMotionVector vec) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___add__(self, vec)


    def __neg__(self):
        """__neg__(btSpatialMotionVector self) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___neg__(self)


    def __mul__(self, s):
        """__mul__(btSpatialMotionVector self, btScalar const & s) -> btSpatialMotionVector"""
        return _bullet.btSpatialMotionVector___mul__(self, s)

    __swig_destroy__ = _bullet.delete_btSpatialMotionVector
    __del__ = lambda self: None
btSpatialMotionVector_swigregister = _bullet.btSpatialMotionVector_swigregister
btSpatialMotionVector_swigregister(btSpatialMotionVector)

class btSymmetricSpatialDyad(_object):
    """Proxy of C++ btSymmetricSpatialDyad class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSymmetricSpatialDyad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSymmetricSpatialDyad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_topLeftMat"] = _bullet.btSymmetricSpatialDyad_m_topLeftMat_set
    __swig_getmethods__["m_topLeftMat"] = _bullet.btSymmetricSpatialDyad_m_topLeftMat_get
    if _newclass:
        m_topLeftMat = _swig_property(_bullet.btSymmetricSpatialDyad_m_topLeftMat_get, _bullet.btSymmetricSpatialDyad_m_topLeftMat_set)
    __swig_setmethods__["m_topRightMat"] = _bullet.btSymmetricSpatialDyad_m_topRightMat_set
    __swig_getmethods__["m_topRightMat"] = _bullet.btSymmetricSpatialDyad_m_topRightMat_get
    if _newclass:
        m_topRightMat = _swig_property(_bullet.btSymmetricSpatialDyad_m_topRightMat_get, _bullet.btSymmetricSpatialDyad_m_topRightMat_set)
    __swig_setmethods__["m_bottomLeftMat"] = _bullet.btSymmetricSpatialDyad_m_bottomLeftMat_set
    __swig_getmethods__["m_bottomLeftMat"] = _bullet.btSymmetricSpatialDyad_m_bottomLeftMat_get
    if _newclass:
        m_bottomLeftMat = _swig_property(_bullet.btSymmetricSpatialDyad_m_bottomLeftMat_get, _bullet.btSymmetricSpatialDyad_m_bottomLeftMat_set)

    def __init__(self, *args):
        """
        __init__(btSymmetricSpatialDyad self) -> btSymmetricSpatialDyad
        __init__(btSymmetricSpatialDyad self, btMatrix3x3 const & topLeftMat, btMatrix3x3 const & topRightMat, btMatrix3x3 const & bottomLeftMat) -> btSymmetricSpatialDyad
        """
        this = _bullet.new_btSymmetricSpatialDyad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setMatrix(self, topLeftMat, topRightMat, bottomLeftMat):
        """setMatrix(btSymmetricSpatialDyad self, btMatrix3x3 const & topLeftMat, btMatrix3x3 const & topRightMat, btMatrix3x3 const & bottomLeftMat)"""
        return _bullet.btSymmetricSpatialDyad_setMatrix(self, topLeftMat, topRightMat, bottomLeftMat)


    def addMatrix(self, topLeftMat, topRightMat, bottomLeftMat):
        """addMatrix(btSymmetricSpatialDyad self, btMatrix3x3 const & topLeftMat, btMatrix3x3 const & topRightMat, btMatrix3x3 const & bottomLeftMat)"""
        return _bullet.btSymmetricSpatialDyad_addMatrix(self, topLeftMat, topRightMat, bottomLeftMat)


    def setIdentity(self):
        """setIdentity(btSymmetricSpatialDyad self)"""
        return _bullet.btSymmetricSpatialDyad_setIdentity(self)


    def __isub__(self, mat):
        """__isub__(btSymmetricSpatialDyad self, btSymmetricSpatialDyad mat) -> btSymmetricSpatialDyad"""
        return _bullet.btSymmetricSpatialDyad___isub__(self, mat)


    def __mul__(self, vec):
        """__mul__(btSymmetricSpatialDyad self, btSpatialMotionVector vec) -> btSpatialForceVector"""
        return _bullet.btSymmetricSpatialDyad___mul__(self, vec)

    __swig_destroy__ = _bullet.delete_btSymmetricSpatialDyad
    __del__ = lambda self: None
btSymmetricSpatialDyad_swigregister = _bullet.btSymmetricSpatialDyad_swigregister
btSymmetricSpatialDyad_swigregister(btSymmetricSpatialDyad)

class btSpatialTransformationMatrix(_object):
    """Proxy of C++ btSpatialTransformationMatrix class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSpatialTransformationMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSpatialTransformationMatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rotMat"] = _bullet.btSpatialTransformationMatrix_m_rotMat_set
    __swig_getmethods__["m_rotMat"] = _bullet.btSpatialTransformationMatrix_m_rotMat_get
    if _newclass:
        m_rotMat = _swig_property(_bullet.btSpatialTransformationMatrix_m_rotMat_get, _bullet.btSpatialTransformationMatrix_m_rotMat_set)
    __swig_setmethods__["m_trnVec"] = _bullet.btSpatialTransformationMatrix_m_trnVec_set
    __swig_getmethods__["m_trnVec"] = _bullet.btSpatialTransformationMatrix_m_trnVec_get
    if _newclass:
        m_trnVec = _swig_property(_bullet.btSpatialTransformationMatrix_m_trnVec_get, _bullet.btSpatialTransformationMatrix_m_trnVec_set)
    _None = _bullet.btSpatialTransformationMatrix__None
    Add = _bullet.btSpatialTransformationMatrix_Add
    Subtract = _bullet.btSpatialTransformationMatrix_Subtract

    def transformInverse(self, *args):
        """
        transformInverse(btSpatialTransformationMatrix self, btSymmetricSpatialDyad inMat, btSymmetricSpatialDyad outMat, btSpatialTransformationMatrix::eOutputOperation outOp)
        transformInverse(btSpatialTransformationMatrix self, btSymmetricSpatialDyad inMat, btSymmetricSpatialDyad outMat)
        """
        return _bullet.btSpatialTransformationMatrix_transformInverse(self, *args)


    def __init__(self):
        """__init__(btSpatialTransformationMatrix self) -> btSpatialTransformationMatrix"""
        this = _bullet.new_btSpatialTransformationMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSpatialTransformationMatrix
    __del__ = lambda self: None
btSpatialTransformationMatrix_swigregister = _bullet.btSpatialTransformationMatrix_swigregister
btSpatialTransformationMatrix_swigregister(btSpatialTransformationMatrix)

class btMultibodyLink(_object):
    """Proxy of C++ btMultibodyLink class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultibodyLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultibodyLink, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_mass"] = _bullet.btMultibodyLink_m_mass_set
    __swig_getmethods__["m_mass"] = _bullet.btMultibodyLink_m_mass_get
    if _newclass:
        m_mass = _swig_property(_bullet.btMultibodyLink_m_mass_get, _bullet.btMultibodyLink_m_mass_set)
    __swig_setmethods__["m_inertiaLocal"] = _bullet.btMultibodyLink_m_inertiaLocal_set
    __swig_getmethods__["m_inertiaLocal"] = _bullet.btMultibodyLink_m_inertiaLocal_get
    if _newclass:
        m_inertiaLocal = _swig_property(_bullet.btMultibodyLink_m_inertiaLocal_get, _bullet.btMultibodyLink_m_inertiaLocal_set)
    __swig_setmethods__["m_parent"] = _bullet.btMultibodyLink_m_parent_set
    __swig_getmethods__["m_parent"] = _bullet.btMultibodyLink_m_parent_get
    if _newclass:
        m_parent = _swig_property(_bullet.btMultibodyLink_m_parent_get, _bullet.btMultibodyLink_m_parent_set)
    __swig_setmethods__["m_zeroRotParentToThis"] = _bullet.btMultibodyLink_m_zeroRotParentToThis_set
    __swig_getmethods__["m_zeroRotParentToThis"] = _bullet.btMultibodyLink_m_zeroRotParentToThis_get
    if _newclass:
        m_zeroRotParentToThis = _swig_property(_bullet.btMultibodyLink_m_zeroRotParentToThis_get, _bullet.btMultibodyLink_m_zeroRotParentToThis_set)
    __swig_setmethods__["m_dVector"] = _bullet.btMultibodyLink_m_dVector_set
    __swig_getmethods__["m_dVector"] = _bullet.btMultibodyLink_m_dVector_get
    if _newclass:
        m_dVector = _swig_property(_bullet.btMultibodyLink_m_dVector_get, _bullet.btMultibodyLink_m_dVector_set)
    __swig_setmethods__["m_eVector"] = _bullet.btMultibodyLink_m_eVector_set
    __swig_getmethods__["m_eVector"] = _bullet.btMultibodyLink_m_eVector_get
    if _newclass:
        m_eVector = _swig_property(_bullet.btMultibodyLink_m_eVector_get, _bullet.btMultibodyLink_m_eVector_set)
    __swig_setmethods__["m_absFrameTotVelocity"] = _bullet.btMultibodyLink_m_absFrameTotVelocity_set
    __swig_getmethods__["m_absFrameTotVelocity"] = _bullet.btMultibodyLink_m_absFrameTotVelocity_get
    if _newclass:
        m_absFrameTotVelocity = _swig_property(_bullet.btMultibodyLink_m_absFrameTotVelocity_get, _bullet.btMultibodyLink_m_absFrameTotVelocity_set)
    __swig_setmethods__["m_absFrameLocVelocity"] = _bullet.btMultibodyLink_m_absFrameLocVelocity_set
    __swig_getmethods__["m_absFrameLocVelocity"] = _bullet.btMultibodyLink_m_absFrameLocVelocity_get
    if _newclass:
        m_absFrameLocVelocity = _swig_property(_bullet.btMultibodyLink_m_absFrameLocVelocity_get, _bullet.btMultibodyLink_m_absFrameLocVelocity_set)
    eRevolute = _bullet.btMultibodyLink_eRevolute
    ePrismatic = _bullet.btMultibodyLink_ePrismatic
    eSpherical = _bullet.btMultibodyLink_eSpherical
    ePlanar = _bullet.btMultibodyLink_ePlanar
    eFixed = _bullet.btMultibodyLink_eFixed
    eInvalid = _bullet.btMultibodyLink_eInvalid
    __swig_setmethods__["m_axes"] = _bullet.btMultibodyLink_m_axes_set
    __swig_getmethods__["m_axes"] = _bullet.btMultibodyLink_m_axes_get
    if _newclass:
        m_axes = _swig_property(_bullet.btMultibodyLink_m_axes_get, _bullet.btMultibodyLink_m_axes_set)

    def setAxisTop(self, *args):
        """
        setAxisTop(btMultibodyLink self, int dof, btVector3 const & axis)
        setAxisTop(btMultibodyLink self, int dof, btScalar const & x, btScalar const & y, btScalar const & z)
        """
        return _bullet.btMultibodyLink_setAxisTop(self, *args)


    def setAxisBottom(self, *args):
        """
        setAxisBottom(btMultibodyLink self, int dof, btVector3 const & axis)
        setAxisBottom(btMultibodyLink self, int dof, btScalar const & x, btScalar const & y, btScalar const & z)
        """
        return _bullet.btMultibodyLink_setAxisBottom(self, *args)


    def getAxisTop(self, dof):
        """getAxisTop(btMultibodyLink self, int dof) -> btVector3 const &"""
        return _bullet.btMultibodyLink_getAxisTop(self, dof)


    def getAxisBottom(self, dof):
        """getAxisBottom(btMultibodyLink self, int dof) -> btVector3 const &"""
        return _bullet.btMultibodyLink_getAxisBottom(self, dof)

    __swig_setmethods__["m_dofOffset"] = _bullet.btMultibodyLink_m_dofOffset_set
    __swig_getmethods__["m_dofOffset"] = _bullet.btMultibodyLink_m_dofOffset_get
    if _newclass:
        m_dofOffset = _swig_property(_bullet.btMultibodyLink_m_dofOffset_get, _bullet.btMultibodyLink_m_dofOffset_set)
    __swig_setmethods__["m_cfgOffset"] = _bullet.btMultibodyLink_m_cfgOffset_set
    __swig_getmethods__["m_cfgOffset"] = _bullet.btMultibodyLink_m_cfgOffset_get
    if _newclass:
        m_cfgOffset = _swig_property(_bullet.btMultibodyLink_m_cfgOffset_get, _bullet.btMultibodyLink_m_cfgOffset_set)
    __swig_setmethods__["m_cachedRotParentToThis"] = _bullet.btMultibodyLink_m_cachedRotParentToThis_set
    __swig_getmethods__["m_cachedRotParentToThis"] = _bullet.btMultibodyLink_m_cachedRotParentToThis_get
    if _newclass:
        m_cachedRotParentToThis = _swig_property(_bullet.btMultibodyLink_m_cachedRotParentToThis_get, _bullet.btMultibodyLink_m_cachedRotParentToThis_set)
    __swig_setmethods__["m_cachedRVector"] = _bullet.btMultibodyLink_m_cachedRVector_set
    __swig_getmethods__["m_cachedRVector"] = _bullet.btMultibodyLink_m_cachedRVector_get
    if _newclass:
        m_cachedRVector = _swig_property(_bullet.btMultibodyLink_m_cachedRVector_get, _bullet.btMultibodyLink_m_cachedRVector_set)
    __swig_setmethods__["m_appliedForce"] = _bullet.btMultibodyLink_m_appliedForce_set
    __swig_getmethods__["m_appliedForce"] = _bullet.btMultibodyLink_m_appliedForce_get
    if _newclass:
        m_appliedForce = _swig_property(_bullet.btMultibodyLink_m_appliedForce_get, _bullet.btMultibodyLink_m_appliedForce_set)
    __swig_setmethods__["m_appliedTorque"] = _bullet.btMultibodyLink_m_appliedTorque_set
    __swig_getmethods__["m_appliedTorque"] = _bullet.btMultibodyLink_m_appliedTorque_get
    if _newclass:
        m_appliedTorque = _swig_property(_bullet.btMultibodyLink_m_appliedTorque_get, _bullet.btMultibodyLink_m_appliedTorque_set)
    __swig_setmethods__["m_appliedConstraintForce"] = _bullet.btMultibodyLink_m_appliedConstraintForce_set
    __swig_getmethods__["m_appliedConstraintForce"] = _bullet.btMultibodyLink_m_appliedConstraintForce_get
    if _newclass:
        m_appliedConstraintForce = _swig_property(_bullet.btMultibodyLink_m_appliedConstraintForce_get, _bullet.btMultibodyLink_m_appliedConstraintForce_set)
    __swig_setmethods__["m_appliedConstraintTorque"] = _bullet.btMultibodyLink_m_appliedConstraintTorque_set
    __swig_getmethods__["m_appliedConstraintTorque"] = _bullet.btMultibodyLink_m_appliedConstraintTorque_get
    if _newclass:
        m_appliedConstraintTorque = _swig_property(_bullet.btMultibodyLink_m_appliedConstraintTorque_get, _bullet.btMultibodyLink_m_appliedConstraintTorque_set)
    __swig_setmethods__["m_jointPos"] = _bullet.btMultibodyLink_m_jointPos_set
    __swig_getmethods__["m_jointPos"] = _bullet.btMultibodyLink_m_jointPos_get
    if _newclass:
        m_jointPos = _swig_property(_bullet.btMultibodyLink_m_jointPos_get, _bullet.btMultibodyLink_m_jointPos_set)
    __swig_setmethods__["m_jointTorque"] = _bullet.btMultibodyLink_m_jointTorque_set
    __swig_getmethods__["m_jointTorque"] = _bullet.btMultibodyLink_m_jointTorque_get
    if _newclass:
        m_jointTorque = _swig_property(_bullet.btMultibodyLink_m_jointTorque_get, _bullet.btMultibodyLink_m_jointTorque_set)
    __swig_setmethods__["m_collider"] = _bullet.btMultibodyLink_m_collider_set
    __swig_getmethods__["m_collider"] = _bullet.btMultibodyLink_m_collider_get
    if _newclass:
        m_collider = _swig_property(_bullet.btMultibodyLink_m_collider_get, _bullet.btMultibodyLink_m_collider_set)
    __swig_setmethods__["m_flags"] = _bullet.btMultibodyLink_m_flags_set
    __swig_getmethods__["m_flags"] = _bullet.btMultibodyLink_m_flags_get
    if _newclass:
        m_flags = _swig_property(_bullet.btMultibodyLink_m_flags_get, _bullet.btMultibodyLink_m_flags_set)
    __swig_setmethods__["m_dofCount"] = _bullet.btMultibodyLink_m_dofCount_set
    __swig_getmethods__["m_dofCount"] = _bullet.btMultibodyLink_m_dofCount_get
    if _newclass:
        m_dofCount = _swig_property(_bullet.btMultibodyLink_m_dofCount_get, _bullet.btMultibodyLink_m_dofCount_set)
    __swig_setmethods__["m_posVarCount"] = _bullet.btMultibodyLink_m_posVarCount_set
    __swig_getmethods__["m_posVarCount"] = _bullet.btMultibodyLink_m_posVarCount_get
    if _newclass:
        m_posVarCount = _swig_property(_bullet.btMultibodyLink_m_posVarCount_get, _bullet.btMultibodyLink_m_posVarCount_set)
    __swig_setmethods__["m_jointType"] = _bullet.btMultibodyLink_m_jointType_set
    __swig_getmethods__["m_jointType"] = _bullet.btMultibodyLink_m_jointType_get
    if _newclass:
        m_jointType = _swig_property(_bullet.btMultibodyLink_m_jointType_get, _bullet.btMultibodyLink_m_jointType_set)
    __swig_setmethods__["m_jointFeedback"] = _bullet.btMultibodyLink_m_jointFeedback_set
    __swig_getmethods__["m_jointFeedback"] = _bullet.btMultibodyLink_m_jointFeedback_get
    if _newclass:
        m_jointFeedback = _swig_property(_bullet.btMultibodyLink_m_jointFeedback_get, _bullet.btMultibodyLink_m_jointFeedback_set)
    __swig_setmethods__["m_cachedWorldTransform"] = _bullet.btMultibodyLink_m_cachedWorldTransform_set
    __swig_getmethods__["m_cachedWorldTransform"] = _bullet.btMultibodyLink_m_cachedWorldTransform_get
    if _newclass:
        m_cachedWorldTransform = _swig_property(_bullet.btMultibodyLink_m_cachedWorldTransform_get, _bullet.btMultibodyLink_m_cachedWorldTransform_set)
    __swig_setmethods__["m_userPtr"] = _bullet.btMultibodyLink_m_userPtr_set
    __swig_getmethods__["m_userPtr"] = _bullet.btMultibodyLink_m_userPtr_get
    if _newclass:
        m_userPtr = _swig_property(_bullet.btMultibodyLink_m_userPtr_get, _bullet.btMultibodyLink_m_userPtr_set)
    __swig_setmethods__["m_jointDamping"] = _bullet.btMultibodyLink_m_jointDamping_set
    __swig_getmethods__["m_jointDamping"] = _bullet.btMultibodyLink_m_jointDamping_get
    if _newclass:
        m_jointDamping = _swig_property(_bullet.btMultibodyLink_m_jointDamping_get, _bullet.btMultibodyLink_m_jointDamping_set)
    __swig_setmethods__["m_jointFriction"] = _bullet.btMultibodyLink_m_jointFriction_set
    __swig_getmethods__["m_jointFriction"] = _bullet.btMultibodyLink_m_jointFriction_get
    if _newclass:
        m_jointFriction = _swig_property(_bullet.btMultibodyLink_m_jointFriction_get, _bullet.btMultibodyLink_m_jointFriction_set)

    def __init__(self):
        """__init__(btMultibodyLink self) -> btMultibodyLink"""
        this = _bullet.new_btMultibodyLink()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updateCacheMultiDof(self, pq=None):
        """
        updateCacheMultiDof(btMultibodyLink self, btScalar * pq=None)
        updateCacheMultiDof(btMultibodyLink self)
        """
        return _bullet.btMultibodyLink_updateCacheMultiDof(self, pq)

    __swig_destroy__ = _bullet.delete_btMultibodyLink
    __del__ = lambda self: None
btMultibodyLink_swigregister = _bullet.btMultibodyLink_swigregister
btMultibodyLink_swigregister(btMultibodyLink)

class btMultiBody(_object):
    """Proxy of C++ btMultiBody class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBody, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBody, name)
    __repr__ = _swig_repr

    def __init__(self, n_links, mass, inertia, fixedBase, canSleep, deprecatedMultiDof=True):
        """
        __init__(btMultiBody self, int n_links, btScalar mass, btVector3 const & inertia, bool fixedBase, bool canSleep, bool deprecatedMultiDof=True) -> btMultiBody
        __init__(btMultiBody self, int n_links, btScalar mass, btVector3 const & inertia, bool fixedBase, bool canSleep) -> btMultiBody
        """
        this = _bullet.new_btMultiBody(n_links, mass, inertia, fixedBase, canSleep, deprecatedMultiDof)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBody
    __del__ = lambda self: None

    def setupFixed(self, linkIndex, mass, inertia, parent, rotParentToThis, parentComToThisPivotOffset, thisPivotToThisComOffset, deprecatedDisableParentCollision=True):
        """
        setupFixed(btMultiBody self, int linkIndex, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset, bool deprecatedDisableParentCollision=True)
        setupFixed(btMultiBody self, int linkIndex, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset)
        """
        return _bullet.btMultiBody_setupFixed(self, linkIndex, mass, inertia, parent, rotParentToThis, parentComToThisPivotOffset, thisPivotToThisComOffset, deprecatedDisableParentCollision)


    def setupPrismatic(self, i, mass, inertia, parent, rotParentToThis, jointAxis, parentComToThisPivotOffset, thisPivotToThisComOffset, disableParentCollision):
        """setupPrismatic(btMultiBody self, int i, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & jointAxis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset, bool disableParentCollision)"""
        return _bullet.btMultiBody_setupPrismatic(self, i, mass, inertia, parent, rotParentToThis, jointAxis, parentComToThisPivotOffset, thisPivotToThisComOffset, disableParentCollision)


    def setupRevolute(self, linkIndex, mass, inertia, parentIndex, rotParentToThis, jointAxis, parentComToThisPivotOffset, thisPivotToThisComOffset, disableParentCollision=False):
        """
        setupRevolute(btMultiBody self, int linkIndex, btScalar mass, btVector3 const & inertia, int parentIndex, btQuaternion const & rotParentToThis, btVector3 const & jointAxis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset, bool disableParentCollision=False)
        setupRevolute(btMultiBody self, int linkIndex, btScalar mass, btVector3 const & inertia, int parentIndex, btQuaternion const & rotParentToThis, btVector3 const & jointAxis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset)
        """
        return _bullet.btMultiBody_setupRevolute(self, linkIndex, mass, inertia, parentIndex, rotParentToThis, jointAxis, parentComToThisPivotOffset, thisPivotToThisComOffset, disableParentCollision)


    def setupSpherical(self, linkIndex, mass, inertia, parent, rotParentToThis, parentComToThisPivotOffset, thisPivotToThisComOffset, disableParentCollision=False):
        """
        setupSpherical(btMultiBody self, int linkIndex, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset, bool disableParentCollision=False)
        setupSpherical(btMultiBody self, int linkIndex, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & parentComToThisPivotOffset, btVector3 const & thisPivotToThisComOffset)
        """
        return _bullet.btMultiBody_setupSpherical(self, linkIndex, mass, inertia, parent, rotParentToThis, parentComToThisPivotOffset, thisPivotToThisComOffset, disableParentCollision)


    def setupPlanar(self, i, mass, inertia, parent, rotParentToThis, rotationAxis, parentComToThisComOffset, disableParentCollision=False):
        """
        setupPlanar(btMultiBody self, int i, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & rotationAxis, btVector3 const & parentComToThisComOffset, bool disableParentCollision=False)
        setupPlanar(btMultiBody self, int i, btScalar mass, btVector3 const & inertia, int parent, btQuaternion const & rotParentToThis, btVector3 const & rotationAxis, btVector3 const & parentComToThisComOffset)
        """
        return _bullet.btMultiBody_setupPlanar(self, i, mass, inertia, parent, rotParentToThis, rotationAxis, parentComToThisComOffset, disableParentCollision)


    def getLink(self, *args):
        """
        getLink(btMultiBody self, int index) -> btMultibodyLink
        getLink(btMultiBody self, int index) -> btMultibodyLink
        """
        return _bullet.btMultiBody_getLink(self, *args)


    def setBaseCollider(self, collider):
        """setBaseCollider(btMultiBody self, btMultiBodyLinkCollider collider)"""
        return _bullet.btMultiBody_setBaseCollider(self, collider)


    def getBaseCollider(self, *args):
        """
        getBaseCollider(btMultiBody self) -> btMultiBodyLinkCollider
        getBaseCollider(btMultiBody self) -> btMultiBodyLinkCollider
        """
        return _bullet.btMultiBody_getBaseCollider(self, *args)


    def getParent(self, link_num):
        """getParent(btMultiBody self, int link_num) -> int"""
        return _bullet.btMultiBody_getParent(self, link_num)


    def getNumLinks(self):
        """getNumLinks(btMultiBody self) -> int"""
        return _bullet.btMultiBody_getNumLinks(self)


    def getNumDofs(self):
        """getNumDofs(btMultiBody self) -> int"""
        return _bullet.btMultiBody_getNumDofs(self)


    def getNumPosVars(self):
        """getNumPosVars(btMultiBody self) -> int"""
        return _bullet.btMultiBody_getNumPosVars(self)


    def getBaseMass(self):
        """getBaseMass(btMultiBody self) -> btScalar"""
        return _bullet.btMultiBody_getBaseMass(self)


    def getBaseInertia(self):
        """getBaseInertia(btMultiBody self) -> btVector3 const &"""
        return _bullet.btMultiBody_getBaseInertia(self)


    def getLinkMass(self, i):
        """getLinkMass(btMultiBody self, int i) -> btScalar"""
        return _bullet.btMultiBody_getLinkMass(self, i)


    def getLinkInertia(self, i):
        """getLinkInertia(btMultiBody self, int i) -> btVector3 const &"""
        return _bullet.btMultiBody_getLinkInertia(self, i)


    def setBaseMass(self, mass):
        """setBaseMass(btMultiBody self, btScalar mass)"""
        return _bullet.btMultiBody_setBaseMass(self, mass)


    def setBaseInertia(self, inertia):
        """setBaseInertia(btMultiBody self, btVector3 const & inertia)"""
        return _bullet.btMultiBody_setBaseInertia(self, inertia)


    def getBasePos(self):
        """getBasePos(btMultiBody self) -> btVector3 const &"""
        return _bullet.btMultiBody_getBasePos(self)


    def getBaseVel(self):
        """getBaseVel(btMultiBody self) -> btVector3 const"""
        return _bullet.btMultiBody_getBaseVel(self)


    def getWorldToBaseRot(self):
        """getWorldToBaseRot(btMultiBody self) -> btQuaternion const &"""
        return _bullet.btMultiBody_getWorldToBaseRot(self)


    def getBaseOmega(self):
        """getBaseOmega(btMultiBody self) -> btVector3"""
        return _bullet.btMultiBody_getBaseOmega(self)


    def setBasePos(self, pos):
        """setBasePos(btMultiBody self, btVector3 const & pos)"""
        return _bullet.btMultiBody_setBasePos(self, pos)


    def setBaseWorldTransform(self, tr):
        """setBaseWorldTransform(btMultiBody self, btTransform const & tr)"""
        return _bullet.btMultiBody_setBaseWorldTransform(self, tr)


    def getBaseWorldTransform(self):
        """getBaseWorldTransform(btMultiBody self) -> btTransform"""
        return _bullet.btMultiBody_getBaseWorldTransform(self)


    def setBaseVel(self, vel):
        """setBaseVel(btMultiBody self, btVector3 const & vel)"""
        return _bullet.btMultiBody_setBaseVel(self, vel)


    def setWorldToBaseRot(self, rot):
        """setWorldToBaseRot(btMultiBody self, btQuaternion const & rot)"""
        return _bullet.btMultiBody_setWorldToBaseRot(self, rot)


    def setBaseOmega(self, omega):
        """setBaseOmega(btMultiBody self, btVector3 const & omega)"""
        return _bullet.btMultiBody_setBaseOmega(self, omega)


    def getJointPos(self, i):
        """getJointPos(btMultiBody self, int i) -> btScalar"""
        return _bullet.btMultiBody_getJointPos(self, i)


    def getJointVel(self, i):
        """getJointVel(btMultiBody self, int i) -> btScalar"""
        return _bullet.btMultiBody_getJointVel(self, i)


    def getJointVelMultiDof(self, *args):
        """
        getJointVelMultiDof(btMultiBody self, int i) -> btScalar
        getJointVelMultiDof(btMultiBody self, int i) -> btScalar const *
        """
        return _bullet.btMultiBody_getJointVelMultiDof(self, *args)


    def getJointPosMultiDof(self, *args):
        """
        getJointPosMultiDof(btMultiBody self, int i) -> btScalar
        getJointPosMultiDof(btMultiBody self, int i) -> btScalar const *
        """
        return _bullet.btMultiBody_getJointPosMultiDof(self, *args)


    def setJointPos(self, i, q):
        """setJointPos(btMultiBody self, int i, btScalar q)"""
        return _bullet.btMultiBody_setJointPos(self, i, q)


    def setJointVel(self, i, qdot):
        """setJointVel(btMultiBody self, int i, btScalar qdot)"""
        return _bullet.btMultiBody_setJointVel(self, i, qdot)


    def setJointPosMultiDof(self, i, q):
        """setJointPosMultiDof(btMultiBody self, int i, btScalar * q)"""
        return _bullet.btMultiBody_setJointPosMultiDof(self, i, q)


    def setJointVelMultiDof(self, i, qdot):
        """setJointVelMultiDof(btMultiBody self, int i, btScalar * qdot)"""
        return _bullet.btMultiBody_setJointVelMultiDof(self, i, qdot)


    def getVelocityVector(self):
        """getVelocityVector(btMultiBody self) -> btScalar const *"""
        return _bullet.btMultiBody_getVelocityVector(self)


    def getRVector(self, i):
        """getRVector(btMultiBody self, int i) -> btVector3 const &"""
        return _bullet.btMultiBody_getRVector(self, i)


    def getParentToLocalRot(self, i):
        """getParentToLocalRot(btMultiBody self, int i) -> btQuaternion const &"""
        return _bullet.btMultiBody_getParentToLocalRot(self, i)


    def localPosToWorld(self, i, vec):
        """localPosToWorld(btMultiBody self, int i, btVector3 const & vec) -> btVector3"""
        return _bullet.btMultiBody_localPosToWorld(self, i, vec)


    def localDirToWorld(self, i, vec):
        """localDirToWorld(btMultiBody self, int i, btVector3 const & vec) -> btVector3"""
        return _bullet.btMultiBody_localDirToWorld(self, i, vec)


    def worldPosToLocal(self, i, vec):
        """worldPosToLocal(btMultiBody self, int i, btVector3 const & vec) -> btVector3"""
        return _bullet.btMultiBody_worldPosToLocal(self, i, vec)


    def worldDirToLocal(self, i, vec):
        """worldDirToLocal(btMultiBody self, int i, btVector3 const & vec) -> btVector3"""
        return _bullet.btMultiBody_worldDirToLocal(self, i, vec)


    def localFrameToWorld(self, i, mat):
        """localFrameToWorld(btMultiBody self, int i, btMatrix3x3 const & mat) -> btMatrix3x3"""
        return _bullet.btMultiBody_localFrameToWorld(self, i, mat)


    def getKineticEnergy(self):
        """getKineticEnergy(btMultiBody self) -> btScalar"""
        return _bullet.btMultiBody_getKineticEnergy(self)


    def getAngularMomentum(self):
        """getAngularMomentum(btMultiBody self) -> btVector3"""
        return _bullet.btMultiBody_getAngularMomentum(self)


    def clearForcesAndTorques(self):
        """clearForcesAndTorques(btMultiBody self)"""
        return _bullet.btMultiBody_clearForcesAndTorques(self)


    def clearConstraintForces(self):
        """clearConstraintForces(btMultiBody self)"""
        return _bullet.btMultiBody_clearConstraintForces(self)


    def clearVelocities(self):
        """clearVelocities(btMultiBody self)"""
        return _bullet.btMultiBody_clearVelocities(self)


    def addBaseForce(self, f):
        """addBaseForce(btMultiBody self, btVector3 const & f)"""
        return _bullet.btMultiBody_addBaseForce(self, f)


    def addBaseTorque(self, t):
        """addBaseTorque(btMultiBody self, btVector3 const & t)"""
        return _bullet.btMultiBody_addBaseTorque(self, t)


    def addLinkForce(self, i, f):
        """addLinkForce(btMultiBody self, int i, btVector3 const & f)"""
        return _bullet.btMultiBody_addLinkForce(self, i, f)


    def addLinkTorque(self, i, t):
        """addLinkTorque(btMultiBody self, int i, btVector3 const & t)"""
        return _bullet.btMultiBody_addLinkTorque(self, i, t)


    def addBaseConstraintForce(self, f):
        """addBaseConstraintForce(btMultiBody self, btVector3 const & f)"""
        return _bullet.btMultiBody_addBaseConstraintForce(self, f)


    def addBaseConstraintTorque(self, t):
        """addBaseConstraintTorque(btMultiBody self, btVector3 const & t)"""
        return _bullet.btMultiBody_addBaseConstraintTorque(self, t)


    def addLinkConstraintForce(self, i, f):
        """addLinkConstraintForce(btMultiBody self, int i, btVector3 const & f)"""
        return _bullet.btMultiBody_addLinkConstraintForce(self, i, f)


    def addLinkConstraintTorque(self, i, t):
        """addLinkConstraintTorque(btMultiBody self, int i, btVector3 const & t)"""
        return _bullet.btMultiBody_addLinkConstraintTorque(self, i, t)


    def addJointTorque(self, i, Q):
        """addJointTorque(btMultiBody self, int i, btScalar Q)"""
        return _bullet.btMultiBody_addJointTorque(self, i, Q)


    def addJointTorqueMultiDof(self, *args):
        """
        addJointTorqueMultiDof(btMultiBody self, int i, int dof, btScalar Q)
        addJointTorqueMultiDof(btMultiBody self, int i, btScalar const * Q)
        """
        return _bullet.btMultiBody_addJointTorqueMultiDof(self, *args)


    def getBaseForce(self):
        """getBaseForce(btMultiBody self) -> btVector3 const &"""
        return _bullet.btMultiBody_getBaseForce(self)


    def getBaseTorque(self):
        """getBaseTorque(btMultiBody self) -> btVector3 const &"""
        return _bullet.btMultiBody_getBaseTorque(self)


    def getLinkForce(self, i):
        """getLinkForce(btMultiBody self, int i) -> btVector3 const &"""
        return _bullet.btMultiBody_getLinkForce(self, i)


    def getLinkTorque(self, i):
        """getLinkTorque(btMultiBody self, int i) -> btVector3 const &"""
        return _bullet.btMultiBody_getLinkTorque(self, i)


    def getJointTorque(self, i):
        """getJointTorque(btMultiBody self, int i) -> btScalar"""
        return _bullet.btMultiBody_getJointTorque(self, i)


    def getJointTorqueMultiDof(self, i):
        """getJointTorqueMultiDof(btMultiBody self, int i) -> btScalar *"""
        return _bullet.btMultiBody_getJointTorqueMultiDof(self, i)


    def computeAccelerationsArticulatedBodyAlgorithmMultiDof(self, dt, scratch_r, scratch_v, scratch_m, isConstraintPass=False):
        """
        computeAccelerationsArticulatedBodyAlgorithmMultiDof(btMultiBody self, btScalar dt, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v, btAlignedObjectArray< btMatrix3x3 > & scratch_m, bool isConstraintPass=False)
        computeAccelerationsArticulatedBodyAlgorithmMultiDof(btMultiBody self, btScalar dt, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v, btAlignedObjectArray< btMatrix3x3 > & scratch_m)
        """
        return _bullet.btMultiBody_computeAccelerationsArticulatedBodyAlgorithmMultiDof(self, dt, scratch_r, scratch_v, scratch_m, isConstraintPass)


    def stepVelocitiesMultiDof(self, dt, scratch_r, scratch_v, scratch_m, isConstraintPass=False):
        """
        stepVelocitiesMultiDof(btMultiBody self, btScalar dt, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v, btAlignedObjectArray< btMatrix3x3 > & scratch_m, bool isConstraintPass=False)
        stepVelocitiesMultiDof(btMultiBody self, btScalar dt, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v, btAlignedObjectArray< btMatrix3x3 > & scratch_m)
        """
        return _bullet.btMultiBody_stepVelocitiesMultiDof(self, dt, scratch_r, scratch_v, scratch_m, isConstraintPass)


    def calcAccelerationDeltasMultiDof(self, force, output, scratch_r, scratch_v):
        """calcAccelerationDeltasMultiDof(btMultiBody self, btScalar const * force, btScalar * output, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v)"""
        return _bullet.btMultiBody_calcAccelerationDeltasMultiDof(self, force, output, scratch_r, scratch_v)


    def applyDeltaVeeMultiDof2(self, delta_vee, multiplier):
        """applyDeltaVeeMultiDof2(btMultiBody self, btScalar const * delta_vee, btScalar multiplier)"""
        return _bullet.btMultiBody_applyDeltaVeeMultiDof2(self, delta_vee, multiplier)


    def processDeltaVeeMultiDof2(self):
        """processDeltaVeeMultiDof2(btMultiBody self)"""
        return _bullet.btMultiBody_processDeltaVeeMultiDof2(self)


    def applyDeltaVeeMultiDof(self, delta_vee, multiplier):
        """applyDeltaVeeMultiDof(btMultiBody self, btScalar const * delta_vee, btScalar multiplier)"""
        return _bullet.btMultiBody_applyDeltaVeeMultiDof(self, delta_vee, multiplier)


    def stepPositionsMultiDof(self, dt, pq=None, pqd=None):
        """
        stepPositionsMultiDof(btMultiBody self, btScalar dt, btScalar * pq=None, btScalar * pqd=None)
        stepPositionsMultiDof(btMultiBody self, btScalar dt, btScalar * pq=None)
        stepPositionsMultiDof(btMultiBody self, btScalar dt)
        """
        return _bullet.btMultiBody_stepPositionsMultiDof(self, dt, pq, pqd)


    def fillContactJacobianMultiDof(self, link, contact_point, normal, jac, scratch_r, scratch_v, scratch_m):
        """fillContactJacobianMultiDof(btMultiBody self, int link, btVector3 const & contact_point, btVector3 const & normal, btScalar * jac, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v, btAlignedObjectArray< btMatrix3x3 > & scratch_m)"""
        return _bullet.btMultiBody_fillContactJacobianMultiDof(self, link, contact_point, normal, jac, scratch_r, scratch_v, scratch_m)


    def fillConstraintJacobianMultiDof(self, link, contact_point, normal_ang, normal_lin, jac, scratch_r, scratch_v, scratch_m):
        """fillConstraintJacobianMultiDof(btMultiBody self, int link, btVector3 const & contact_point, btVector3 const & normal_ang, btVector3 const & normal_lin, btScalar * jac, btAlignedObjectArray< btScalar > & scratch_r, btAlignedObjectArray< btVector3 > & scratch_v, btAlignedObjectArray< btMatrix3x3 > & scratch_m)"""
        return _bullet.btMultiBody_fillConstraintJacobianMultiDof(self, link, contact_point, normal_ang, normal_lin, jac, scratch_r, scratch_v, scratch_m)


    def setCanSleep(self, canSleep):
        """setCanSleep(btMultiBody self, bool canSleep)"""
        return _bullet.btMultiBody_setCanSleep(self, canSleep)


    def getCanSleep(self):
        """getCanSleep(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_getCanSleep(self)


    def isAwake(self):
        """isAwake(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_isAwake(self)


    def wakeUp(self):
        """wakeUp(btMultiBody self)"""
        return _bullet.btMultiBody_wakeUp(self)


    def goToSleep(self):
        """goToSleep(btMultiBody self)"""
        return _bullet.btMultiBody_goToSleep(self)


    def checkMotionAndSleepIfRequired(self, timestep):
        """checkMotionAndSleepIfRequired(btMultiBody self, btScalar timestep)"""
        return _bullet.btMultiBody_checkMotionAndSleepIfRequired(self, timestep)


    def hasFixedBase(self):
        """hasFixedBase(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_hasFixedBase(self)


    def getCompanionId(self):
        """getCompanionId(btMultiBody self) -> int"""
        return _bullet.btMultiBody_getCompanionId(self)


    def setCompanionId(self, id):
        """setCompanionId(btMultiBody self, int id)"""
        return _bullet.btMultiBody_setCompanionId(self, id)


    def setNumLinks(self, numLinks):
        """setNumLinks(btMultiBody self, int numLinks)"""
        return _bullet.btMultiBody_setNumLinks(self, numLinks)


    def getLinearDamping(self):
        """getLinearDamping(btMultiBody self) -> btScalar"""
        return _bullet.btMultiBody_getLinearDamping(self)


    def setLinearDamping(self, damp):
        """setLinearDamping(btMultiBody self, btScalar damp)"""
        return _bullet.btMultiBody_setLinearDamping(self, damp)


    def getAngularDamping(self):
        """getAngularDamping(btMultiBody self) -> btScalar"""
        return _bullet.btMultiBody_getAngularDamping(self)


    def setAngularDamping(self, damp):
        """setAngularDamping(btMultiBody self, btScalar damp)"""
        return _bullet.btMultiBody_setAngularDamping(self, damp)


    def getUseGyroTerm(self):
        """getUseGyroTerm(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_getUseGyroTerm(self)


    def setUseGyroTerm(self, useGyro):
        """setUseGyroTerm(btMultiBody self, bool useGyro)"""
        return _bullet.btMultiBody_setUseGyroTerm(self, useGyro)


    def getMaxCoordinateVelocity(self):
        """getMaxCoordinateVelocity(btMultiBody self) -> btScalar"""
        return _bullet.btMultiBody_getMaxCoordinateVelocity(self)


    def setMaxCoordinateVelocity(self, maxVel):
        """setMaxCoordinateVelocity(btMultiBody self, btScalar maxVel)"""
        return _bullet.btMultiBody_setMaxCoordinateVelocity(self, maxVel)


    def getMaxAppliedImpulse(self):
        """getMaxAppliedImpulse(btMultiBody self) -> btScalar"""
        return _bullet.btMultiBody_getMaxAppliedImpulse(self)


    def setMaxAppliedImpulse(self, maxImp):
        """setMaxAppliedImpulse(btMultiBody self, btScalar maxImp)"""
        return _bullet.btMultiBody_setMaxAppliedImpulse(self, maxImp)


    def setHasSelfCollision(self, hasSelfCollision):
        """setHasSelfCollision(btMultiBody self, bool hasSelfCollision)"""
        return _bullet.btMultiBody_setHasSelfCollision(self, hasSelfCollision)


    def hasSelfCollision(self):
        """hasSelfCollision(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_hasSelfCollision(self)


    def finalizeMultiDof(self):
        """finalizeMultiDof(btMultiBody self)"""
        return _bullet.btMultiBody_finalizeMultiDof(self)


    def useRK4Integration(self, use):
        """useRK4Integration(btMultiBody self, bool use)"""
        return _bullet.btMultiBody_useRK4Integration(self, use)


    def isUsingRK4Integration(self):
        """isUsingRK4Integration(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_isUsingRK4Integration(self)


    def useGlobalVelocities(self, use):
        """useGlobalVelocities(btMultiBody self, bool use)"""
        return _bullet.btMultiBody_useGlobalVelocities(self, use)


    def isUsingGlobalVelocities(self):
        """isUsingGlobalVelocities(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_isUsingGlobalVelocities(self)


    def isPosUpdated(self):
        """isPosUpdated(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_isPosUpdated(self)


    def setPosUpdated(self, updated):
        """setPosUpdated(btMultiBody self, bool updated)"""
        return _bullet.btMultiBody_setPosUpdated(self, updated)


    def internalNeedsJointFeedback(self):
        """internalNeedsJointFeedback(btMultiBody self) -> bool"""
        return _bullet.btMultiBody_internalNeedsJointFeedback(self)


    def forwardKinematics(self, scratch_q, scratch_m):
        """forwardKinematics(btMultiBody self, btAlignedObjectArray< btQuaternion > & scratch_q, btAlignedObjectArray< btVector3 > & scratch_m)"""
        return _bullet.btMultiBody_forwardKinematics(self, scratch_q, scratch_m)


    def compTreeLinkVelocities(self, omega, vel):
        """compTreeLinkVelocities(btMultiBody self, btVector3 * omega, btVector3 * vel)"""
        return _bullet.btMultiBody_compTreeLinkVelocities(self, omega, vel)


    def updateCollisionObjectWorldTransforms(self, scratch_q, scratch_m):
        """updateCollisionObjectWorldTransforms(btMultiBody self, btAlignedObjectArray< btQuaternion > & scratch_q, btAlignedObjectArray< btVector3 > & scratch_m)"""
        return _bullet.btMultiBody_updateCollisionObjectWorldTransforms(self, scratch_q, scratch_m)


    def calculateSerializeBufferSize(self):
        """calculateSerializeBufferSize(btMultiBody self) -> int"""
        return _bullet.btMultiBody_calculateSerializeBufferSize(self)


    def serialize(self, dataBuffer, serializer):
        """serialize(btMultiBody self, void * dataBuffer, btSerializer serializer) -> char const *"""
        return _bullet.btMultiBody_serialize(self, dataBuffer, serializer)


    def getBaseName(self):
        """getBaseName(btMultiBody self) -> char const *"""
        return _bullet.btMultiBody_getBaseName(self)


    def setBaseName(self, name):
        """setBaseName(btMultiBody self, char const * name)"""
        return _bullet.btMultiBody_setBaseName(self, name)


    def getUserPointer(self):
        """getUserPointer(btMultiBody self) -> void *"""
        return _bullet.btMultiBody_getUserPointer(self)


    def getUserIndex(self):
        """getUserIndex(btMultiBody self) -> int"""
        return _bullet.btMultiBody_getUserIndex(self)


    def getUserIndex2(self):
        """getUserIndex2(btMultiBody self) -> int"""
        return _bullet.btMultiBody_getUserIndex2(self)


    def setUserPointer(self, userPointer):
        """setUserPointer(btMultiBody self, void * userPointer)"""
        return _bullet.btMultiBody_setUserPointer(self, userPointer)


    def setUserIndex(self, index):
        """setUserIndex(btMultiBody self, int index)"""
        return _bullet.btMultiBody_setUserIndex(self, index)


    def setUserIndex2(self, index):
        """setUserIndex2(btMultiBody self, int index)"""
        return _bullet.btMultiBody_setUserIndex2(self, index)

btMultiBody_swigregister = _bullet.btMultiBody_swigregister
btMultiBody_swigregister(btMultiBody)

class btMultiBodyLinkDoubleData(_object):
    """Proxy of C++ btMultiBodyLinkDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyLinkDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyLinkDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_zeroRotParentToThis"] = _bullet.btMultiBodyLinkDoubleData_m_zeroRotParentToThis_set
    __swig_getmethods__["m_zeroRotParentToThis"] = _bullet.btMultiBodyLinkDoubleData_m_zeroRotParentToThis_get
    if _newclass:
        m_zeroRotParentToThis = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_zeroRotParentToThis_get, _bullet.btMultiBodyLinkDoubleData_m_zeroRotParentToThis_set)
    __swig_setmethods__["m_parentComToThisComOffset"] = _bullet.btMultiBodyLinkDoubleData_m_parentComToThisComOffset_set
    __swig_getmethods__["m_parentComToThisComOffset"] = _bullet.btMultiBodyLinkDoubleData_m_parentComToThisComOffset_get
    if _newclass:
        m_parentComToThisComOffset = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_parentComToThisComOffset_get, _bullet.btMultiBodyLinkDoubleData_m_parentComToThisComOffset_set)
    __swig_setmethods__["m_thisPivotToThisComOffset"] = _bullet.btMultiBodyLinkDoubleData_m_thisPivotToThisComOffset_set
    __swig_getmethods__["m_thisPivotToThisComOffset"] = _bullet.btMultiBodyLinkDoubleData_m_thisPivotToThisComOffset_get
    if _newclass:
        m_thisPivotToThisComOffset = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_thisPivotToThisComOffset_get, _bullet.btMultiBodyLinkDoubleData_m_thisPivotToThisComOffset_set)
    __swig_setmethods__["m_jointAxisTop"] = _bullet.btMultiBodyLinkDoubleData_m_jointAxisTop_set
    __swig_getmethods__["m_jointAxisTop"] = _bullet.btMultiBodyLinkDoubleData_m_jointAxisTop_get
    if _newclass:
        m_jointAxisTop = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointAxisTop_get, _bullet.btMultiBodyLinkDoubleData_m_jointAxisTop_set)
    __swig_setmethods__["m_jointAxisBottom"] = _bullet.btMultiBodyLinkDoubleData_m_jointAxisBottom_set
    __swig_getmethods__["m_jointAxisBottom"] = _bullet.btMultiBodyLinkDoubleData_m_jointAxisBottom_get
    if _newclass:
        m_jointAxisBottom = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointAxisBottom_get, _bullet.btMultiBodyLinkDoubleData_m_jointAxisBottom_set)
    __swig_setmethods__["m_linkInertia"] = _bullet.btMultiBodyLinkDoubleData_m_linkInertia_set
    __swig_getmethods__["m_linkInertia"] = _bullet.btMultiBodyLinkDoubleData_m_linkInertia_get
    if _newclass:
        m_linkInertia = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_linkInertia_get, _bullet.btMultiBodyLinkDoubleData_m_linkInertia_set)
    __swig_setmethods__["m_linkMass"] = _bullet.btMultiBodyLinkDoubleData_m_linkMass_set
    __swig_getmethods__["m_linkMass"] = _bullet.btMultiBodyLinkDoubleData_m_linkMass_get
    if _newclass:
        m_linkMass = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_linkMass_get, _bullet.btMultiBodyLinkDoubleData_m_linkMass_set)
    __swig_setmethods__["m_parentIndex"] = _bullet.btMultiBodyLinkDoubleData_m_parentIndex_set
    __swig_getmethods__["m_parentIndex"] = _bullet.btMultiBodyLinkDoubleData_m_parentIndex_get
    if _newclass:
        m_parentIndex = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_parentIndex_get, _bullet.btMultiBodyLinkDoubleData_m_parentIndex_set)
    __swig_setmethods__["m_jointType"] = _bullet.btMultiBodyLinkDoubleData_m_jointType_set
    __swig_getmethods__["m_jointType"] = _bullet.btMultiBodyLinkDoubleData_m_jointType_get
    if _newclass:
        m_jointType = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointType_get, _bullet.btMultiBodyLinkDoubleData_m_jointType_set)
    __swig_setmethods__["m_dofCount"] = _bullet.btMultiBodyLinkDoubleData_m_dofCount_set
    __swig_getmethods__["m_dofCount"] = _bullet.btMultiBodyLinkDoubleData_m_dofCount_get
    if _newclass:
        m_dofCount = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_dofCount_get, _bullet.btMultiBodyLinkDoubleData_m_dofCount_set)
    __swig_setmethods__["m_posVarCount"] = _bullet.btMultiBodyLinkDoubleData_m_posVarCount_set
    __swig_getmethods__["m_posVarCount"] = _bullet.btMultiBodyLinkDoubleData_m_posVarCount_get
    if _newclass:
        m_posVarCount = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_posVarCount_get, _bullet.btMultiBodyLinkDoubleData_m_posVarCount_set)
    __swig_setmethods__["m_jointPos"] = _bullet.btMultiBodyLinkDoubleData_m_jointPos_set
    __swig_getmethods__["m_jointPos"] = _bullet.btMultiBodyLinkDoubleData_m_jointPos_get
    if _newclass:
        m_jointPos = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointPos_get, _bullet.btMultiBodyLinkDoubleData_m_jointPos_set)
    __swig_setmethods__["m_jointVel"] = _bullet.btMultiBodyLinkDoubleData_m_jointVel_set
    __swig_getmethods__["m_jointVel"] = _bullet.btMultiBodyLinkDoubleData_m_jointVel_get
    if _newclass:
        m_jointVel = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointVel_get, _bullet.btMultiBodyLinkDoubleData_m_jointVel_set)
    __swig_setmethods__["m_jointTorque"] = _bullet.btMultiBodyLinkDoubleData_m_jointTorque_set
    __swig_getmethods__["m_jointTorque"] = _bullet.btMultiBodyLinkDoubleData_m_jointTorque_get
    if _newclass:
        m_jointTorque = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointTorque_get, _bullet.btMultiBodyLinkDoubleData_m_jointTorque_set)
    __swig_setmethods__["m_jointDamping"] = _bullet.btMultiBodyLinkDoubleData_m_jointDamping_set
    __swig_getmethods__["m_jointDamping"] = _bullet.btMultiBodyLinkDoubleData_m_jointDamping_get
    if _newclass:
        m_jointDamping = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointDamping_get, _bullet.btMultiBodyLinkDoubleData_m_jointDamping_set)
    __swig_setmethods__["m_jointFriction"] = _bullet.btMultiBodyLinkDoubleData_m_jointFriction_set
    __swig_getmethods__["m_jointFriction"] = _bullet.btMultiBodyLinkDoubleData_m_jointFriction_get
    if _newclass:
        m_jointFriction = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointFriction_get, _bullet.btMultiBodyLinkDoubleData_m_jointFriction_set)
    __swig_setmethods__["m_linkName"] = _bullet.btMultiBodyLinkDoubleData_m_linkName_set
    __swig_getmethods__["m_linkName"] = _bullet.btMultiBodyLinkDoubleData_m_linkName_get
    if _newclass:
        m_linkName = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_linkName_get, _bullet.btMultiBodyLinkDoubleData_m_linkName_set)
    __swig_setmethods__["m_jointName"] = _bullet.btMultiBodyLinkDoubleData_m_jointName_set
    __swig_getmethods__["m_jointName"] = _bullet.btMultiBodyLinkDoubleData_m_jointName_get
    if _newclass:
        m_jointName = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_jointName_get, _bullet.btMultiBodyLinkDoubleData_m_jointName_set)
    __swig_setmethods__["m_linkCollider"] = _bullet.btMultiBodyLinkDoubleData_m_linkCollider_set
    __swig_getmethods__["m_linkCollider"] = _bullet.btMultiBodyLinkDoubleData_m_linkCollider_get
    if _newclass:
        m_linkCollider = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_linkCollider_get, _bullet.btMultiBodyLinkDoubleData_m_linkCollider_set)
    __swig_setmethods__["m_paddingPtr"] = _bullet.btMultiBodyLinkDoubleData_m_paddingPtr_set
    __swig_getmethods__["m_paddingPtr"] = _bullet.btMultiBodyLinkDoubleData_m_paddingPtr_get
    if _newclass:
        m_paddingPtr = _swig_property(_bullet.btMultiBodyLinkDoubleData_m_paddingPtr_get, _bullet.btMultiBodyLinkDoubleData_m_paddingPtr_set)

    def __init__(self):
        """__init__(btMultiBodyLinkDoubleData self) -> btMultiBodyLinkDoubleData"""
        this = _bullet.new_btMultiBodyLinkDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyLinkDoubleData
    __del__ = lambda self: None
btMultiBodyLinkDoubleData_swigregister = _bullet.btMultiBodyLinkDoubleData_swigregister
btMultiBodyLinkDoubleData_swigregister(btMultiBodyLinkDoubleData)

class btMultiBodyLinkFloatData(_object):
    """Proxy of C++ btMultiBodyLinkFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyLinkFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyLinkFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_zeroRotParentToThis"] = _bullet.btMultiBodyLinkFloatData_m_zeroRotParentToThis_set
    __swig_getmethods__["m_zeroRotParentToThis"] = _bullet.btMultiBodyLinkFloatData_m_zeroRotParentToThis_get
    if _newclass:
        m_zeroRotParentToThis = _swig_property(_bullet.btMultiBodyLinkFloatData_m_zeroRotParentToThis_get, _bullet.btMultiBodyLinkFloatData_m_zeroRotParentToThis_set)
    __swig_setmethods__["m_parentComToThisComOffset"] = _bullet.btMultiBodyLinkFloatData_m_parentComToThisComOffset_set
    __swig_getmethods__["m_parentComToThisComOffset"] = _bullet.btMultiBodyLinkFloatData_m_parentComToThisComOffset_get
    if _newclass:
        m_parentComToThisComOffset = _swig_property(_bullet.btMultiBodyLinkFloatData_m_parentComToThisComOffset_get, _bullet.btMultiBodyLinkFloatData_m_parentComToThisComOffset_set)
    __swig_setmethods__["m_thisPivotToThisComOffset"] = _bullet.btMultiBodyLinkFloatData_m_thisPivotToThisComOffset_set
    __swig_getmethods__["m_thisPivotToThisComOffset"] = _bullet.btMultiBodyLinkFloatData_m_thisPivotToThisComOffset_get
    if _newclass:
        m_thisPivotToThisComOffset = _swig_property(_bullet.btMultiBodyLinkFloatData_m_thisPivotToThisComOffset_get, _bullet.btMultiBodyLinkFloatData_m_thisPivotToThisComOffset_set)
    __swig_setmethods__["m_jointAxisTop"] = _bullet.btMultiBodyLinkFloatData_m_jointAxisTop_set
    __swig_getmethods__["m_jointAxisTop"] = _bullet.btMultiBodyLinkFloatData_m_jointAxisTop_get
    if _newclass:
        m_jointAxisTop = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointAxisTop_get, _bullet.btMultiBodyLinkFloatData_m_jointAxisTop_set)
    __swig_setmethods__["m_jointAxisBottom"] = _bullet.btMultiBodyLinkFloatData_m_jointAxisBottom_set
    __swig_getmethods__["m_jointAxisBottom"] = _bullet.btMultiBodyLinkFloatData_m_jointAxisBottom_get
    if _newclass:
        m_jointAxisBottom = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointAxisBottom_get, _bullet.btMultiBodyLinkFloatData_m_jointAxisBottom_set)
    __swig_setmethods__["m_linkInertia"] = _bullet.btMultiBodyLinkFloatData_m_linkInertia_set
    __swig_getmethods__["m_linkInertia"] = _bullet.btMultiBodyLinkFloatData_m_linkInertia_get
    if _newclass:
        m_linkInertia = _swig_property(_bullet.btMultiBodyLinkFloatData_m_linkInertia_get, _bullet.btMultiBodyLinkFloatData_m_linkInertia_set)
    __swig_setmethods__["m_dofCount"] = _bullet.btMultiBodyLinkFloatData_m_dofCount_set
    __swig_getmethods__["m_dofCount"] = _bullet.btMultiBodyLinkFloatData_m_dofCount_get
    if _newclass:
        m_dofCount = _swig_property(_bullet.btMultiBodyLinkFloatData_m_dofCount_get, _bullet.btMultiBodyLinkFloatData_m_dofCount_set)
    __swig_setmethods__["m_linkMass"] = _bullet.btMultiBodyLinkFloatData_m_linkMass_set
    __swig_getmethods__["m_linkMass"] = _bullet.btMultiBodyLinkFloatData_m_linkMass_get
    if _newclass:
        m_linkMass = _swig_property(_bullet.btMultiBodyLinkFloatData_m_linkMass_get, _bullet.btMultiBodyLinkFloatData_m_linkMass_set)
    __swig_setmethods__["m_parentIndex"] = _bullet.btMultiBodyLinkFloatData_m_parentIndex_set
    __swig_getmethods__["m_parentIndex"] = _bullet.btMultiBodyLinkFloatData_m_parentIndex_get
    if _newclass:
        m_parentIndex = _swig_property(_bullet.btMultiBodyLinkFloatData_m_parentIndex_get, _bullet.btMultiBodyLinkFloatData_m_parentIndex_set)
    __swig_setmethods__["m_jointType"] = _bullet.btMultiBodyLinkFloatData_m_jointType_set
    __swig_getmethods__["m_jointType"] = _bullet.btMultiBodyLinkFloatData_m_jointType_get
    if _newclass:
        m_jointType = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointType_get, _bullet.btMultiBodyLinkFloatData_m_jointType_set)
    __swig_setmethods__["m_jointPos"] = _bullet.btMultiBodyLinkFloatData_m_jointPos_set
    __swig_getmethods__["m_jointPos"] = _bullet.btMultiBodyLinkFloatData_m_jointPos_get
    if _newclass:
        m_jointPos = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointPos_get, _bullet.btMultiBodyLinkFloatData_m_jointPos_set)
    __swig_setmethods__["m_jointVel"] = _bullet.btMultiBodyLinkFloatData_m_jointVel_set
    __swig_getmethods__["m_jointVel"] = _bullet.btMultiBodyLinkFloatData_m_jointVel_get
    if _newclass:
        m_jointVel = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointVel_get, _bullet.btMultiBodyLinkFloatData_m_jointVel_set)
    __swig_setmethods__["m_jointTorque"] = _bullet.btMultiBodyLinkFloatData_m_jointTorque_set
    __swig_getmethods__["m_jointTorque"] = _bullet.btMultiBodyLinkFloatData_m_jointTorque_get
    if _newclass:
        m_jointTorque = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointTorque_get, _bullet.btMultiBodyLinkFloatData_m_jointTorque_set)
    __swig_setmethods__["m_posVarCount"] = _bullet.btMultiBodyLinkFloatData_m_posVarCount_set
    __swig_getmethods__["m_posVarCount"] = _bullet.btMultiBodyLinkFloatData_m_posVarCount_get
    if _newclass:
        m_posVarCount = _swig_property(_bullet.btMultiBodyLinkFloatData_m_posVarCount_get, _bullet.btMultiBodyLinkFloatData_m_posVarCount_set)
    __swig_setmethods__["m_jointDamping"] = _bullet.btMultiBodyLinkFloatData_m_jointDamping_set
    __swig_getmethods__["m_jointDamping"] = _bullet.btMultiBodyLinkFloatData_m_jointDamping_get
    if _newclass:
        m_jointDamping = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointDamping_get, _bullet.btMultiBodyLinkFloatData_m_jointDamping_set)
    __swig_setmethods__["m_jointFriction"] = _bullet.btMultiBodyLinkFloatData_m_jointFriction_set
    __swig_getmethods__["m_jointFriction"] = _bullet.btMultiBodyLinkFloatData_m_jointFriction_get
    if _newclass:
        m_jointFriction = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointFriction_get, _bullet.btMultiBodyLinkFloatData_m_jointFriction_set)
    __swig_setmethods__["m_linkName"] = _bullet.btMultiBodyLinkFloatData_m_linkName_set
    __swig_getmethods__["m_linkName"] = _bullet.btMultiBodyLinkFloatData_m_linkName_get
    if _newclass:
        m_linkName = _swig_property(_bullet.btMultiBodyLinkFloatData_m_linkName_get, _bullet.btMultiBodyLinkFloatData_m_linkName_set)
    __swig_setmethods__["m_jointName"] = _bullet.btMultiBodyLinkFloatData_m_jointName_set
    __swig_getmethods__["m_jointName"] = _bullet.btMultiBodyLinkFloatData_m_jointName_get
    if _newclass:
        m_jointName = _swig_property(_bullet.btMultiBodyLinkFloatData_m_jointName_get, _bullet.btMultiBodyLinkFloatData_m_jointName_set)
    __swig_setmethods__["m_linkCollider"] = _bullet.btMultiBodyLinkFloatData_m_linkCollider_set
    __swig_getmethods__["m_linkCollider"] = _bullet.btMultiBodyLinkFloatData_m_linkCollider_get
    if _newclass:
        m_linkCollider = _swig_property(_bullet.btMultiBodyLinkFloatData_m_linkCollider_get, _bullet.btMultiBodyLinkFloatData_m_linkCollider_set)
    __swig_setmethods__["m_paddingPtr"] = _bullet.btMultiBodyLinkFloatData_m_paddingPtr_set
    __swig_getmethods__["m_paddingPtr"] = _bullet.btMultiBodyLinkFloatData_m_paddingPtr_get
    if _newclass:
        m_paddingPtr = _swig_property(_bullet.btMultiBodyLinkFloatData_m_paddingPtr_get, _bullet.btMultiBodyLinkFloatData_m_paddingPtr_set)

    def __init__(self):
        """__init__(btMultiBodyLinkFloatData self) -> btMultiBodyLinkFloatData"""
        this = _bullet.new_btMultiBodyLinkFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyLinkFloatData
    __del__ = lambda self: None
btMultiBodyLinkFloatData_swigregister = _bullet.btMultiBodyLinkFloatData_swigregister
btMultiBodyLinkFloatData_swigregister(btMultiBodyLinkFloatData)

class btMultiBodyDoubleData(_object):
    """Proxy of C++ btMultiBodyDoubleData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyDoubleData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyDoubleData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_baseWorldTransform"] = _bullet.btMultiBodyDoubleData_m_baseWorldTransform_set
    __swig_getmethods__["m_baseWorldTransform"] = _bullet.btMultiBodyDoubleData_m_baseWorldTransform_get
    if _newclass:
        m_baseWorldTransform = _swig_property(_bullet.btMultiBodyDoubleData_m_baseWorldTransform_get, _bullet.btMultiBodyDoubleData_m_baseWorldTransform_set)
    __swig_setmethods__["m_baseInertia"] = _bullet.btMultiBodyDoubleData_m_baseInertia_set
    __swig_getmethods__["m_baseInertia"] = _bullet.btMultiBodyDoubleData_m_baseInertia_get
    if _newclass:
        m_baseInertia = _swig_property(_bullet.btMultiBodyDoubleData_m_baseInertia_get, _bullet.btMultiBodyDoubleData_m_baseInertia_set)
    __swig_setmethods__["m_baseMass"] = _bullet.btMultiBodyDoubleData_m_baseMass_set
    __swig_getmethods__["m_baseMass"] = _bullet.btMultiBodyDoubleData_m_baseMass_get
    if _newclass:
        m_baseMass = _swig_property(_bullet.btMultiBodyDoubleData_m_baseMass_get, _bullet.btMultiBodyDoubleData_m_baseMass_set)
    __swig_setmethods__["m_baseName"] = _bullet.btMultiBodyDoubleData_m_baseName_set
    __swig_getmethods__["m_baseName"] = _bullet.btMultiBodyDoubleData_m_baseName_get
    if _newclass:
        m_baseName = _swig_property(_bullet.btMultiBodyDoubleData_m_baseName_get, _bullet.btMultiBodyDoubleData_m_baseName_set)
    __swig_setmethods__["m_links"] = _bullet.btMultiBodyDoubleData_m_links_set
    __swig_getmethods__["m_links"] = _bullet.btMultiBodyDoubleData_m_links_get
    if _newclass:
        m_links = _swig_property(_bullet.btMultiBodyDoubleData_m_links_get, _bullet.btMultiBodyDoubleData_m_links_set)
    __swig_setmethods__["m_baseCollider"] = _bullet.btMultiBodyDoubleData_m_baseCollider_set
    __swig_getmethods__["m_baseCollider"] = _bullet.btMultiBodyDoubleData_m_baseCollider_get
    if _newclass:
        m_baseCollider = _swig_property(_bullet.btMultiBodyDoubleData_m_baseCollider_get, _bullet.btMultiBodyDoubleData_m_baseCollider_set)
    __swig_setmethods__["m_paddingPtr"] = _bullet.btMultiBodyDoubleData_m_paddingPtr_set
    __swig_getmethods__["m_paddingPtr"] = _bullet.btMultiBodyDoubleData_m_paddingPtr_get
    if _newclass:
        m_paddingPtr = _swig_property(_bullet.btMultiBodyDoubleData_m_paddingPtr_get, _bullet.btMultiBodyDoubleData_m_paddingPtr_set)
    __swig_setmethods__["m_numLinks"] = _bullet.btMultiBodyDoubleData_m_numLinks_set
    __swig_getmethods__["m_numLinks"] = _bullet.btMultiBodyDoubleData_m_numLinks_get
    if _newclass:
        m_numLinks = _swig_property(_bullet.btMultiBodyDoubleData_m_numLinks_get, _bullet.btMultiBodyDoubleData_m_numLinks_set)
    __swig_setmethods__["m_padding"] = _bullet.btMultiBodyDoubleData_m_padding_set
    __swig_getmethods__["m_padding"] = _bullet.btMultiBodyDoubleData_m_padding_get
    if _newclass:
        m_padding = _swig_property(_bullet.btMultiBodyDoubleData_m_padding_get, _bullet.btMultiBodyDoubleData_m_padding_set)

    def __init__(self):
        """__init__(btMultiBodyDoubleData self) -> btMultiBodyDoubleData"""
        this = _bullet.new_btMultiBodyDoubleData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyDoubleData
    __del__ = lambda self: None
btMultiBodyDoubleData_swigregister = _bullet.btMultiBodyDoubleData_swigregister
btMultiBodyDoubleData_swigregister(btMultiBodyDoubleData)

class btMultiBodyFloatData(_object):
    """Proxy of C++ btMultiBodyFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_baseName"] = _bullet.btMultiBodyFloatData_m_baseName_set
    __swig_getmethods__["m_baseName"] = _bullet.btMultiBodyFloatData_m_baseName_get
    if _newclass:
        m_baseName = _swig_property(_bullet.btMultiBodyFloatData_m_baseName_get, _bullet.btMultiBodyFloatData_m_baseName_set)
    __swig_setmethods__["m_links"] = _bullet.btMultiBodyFloatData_m_links_set
    __swig_getmethods__["m_links"] = _bullet.btMultiBodyFloatData_m_links_get
    if _newclass:
        m_links = _swig_property(_bullet.btMultiBodyFloatData_m_links_get, _bullet.btMultiBodyFloatData_m_links_set)
    __swig_setmethods__["m_baseCollider"] = _bullet.btMultiBodyFloatData_m_baseCollider_set
    __swig_getmethods__["m_baseCollider"] = _bullet.btMultiBodyFloatData_m_baseCollider_get
    if _newclass:
        m_baseCollider = _swig_property(_bullet.btMultiBodyFloatData_m_baseCollider_get, _bullet.btMultiBodyFloatData_m_baseCollider_set)
    __swig_setmethods__["m_baseWorldTransform"] = _bullet.btMultiBodyFloatData_m_baseWorldTransform_set
    __swig_getmethods__["m_baseWorldTransform"] = _bullet.btMultiBodyFloatData_m_baseWorldTransform_get
    if _newclass:
        m_baseWorldTransform = _swig_property(_bullet.btMultiBodyFloatData_m_baseWorldTransform_get, _bullet.btMultiBodyFloatData_m_baseWorldTransform_set)
    __swig_setmethods__["m_baseInertia"] = _bullet.btMultiBodyFloatData_m_baseInertia_set
    __swig_getmethods__["m_baseInertia"] = _bullet.btMultiBodyFloatData_m_baseInertia_get
    if _newclass:
        m_baseInertia = _swig_property(_bullet.btMultiBodyFloatData_m_baseInertia_get, _bullet.btMultiBodyFloatData_m_baseInertia_set)
    __swig_setmethods__["m_baseMass"] = _bullet.btMultiBodyFloatData_m_baseMass_set
    __swig_getmethods__["m_baseMass"] = _bullet.btMultiBodyFloatData_m_baseMass_get
    if _newclass:
        m_baseMass = _swig_property(_bullet.btMultiBodyFloatData_m_baseMass_get, _bullet.btMultiBodyFloatData_m_baseMass_set)
    __swig_setmethods__["m_numLinks"] = _bullet.btMultiBodyFloatData_m_numLinks_set
    __swig_getmethods__["m_numLinks"] = _bullet.btMultiBodyFloatData_m_numLinks_get
    if _newclass:
        m_numLinks = _swig_property(_bullet.btMultiBodyFloatData_m_numLinks_get, _bullet.btMultiBodyFloatData_m_numLinks_set)

    def __init__(self):
        """__init__(btMultiBodyFloatData self) -> btMultiBodyFloatData"""
        this = _bullet.new_btMultiBodyFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyFloatData
    __del__ = lambda self: None
btMultiBodyFloatData_swigregister = _bullet.btMultiBodyFloatData_swigregister
btMultiBodyFloatData_swigregister(btMultiBodyFloatData)

class btMultiBodySolverConstraint(_object):
    """Proxy of C++ btMultiBodySolverConstraint class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodySolverConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodySolverConstraint, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btMultiBodySolverConstraint self) -> btMultiBodySolverConstraint"""
        this = _bullet.new_btMultiBodySolverConstraint()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_deltaVelAindex"] = _bullet.btMultiBodySolverConstraint_m_deltaVelAindex_set
    __swig_getmethods__["m_deltaVelAindex"] = _bullet.btMultiBodySolverConstraint_m_deltaVelAindex_get
    if _newclass:
        m_deltaVelAindex = _swig_property(_bullet.btMultiBodySolverConstraint_m_deltaVelAindex_get, _bullet.btMultiBodySolverConstraint_m_deltaVelAindex_set)
    __swig_setmethods__["m_jacAindex"] = _bullet.btMultiBodySolverConstraint_m_jacAindex_set
    __swig_getmethods__["m_jacAindex"] = _bullet.btMultiBodySolverConstraint_m_jacAindex_get
    if _newclass:
        m_jacAindex = _swig_property(_bullet.btMultiBodySolverConstraint_m_jacAindex_get, _bullet.btMultiBodySolverConstraint_m_jacAindex_set)
    __swig_setmethods__["m_deltaVelBindex"] = _bullet.btMultiBodySolverConstraint_m_deltaVelBindex_set
    __swig_getmethods__["m_deltaVelBindex"] = _bullet.btMultiBodySolverConstraint_m_deltaVelBindex_get
    if _newclass:
        m_deltaVelBindex = _swig_property(_bullet.btMultiBodySolverConstraint_m_deltaVelBindex_get, _bullet.btMultiBodySolverConstraint_m_deltaVelBindex_set)
    __swig_setmethods__["m_jacBindex"] = _bullet.btMultiBodySolverConstraint_m_jacBindex_set
    __swig_getmethods__["m_jacBindex"] = _bullet.btMultiBodySolverConstraint_m_jacBindex_get
    if _newclass:
        m_jacBindex = _swig_property(_bullet.btMultiBodySolverConstraint_m_jacBindex_get, _bullet.btMultiBodySolverConstraint_m_jacBindex_set)
    __swig_setmethods__["m_relpos1CrossNormal"] = _bullet.btMultiBodySolverConstraint_m_relpos1CrossNormal_set
    __swig_getmethods__["m_relpos1CrossNormal"] = _bullet.btMultiBodySolverConstraint_m_relpos1CrossNormal_get
    if _newclass:
        m_relpos1CrossNormal = _swig_property(_bullet.btMultiBodySolverConstraint_m_relpos1CrossNormal_get, _bullet.btMultiBodySolverConstraint_m_relpos1CrossNormal_set)
    __swig_setmethods__["m_contactNormal1"] = _bullet.btMultiBodySolverConstraint_m_contactNormal1_set
    __swig_getmethods__["m_contactNormal1"] = _bullet.btMultiBodySolverConstraint_m_contactNormal1_get
    if _newclass:
        m_contactNormal1 = _swig_property(_bullet.btMultiBodySolverConstraint_m_contactNormal1_get, _bullet.btMultiBodySolverConstraint_m_contactNormal1_set)
    __swig_setmethods__["m_relpos2CrossNormal"] = _bullet.btMultiBodySolverConstraint_m_relpos2CrossNormal_set
    __swig_getmethods__["m_relpos2CrossNormal"] = _bullet.btMultiBodySolverConstraint_m_relpos2CrossNormal_get
    if _newclass:
        m_relpos2CrossNormal = _swig_property(_bullet.btMultiBodySolverConstraint_m_relpos2CrossNormal_get, _bullet.btMultiBodySolverConstraint_m_relpos2CrossNormal_set)
    __swig_setmethods__["m_contactNormal2"] = _bullet.btMultiBodySolverConstraint_m_contactNormal2_set
    __swig_getmethods__["m_contactNormal2"] = _bullet.btMultiBodySolverConstraint_m_contactNormal2_get
    if _newclass:
        m_contactNormal2 = _swig_property(_bullet.btMultiBodySolverConstraint_m_contactNormal2_get, _bullet.btMultiBodySolverConstraint_m_contactNormal2_set)
    __swig_setmethods__["m_angularComponentA"] = _bullet.btMultiBodySolverConstraint_m_angularComponentA_set
    __swig_getmethods__["m_angularComponentA"] = _bullet.btMultiBodySolverConstraint_m_angularComponentA_get
    if _newclass:
        m_angularComponentA = _swig_property(_bullet.btMultiBodySolverConstraint_m_angularComponentA_get, _bullet.btMultiBodySolverConstraint_m_angularComponentA_set)
    __swig_setmethods__["m_angularComponentB"] = _bullet.btMultiBodySolverConstraint_m_angularComponentB_set
    __swig_getmethods__["m_angularComponentB"] = _bullet.btMultiBodySolverConstraint_m_angularComponentB_get
    if _newclass:
        m_angularComponentB = _swig_property(_bullet.btMultiBodySolverConstraint_m_angularComponentB_get, _bullet.btMultiBodySolverConstraint_m_angularComponentB_set)
    __swig_setmethods__["m_appliedPushImpulse"] = _bullet.btMultiBodySolverConstraint_m_appliedPushImpulse_set
    __swig_getmethods__["m_appliedPushImpulse"] = _bullet.btMultiBodySolverConstraint_m_appliedPushImpulse_get
    if _newclass:
        m_appliedPushImpulse = _swig_property(_bullet.btMultiBodySolverConstraint_m_appliedPushImpulse_get, _bullet.btMultiBodySolverConstraint_m_appliedPushImpulse_set)
    __swig_setmethods__["m_appliedImpulse"] = _bullet.btMultiBodySolverConstraint_m_appliedImpulse_set
    __swig_getmethods__["m_appliedImpulse"] = _bullet.btMultiBodySolverConstraint_m_appliedImpulse_get
    if _newclass:
        m_appliedImpulse = _swig_property(_bullet.btMultiBodySolverConstraint_m_appliedImpulse_get, _bullet.btMultiBodySolverConstraint_m_appliedImpulse_set)
    __swig_setmethods__["m_friction"] = _bullet.btMultiBodySolverConstraint_m_friction_set
    __swig_getmethods__["m_friction"] = _bullet.btMultiBodySolverConstraint_m_friction_get
    if _newclass:
        m_friction = _swig_property(_bullet.btMultiBodySolverConstraint_m_friction_get, _bullet.btMultiBodySolverConstraint_m_friction_set)
    __swig_setmethods__["m_jacDiagABInv"] = _bullet.btMultiBodySolverConstraint_m_jacDiagABInv_set
    __swig_getmethods__["m_jacDiagABInv"] = _bullet.btMultiBodySolverConstraint_m_jacDiagABInv_get
    if _newclass:
        m_jacDiagABInv = _swig_property(_bullet.btMultiBodySolverConstraint_m_jacDiagABInv_get, _bullet.btMultiBodySolverConstraint_m_jacDiagABInv_set)
    __swig_setmethods__["m_rhs"] = _bullet.btMultiBodySolverConstraint_m_rhs_set
    __swig_getmethods__["m_rhs"] = _bullet.btMultiBodySolverConstraint_m_rhs_get
    if _newclass:
        m_rhs = _swig_property(_bullet.btMultiBodySolverConstraint_m_rhs_get, _bullet.btMultiBodySolverConstraint_m_rhs_set)
    __swig_setmethods__["m_cfm"] = _bullet.btMultiBodySolverConstraint_m_cfm_set
    __swig_getmethods__["m_cfm"] = _bullet.btMultiBodySolverConstraint_m_cfm_get
    if _newclass:
        m_cfm = _swig_property(_bullet.btMultiBodySolverConstraint_m_cfm_get, _bullet.btMultiBodySolverConstraint_m_cfm_set)
    __swig_setmethods__["m_lowerLimit"] = _bullet.btMultiBodySolverConstraint_m_lowerLimit_set
    __swig_getmethods__["m_lowerLimit"] = _bullet.btMultiBodySolverConstraint_m_lowerLimit_get
    if _newclass:
        m_lowerLimit = _swig_property(_bullet.btMultiBodySolverConstraint_m_lowerLimit_get, _bullet.btMultiBodySolverConstraint_m_lowerLimit_set)
    __swig_setmethods__["m_upperLimit"] = _bullet.btMultiBodySolverConstraint_m_upperLimit_set
    __swig_getmethods__["m_upperLimit"] = _bullet.btMultiBodySolverConstraint_m_upperLimit_get
    if _newclass:
        m_upperLimit = _swig_property(_bullet.btMultiBodySolverConstraint_m_upperLimit_get, _bullet.btMultiBodySolverConstraint_m_upperLimit_set)
    __swig_setmethods__["m_rhsPenetration"] = _bullet.btMultiBodySolverConstraint_m_rhsPenetration_set
    __swig_getmethods__["m_rhsPenetration"] = _bullet.btMultiBodySolverConstraint_m_rhsPenetration_get
    if _newclass:
        m_rhsPenetration = _swig_property(_bullet.btMultiBodySolverConstraint_m_rhsPenetration_get, _bullet.btMultiBodySolverConstraint_m_rhsPenetration_set)
    __swig_setmethods__["m_overrideNumSolverIterations"] = _bullet.btMultiBodySolverConstraint_m_overrideNumSolverIterations_set
    __swig_getmethods__["m_overrideNumSolverIterations"] = _bullet.btMultiBodySolverConstraint_m_overrideNumSolverIterations_get
    if _newclass:
        m_overrideNumSolverIterations = _swig_property(_bullet.btMultiBodySolverConstraint_m_overrideNumSolverIterations_get, _bullet.btMultiBodySolverConstraint_m_overrideNumSolverIterations_set)
    __swig_setmethods__["m_frictionIndex"] = _bullet.btMultiBodySolverConstraint_m_frictionIndex_set
    __swig_getmethods__["m_frictionIndex"] = _bullet.btMultiBodySolverConstraint_m_frictionIndex_get
    if _newclass:
        m_frictionIndex = _swig_property(_bullet.btMultiBodySolverConstraint_m_frictionIndex_get, _bullet.btMultiBodySolverConstraint_m_frictionIndex_set)
    __swig_setmethods__["m_solverBodyIdA"] = _bullet.btMultiBodySolverConstraint_m_solverBodyIdA_set
    __swig_getmethods__["m_solverBodyIdA"] = _bullet.btMultiBodySolverConstraint_m_solverBodyIdA_get
    if _newclass:
        m_solverBodyIdA = _swig_property(_bullet.btMultiBodySolverConstraint_m_solverBodyIdA_get, _bullet.btMultiBodySolverConstraint_m_solverBodyIdA_set)
    __swig_setmethods__["m_multiBodyA"] = _bullet.btMultiBodySolverConstraint_m_multiBodyA_set
    __swig_getmethods__["m_multiBodyA"] = _bullet.btMultiBodySolverConstraint_m_multiBodyA_get
    if _newclass:
        m_multiBodyA = _swig_property(_bullet.btMultiBodySolverConstraint_m_multiBodyA_get, _bullet.btMultiBodySolverConstraint_m_multiBodyA_set)
    __swig_setmethods__["m_linkA"] = _bullet.btMultiBodySolverConstraint_m_linkA_set
    __swig_getmethods__["m_linkA"] = _bullet.btMultiBodySolverConstraint_m_linkA_get
    if _newclass:
        m_linkA = _swig_property(_bullet.btMultiBodySolverConstraint_m_linkA_get, _bullet.btMultiBodySolverConstraint_m_linkA_set)
    __swig_setmethods__["m_solverBodyIdB"] = _bullet.btMultiBodySolverConstraint_m_solverBodyIdB_set
    __swig_getmethods__["m_solverBodyIdB"] = _bullet.btMultiBodySolverConstraint_m_solverBodyIdB_get
    if _newclass:
        m_solverBodyIdB = _swig_property(_bullet.btMultiBodySolverConstraint_m_solverBodyIdB_get, _bullet.btMultiBodySolverConstraint_m_solverBodyIdB_set)
    __swig_setmethods__["m_multiBodyB"] = _bullet.btMultiBodySolverConstraint_m_multiBodyB_set
    __swig_getmethods__["m_multiBodyB"] = _bullet.btMultiBodySolverConstraint_m_multiBodyB_get
    if _newclass:
        m_multiBodyB = _swig_property(_bullet.btMultiBodySolverConstraint_m_multiBodyB_get, _bullet.btMultiBodySolverConstraint_m_multiBodyB_set)
    __swig_setmethods__["m_linkB"] = _bullet.btMultiBodySolverConstraint_m_linkB_set
    __swig_getmethods__["m_linkB"] = _bullet.btMultiBodySolverConstraint_m_linkB_get
    if _newclass:
        m_linkB = _swig_property(_bullet.btMultiBodySolverConstraint_m_linkB_get, _bullet.btMultiBodySolverConstraint_m_linkB_set)
    __swig_setmethods__["m_orgConstraint"] = _bullet.btMultiBodySolverConstraint_m_orgConstraint_set
    __swig_getmethods__["m_orgConstraint"] = _bullet.btMultiBodySolverConstraint_m_orgConstraint_get
    if _newclass:
        m_orgConstraint = _swig_property(_bullet.btMultiBodySolverConstraint_m_orgConstraint_get, _bullet.btMultiBodySolverConstraint_m_orgConstraint_set)
    __swig_setmethods__["m_orgDofIndex"] = _bullet.btMultiBodySolverConstraint_m_orgDofIndex_set
    __swig_getmethods__["m_orgDofIndex"] = _bullet.btMultiBodySolverConstraint_m_orgDofIndex_get
    if _newclass:
        m_orgDofIndex = _swig_property(_bullet.btMultiBodySolverConstraint_m_orgDofIndex_get, _bullet.btMultiBodySolverConstraint_m_orgDofIndex_set)
    BT_SOLVER_CONTACT_1D = _bullet.btMultiBodySolverConstraint_BT_SOLVER_CONTACT_1D
    BT_SOLVER_FRICTION_1D = _bullet.btMultiBodySolverConstraint_BT_SOLVER_FRICTION_1D
    __swig_destroy__ = _bullet.delete_btMultiBodySolverConstraint
    __del__ = lambda self: None
btMultiBodySolverConstraint_swigregister = _bullet.btMultiBodySolverConstraint_swigregister
btMultiBodySolverConstraint_swigregister(btMultiBodySolverConstraint)

class btMultiBodyJacobianData(_object):
    """Proxy of C++ btMultiBodyJacobianData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyJacobianData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyJacobianData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_jacobians"] = _bullet.btMultiBodyJacobianData_m_jacobians_set
    __swig_getmethods__["m_jacobians"] = _bullet.btMultiBodyJacobianData_m_jacobians_get
    if _newclass:
        m_jacobians = _swig_property(_bullet.btMultiBodyJacobianData_m_jacobians_get, _bullet.btMultiBodyJacobianData_m_jacobians_set)
    __swig_setmethods__["m_deltaVelocitiesUnitImpulse"] = _bullet.btMultiBodyJacobianData_m_deltaVelocitiesUnitImpulse_set
    __swig_getmethods__["m_deltaVelocitiesUnitImpulse"] = _bullet.btMultiBodyJacobianData_m_deltaVelocitiesUnitImpulse_get
    if _newclass:
        m_deltaVelocitiesUnitImpulse = _swig_property(_bullet.btMultiBodyJacobianData_m_deltaVelocitiesUnitImpulse_get, _bullet.btMultiBodyJacobianData_m_deltaVelocitiesUnitImpulse_set)
    __swig_setmethods__["m_deltaVelocities"] = _bullet.btMultiBodyJacobianData_m_deltaVelocities_set
    __swig_getmethods__["m_deltaVelocities"] = _bullet.btMultiBodyJacobianData_m_deltaVelocities_get
    if _newclass:
        m_deltaVelocities = _swig_property(_bullet.btMultiBodyJacobianData_m_deltaVelocities_get, _bullet.btMultiBodyJacobianData_m_deltaVelocities_set)
    __swig_setmethods__["scratch_r"] = _bullet.btMultiBodyJacobianData_scratch_r_set
    __swig_getmethods__["scratch_r"] = _bullet.btMultiBodyJacobianData_scratch_r_get
    if _newclass:
        scratch_r = _swig_property(_bullet.btMultiBodyJacobianData_scratch_r_get, _bullet.btMultiBodyJacobianData_scratch_r_set)
    __swig_setmethods__["scratch_v"] = _bullet.btMultiBodyJacobianData_scratch_v_set
    __swig_getmethods__["scratch_v"] = _bullet.btMultiBodyJacobianData_scratch_v_get
    if _newclass:
        scratch_v = _swig_property(_bullet.btMultiBodyJacobianData_scratch_v_get, _bullet.btMultiBodyJacobianData_scratch_v_set)
    __swig_setmethods__["scratch_m"] = _bullet.btMultiBodyJacobianData_scratch_m_set
    __swig_getmethods__["scratch_m"] = _bullet.btMultiBodyJacobianData_scratch_m_get
    if _newclass:
        scratch_m = _swig_property(_bullet.btMultiBodyJacobianData_scratch_m_get, _bullet.btMultiBodyJacobianData_scratch_m_set)
    __swig_setmethods__["m_solverBodyPool"] = _bullet.btMultiBodyJacobianData_m_solverBodyPool_set
    __swig_getmethods__["m_solverBodyPool"] = _bullet.btMultiBodyJacobianData_m_solverBodyPool_get
    if _newclass:
        m_solverBodyPool = _swig_property(_bullet.btMultiBodyJacobianData_m_solverBodyPool_get, _bullet.btMultiBodyJacobianData_m_solverBodyPool_set)
    __swig_setmethods__["m_fixedBodyId"] = _bullet.btMultiBodyJacobianData_m_fixedBodyId_set
    __swig_getmethods__["m_fixedBodyId"] = _bullet.btMultiBodyJacobianData_m_fixedBodyId_get
    if _newclass:
        m_fixedBodyId = _swig_property(_bullet.btMultiBodyJacobianData_m_fixedBodyId_get, _bullet.btMultiBodyJacobianData_m_fixedBodyId_set)

    def __init__(self):
        """__init__(btMultiBodyJacobianData self) -> btMultiBodyJacobianData"""
        this = _bullet.new_btMultiBodyJacobianData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyJacobianData
    __del__ = lambda self: None
btMultiBodyJacobianData_swigregister = _bullet.btMultiBodyJacobianData_swigregister
btMultiBodyJacobianData_swigregister(btMultiBodyJacobianData)

class btMultiBodyConstraint(_object):
    """Proxy of C++ btMultiBodyConstraint class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyConstraint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btMultiBodyConstraint
    __del__ = lambda self: None

    def updateJacobianSizes(self):
        """updateJacobianSizes(btMultiBodyConstraint self)"""
        return _bullet.btMultiBodyConstraint_updateJacobianSizes(self)


    def allocateJacobiansMultiDof(self):
        """allocateJacobiansMultiDof(btMultiBodyConstraint self)"""
        return _bullet.btMultiBodyConstraint_allocateJacobiansMultiDof(self)


    def setFrameInB(self, frameInB):
        """setFrameInB(btMultiBodyConstraint self, btMatrix3x3 const & frameInB)"""
        return _bullet.btMultiBodyConstraint_setFrameInB(self, frameInB)


    def setPivotInB(self, pivotInB):
        """setPivotInB(btMultiBodyConstraint self, btVector3 const & pivotInB)"""
        return _bullet.btMultiBodyConstraint_setPivotInB(self, pivotInB)


    def finalizeMultiDof(self):
        """finalizeMultiDof(btMultiBodyConstraint self)"""
        return _bullet.btMultiBodyConstraint_finalizeMultiDof(self)


    def getIslandIdA(self):
        """getIslandIdA(btMultiBodyConstraint self) -> int"""
        return _bullet.btMultiBodyConstraint_getIslandIdA(self)


    def getIslandIdB(self):
        """getIslandIdB(btMultiBodyConstraint self) -> int"""
        return _bullet.btMultiBodyConstraint_getIslandIdB(self)


    def createConstraintRows(self, constraintRows, data, infoGlobal):
        """createConstraintRows(btMultiBodyConstraint self, btMultiBodyConstraintArray & constraintRows, btMultiBodyJacobianData data, btContactSolverInfo infoGlobal)"""
        return _bullet.btMultiBodyConstraint_createConstraintRows(self, constraintRows, data, infoGlobal)


    def getNumRows(self):
        """getNumRows(btMultiBodyConstraint self) -> int"""
        return _bullet.btMultiBodyConstraint_getNumRows(self)


    def getMultiBodyA(self):
        """getMultiBodyA(btMultiBodyConstraint self) -> btMultiBody"""
        return _bullet.btMultiBodyConstraint_getMultiBodyA(self)


    def getMultiBodyB(self):
        """getMultiBodyB(btMultiBodyConstraint self) -> btMultiBody"""
        return _bullet.btMultiBodyConstraint_getMultiBodyB(self)


    def internalSetAppliedImpulse(self, dof, appliedImpulse):
        """internalSetAppliedImpulse(btMultiBodyConstraint self, int dof, btScalar appliedImpulse)"""
        return _bullet.btMultiBodyConstraint_internalSetAppliedImpulse(self, dof, appliedImpulse)


    def getAppliedImpulse(self, dof):
        """getAppliedImpulse(btMultiBodyConstraint self, int dof) -> btScalar"""
        return _bullet.btMultiBodyConstraint_getAppliedImpulse(self, dof)


    def getPosition(self, row):
        """getPosition(btMultiBodyConstraint self, int row) -> btScalar"""
        return _bullet.btMultiBodyConstraint_getPosition(self, row)


    def setPosition(self, row, pos):
        """setPosition(btMultiBodyConstraint self, int row, btScalar pos)"""
        return _bullet.btMultiBodyConstraint_setPosition(self, row, pos)


    def isUnilateral(self):
        """isUnilateral(btMultiBodyConstraint self) -> bool"""
        return _bullet.btMultiBodyConstraint_isUnilateral(self)


    def jacobianA(self, *args):
        """
        jacobianA(btMultiBodyConstraint self, int row) -> btScalar
        jacobianA(btMultiBodyConstraint self, int row) -> btScalar const *
        """
        return _bullet.btMultiBodyConstraint_jacobianA(self, *args)


    def jacobianB(self, *args):
        """
        jacobianB(btMultiBodyConstraint self, int row) -> btScalar
        jacobianB(btMultiBodyConstraint self, int row) -> btScalar const *
        """
        return _bullet.btMultiBodyConstraint_jacobianB(self, *args)


    def getMaxAppliedImpulse(self):
        """getMaxAppliedImpulse(btMultiBodyConstraint self) -> btScalar"""
        return _bullet.btMultiBodyConstraint_getMaxAppliedImpulse(self)


    def setMaxAppliedImpulse(self, maxImp):
        """setMaxAppliedImpulse(btMultiBodyConstraint self, btScalar maxImp)"""
        return _bullet.btMultiBodyConstraint_setMaxAppliedImpulse(self, maxImp)


    def debugDraw(self, drawer):
        """debugDraw(btMultiBodyConstraint self, btIDebugDraw drawer)"""
        return _bullet.btMultiBodyConstraint_debugDraw(self, drawer)

btMultiBodyConstraint_swigregister = _bullet.btMultiBodyConstraint_swigregister
btMultiBodyConstraint_swigregister(btMultiBodyConstraint)

class btMultiBodyConstraintSolver(_object):
    """Proxy of C++ btMultiBodyConstraintSolver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyConstraintSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyConstraintSolver, name)
    __repr__ = _swig_repr

    def solveGroupCacheFriendlyFinish(self, bodies, numBodies, infoGlobal):
        """solveGroupCacheFriendlyFinish(btMultiBodyConstraintSolver self, btCollisionObject ** bodies, int numBodies, btContactSolverInfo infoGlobal) -> btScalar"""
        return _bullet.btMultiBodyConstraintSolver_solveGroupCacheFriendlyFinish(self, bodies, numBodies, infoGlobal)


    def solveMultiBodyGroup(self, bodies, numBodies, manifold, numManifolds, constraints, numConstraints, multiBodyConstraints, numMultiBodyConstraints, info, debugDrawer, dispatcher):
        """solveMultiBodyGroup(btMultiBodyConstraintSolver self, btCollisionObject ** bodies, int numBodies, btPersistentManifold ** manifold, int numManifolds, btTypedConstraint ** constraints, int numConstraints, btMultiBodyConstraint ** multiBodyConstraints, int numMultiBodyConstraints, btContactSolverInfo info, btIDebugDraw debugDrawer, btDispatcher dispatcher)"""
        return _bullet.btMultiBodyConstraintSolver_solveMultiBodyGroup(self, bodies, numBodies, manifold, numManifolds, constraints, numConstraints, multiBodyConstraints, numMultiBodyConstraints, info, debugDrawer, dispatcher)


    def __init__(self):
        """__init__(btMultiBodyConstraintSolver self) -> btMultiBodyConstraintSolver"""
        this = _bullet.new_btMultiBodyConstraintSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyConstraintSolver
    __del__ = lambda self: None
btMultiBodyConstraintSolver_swigregister = _bullet.btMultiBodyConstraintSolver_swigregister
btMultiBodyConstraintSolver_swigregister(btMultiBodyConstraintSolver)

class btMultiBodyDynamicsWorld(btDiscreteDynamicsWorld):
    """Proxy of C++ btMultiBodyDynamicsWorld class."""

    __swig_setmethods__ = {}
    for _s in [btDiscreteDynamicsWorld]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btDiscreteDynamicsWorld]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyDynamicsWorld, name)
    __repr__ = _swig_repr

    def __init__(self, dispatcher, pairCache, constraintSolver, collisionConfiguration):
        """__init__(btMultiBodyDynamicsWorld self, btDispatcher dispatcher, btBroadphaseInterface pairCache, btMultiBodyConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) -> btMultiBodyDynamicsWorld"""
        this = _bullet.new_btMultiBodyDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyDynamicsWorld
    __del__ = lambda self: None

    def addMultiBody(self, *args):
        """
        addMultiBody(btMultiBodyDynamicsWorld self, btMultiBody body, int group, int mask)
        addMultiBody(btMultiBodyDynamicsWorld self, btMultiBody body, int group)
        addMultiBody(btMultiBodyDynamicsWorld self, btMultiBody body)
        """
        return _bullet.btMultiBodyDynamicsWorld_addMultiBody(self, *args)


    def removeMultiBody(self, body):
        """removeMultiBody(btMultiBodyDynamicsWorld self, btMultiBody body)"""
        return _bullet.btMultiBodyDynamicsWorld_removeMultiBody(self, body)


    def getNumMultibodies(self):
        """getNumMultibodies(btMultiBodyDynamicsWorld self) -> int"""
        return _bullet.btMultiBodyDynamicsWorld_getNumMultibodies(self)


    def getMultiBody(self, mbIndex):
        """getMultiBody(btMultiBodyDynamicsWorld self, int mbIndex) -> btMultiBody"""
        return _bullet.btMultiBodyDynamicsWorld_getMultiBody(self, mbIndex)


    def addMultiBodyConstraint(self, constraint):
        """addMultiBodyConstraint(btMultiBodyDynamicsWorld self, btMultiBodyConstraint constraint)"""
        return _bullet.btMultiBodyDynamicsWorld_addMultiBodyConstraint(self, constraint)


    def getNumMultiBodyConstraints(self):
        """getNumMultiBodyConstraints(btMultiBodyDynamicsWorld self) -> int"""
        return _bullet.btMultiBodyDynamicsWorld_getNumMultiBodyConstraints(self)


    def getMultiBodyConstraint(self, *args):
        """
        getMultiBodyConstraint(btMultiBodyDynamicsWorld self, int constraintIndex) -> btMultiBodyConstraint
        getMultiBodyConstraint(btMultiBodyDynamicsWorld self, int constraintIndex) -> btMultiBodyConstraint
        """
        return _bullet.btMultiBodyDynamicsWorld_getMultiBodyConstraint(self, *args)


    def removeMultiBodyConstraint(self, constraint):
        """removeMultiBodyConstraint(btMultiBodyDynamicsWorld self, btMultiBodyConstraint constraint)"""
        return _bullet.btMultiBodyDynamicsWorld_removeMultiBodyConstraint(self, constraint)


    def integrateTransforms(self, timeStep):
        """integrateTransforms(btMultiBodyDynamicsWorld self, btScalar timeStep)"""
        return _bullet.btMultiBodyDynamicsWorld_integrateTransforms(self, timeStep)


    def debugDrawMultiBodyConstraint(self, constraint):
        """debugDrawMultiBodyConstraint(btMultiBodyDynamicsWorld self, btMultiBodyConstraint constraint)"""
        return _bullet.btMultiBodyDynamicsWorld_debugDrawMultiBodyConstraint(self, constraint)


    def forwardKinematics(self):
        """forwardKinematics(btMultiBodyDynamicsWorld self)"""
        return _bullet.btMultiBodyDynamicsWorld_forwardKinematics(self)


    def clearMultiBodyConstraintForces(self):
        """clearMultiBodyConstraintForces(btMultiBodyDynamicsWorld self)"""
        return _bullet.btMultiBodyDynamicsWorld_clearMultiBodyConstraintForces(self)


    def clearMultiBodyForces(self):
        """clearMultiBodyForces(btMultiBodyDynamicsWorld self)"""
        return _bullet.btMultiBodyDynamicsWorld_clearMultiBodyForces(self)

btMultiBodyDynamicsWorld_swigregister = _bullet.btMultiBodyDynamicsWorld_swigregister
btMultiBodyDynamicsWorld_swigregister(btMultiBodyDynamicsWorld)

class btMultiBodyJointLimitConstraint(btMultiBodyConstraint):
    """Proxy of C++ btMultiBodyJointLimitConstraint class."""

    __swig_setmethods__ = {}
    for _s in [btMultiBodyConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyJointLimitConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [btMultiBodyConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyJointLimitConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, body, link, lower, upper):
        """__init__(btMultiBodyJointLimitConstraint self, btMultiBody body, int link, btScalar lower, btScalar upper) -> btMultiBodyJointLimitConstraint"""
        this = _bullet.new_btMultiBodyJointLimitConstraint(body, link, lower, upper)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyJointLimitConstraint
    __del__ = lambda self: None
btMultiBodyJointLimitConstraint_swigregister = _bullet.btMultiBodyJointLimitConstraint_swigregister
btMultiBodyJointLimitConstraint_swigregister(btMultiBodyJointLimitConstraint)

class btMultiBodyJointMotor(btMultiBodyConstraint):
    """Proxy of C++ btMultiBodyJointMotor class."""

    __swig_setmethods__ = {}
    for _s in [btMultiBodyConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyJointMotor, name, value)
    __swig_getmethods__ = {}
    for _s in [btMultiBodyConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyJointMotor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btMultiBodyJointMotor self, btMultiBody body, int link, btScalar desiredVelocity, btScalar maxMotorImpulse) -> btMultiBodyJointMotor
        __init__(btMultiBodyJointMotor self, btMultiBody body, int link, int linkDoF, btScalar desiredVelocity, btScalar maxMotorImpulse) -> btMultiBodyJointMotor
        """
        this = _bullet.new_btMultiBodyJointMotor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyJointMotor
    __del__ = lambda self: None

    def setVelocityTarget(self, velTarget, kd=1.):
        """
        setVelocityTarget(btMultiBodyJointMotor self, btScalar velTarget, btScalar kd=1.)
        setVelocityTarget(btMultiBodyJointMotor self, btScalar velTarget)
        """
        return _bullet.btMultiBodyJointMotor_setVelocityTarget(self, velTarget, kd)


    def setPositionTarget(self, posTarget, kp=1.):
        """
        setPositionTarget(btMultiBodyJointMotor self, btScalar posTarget, btScalar kp=1.)
        setPositionTarget(btMultiBodyJointMotor self, btScalar posTarget)
        """
        return _bullet.btMultiBodyJointMotor_setPositionTarget(self, posTarget, kp)


    def setErp(self, erp):
        """setErp(btMultiBodyJointMotor self, btScalar erp)"""
        return _bullet.btMultiBodyJointMotor_setErp(self, erp)


    def getErp(self):
        """getErp(btMultiBodyJointMotor self) -> btScalar"""
        return _bullet.btMultiBodyJointMotor_getErp(self)


    def setRhsClamp(self, rhsClamp):
        """setRhsClamp(btMultiBodyJointMotor self, btScalar rhsClamp)"""
        return _bullet.btMultiBodyJointMotor_setRhsClamp(self, rhsClamp)

btMultiBodyJointMotor_swigregister = _bullet.btMultiBodyJointMotor_swigregister
btMultiBodyJointMotor_swigregister(btMultiBodyJointMotor)

class btMultiBodyLinkCollider(btCollisionObject):
    """Proxy of C++ btMultiBodyLinkCollider class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyLinkCollider, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyLinkCollider, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_multiBody"] = _bullet.btMultiBodyLinkCollider_m_multiBody_set
    __swig_getmethods__["m_multiBody"] = _bullet.btMultiBodyLinkCollider_m_multiBody_get
    if _newclass:
        m_multiBody = _swig_property(_bullet.btMultiBodyLinkCollider_m_multiBody_get, _bullet.btMultiBodyLinkCollider_m_multiBody_set)
    __swig_setmethods__["m_link"] = _bullet.btMultiBodyLinkCollider_m_link_set
    __swig_getmethods__["m_link"] = _bullet.btMultiBodyLinkCollider_m_link_get
    if _newclass:
        m_link = _swig_property(_bullet.btMultiBodyLinkCollider_m_link_get, _bullet.btMultiBodyLinkCollider_m_link_set)

    def __init__(self, multiBody, link):
        """__init__(btMultiBodyLinkCollider self, btMultiBody multiBody, int link) -> btMultiBodyLinkCollider"""
        this = _bullet.new_btMultiBodyLinkCollider(multiBody, link)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def upcast(colObj):
        """upcast(btCollisionObject colObj) -> btMultiBodyLinkCollider"""
        return _bullet.btMultiBodyLinkCollider_upcast(colObj)

    upcast = staticmethod(upcast)

    def upcast_const(colObj):
        """upcast_const(btCollisionObject colObj) -> btMultiBodyLinkCollider"""
        return _bullet.btMultiBodyLinkCollider_upcast_const(colObj)

    upcast_const = staticmethod(upcast_const)
    __swig_destroy__ = _bullet.delete_btMultiBodyLinkCollider
    __del__ = lambda self: None
btMultiBodyLinkCollider_swigregister = _bullet.btMultiBodyLinkCollider_swigregister
btMultiBodyLinkCollider_swigregister(btMultiBodyLinkCollider)

def btMultiBodyLinkCollider_upcast(colObj):
    """btMultiBodyLinkCollider_upcast(btCollisionObject colObj) -> btMultiBodyLinkCollider"""
    return _bullet.btMultiBodyLinkCollider_upcast(colObj)

def btMultiBodyLinkCollider_upcast_const(colObj):
    """btMultiBodyLinkCollider_upcast_const(btCollisionObject colObj) -> btMultiBodyLinkCollider"""
    return _bullet.btMultiBodyLinkCollider_upcast_const(colObj)

class btMultiBodyPoint2Point(btMultiBodyConstraint):
    """Proxy of C++ btMultiBodyPoint2Point class."""

    __swig_setmethods__ = {}
    for _s in [btMultiBodyConstraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMultiBodyPoint2Point, name, value)
    __swig_getmethods__ = {}
    for _s in [btMultiBodyConstraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btMultiBodyPoint2Point, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btMultiBodyPoint2Point self, btMultiBody body, int link, btRigidBody bodyB, btVector3 const & pivotInA, btVector3 const & pivotInB) -> btMultiBodyPoint2Point
        __init__(btMultiBodyPoint2Point self, btMultiBody bodyA, int linkA, btMultiBody bodyB, int linkB, btVector3 const & pivotInA, btVector3 const & pivotInB) -> btMultiBodyPoint2Point
        """
        this = _bullet.new_btMultiBodyPoint2Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMultiBodyPoint2Point
    __del__ = lambda self: None

    def getPivotInB(self):
        """getPivotInB(btMultiBodyPoint2Point self) -> btVector3 const &"""
        return _bullet.btMultiBodyPoint2Point_getPivotInB(self)

btMultiBodyPoint2Point_swigregister = _bullet.btMultiBodyPoint2Point_swigregister
btMultiBodyPoint2Point_swigregister(btMultiBodyPoint2Point)

class btDantzigScratchMemory(_object):
    """Proxy of C++ btDantzigScratchMemory class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDantzigScratchMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btDantzigScratchMemory, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_scratch"] = _bullet.btDantzigScratchMemory_m_scratch_set
    __swig_getmethods__["m_scratch"] = _bullet.btDantzigScratchMemory_m_scratch_get
    if _newclass:
        m_scratch = _swig_property(_bullet.btDantzigScratchMemory_m_scratch_get, _bullet.btDantzigScratchMemory_m_scratch_set)
    __swig_setmethods__["L"] = _bullet.btDantzigScratchMemory_L_set
    __swig_getmethods__["L"] = _bullet.btDantzigScratchMemory_L_get
    if _newclass:
        L = _swig_property(_bullet.btDantzigScratchMemory_L_get, _bullet.btDantzigScratchMemory_L_set)
    __swig_setmethods__["d"] = _bullet.btDantzigScratchMemory_d_set
    __swig_getmethods__["d"] = _bullet.btDantzigScratchMemory_d_get
    if _newclass:
        d = _swig_property(_bullet.btDantzigScratchMemory_d_get, _bullet.btDantzigScratchMemory_d_set)
    __swig_setmethods__["delta_w"] = _bullet.btDantzigScratchMemory_delta_w_set
    __swig_getmethods__["delta_w"] = _bullet.btDantzigScratchMemory_delta_w_get
    if _newclass:
        delta_w = _swig_property(_bullet.btDantzigScratchMemory_delta_w_get, _bullet.btDantzigScratchMemory_delta_w_set)
    __swig_setmethods__["delta_x"] = _bullet.btDantzigScratchMemory_delta_x_set
    __swig_getmethods__["delta_x"] = _bullet.btDantzigScratchMemory_delta_x_get
    if _newclass:
        delta_x = _swig_property(_bullet.btDantzigScratchMemory_delta_x_get, _bullet.btDantzigScratchMemory_delta_x_set)
    __swig_setmethods__["Dell"] = _bullet.btDantzigScratchMemory_Dell_set
    __swig_getmethods__["Dell"] = _bullet.btDantzigScratchMemory_Dell_get
    if _newclass:
        Dell = _swig_property(_bullet.btDantzigScratchMemory_Dell_get, _bullet.btDantzigScratchMemory_Dell_set)
    __swig_setmethods__["ell"] = _bullet.btDantzigScratchMemory_ell_set
    __swig_getmethods__["ell"] = _bullet.btDantzigScratchMemory_ell_get
    if _newclass:
        ell = _swig_property(_bullet.btDantzigScratchMemory_ell_get, _bullet.btDantzigScratchMemory_ell_set)
    __swig_setmethods__["Arows"] = _bullet.btDantzigScratchMemory_Arows_set
    __swig_getmethods__["Arows"] = _bullet.btDantzigScratchMemory_Arows_get
    if _newclass:
        Arows = _swig_property(_bullet.btDantzigScratchMemory_Arows_get, _bullet.btDantzigScratchMemory_Arows_set)
    __swig_setmethods__["p"] = _bullet.btDantzigScratchMemory_p_set
    __swig_getmethods__["p"] = _bullet.btDantzigScratchMemory_p_get
    if _newclass:
        p = _swig_property(_bullet.btDantzigScratchMemory_p_get, _bullet.btDantzigScratchMemory_p_set)
    __swig_setmethods__["C"] = _bullet.btDantzigScratchMemory_C_set
    __swig_getmethods__["C"] = _bullet.btDantzigScratchMemory_C_get
    if _newclass:
        C = _swig_property(_bullet.btDantzigScratchMemory_C_get, _bullet.btDantzigScratchMemory_C_set)
    __swig_setmethods__["state"] = _bullet.btDantzigScratchMemory_state_set
    __swig_getmethods__["state"] = _bullet.btDantzigScratchMemory_state_get
    if _newclass:
        state = _swig_property(_bullet.btDantzigScratchMemory_state_get, _bullet.btDantzigScratchMemory_state_set)

    def __init__(self):
        """__init__(btDantzigScratchMemory self) -> btDantzigScratchMemory"""
        this = _bullet.new_btDantzigScratchMemory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDantzigScratchMemory
    __del__ = lambda self: None
btDantzigScratchMemory_swigregister = _bullet.btDantzigScratchMemory_swigregister
btDantzigScratchMemory_swigregister(btDantzigScratchMemory)


def btSolveDantzigLCP(n, A, x, b, w, nub, lo, hi, findex, scratch):
    """btSolveDantzigLCP(int n, btScalar * A, btScalar * x, btScalar * b, btScalar * w, int nub, btScalar * lo, btScalar * hi, int * findex, btDantzigScratchMemory scratch) -> bool"""
    return _bullet.btSolveDantzigLCP(n, A, x, b, w, nub, lo, hi, findex, scratch)
USE_BT_CLOCK = _bullet.USE_BT_CLOCK
class btClock(_object):
    """Proxy of C++ btClock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btClock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btClock, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btClock self) -> btClock
        __init__(btClock self, btClock other) -> btClock
        """
        this = _bullet.new_btClock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btClock
    __del__ = lambda self: None

    def reset(self):
        """reset(btClock self)"""
        return _bullet.btClock_reset(self)


    def getTimeMilliseconds(self):
        """getTimeMilliseconds(btClock self) -> unsigned long long"""
        return _bullet.btClock_getTimeMilliseconds(self)


    def getTimeMicroseconds(self):
        """getTimeMicroseconds(btClock self) -> unsigned long long"""
        return _bullet.btClock_getTimeMicroseconds(self)


    def getTimeNanoseconds(self):
        """getTimeNanoseconds(btClock self) -> unsigned long long"""
        return _bullet.btClock_getTimeNanoseconds(self)


    def getTimeSeconds(self):
        """getTimeSeconds(btClock self) -> btScalar"""
        return _bullet.btClock_getTimeSeconds(self)

btClock_swigregister = _bullet.btClock_swigregister
btClock_swigregister(btClock)


def btGetCurrentEnterProfileZoneFunc():
    """btGetCurrentEnterProfileZoneFunc() -> btEnterProfileZoneFunc *"""
    return _bullet.btGetCurrentEnterProfileZoneFunc()

def btGetCurrentLeaveProfileZoneFunc():
    """btGetCurrentLeaveProfileZoneFunc() -> btLeaveProfileZoneFunc *"""
    return _bullet.btGetCurrentLeaveProfileZoneFunc()

def btSetCustomEnterProfileZoneFunc(enterFunc):
    """btSetCustomEnterProfileZoneFunc(btEnterProfileZoneFunc * enterFunc)"""
    return _bullet.btSetCustomEnterProfileZoneFunc(enterFunc)

def btSetCustomLeaveProfileZoneFunc(leaveFunc):
    """btSetCustomLeaveProfileZoneFunc(btLeaveProfileZoneFunc * leaveFunc)"""
    return _bullet.btSetCustomLeaveProfileZoneFunc(leaveFunc)

def btQuickprofGetCurrentThreadIndex2():
    """btQuickprofGetCurrentThreadIndex2() -> unsigned int"""
    return _bullet.btQuickprofGetCurrentThreadIndex2()
class CProfileNode(_object):
    """Proxy of C++ CProfileNode class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileNode, name)
    __repr__ = _swig_repr

    def __init__(self, name, parent):
        """__init__(CProfileNode self, char const * name, CProfileNode parent) -> CProfileNode"""
        this = _bullet.new_CProfileNode(name, parent)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_CProfileNode
    __del__ = lambda self: None

    def Get_Sub_Node(self, name):
        """Get_Sub_Node(CProfileNode self, char const * name) -> CProfileNode"""
        return _bullet.CProfileNode_Get_Sub_Node(self, name)


    def Get_Parent(self):
        """Get_Parent(CProfileNode self) -> CProfileNode"""
        return _bullet.CProfileNode_Get_Parent(self)


    def Get_Sibling(self):
        """Get_Sibling(CProfileNode self) -> CProfileNode"""
        return _bullet.CProfileNode_Get_Sibling(self)


    def Get_Child(self):
        """Get_Child(CProfileNode self) -> CProfileNode"""
        return _bullet.CProfileNode_Get_Child(self)


    def CleanupMemory(self):
        """CleanupMemory(CProfileNode self)"""
        return _bullet.CProfileNode_CleanupMemory(self)


    def Reset(self):
        """Reset(CProfileNode self)"""
        return _bullet.CProfileNode_Reset(self)


    def Call(self):
        """Call(CProfileNode self)"""
        return _bullet.CProfileNode_Call(self)


    def Return(self):
        """Return(CProfileNode self) -> bool"""
        return _bullet.CProfileNode_Return(self)


    def Get_Name(self):
        """Get_Name(CProfileNode self) -> char const *"""
        return _bullet.CProfileNode_Get_Name(self)


    def Get_Total_Calls(self):
        """Get_Total_Calls(CProfileNode self) -> int"""
        return _bullet.CProfileNode_Get_Total_Calls(self)


    def Get_Total_Time(self):
        """Get_Total_Time(CProfileNode self) -> float"""
        return _bullet.CProfileNode_Get_Total_Time(self)


    def GetUserPointer(self):
        """GetUserPointer(CProfileNode self) -> void *"""
        return _bullet.CProfileNode_GetUserPointer(self)


    def SetUserPointer(self, ptr):
        """SetUserPointer(CProfileNode self, void * ptr)"""
        return _bullet.CProfileNode_SetUserPointer(self, ptr)

CProfileNode_swigregister = _bullet.CProfileNode_swigregister
CProfileNode_swigregister(CProfileNode)
BT_QUICKPROF_MAX_THREAD_COUNT = cvar.BT_QUICKPROF_MAX_THREAD_COUNT

class CProfileManager(_object):
    """Proxy of C++ CProfileManager class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileManager, name)
    __repr__ = _swig_repr

    def Start_Profile(name):
        """Start_Profile(char const * name)"""
        return _bullet.CProfileManager_Start_Profile(name)

    Start_Profile = staticmethod(Start_Profile)

    def Stop_Profile():
        """Stop_Profile()"""
        return _bullet.CProfileManager_Stop_Profile()

    Stop_Profile = staticmethod(Stop_Profile)

    def CleanupMemory():
        """CleanupMemory()"""
        return _bullet.CProfileManager_CleanupMemory()

    CleanupMemory = staticmethod(CleanupMemory)

    def Reset():
        """Reset()"""
        return _bullet.CProfileManager_Reset()

    Reset = staticmethod(Reset)

    def Increment_Frame_Counter():
        """Increment_Frame_Counter()"""
        return _bullet.CProfileManager_Increment_Frame_Counter()

    Increment_Frame_Counter = staticmethod(Increment_Frame_Counter)

    def Get_Frame_Count_Since_Reset():
        """Get_Frame_Count_Since_Reset() -> int"""
        return _bullet.CProfileManager_Get_Frame_Count_Since_Reset()

    Get_Frame_Count_Since_Reset = staticmethod(Get_Frame_Count_Since_Reset)

    def Get_Time_Since_Reset():
        """Get_Time_Since_Reset() -> float"""
        return _bullet.CProfileManager_Get_Time_Since_Reset()

    Get_Time_Since_Reset = staticmethod(Get_Time_Since_Reset)

    def Get_Iterator():
        """Get_Iterator() -> CProfileIterator *"""
        return _bullet.CProfileManager_Get_Iterator()

    Get_Iterator = staticmethod(Get_Iterator)

    def Release_Iterator(iterator):
        """Release_Iterator(CProfileIterator * iterator)"""
        return _bullet.CProfileManager_Release_Iterator(iterator)

    Release_Iterator = staticmethod(Release_Iterator)

    def dumpRecursive(profileIterator, spacing):
        """dumpRecursive(CProfileIterator * profileIterator, int spacing)"""
        return _bullet.CProfileManager_dumpRecursive(profileIterator, spacing)

    dumpRecursive = staticmethod(dumpRecursive)

    def dumpAll():
        """dumpAll()"""
        return _bullet.CProfileManager_dumpAll()

    dumpAll = staticmethod(dumpAll)

    def __init__(self):
        """__init__(CProfileManager self) -> CProfileManager"""
        this = _bullet.new_CProfileManager()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_CProfileManager
    __del__ = lambda self: None
CProfileManager_swigregister = _bullet.CProfileManager_swigregister
CProfileManager_swigregister(CProfileManager)

def CProfileManager_Start_Profile(name):
    """CProfileManager_Start_Profile(char const * name)"""
    return _bullet.CProfileManager_Start_Profile(name)

def CProfileManager_Stop_Profile():
    """CProfileManager_Stop_Profile()"""
    return _bullet.CProfileManager_Stop_Profile()

def CProfileManager_CleanupMemory():
    """CProfileManager_CleanupMemory()"""
    return _bullet.CProfileManager_CleanupMemory()

def CProfileManager_Reset():
    """CProfileManager_Reset()"""
    return _bullet.CProfileManager_Reset()

def CProfileManager_Increment_Frame_Counter():
    """CProfileManager_Increment_Frame_Counter()"""
    return _bullet.CProfileManager_Increment_Frame_Counter()

def CProfileManager_Get_Frame_Count_Since_Reset():
    """CProfileManager_Get_Frame_Count_Since_Reset() -> int"""
    return _bullet.CProfileManager_Get_Frame_Count_Since_Reset()

def CProfileManager_Get_Time_Since_Reset():
    """CProfileManager_Get_Time_Since_Reset() -> float"""
    return _bullet.CProfileManager_Get_Time_Since_Reset()

def CProfileManager_Get_Iterator():
    """CProfileManager_Get_Iterator() -> CProfileIterator *"""
    return _bullet.CProfileManager_Get_Iterator()

def CProfileManager_Release_Iterator(iterator):
    """CProfileManager_Release_Iterator(CProfileIterator * iterator)"""
    return _bullet.CProfileManager_Release_Iterator(iterator)

def CProfileManager_dumpRecursive(profileIterator, spacing):
    """CProfileManager_dumpRecursive(CProfileIterator * profileIterator, int spacing)"""
    return _bullet.CProfileManager_dumpRecursive(profileIterator, spacing)

def CProfileManager_dumpAll():
    """CProfileManager_dumpAll()"""
    return _bullet.CProfileManager_dumpAll()

class CProfileSample(_object):
    """Proxy of C++ CProfileSample class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProfileSample, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CProfileSample, name)
    __repr__ = _swig_repr

    def __init__(self, name):
        """__init__(CProfileSample self, char const * name) -> CProfileSample"""
        this = _bullet.new_CProfileSample(name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_CProfileSample
    __del__ = lambda self: None
CProfileSample_swigregister = _bullet.CProfileSample_swigregister
CProfileSample_swigregister(CProfileSample)

class btIntSortPredicate(_object):
    """Proxy of C++ btIntSortPredicate class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btIntSortPredicate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btIntSortPredicate, name)
    __repr__ = _swig_repr

    def __call__(self, a, b):
        """__call__(btIntSortPredicate self, int const & a, int const & b) -> bool"""
        return _bullet.btIntSortPredicate___call__(self, a, b)


    def __init__(self):
        """__init__(btIntSortPredicate self) -> btIntSortPredicate"""
        this = _bullet.new_btIntSortPredicate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btIntSortPredicate
    __del__ = lambda self: None
btIntSortPredicate_swigregister = _bullet.btIntSortPredicate_swigregister
btIntSortPredicate_swigregister(btIntSortPredicate)


def setElem(*args):
    """
    setElem(btMatrixXd & mat, int row, int col, double val)
    setElem(btMatrixXf & mat, int row, int col, float val)
    """
    return _bullet.setElem(*args)
class btMLCPSolverInterface(_object):
    """Proxy of C++ btMLCPSolverInterface class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMLCPSolverInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMLCPSolverInterface, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btMLCPSolverInterface
    __del__ = lambda self: None

    def solveMLCP(self, A, b, x, lo, hi, limitDependency, numIterations, useSparsity=True):
        """
        solveMLCP(btMLCPSolverInterface self, btMatrixXf const & A, btVectorXf const & b, btVectorXf & x, btVectorXf const & lo, btVectorXf const & hi, btAlignedObjectArray< int > const & limitDependency, int numIterations, bool useSparsity=True) -> bool
        solveMLCP(btMLCPSolverInterface self, btMatrixXf const & A, btVectorXf const & b, btVectorXf & x, btVectorXf const & lo, btVectorXf const & hi, btAlignedObjectArray< int > const & limitDependency, int numIterations) -> bool
        """
        return _bullet.btMLCPSolverInterface_solveMLCP(self, A, b, x, lo, hi, limitDependency, numIterations, useSparsity)

btMLCPSolverInterface_swigregister = _bullet.btMLCPSolverInterface_swigregister
btMLCPSolverInterface_swigregister(btMLCPSolverInterface)

class btDantzigSolver(btMLCPSolverInterface):
    """Proxy of C++ btDantzigSolver class."""

    __swig_setmethods__ = {}
    for _s in [btMLCPSolverInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDantzigSolver, name, value)
    __swig_getmethods__ = {}
    for _s in [btMLCPSolverInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDantzigSolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btDantzigSolver self) -> btDantzigSolver"""
        this = _bullet.new_btDantzigSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solveMLCP(self, A, b, x, lo, hi, limitDependency, numIterations, useSparsity=True):
        """
        solveMLCP(btDantzigSolver self, btMatrixXf const & A, btVectorXf const & b, btVectorXf & x, btVectorXf const & lo, btVectorXf const & hi, btAlignedObjectArray< int > const & limitDependency, int numIterations, bool useSparsity=True) -> bool
        solveMLCP(btDantzigSolver self, btMatrixXf const & A, btVectorXf const & b, btVectorXf & x, btVectorXf const & lo, btVectorXf const & hi, btAlignedObjectArray< int > const & limitDependency, int numIterations) -> bool
        """
        return _bullet.btDantzigSolver_solveMLCP(self, A, b, x, lo, hi, limitDependency, numIterations, useSparsity)

    __swig_destroy__ = _bullet.delete_btDantzigSolver
    __del__ = lambda self: None
btDantzigSolver_swigregister = _bullet.btDantzigSolver_swigregister
btDantzigSolver_swigregister(btDantzigSolver)

class btMLCPSolver(_object):
    """Proxy of C++ btMLCPSolver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btMLCPSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btMLCPSolver, name)
    __repr__ = _swig_repr

    def __init__(self, solver):
        """__init__(btMLCPSolver self, btMLCPSolverInterface solver) -> btMLCPSolver"""
        this = _bullet.new_btMLCPSolver(solver)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btMLCPSolver
    __del__ = lambda self: None

    def setMLCPSolver(self, solver):
        """setMLCPSolver(btMLCPSolver self, btMLCPSolverInterface solver)"""
        return _bullet.btMLCPSolver_setMLCPSolver(self, solver)


    def getNumFallbacks(self):
        """getNumFallbacks(btMLCPSolver self) -> int"""
        return _bullet.btMLCPSolver_getNumFallbacks(self)


    def setNumFallbacks(self, num):
        """setNumFallbacks(btMLCPSolver self, int num)"""
        return _bullet.btMLCPSolver_setNumFallbacks(self, num)

btMLCPSolver_swigregister = _bullet.btMLCPSolver_swigregister
btMLCPSolver_swigregister(btMLCPSolver)

class btSolveProjectedGaussSeidel(btMLCPSolverInterface):
    """Proxy of C++ btSolveProjectedGaussSeidel class."""

    __swig_setmethods__ = {}
    for _s in [btMLCPSolverInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSolveProjectedGaussSeidel, name, value)
    __swig_getmethods__ = {}
    for _s in [btMLCPSolverInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSolveProjectedGaussSeidel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_leastSquaresResidualThreshold"] = _bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidualThreshold_set
    __swig_getmethods__["m_leastSquaresResidualThreshold"] = _bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidualThreshold_get
    if _newclass:
        m_leastSquaresResidualThreshold = _swig_property(_bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidualThreshold_get, _bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidualThreshold_set)
    __swig_setmethods__["m_leastSquaresResidual"] = _bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidual_set
    __swig_getmethods__["m_leastSquaresResidual"] = _bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidual_get
    if _newclass:
        m_leastSquaresResidual = _swig_property(_bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidual_get, _bullet.btSolveProjectedGaussSeidel_m_leastSquaresResidual_set)

    def __init__(self):
        """__init__(btSolveProjectedGaussSeidel self) -> btSolveProjectedGaussSeidel"""
        this = _bullet.new_btSolveProjectedGaussSeidel()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solveMLCP(self, A, b, x, lo, hi, limitDependency, numIterations, useSparsity=True):
        """
        solveMLCP(btSolveProjectedGaussSeidel self, btMatrixXf const & A, btVectorXf const & b, btVectorXf & x, btVectorXf const & lo, btVectorXf const & hi, btAlignedObjectArray< int > const & limitDependency, int numIterations, bool useSparsity=True) -> bool
        solveMLCP(btSolveProjectedGaussSeidel self, btMatrixXf const & A, btVectorXf const & b, btVectorXf & x, btVectorXf const & lo, btVectorXf const & hi, btAlignedObjectArray< int > const & limitDependency, int numIterations) -> bool
        """
        return _bullet.btSolveProjectedGaussSeidel_solveMLCP(self, A, b, x, lo, hi, limitDependency, numIterations, useSparsity)

    __swig_destroy__ = _bullet.delete_btSolveProjectedGaussSeidel
    __del__ = lambda self: None
btSolveProjectedGaussSeidel_swigregister = _bullet.btSolveProjectedGaussSeidel_swigregister
btSolveProjectedGaussSeidel_swigregister(btSolveProjectedGaussSeidel)

class btVehicleRaycaster(_object):
    """Proxy of C++ btVehicleRaycaster class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVehicleRaycaster, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVehicleRaycaster, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btVehicleRaycaster
    __del__ = lambda self: None

    def castRay(self, arg2, to, result):
        """castRay(btVehicleRaycaster self, btVector3 const & arg2, btVector3 const & to, btVehicleRaycaster::btVehicleRaycasterResult & result) -> void *"""
        return _bullet.btVehicleRaycaster_castRay(self, arg2, to, result)

btVehicleRaycaster_swigregister = _bullet.btVehicleRaycaster_swigregister
btVehicleRaycaster_swigregister(btVehicleRaycaster)

class btWheelInfoConstructionInfo(_object):
    """Proxy of C++ btWheelInfoConstructionInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btWheelInfoConstructionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btWheelInfoConstructionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_chassisConnectionCS"] = _bullet.btWheelInfoConstructionInfo_m_chassisConnectionCS_set
    __swig_getmethods__["m_chassisConnectionCS"] = _bullet.btWheelInfoConstructionInfo_m_chassisConnectionCS_get
    if _newclass:
        m_chassisConnectionCS = _swig_property(_bullet.btWheelInfoConstructionInfo_m_chassisConnectionCS_get, _bullet.btWheelInfoConstructionInfo_m_chassisConnectionCS_set)
    __swig_setmethods__["m_wheelDirectionCS"] = _bullet.btWheelInfoConstructionInfo_m_wheelDirectionCS_set
    __swig_getmethods__["m_wheelDirectionCS"] = _bullet.btWheelInfoConstructionInfo_m_wheelDirectionCS_get
    if _newclass:
        m_wheelDirectionCS = _swig_property(_bullet.btWheelInfoConstructionInfo_m_wheelDirectionCS_get, _bullet.btWheelInfoConstructionInfo_m_wheelDirectionCS_set)
    __swig_setmethods__["m_wheelAxleCS"] = _bullet.btWheelInfoConstructionInfo_m_wheelAxleCS_set
    __swig_getmethods__["m_wheelAxleCS"] = _bullet.btWheelInfoConstructionInfo_m_wheelAxleCS_get
    if _newclass:
        m_wheelAxleCS = _swig_property(_bullet.btWheelInfoConstructionInfo_m_wheelAxleCS_get, _bullet.btWheelInfoConstructionInfo_m_wheelAxleCS_set)
    __swig_setmethods__["m_suspensionRestLength"] = _bullet.btWheelInfoConstructionInfo_m_suspensionRestLength_set
    __swig_getmethods__["m_suspensionRestLength"] = _bullet.btWheelInfoConstructionInfo_m_suspensionRestLength_get
    if _newclass:
        m_suspensionRestLength = _swig_property(_bullet.btWheelInfoConstructionInfo_m_suspensionRestLength_get, _bullet.btWheelInfoConstructionInfo_m_suspensionRestLength_set)
    __swig_setmethods__["m_maxSuspensionTravelCm"] = _bullet.btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set
    __swig_getmethods__["m_maxSuspensionTravelCm"] = _bullet.btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get
    if _newclass:
        m_maxSuspensionTravelCm = _swig_property(_bullet.btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_get, _bullet.btWheelInfoConstructionInfo_m_maxSuspensionTravelCm_set)
    __swig_setmethods__["m_wheelRadius"] = _bullet.btWheelInfoConstructionInfo_m_wheelRadius_set
    __swig_getmethods__["m_wheelRadius"] = _bullet.btWheelInfoConstructionInfo_m_wheelRadius_get
    if _newclass:
        m_wheelRadius = _swig_property(_bullet.btWheelInfoConstructionInfo_m_wheelRadius_get, _bullet.btWheelInfoConstructionInfo_m_wheelRadius_set)
    __swig_setmethods__["m_suspensionStiffness"] = _bullet.btWheelInfoConstructionInfo_m_suspensionStiffness_set
    __swig_getmethods__["m_suspensionStiffness"] = _bullet.btWheelInfoConstructionInfo_m_suspensionStiffness_get
    if _newclass:
        m_suspensionStiffness = _swig_property(_bullet.btWheelInfoConstructionInfo_m_suspensionStiffness_get, _bullet.btWheelInfoConstructionInfo_m_suspensionStiffness_set)
    __swig_setmethods__["m_wheelsDampingCompression"] = _bullet.btWheelInfoConstructionInfo_m_wheelsDampingCompression_set
    __swig_getmethods__["m_wheelsDampingCompression"] = _bullet.btWheelInfoConstructionInfo_m_wheelsDampingCompression_get
    if _newclass:
        m_wheelsDampingCompression = _swig_property(_bullet.btWheelInfoConstructionInfo_m_wheelsDampingCompression_get, _bullet.btWheelInfoConstructionInfo_m_wheelsDampingCompression_set)
    __swig_setmethods__["m_wheelsDampingRelaxation"] = _bullet.btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set
    __swig_getmethods__["m_wheelsDampingRelaxation"] = _bullet.btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get
    if _newclass:
        m_wheelsDampingRelaxation = _swig_property(_bullet.btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_get, _bullet.btWheelInfoConstructionInfo_m_wheelsDampingRelaxation_set)
    __swig_setmethods__["m_frictionSlip"] = _bullet.btWheelInfoConstructionInfo_m_frictionSlip_set
    __swig_getmethods__["m_frictionSlip"] = _bullet.btWheelInfoConstructionInfo_m_frictionSlip_get
    if _newclass:
        m_frictionSlip = _swig_property(_bullet.btWheelInfoConstructionInfo_m_frictionSlip_get, _bullet.btWheelInfoConstructionInfo_m_frictionSlip_set)
    __swig_setmethods__["m_maxSuspensionForce"] = _bullet.btWheelInfoConstructionInfo_m_maxSuspensionForce_set
    __swig_getmethods__["m_maxSuspensionForce"] = _bullet.btWheelInfoConstructionInfo_m_maxSuspensionForce_get
    if _newclass:
        m_maxSuspensionForce = _swig_property(_bullet.btWheelInfoConstructionInfo_m_maxSuspensionForce_get, _bullet.btWheelInfoConstructionInfo_m_maxSuspensionForce_set)
    __swig_setmethods__["m_bIsFrontWheel"] = _bullet.btWheelInfoConstructionInfo_m_bIsFrontWheel_set
    __swig_getmethods__["m_bIsFrontWheel"] = _bullet.btWheelInfoConstructionInfo_m_bIsFrontWheel_get
    if _newclass:
        m_bIsFrontWheel = _swig_property(_bullet.btWheelInfoConstructionInfo_m_bIsFrontWheel_get, _bullet.btWheelInfoConstructionInfo_m_bIsFrontWheel_set)

    def __init__(self):
        """__init__(btWheelInfoConstructionInfo self) -> btWheelInfoConstructionInfo"""
        this = _bullet.new_btWheelInfoConstructionInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btWheelInfoConstructionInfo
    __del__ = lambda self: None
btWheelInfoConstructionInfo_swigregister = _bullet.btWheelInfoConstructionInfo_swigregister
btWheelInfoConstructionInfo_swigregister(btWheelInfoConstructionInfo)

class btWheelInfo(_object):
    """Proxy of C++ btWheelInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btWheelInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btWheelInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_raycastInfo"] = _bullet.btWheelInfo_m_raycastInfo_set
    __swig_getmethods__["m_raycastInfo"] = _bullet.btWheelInfo_m_raycastInfo_get
    if _newclass:
        m_raycastInfo = _swig_property(_bullet.btWheelInfo_m_raycastInfo_get, _bullet.btWheelInfo_m_raycastInfo_set)
    __swig_setmethods__["m_worldTransform"] = _bullet.btWheelInfo_m_worldTransform_set
    __swig_getmethods__["m_worldTransform"] = _bullet.btWheelInfo_m_worldTransform_get
    if _newclass:
        m_worldTransform = _swig_property(_bullet.btWheelInfo_m_worldTransform_get, _bullet.btWheelInfo_m_worldTransform_set)
    __swig_setmethods__["m_chassisConnectionPointCS"] = _bullet.btWheelInfo_m_chassisConnectionPointCS_set
    __swig_getmethods__["m_chassisConnectionPointCS"] = _bullet.btWheelInfo_m_chassisConnectionPointCS_get
    if _newclass:
        m_chassisConnectionPointCS = _swig_property(_bullet.btWheelInfo_m_chassisConnectionPointCS_get, _bullet.btWheelInfo_m_chassisConnectionPointCS_set)
    __swig_setmethods__["m_wheelDirectionCS"] = _bullet.btWheelInfo_m_wheelDirectionCS_set
    __swig_getmethods__["m_wheelDirectionCS"] = _bullet.btWheelInfo_m_wheelDirectionCS_get
    if _newclass:
        m_wheelDirectionCS = _swig_property(_bullet.btWheelInfo_m_wheelDirectionCS_get, _bullet.btWheelInfo_m_wheelDirectionCS_set)
    __swig_setmethods__["m_wheelAxleCS"] = _bullet.btWheelInfo_m_wheelAxleCS_set
    __swig_getmethods__["m_wheelAxleCS"] = _bullet.btWheelInfo_m_wheelAxleCS_get
    if _newclass:
        m_wheelAxleCS = _swig_property(_bullet.btWheelInfo_m_wheelAxleCS_get, _bullet.btWheelInfo_m_wheelAxleCS_set)
    __swig_setmethods__["m_suspensionRestLength1"] = _bullet.btWheelInfo_m_suspensionRestLength1_set
    __swig_getmethods__["m_suspensionRestLength1"] = _bullet.btWheelInfo_m_suspensionRestLength1_get
    if _newclass:
        m_suspensionRestLength1 = _swig_property(_bullet.btWheelInfo_m_suspensionRestLength1_get, _bullet.btWheelInfo_m_suspensionRestLength1_set)
    __swig_setmethods__["m_maxSuspensionTravelCm"] = _bullet.btWheelInfo_m_maxSuspensionTravelCm_set
    __swig_getmethods__["m_maxSuspensionTravelCm"] = _bullet.btWheelInfo_m_maxSuspensionTravelCm_get
    if _newclass:
        m_maxSuspensionTravelCm = _swig_property(_bullet.btWheelInfo_m_maxSuspensionTravelCm_get, _bullet.btWheelInfo_m_maxSuspensionTravelCm_set)

    def getSuspensionRestLength(self):
        """getSuspensionRestLength(btWheelInfo self) -> btScalar"""
        return _bullet.btWheelInfo_getSuspensionRestLength(self)

    __swig_setmethods__["m_wheelsRadius"] = _bullet.btWheelInfo_m_wheelsRadius_set
    __swig_getmethods__["m_wheelsRadius"] = _bullet.btWheelInfo_m_wheelsRadius_get
    if _newclass:
        m_wheelsRadius = _swig_property(_bullet.btWheelInfo_m_wheelsRadius_get, _bullet.btWheelInfo_m_wheelsRadius_set)
    __swig_setmethods__["m_suspensionStiffness"] = _bullet.btWheelInfo_m_suspensionStiffness_set
    __swig_getmethods__["m_suspensionStiffness"] = _bullet.btWheelInfo_m_suspensionStiffness_get
    if _newclass:
        m_suspensionStiffness = _swig_property(_bullet.btWheelInfo_m_suspensionStiffness_get, _bullet.btWheelInfo_m_suspensionStiffness_set)
    __swig_setmethods__["m_wheelsDampingCompression"] = _bullet.btWheelInfo_m_wheelsDampingCompression_set
    __swig_getmethods__["m_wheelsDampingCompression"] = _bullet.btWheelInfo_m_wheelsDampingCompression_get
    if _newclass:
        m_wheelsDampingCompression = _swig_property(_bullet.btWheelInfo_m_wheelsDampingCompression_get, _bullet.btWheelInfo_m_wheelsDampingCompression_set)
    __swig_setmethods__["m_wheelsDampingRelaxation"] = _bullet.btWheelInfo_m_wheelsDampingRelaxation_set
    __swig_getmethods__["m_wheelsDampingRelaxation"] = _bullet.btWheelInfo_m_wheelsDampingRelaxation_get
    if _newclass:
        m_wheelsDampingRelaxation = _swig_property(_bullet.btWheelInfo_m_wheelsDampingRelaxation_get, _bullet.btWheelInfo_m_wheelsDampingRelaxation_set)
    __swig_setmethods__["m_frictionSlip"] = _bullet.btWheelInfo_m_frictionSlip_set
    __swig_getmethods__["m_frictionSlip"] = _bullet.btWheelInfo_m_frictionSlip_get
    if _newclass:
        m_frictionSlip = _swig_property(_bullet.btWheelInfo_m_frictionSlip_get, _bullet.btWheelInfo_m_frictionSlip_set)
    __swig_setmethods__["m_steering"] = _bullet.btWheelInfo_m_steering_set
    __swig_getmethods__["m_steering"] = _bullet.btWheelInfo_m_steering_get
    if _newclass:
        m_steering = _swig_property(_bullet.btWheelInfo_m_steering_get, _bullet.btWheelInfo_m_steering_set)
    __swig_setmethods__["m_rotation"] = _bullet.btWheelInfo_m_rotation_set
    __swig_getmethods__["m_rotation"] = _bullet.btWheelInfo_m_rotation_get
    if _newclass:
        m_rotation = _swig_property(_bullet.btWheelInfo_m_rotation_get, _bullet.btWheelInfo_m_rotation_set)
    __swig_setmethods__["m_deltaRotation"] = _bullet.btWheelInfo_m_deltaRotation_set
    __swig_getmethods__["m_deltaRotation"] = _bullet.btWheelInfo_m_deltaRotation_get
    if _newclass:
        m_deltaRotation = _swig_property(_bullet.btWheelInfo_m_deltaRotation_get, _bullet.btWheelInfo_m_deltaRotation_set)
    __swig_setmethods__["m_rollInfluence"] = _bullet.btWheelInfo_m_rollInfluence_set
    __swig_getmethods__["m_rollInfluence"] = _bullet.btWheelInfo_m_rollInfluence_get
    if _newclass:
        m_rollInfluence = _swig_property(_bullet.btWheelInfo_m_rollInfluence_get, _bullet.btWheelInfo_m_rollInfluence_set)
    __swig_setmethods__["m_maxSuspensionForce"] = _bullet.btWheelInfo_m_maxSuspensionForce_set
    __swig_getmethods__["m_maxSuspensionForce"] = _bullet.btWheelInfo_m_maxSuspensionForce_get
    if _newclass:
        m_maxSuspensionForce = _swig_property(_bullet.btWheelInfo_m_maxSuspensionForce_get, _bullet.btWheelInfo_m_maxSuspensionForce_set)
    __swig_setmethods__["m_engineForce"] = _bullet.btWheelInfo_m_engineForce_set
    __swig_getmethods__["m_engineForce"] = _bullet.btWheelInfo_m_engineForce_get
    if _newclass:
        m_engineForce = _swig_property(_bullet.btWheelInfo_m_engineForce_get, _bullet.btWheelInfo_m_engineForce_set)
    __swig_setmethods__["m_brake"] = _bullet.btWheelInfo_m_brake_set
    __swig_getmethods__["m_brake"] = _bullet.btWheelInfo_m_brake_get
    if _newclass:
        m_brake = _swig_property(_bullet.btWheelInfo_m_brake_get, _bullet.btWheelInfo_m_brake_set)
    __swig_setmethods__["m_bIsFrontWheel"] = _bullet.btWheelInfo_m_bIsFrontWheel_set
    __swig_getmethods__["m_bIsFrontWheel"] = _bullet.btWheelInfo_m_bIsFrontWheel_get
    if _newclass:
        m_bIsFrontWheel = _swig_property(_bullet.btWheelInfo_m_bIsFrontWheel_get, _bullet.btWheelInfo_m_bIsFrontWheel_set)
    __swig_setmethods__["m_clientInfo"] = _bullet.btWheelInfo_m_clientInfo_set
    __swig_getmethods__["m_clientInfo"] = _bullet.btWheelInfo_m_clientInfo_get
    if _newclass:
        m_clientInfo = _swig_property(_bullet.btWheelInfo_m_clientInfo_get, _bullet.btWheelInfo_m_clientInfo_set)

    def __init__(self, *args):
        """
        __init__(btWheelInfo self) -> btWheelInfo
        __init__(btWheelInfo self, btWheelInfoConstructionInfo ci) -> btWheelInfo
        """
        this = _bullet.new_btWheelInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updateWheel(self, chassis, raycastInfo):
        """updateWheel(btWheelInfo self, btRigidBody chassis, btWheelInfo::RaycastInfo & raycastInfo)"""
        return _bullet.btWheelInfo_updateWheel(self, chassis, raycastInfo)

    __swig_setmethods__["m_clippedInvContactDotSuspension"] = _bullet.btWheelInfo_m_clippedInvContactDotSuspension_set
    __swig_getmethods__["m_clippedInvContactDotSuspension"] = _bullet.btWheelInfo_m_clippedInvContactDotSuspension_get
    if _newclass:
        m_clippedInvContactDotSuspension = _swig_property(_bullet.btWheelInfo_m_clippedInvContactDotSuspension_get, _bullet.btWheelInfo_m_clippedInvContactDotSuspension_set)
    __swig_setmethods__["m_suspensionRelativeVelocity"] = _bullet.btWheelInfo_m_suspensionRelativeVelocity_set
    __swig_getmethods__["m_suspensionRelativeVelocity"] = _bullet.btWheelInfo_m_suspensionRelativeVelocity_get
    if _newclass:
        m_suspensionRelativeVelocity = _swig_property(_bullet.btWheelInfo_m_suspensionRelativeVelocity_get, _bullet.btWheelInfo_m_suspensionRelativeVelocity_set)
    __swig_setmethods__["m_wheelsSuspensionForce"] = _bullet.btWheelInfo_m_wheelsSuspensionForce_set
    __swig_getmethods__["m_wheelsSuspensionForce"] = _bullet.btWheelInfo_m_wheelsSuspensionForce_get
    if _newclass:
        m_wheelsSuspensionForce = _swig_property(_bullet.btWheelInfo_m_wheelsSuspensionForce_get, _bullet.btWheelInfo_m_wheelsSuspensionForce_set)
    __swig_setmethods__["m_skidInfo"] = _bullet.btWheelInfo_m_skidInfo_set
    __swig_getmethods__["m_skidInfo"] = _bullet.btWheelInfo_m_skidInfo_get
    if _newclass:
        m_skidInfo = _swig_property(_bullet.btWheelInfo_m_skidInfo_get, _bullet.btWheelInfo_m_skidInfo_set)
    __swig_destroy__ = _bullet.delete_btWheelInfo
    __del__ = lambda self: None
btWheelInfo_swigregister = _bullet.btWheelInfo_swigregister
btWheelInfo_swigregister(btWheelInfo)

class btRaycastVehicle(btActionInterface):
    """Proxy of C++ btRaycastVehicle class."""

    __swig_setmethods__ = {}
    for _s in [btActionInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btRaycastVehicle, name, value)
    __swig_getmethods__ = {}
    for _s in [btActionInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btRaycastVehicle, name)
    __repr__ = _swig_repr

    def __init__(self, tuning, chassis, raycaster):
        """__init__(btRaycastVehicle self, btRaycastVehicle::btVehicleTuning const & tuning, btRigidBody chassis, btVehicleRaycaster raycaster) -> btRaycastVehicle"""
        this = _bullet.new_btRaycastVehicle(tuning, chassis, raycaster)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btRaycastVehicle
    __del__ = lambda self: None

    def getChassisWorldTransform(self):
        """getChassisWorldTransform(btRaycastVehicle self) -> btTransform const &"""
        return _bullet.btRaycastVehicle_getChassisWorldTransform(self)


    def rayCast(self, wheel):
        """rayCast(btRaycastVehicle self, btWheelInfo wheel) -> btScalar"""
        return _bullet.btRaycastVehicle_rayCast(self, wheel)


    def updateVehicle(self, step):
        """updateVehicle(btRaycastVehicle self, btScalar step)"""
        return _bullet.btRaycastVehicle_updateVehicle(self, step)


    def resetSuspension(self):
        """resetSuspension(btRaycastVehicle self)"""
        return _bullet.btRaycastVehicle_resetSuspension(self)


    def getSteeringValue(self, wheel):
        """getSteeringValue(btRaycastVehicle self, int wheel) -> btScalar"""
        return _bullet.btRaycastVehicle_getSteeringValue(self, wheel)


    def setSteeringValue(self, steering, wheel):
        """setSteeringValue(btRaycastVehicle self, btScalar steering, int wheel)"""
        return _bullet.btRaycastVehicle_setSteeringValue(self, steering, wheel)


    def applyEngineForce(self, force, wheel):
        """applyEngineForce(btRaycastVehicle self, btScalar force, int wheel)"""
        return _bullet.btRaycastVehicle_applyEngineForce(self, force, wheel)


    def getWheelTransformWS(self, wheelIndex):
        """getWheelTransformWS(btRaycastVehicle self, int wheelIndex) -> btTransform const &"""
        return _bullet.btRaycastVehicle_getWheelTransformWS(self, wheelIndex)


    def updateWheelTransform(self, wheelIndex, interpolatedTransform=True):
        """
        updateWheelTransform(btRaycastVehicle self, int wheelIndex, bool interpolatedTransform=True)
        updateWheelTransform(btRaycastVehicle self, int wheelIndex)
        """
        return _bullet.btRaycastVehicle_updateWheelTransform(self, wheelIndex, interpolatedTransform)


    def addWheel(self, connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, tuning, isFrontWheel):
        """addWheel(btRaycastVehicle self, btVector3 const & connectionPointCS0, btVector3 const & wheelDirectionCS0, btVector3 const & wheelAxleCS, btScalar suspensionRestLength, btScalar wheelRadius, btRaycastVehicle::btVehicleTuning const & tuning, bool isFrontWheel) -> btWheelInfo"""
        return _bullet.btRaycastVehicle_addWheel(self, connectionPointCS0, wheelDirectionCS0, wheelAxleCS, suspensionRestLength, wheelRadius, tuning, isFrontWheel)


    def getNumWheels(self):
        """getNumWheels(btRaycastVehicle self) -> int"""
        return _bullet.btRaycastVehicle_getNumWheels(self)

    __swig_setmethods__["m_wheelInfo"] = _bullet.btRaycastVehicle_m_wheelInfo_set
    __swig_getmethods__["m_wheelInfo"] = _bullet.btRaycastVehicle_m_wheelInfo_get
    if _newclass:
        m_wheelInfo = _swig_property(_bullet.btRaycastVehicle_m_wheelInfo_get, _bullet.btRaycastVehicle_m_wheelInfo_set)

    def getWheelInfo(self, *args):
        """
        getWheelInfo(btRaycastVehicle self, int index) -> btWheelInfo
        getWheelInfo(btRaycastVehicle self, int index) -> btWheelInfo
        """
        return _bullet.btRaycastVehicle_getWheelInfo(self, *args)


    def updateWheelTransformsWS(self, wheel, interpolatedTransform=True):
        """
        updateWheelTransformsWS(btRaycastVehicle self, btWheelInfo wheel, bool interpolatedTransform=True)
        updateWheelTransformsWS(btRaycastVehicle self, btWheelInfo wheel)
        """
        return _bullet.btRaycastVehicle_updateWheelTransformsWS(self, wheel, interpolatedTransform)


    def setBrake(self, brake, wheelIndex):
        """setBrake(btRaycastVehicle self, btScalar brake, int wheelIndex)"""
        return _bullet.btRaycastVehicle_setBrake(self, brake, wheelIndex)


    def setPitchControl(self, pitch):
        """setPitchControl(btRaycastVehicle self, btScalar pitch)"""
        return _bullet.btRaycastVehicle_setPitchControl(self, pitch)


    def updateSuspension(self, deltaTime):
        """updateSuspension(btRaycastVehicle self, btScalar deltaTime)"""
        return _bullet.btRaycastVehicle_updateSuspension(self, deltaTime)


    def updateFriction(self, timeStep):
        """updateFriction(btRaycastVehicle self, btScalar timeStep)"""
        return _bullet.btRaycastVehicle_updateFriction(self, timeStep)


    def getRigidBody(self, *args):
        """
        getRigidBody(btRaycastVehicle self) -> btRigidBody
        getRigidBody(btRaycastVehicle self) -> btRigidBody
        """
        return _bullet.btRaycastVehicle_getRigidBody(self, *args)


    def getRightAxis(self):
        """getRightAxis(btRaycastVehicle self) -> int"""
        return _bullet.btRaycastVehicle_getRightAxis(self)


    def getUpAxis(self):
        """getUpAxis(btRaycastVehicle self) -> int"""
        return _bullet.btRaycastVehicle_getUpAxis(self)


    def getForwardAxis(self):
        """getForwardAxis(btRaycastVehicle self) -> int"""
        return _bullet.btRaycastVehicle_getForwardAxis(self)


    def getForwardVector(self):
        """getForwardVector(btRaycastVehicle self) -> btVector3"""
        return _bullet.btRaycastVehicle_getForwardVector(self)


    def getCurrentSpeedKmHour(self):
        """getCurrentSpeedKmHour(btRaycastVehicle self) -> btScalar"""
        return _bullet.btRaycastVehicle_getCurrentSpeedKmHour(self)


    def setCoordinateSystem(self, rightIndex, upIndex, forwardIndex):
        """setCoordinateSystem(btRaycastVehicle self, int rightIndex, int upIndex, int forwardIndex)"""
        return _bullet.btRaycastVehicle_setCoordinateSystem(self, rightIndex, upIndex, forwardIndex)


    def getUserConstraintType(self):
        """getUserConstraintType(btRaycastVehicle self) -> int"""
        return _bullet.btRaycastVehicle_getUserConstraintType(self)


    def setUserConstraintType(self, userConstraintType):
        """setUserConstraintType(btRaycastVehicle self, int userConstraintType)"""
        return _bullet.btRaycastVehicle_setUserConstraintType(self, userConstraintType)


    def setUserConstraintId(self, uid):
        """setUserConstraintId(btRaycastVehicle self, int uid)"""
        return _bullet.btRaycastVehicle_setUserConstraintId(self, uid)


    def getUserConstraintId(self):
        """getUserConstraintId(btRaycastVehicle self) -> int"""
        return _bullet.btRaycastVehicle_getUserConstraintId(self)

btRaycastVehicle_swigregister = _bullet.btRaycastVehicle_swigregister
btRaycastVehicle_swigregister(btRaycastVehicle)

class btDefaultVehicleRaycaster(btVehicleRaycaster):
    """Proxy of C++ btDefaultVehicleRaycaster class."""

    __swig_setmethods__ = {}
    for _s in [btVehicleRaycaster]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultVehicleRaycaster, name, value)
    __swig_getmethods__ = {}
    for _s in [btVehicleRaycaster]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultVehicleRaycaster, name)
    __repr__ = _swig_repr

    def __init__(self, world):
        """__init__(btDefaultVehicleRaycaster self, btDynamicsWorld world) -> btDefaultVehicleRaycaster"""
        this = _bullet.new_btDefaultVehicleRaycaster(world)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDefaultVehicleRaycaster
    __del__ = lambda self: None
btDefaultVehicleRaycaster_swigregister = _bullet.btDefaultVehicleRaycaster_swigregister
btDefaultVehicleRaycaster_swigregister(btDefaultVehicleRaycaster)

class btSoftBodySolver(_object):
    """Proxy of C++ btSoftBodySolver class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodySolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodySolver, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DEFAULT_SOLVER = _bullet.btSoftBodySolver_DEFAULT_SOLVER
    CPU_SOLVER = _bullet.btSoftBodySolver_CPU_SOLVER
    CL_SOLVER = _bullet.btSoftBodySolver_CL_SOLVER
    CL_SIMD_SOLVER = _bullet.btSoftBodySolver_CL_SIMD_SOLVER
    DX_SOLVER = _bullet.btSoftBodySolver_DX_SOLVER
    DX_SIMD_SOLVER = _bullet.btSoftBodySolver_DX_SIMD_SOLVER
    __swig_destroy__ = _bullet.delete_btSoftBodySolver
    __del__ = lambda self: None

    def getSolverType(self):
        """getSolverType(btSoftBodySolver self) -> btSoftBodySolver::SolverTypes"""
        return _bullet.btSoftBodySolver_getSolverType(self)


    def checkInitialized(self):
        """checkInitialized(btSoftBodySolver self) -> bool"""
        return _bullet.btSoftBodySolver_checkInitialized(self)


    def optimize(self, softBodies, forceUpdate=False):
        """
        optimize(btSoftBodySolver self, btAlignedObjectArray< btSoftBody * > & softBodies, bool forceUpdate=False)
        optimize(btSoftBodySolver self, btAlignedObjectArray< btSoftBody * > & softBodies)
        """
        return _bullet.btSoftBodySolver_optimize(self, softBodies, forceUpdate)


    def copyBackToSoftBodies(self, bMove=True):
        """
        copyBackToSoftBodies(btSoftBodySolver self, bool bMove=True)
        copyBackToSoftBodies(btSoftBodySolver self)
        """
        return _bullet.btSoftBodySolver_copyBackToSoftBodies(self, bMove)


    def predictMotion(self, solverdt):
        """predictMotion(btSoftBodySolver self, float solverdt)"""
        return _bullet.btSoftBodySolver_predictMotion(self, solverdt)


    def solveConstraints(self, solverdt):
        """solveConstraints(btSoftBodySolver self, float solverdt)"""
        return _bullet.btSoftBodySolver_solveConstraints(self, solverdt)


    def updateSoftBodies(self):
        """updateSoftBodies(btSoftBodySolver self)"""
        return _bullet.btSoftBodySolver_updateSoftBodies(self)


    def processCollision(self, *args):
        """
        processCollision(btSoftBodySolver self, btSoftBody arg2, btCollisionObjectWrapper const * arg3)
        processCollision(btSoftBodySolver self, btSoftBody arg2, btSoftBody arg3)
        """
        return _bullet.btSoftBodySolver_processCollision(self, *args)


    def setNumberOfPositionIterations(self, iterations):
        """setNumberOfPositionIterations(btSoftBodySolver self, int iterations)"""
        return _bullet.btSoftBodySolver_setNumberOfPositionIterations(self, iterations)


    def getNumberOfPositionIterations(self):
        """getNumberOfPositionIterations(btSoftBodySolver self) -> int"""
        return _bullet.btSoftBodySolver_getNumberOfPositionIterations(self)


    def setNumberOfVelocityIterations(self, iterations):
        """setNumberOfVelocityIterations(btSoftBodySolver self, int iterations)"""
        return _bullet.btSoftBodySolver_setNumberOfVelocityIterations(self, iterations)


    def getNumberOfVelocityIterations(self):
        """getNumberOfVelocityIterations(btSoftBodySolver self) -> int"""
        return _bullet.btSoftBodySolver_getNumberOfVelocityIterations(self)


    def getTimeScale(self):
        """getTimeScale(btSoftBodySolver self) -> float"""
        return _bullet.btSoftBodySolver_getTimeScale(self)

btSoftBodySolver_swigregister = _bullet.btSoftBodySolver_swigregister
btSoftBodySolver_swigregister(btSoftBodySolver)

class btSoftBodySolverOutput(_object):
    """Proxy of C++ btSoftBodySolverOutput class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodySolverOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodySolverOutput, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_btSoftBodySolverOutput
    __del__ = lambda self: None

    def copySoftBodyToVertexBuffer(self, softBody, vertexBuffer):
        """copySoftBodyToVertexBuffer(btSoftBodySolverOutput self, btSoftBody softBody, btVertexBufferDescriptor vertexBuffer)"""
        return _bullet.btSoftBodySolverOutput_copySoftBodyToVertexBuffer(self, softBody, vertexBuffer)

btSoftBodySolverOutput_swigregister = _bullet.btSoftBodySolverOutput_swigregister
btSoftBodySolverOutput_swigregister(btSoftBodySolverOutput)

class btVertexBufferDescriptor(_object):
    """Proxy of C++ btVertexBufferDescriptor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btVertexBufferDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btVertexBufferDescriptor, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CPU_BUFFER = _bullet.btVertexBufferDescriptor_CPU_BUFFER
    DX11_BUFFER = _bullet.btVertexBufferDescriptor_DX11_BUFFER
    OPENGL_BUFFER = _bullet.btVertexBufferDescriptor_OPENGL_BUFFER
    __swig_destroy__ = _bullet.delete_btVertexBufferDescriptor
    __del__ = lambda self: None

    def hasVertexPositions(self):
        """hasVertexPositions(btVertexBufferDescriptor self) -> bool"""
        return _bullet.btVertexBufferDescriptor_hasVertexPositions(self)


    def hasNormals(self):
        """hasNormals(btVertexBufferDescriptor self) -> bool"""
        return _bullet.btVertexBufferDescriptor_hasNormals(self)


    def getBufferType(self):
        """getBufferType(btVertexBufferDescriptor self) -> btVertexBufferDescriptor::BufferTypes"""
        return _bullet.btVertexBufferDescriptor_getBufferType(self)


    def getVertexOffset(self):
        """getVertexOffset(btVertexBufferDescriptor self) -> int"""
        return _bullet.btVertexBufferDescriptor_getVertexOffset(self)


    def getVertexStride(self):
        """getVertexStride(btVertexBufferDescriptor self) -> int"""
        return _bullet.btVertexBufferDescriptor_getVertexStride(self)


    def getNormalOffset(self):
        """getNormalOffset(btVertexBufferDescriptor self) -> int"""
        return _bullet.btVertexBufferDescriptor_getNormalOffset(self)


    def getNormalStride(self):
        """getNormalStride(btVertexBufferDescriptor self) -> int"""
        return _bullet.btVertexBufferDescriptor_getNormalStride(self)

btVertexBufferDescriptor_swigregister = _bullet.btVertexBufferDescriptor_swigregister
btVertexBufferDescriptor_swigregister(btVertexBufferDescriptor)

class btCPUVertexBufferDescriptor(btVertexBufferDescriptor):
    """Proxy of C++ btCPUVertexBufferDescriptor class."""

    __swig_setmethods__ = {}
    for _s in [btVertexBufferDescriptor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btCPUVertexBufferDescriptor, name, value)
    __swig_getmethods__ = {}
    for _s in [btVertexBufferDescriptor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btCPUVertexBufferDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btCPUVertexBufferDescriptor self, float * basePointer, int vertexOffset, int vertexStride) -> btCPUVertexBufferDescriptor
        __init__(btCPUVertexBufferDescriptor self, float * basePointer, int vertexOffset, int vertexStride, int normalOffset, int normalStride) -> btCPUVertexBufferDescriptor
        """
        this = _bullet.new_btCPUVertexBufferDescriptor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btCPUVertexBufferDescriptor
    __del__ = lambda self: None

    def getBasePointer(self):
        """getBasePointer(btCPUVertexBufferDescriptor self) -> float *"""
        return _bullet.btCPUVertexBufferDescriptor_getBasePointer(self)

btCPUVertexBufferDescriptor_swigregister = _bullet.btCPUVertexBufferDescriptor_swigregister
btCPUVertexBufferDescriptor_swigregister(btCPUVertexBufferDescriptor)

class btDefaultSoftBodySolver(btSoftBodySolver):
    """Proxy of C++ btDefaultSoftBodySolver class."""

    __swig_setmethods__ = {}
    for _s in [btSoftBodySolver]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultSoftBodySolver, name, value)
    __swig_getmethods__ = {}
    for _s in [btSoftBodySolver]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultSoftBodySolver, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btDefaultSoftBodySolver self) -> btDefaultSoftBodySolver"""
        this = _bullet.new_btDefaultSoftBodySolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDefaultSoftBodySolver
    __del__ = lambda self: None

    def optimize(self, softBodies, forceUpdate=False):
        """
        optimize(btDefaultSoftBodySolver self, btAlignedObjectArray< btSoftBody * > & softBodies, bool forceUpdate=False)
        optimize(btDefaultSoftBodySolver self, btAlignedObjectArray< btSoftBody * > & softBodies)
        """
        return _bullet.btDefaultSoftBodySolver_optimize(self, softBodies, forceUpdate)


    def copyBackToSoftBodies(self, bMove=True):
        """
        copyBackToSoftBodies(btDefaultSoftBodySolver self, bool bMove=True)
        copyBackToSoftBodies(btDefaultSoftBodySolver self)
        """
        return _bullet.btDefaultSoftBodySolver_copyBackToSoftBodies(self, bMove)


    def copySoftBodyToVertexBuffer(self, softBody, vertexBuffer):
        """copySoftBodyToVertexBuffer(btDefaultSoftBodySolver self, btSoftBody softBody, btVertexBufferDescriptor vertexBuffer)"""
        return _bullet.btDefaultSoftBodySolver_copySoftBodyToVertexBuffer(self, softBody, vertexBuffer)


    def processCollision(self, *args):
        """
        processCollision(btDefaultSoftBodySolver self, btSoftBody arg2, btCollisionObjectWrapper const * arg3)
        processCollision(btDefaultSoftBodySolver self, btSoftBody arg2, btSoftBody arg3)
        """
        return _bullet.btDefaultSoftBodySolver_processCollision(self, *args)

btDefaultSoftBodySolver_swigregister = _bullet.btDefaultSoftBodySolver_swigregister
btDefaultSoftBodySolver_swigregister(btDefaultSoftBodySolver)

btSoftBodyDataName = _bullet.btSoftBodyDataName
class btSoftBodyWorldInfo(_object):
    """Proxy of C++ btSoftBodyWorldInfo class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyWorldInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyWorldInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["air_density"] = _bullet.btSoftBodyWorldInfo_air_density_set
    __swig_getmethods__["air_density"] = _bullet.btSoftBodyWorldInfo_air_density_get
    if _newclass:
        air_density = _swig_property(_bullet.btSoftBodyWorldInfo_air_density_get, _bullet.btSoftBodyWorldInfo_air_density_set)
    __swig_setmethods__["water_density"] = _bullet.btSoftBodyWorldInfo_water_density_set
    __swig_getmethods__["water_density"] = _bullet.btSoftBodyWorldInfo_water_density_get
    if _newclass:
        water_density = _swig_property(_bullet.btSoftBodyWorldInfo_water_density_get, _bullet.btSoftBodyWorldInfo_water_density_set)
    __swig_setmethods__["water_offset"] = _bullet.btSoftBodyWorldInfo_water_offset_set
    __swig_getmethods__["water_offset"] = _bullet.btSoftBodyWorldInfo_water_offset_get
    if _newclass:
        water_offset = _swig_property(_bullet.btSoftBodyWorldInfo_water_offset_get, _bullet.btSoftBodyWorldInfo_water_offset_set)
    __swig_setmethods__["m_maxDisplacement"] = _bullet.btSoftBodyWorldInfo_m_maxDisplacement_set
    __swig_getmethods__["m_maxDisplacement"] = _bullet.btSoftBodyWorldInfo_m_maxDisplacement_get
    if _newclass:
        m_maxDisplacement = _swig_property(_bullet.btSoftBodyWorldInfo_m_maxDisplacement_get, _bullet.btSoftBodyWorldInfo_m_maxDisplacement_set)
    __swig_setmethods__["water_normal"] = _bullet.btSoftBodyWorldInfo_water_normal_set
    __swig_getmethods__["water_normal"] = _bullet.btSoftBodyWorldInfo_water_normal_get
    if _newclass:
        water_normal = _swig_property(_bullet.btSoftBodyWorldInfo_water_normal_get, _bullet.btSoftBodyWorldInfo_water_normal_set)
    __swig_setmethods__["m_broadphase"] = _bullet.btSoftBodyWorldInfo_m_broadphase_set
    __swig_getmethods__["m_broadphase"] = _bullet.btSoftBodyWorldInfo_m_broadphase_get
    if _newclass:
        m_broadphase = _swig_property(_bullet.btSoftBodyWorldInfo_m_broadphase_get, _bullet.btSoftBodyWorldInfo_m_broadphase_set)
    __swig_setmethods__["m_dispatcher"] = _bullet.btSoftBodyWorldInfo_m_dispatcher_set
    __swig_getmethods__["m_dispatcher"] = _bullet.btSoftBodyWorldInfo_m_dispatcher_get
    if _newclass:
        m_dispatcher = _swig_property(_bullet.btSoftBodyWorldInfo_m_dispatcher_get, _bullet.btSoftBodyWorldInfo_m_dispatcher_set)
    __swig_setmethods__["m_gravity"] = _bullet.btSoftBodyWorldInfo_m_gravity_set
    __swig_getmethods__["m_gravity"] = _bullet.btSoftBodyWorldInfo_m_gravity_get
    if _newclass:
        m_gravity = _swig_property(_bullet.btSoftBodyWorldInfo_m_gravity_get, _bullet.btSoftBodyWorldInfo_m_gravity_set)
    __swig_setmethods__["m_sparsesdf"] = _bullet.btSoftBodyWorldInfo_m_sparsesdf_set
    __swig_getmethods__["m_sparsesdf"] = _bullet.btSoftBodyWorldInfo_m_sparsesdf_get
    if _newclass:
        m_sparsesdf = _swig_property(_bullet.btSoftBodyWorldInfo_m_sparsesdf_get, _bullet.btSoftBodyWorldInfo_m_sparsesdf_set)

    def __init__(self):
        """__init__(btSoftBodyWorldInfo self) -> btSoftBodyWorldInfo"""
        this = _bullet.new_btSoftBodyWorldInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyWorldInfo
    __del__ = lambda self: None
btSoftBodyWorldInfo_swigregister = _bullet.btSoftBodyWorldInfo_swigregister
btSoftBodyWorldInfo_swigregister(btSoftBodyWorldInfo)

class btSoftBody(btCollisionObject):
    """Proxy of C++ btSoftBody class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBody, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBody, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionDisabledObjects"] = _bullet.btSoftBody_m_collisionDisabledObjects_set
    __swig_getmethods__["m_collisionDisabledObjects"] = _bullet.btSoftBody_m_collisionDisabledObjects_get
    if _newclass:
        m_collisionDisabledObjects = _swig_property(_bullet.btSoftBody_m_collisionDisabledObjects_get, _bullet.btSoftBody_m_collisionDisabledObjects_set)
    __swig_setmethods__["m_softBodySolver"] = _bullet.btSoftBody_m_softBodySolver_set
    __swig_getmethods__["m_softBodySolver"] = _bullet.btSoftBody_m_softBodySolver_get
    if _newclass:
        m_softBodySolver = _swig_property(_bullet.btSoftBody_m_softBodySolver_get, _bullet.btSoftBody_m_softBodySolver_set)
    __swig_setmethods__["m_cfg"] = _bullet.btSoftBody_m_cfg_set
    __swig_getmethods__["m_cfg"] = _bullet.btSoftBody_m_cfg_get
    if _newclass:
        m_cfg = _swig_property(_bullet.btSoftBody_m_cfg_get, _bullet.btSoftBody_m_cfg_set)
    __swig_setmethods__["m_sst"] = _bullet.btSoftBody_m_sst_set
    __swig_getmethods__["m_sst"] = _bullet.btSoftBody_m_sst_get
    if _newclass:
        m_sst = _swig_property(_bullet.btSoftBody_m_sst_get, _bullet.btSoftBody_m_sst_set)
    __swig_setmethods__["m_pose"] = _bullet.btSoftBody_m_pose_set
    __swig_getmethods__["m_pose"] = _bullet.btSoftBody_m_pose_get
    if _newclass:
        m_pose = _swig_property(_bullet.btSoftBody_m_pose_get, _bullet.btSoftBody_m_pose_set)
    __swig_setmethods__["m_tag"] = _bullet.btSoftBody_m_tag_set
    __swig_getmethods__["m_tag"] = _bullet.btSoftBody_m_tag_get
    if _newclass:
        m_tag = _swig_property(_bullet.btSoftBody_m_tag_get, _bullet.btSoftBody_m_tag_set)
    __swig_setmethods__["m_worldInfo"] = _bullet.btSoftBody_m_worldInfo_set
    __swig_getmethods__["m_worldInfo"] = _bullet.btSoftBody_m_worldInfo_get
    if _newclass:
        m_worldInfo = _swig_property(_bullet.btSoftBody_m_worldInfo_get, _bullet.btSoftBody_m_worldInfo_set)
    __swig_setmethods__["m_notes"] = _bullet.btSoftBody_m_notes_set
    __swig_getmethods__["m_notes"] = _bullet.btSoftBody_m_notes_get
    if _newclass:
        m_notes = _swig_property(_bullet.btSoftBody_m_notes_get, _bullet.btSoftBody_m_notes_set)
    __swig_setmethods__["m_nodes"] = _bullet.btSoftBody_m_nodes_set
    __swig_getmethods__["m_nodes"] = _bullet.btSoftBody_m_nodes_get
    if _newclass:
        m_nodes = _swig_property(_bullet.btSoftBody_m_nodes_get, _bullet.btSoftBody_m_nodes_set)
    __swig_setmethods__["m_links"] = _bullet.btSoftBody_m_links_set
    __swig_getmethods__["m_links"] = _bullet.btSoftBody_m_links_get
    if _newclass:
        m_links = _swig_property(_bullet.btSoftBody_m_links_get, _bullet.btSoftBody_m_links_set)
    __swig_setmethods__["m_faces"] = _bullet.btSoftBody_m_faces_set
    __swig_getmethods__["m_faces"] = _bullet.btSoftBody_m_faces_get
    if _newclass:
        m_faces = _swig_property(_bullet.btSoftBody_m_faces_get, _bullet.btSoftBody_m_faces_set)
    __swig_setmethods__["m_tetras"] = _bullet.btSoftBody_m_tetras_set
    __swig_getmethods__["m_tetras"] = _bullet.btSoftBody_m_tetras_get
    if _newclass:
        m_tetras = _swig_property(_bullet.btSoftBody_m_tetras_get, _bullet.btSoftBody_m_tetras_set)
    __swig_setmethods__["m_anchors"] = _bullet.btSoftBody_m_anchors_set
    __swig_getmethods__["m_anchors"] = _bullet.btSoftBody_m_anchors_get
    if _newclass:
        m_anchors = _swig_property(_bullet.btSoftBody_m_anchors_get, _bullet.btSoftBody_m_anchors_set)
    __swig_setmethods__["m_rcontacts"] = _bullet.btSoftBody_m_rcontacts_set
    __swig_getmethods__["m_rcontacts"] = _bullet.btSoftBody_m_rcontacts_get
    if _newclass:
        m_rcontacts = _swig_property(_bullet.btSoftBody_m_rcontacts_get, _bullet.btSoftBody_m_rcontacts_set)
    __swig_setmethods__["m_scontacts"] = _bullet.btSoftBody_m_scontacts_set
    __swig_getmethods__["m_scontacts"] = _bullet.btSoftBody_m_scontacts_get
    if _newclass:
        m_scontacts = _swig_property(_bullet.btSoftBody_m_scontacts_get, _bullet.btSoftBody_m_scontacts_set)
    __swig_setmethods__["m_joints"] = _bullet.btSoftBody_m_joints_set
    __swig_getmethods__["m_joints"] = _bullet.btSoftBody_m_joints_get
    if _newclass:
        m_joints = _swig_property(_bullet.btSoftBody_m_joints_get, _bullet.btSoftBody_m_joints_set)
    __swig_setmethods__["m_materials"] = _bullet.btSoftBody_m_materials_set
    __swig_getmethods__["m_materials"] = _bullet.btSoftBody_m_materials_get
    if _newclass:
        m_materials = _swig_property(_bullet.btSoftBody_m_materials_get, _bullet.btSoftBody_m_materials_set)
    __swig_setmethods__["m_timeacc"] = _bullet.btSoftBody_m_timeacc_set
    __swig_getmethods__["m_timeacc"] = _bullet.btSoftBody_m_timeacc_get
    if _newclass:
        m_timeacc = _swig_property(_bullet.btSoftBody_m_timeacc_get, _bullet.btSoftBody_m_timeacc_set)
    __swig_setmethods__["m_bounds"] = _bullet.btSoftBody_m_bounds_set
    __swig_getmethods__["m_bounds"] = _bullet.btSoftBody_m_bounds_get
    if _newclass:
        m_bounds = _swig_property(_bullet.btSoftBody_m_bounds_get, _bullet.btSoftBody_m_bounds_set)
    __swig_setmethods__["m_bUpdateRtCst"] = _bullet.btSoftBody_m_bUpdateRtCst_set
    __swig_getmethods__["m_bUpdateRtCst"] = _bullet.btSoftBody_m_bUpdateRtCst_get
    if _newclass:
        m_bUpdateRtCst = _swig_property(_bullet.btSoftBody_m_bUpdateRtCst_get, _bullet.btSoftBody_m_bUpdateRtCst_set)
    __swig_setmethods__["m_ndbvt"] = _bullet.btSoftBody_m_ndbvt_set
    __swig_getmethods__["m_ndbvt"] = _bullet.btSoftBody_m_ndbvt_get
    if _newclass:
        m_ndbvt = _swig_property(_bullet.btSoftBody_m_ndbvt_get, _bullet.btSoftBody_m_ndbvt_set)
    __swig_setmethods__["m_fdbvt"] = _bullet.btSoftBody_m_fdbvt_set
    __swig_getmethods__["m_fdbvt"] = _bullet.btSoftBody_m_fdbvt_get
    if _newclass:
        m_fdbvt = _swig_property(_bullet.btSoftBody_m_fdbvt_get, _bullet.btSoftBody_m_fdbvt_set)
    __swig_setmethods__["m_cdbvt"] = _bullet.btSoftBody_m_cdbvt_set
    __swig_getmethods__["m_cdbvt"] = _bullet.btSoftBody_m_cdbvt_get
    if _newclass:
        m_cdbvt = _swig_property(_bullet.btSoftBody_m_cdbvt_get, _bullet.btSoftBody_m_cdbvt_set)
    __swig_setmethods__["m_clusters"] = _bullet.btSoftBody_m_clusters_set
    __swig_getmethods__["m_clusters"] = _bullet.btSoftBody_m_clusters_get
    if _newclass:
        m_clusters = _swig_property(_bullet.btSoftBody_m_clusters_get, _bullet.btSoftBody_m_clusters_set)
    __swig_setmethods__["m_clusterConnectivity"] = _bullet.btSoftBody_m_clusterConnectivity_set
    __swig_getmethods__["m_clusterConnectivity"] = _bullet.btSoftBody_m_clusterConnectivity_get
    if _newclass:
        m_clusterConnectivity = _swig_property(_bullet.btSoftBody_m_clusterConnectivity_get, _bullet.btSoftBody_m_clusterConnectivity_set)
    __swig_setmethods__["m_initialWorldTransform"] = _bullet.btSoftBody_m_initialWorldTransform_set
    __swig_getmethods__["m_initialWorldTransform"] = _bullet.btSoftBody_m_initialWorldTransform_get
    if _newclass:
        m_initialWorldTransform = _swig_property(_bullet.btSoftBody_m_initialWorldTransform_get, _bullet.btSoftBody_m_initialWorldTransform_set)
    __swig_setmethods__["m_windVelocity"] = _bullet.btSoftBody_m_windVelocity_set
    __swig_getmethods__["m_windVelocity"] = _bullet.btSoftBody_m_windVelocity_get
    if _newclass:
        m_windVelocity = _swig_property(_bullet.btSoftBody_m_windVelocity_get, _bullet.btSoftBody_m_windVelocity_set)
    __swig_setmethods__["m_restLengthScale"] = _bullet.btSoftBody_m_restLengthScale_set
    __swig_getmethods__["m_restLengthScale"] = _bullet.btSoftBody_m_restLengthScale_get
    if _newclass:
        m_restLengthScale = _swig_property(_bullet.btSoftBody_m_restLengthScale_get, _bullet.btSoftBody_m_restLengthScale_set)

    def __init__(self, *args):
        """
        __init__(btSoftBody self, btSoftBodyWorldInfo worldInfo, int node_count, btVector3 const * x) -> btSoftBody
        __init__(btSoftBody self, btSoftBodyWorldInfo worldInfo) -> btSoftBody
        """
        this = _bullet.new_btSoftBody(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def initDefaults(self):
        """initDefaults(btSoftBody self)"""
        return _bullet.btSoftBody_initDefaults(self)

    __swig_destroy__ = _bullet.delete_btSoftBody
    __del__ = lambda self: None
    __swig_setmethods__["m_userIndexMapping"] = _bullet.btSoftBody_m_userIndexMapping_set
    __swig_getmethods__["m_userIndexMapping"] = _bullet.btSoftBody_m_userIndexMapping_get
    if _newclass:
        m_userIndexMapping = _swig_property(_bullet.btSoftBody_m_userIndexMapping_get, _bullet.btSoftBody_m_userIndexMapping_set)

    def getWorldInfo(self):
        """getWorldInfo(btSoftBody self) -> btSoftBodyWorldInfo"""
        return _bullet.btSoftBody_getWorldInfo(self)


    def checkLink(self, *args):
        """
        checkLink(btSoftBody self, int node0, int node1) -> bool
        checkLink(btSoftBody self, btSoftBody::Node const * node0, btSoftBody::Node const * node1) -> bool
        """
        return _bullet.btSoftBody_checkLink(self, *args)


    def checkFace(self, node0, node1, node2):
        """checkFace(btSoftBody self, int node0, int node1, int node2) -> bool"""
        return _bullet.btSoftBody_checkFace(self, node0, node1, node2)


    def appendMaterial(self):
        """appendMaterial(btSoftBody self) -> btSoftBody::Material *"""
        return _bullet.btSoftBody_appendMaterial(self)


    def appendNote(self, *args):
        """
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btVector4 const & c, btSoftBody::Node * n0=None, btSoftBody::Node * n1=None, btSoftBody::Node * n2=None, btSoftBody::Node * n3=None)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btVector4 const & c, btSoftBody::Node * n0=None, btSoftBody::Node * n1=None, btSoftBody::Node * n2=None)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btVector4 const & c, btSoftBody::Node * n0=None, btSoftBody::Node * n1=None)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btVector4 const & c, btSoftBody::Node * n0=None)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btVector4 const & c)
        appendNote(btSoftBody self, char const * text, btVector3 const & o)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btSoftBody::Node * feature)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btSoftBody::Link * feature)
        appendNote(btSoftBody self, char const * text, btVector3 const & o, btSoftBody::Face * feature)
        """
        return _bullet.btSoftBody_appendNote(self, *args)


    def appendNode(self, x, m):
        """appendNode(btSoftBody self, btVector3 const & x, btScalar m)"""
        return _bullet.btSoftBody_appendNode(self, x, m)


    def appendLink(self, *args):
        """
        appendLink(btSoftBody self, int model=-1, btSoftBody::Material * mat=None)
        appendLink(btSoftBody self, int model=-1)
        appendLink(btSoftBody self)
        appendLink(btSoftBody self, int node0, int node1, btSoftBody::Material * mat=None, bool bcheckexist=False)
        appendLink(btSoftBody self, int node0, int node1, btSoftBody::Material * mat=None)
        appendLink(btSoftBody self, int node0, int node1)
        appendLink(btSoftBody self, btSoftBody::Node * node0, btSoftBody::Node * node1, btSoftBody::Material * mat=None, bool bcheckexist=False)
        appendLink(btSoftBody self, btSoftBody::Node * node0, btSoftBody::Node * node1, btSoftBody::Material * mat=None)
        appendLink(btSoftBody self, btSoftBody::Node * node0, btSoftBody::Node * node1)
        """
        return _bullet.btSoftBody_appendLink(self, *args)


    def appendFace(self, *args):
        """
        appendFace(btSoftBody self, int model=-1, btSoftBody::Material * mat=None)
        appendFace(btSoftBody self, int model=-1)
        appendFace(btSoftBody self)
        appendFace(btSoftBody self, int node0, int node1, int node2, btSoftBody::Material * mat=None)
        appendFace(btSoftBody self, int node0, int node1, int node2)
        """
        return _bullet.btSoftBody_appendFace(self, *args)


    def appendTetra(self, *args):
        """
        appendTetra(btSoftBody self, int model, btSoftBody::Material * mat)
        appendTetra(btSoftBody self, int node0, int node1, int node2, int node3, btSoftBody::Material * mat=None)
        appendTetra(btSoftBody self, int node0, int node1, int node2, int node3)
        """
        return _bullet.btSoftBody_appendTetra(self, *args)


    def appendAnchor(self, *args):
        """
        appendAnchor(btSoftBody self, int node, btRigidBody body, bool disableCollisionBetweenLinkedBodies=False, btScalar influence=1)
        appendAnchor(btSoftBody self, int node, btRigidBody body, bool disableCollisionBetweenLinkedBodies=False)
        appendAnchor(btSoftBody self, int node, btRigidBody body)
        appendAnchor(btSoftBody self, int node, btRigidBody body, btVector3 const & localPivot, bool disableCollisionBetweenLinkedBodies=False, btScalar influence=1)
        appendAnchor(btSoftBody self, int node, btRigidBody body, btVector3 const & localPivot, bool disableCollisionBetweenLinkedBodies=False)
        appendAnchor(btSoftBody self, int node, btRigidBody body, btVector3 const & localPivot)
        """
        return _bullet.btSoftBody_appendAnchor(self, *args)


    def appendLinearJoint(self, *args):
        """
        appendLinearJoint(btSoftBody self, btSoftBody::LJoint::Specs const & specs, btSoftBody::Cluster * body0, btSoftBody::Body body1)
        appendLinearJoint(btSoftBody self, btSoftBody::LJoint::Specs const & specs, btSoftBody::Body body)
        appendLinearJoint(btSoftBody self, btSoftBody::LJoint::Specs const & specs)
        appendLinearJoint(btSoftBody self, btSoftBody::LJoint::Specs const & specs, btSoftBody body)
        """
        return _bullet.btSoftBody_appendLinearJoint(self, *args)


    def appendAngularJoint(self, *args):
        """
        appendAngularJoint(btSoftBody self, btSoftBody::AJoint::Specs const & specs, btSoftBody::Cluster * body0, btSoftBody::Body body1)
        appendAngularJoint(btSoftBody self, btSoftBody::AJoint::Specs const & specs, btSoftBody::Body body)
        appendAngularJoint(btSoftBody self, btSoftBody::AJoint::Specs const & specs)
        appendAngularJoint(btSoftBody self, btSoftBody::AJoint::Specs const & specs, btSoftBody body)
        """
        return _bullet.btSoftBody_appendAngularJoint(self, *args)


    def addForce(self, *args):
        """
        addForce(btSoftBody self, btVector3 const & force)
        addForce(btSoftBody self, btVector3 const & force, int node)
        """
        return _bullet.btSoftBody_addForce(self, *args)


    def addAeroForceToNode(self, windVelocity, nodeIndex):
        """addAeroForceToNode(btSoftBody self, btVector3 const & windVelocity, int nodeIndex)"""
        return _bullet.btSoftBody_addAeroForceToNode(self, windVelocity, nodeIndex)


    def addAeroForceToFace(self, windVelocity, faceIndex):
        """addAeroForceToFace(btSoftBody self, btVector3 const & windVelocity, int faceIndex)"""
        return _bullet.btSoftBody_addAeroForceToFace(self, windVelocity, faceIndex)


    def setVelocity(self, velocity):
        """setVelocity(btSoftBody self, btVector3 const & velocity)"""
        return _bullet.btSoftBody_setVelocity(self, velocity)


    def addVelocity(self, *args):
        """
        addVelocity(btSoftBody self, btVector3 const & velocity)
        addVelocity(btSoftBody self, btVector3 const & velocity, int node)
        """
        return _bullet.btSoftBody_addVelocity(self, *args)


    def setMass(self, node, mass):
        """setMass(btSoftBody self, int node, btScalar mass)"""
        return _bullet.btSoftBody_setMass(self, node, mass)


    def getMass(self, node):
        """getMass(btSoftBody self, int node) -> btScalar"""
        return _bullet.btSoftBody_getMass(self, node)


    def getTotalMass(self):
        """getTotalMass(btSoftBody self) -> btScalar"""
        return _bullet.btSoftBody_getTotalMass(self)


    def setTotalMass(self, mass, fromfaces=False):
        """
        setTotalMass(btSoftBody self, btScalar mass, bool fromfaces=False)
        setTotalMass(btSoftBody self, btScalar mass)
        """
        return _bullet.btSoftBody_setTotalMass(self, mass, fromfaces)


    def setTotalDensity(self, density):
        """setTotalDensity(btSoftBody self, btScalar density)"""
        return _bullet.btSoftBody_setTotalDensity(self, density)


    def setVolumeMass(self, mass):
        """setVolumeMass(btSoftBody self, btScalar mass)"""
        return _bullet.btSoftBody_setVolumeMass(self, mass)


    def setVolumeDensity(self, density):
        """setVolumeDensity(btSoftBody self, btScalar density)"""
        return _bullet.btSoftBody_setVolumeDensity(self, density)


    def transform(self, trs):
        """transform(btSoftBody self, btTransform const & trs)"""
        return _bullet.btSoftBody_transform(self, trs)


    def translate(self, trs):
        """translate(btSoftBody self, btVector3 const & trs)"""
        return _bullet.btSoftBody_translate(self, trs)


    def rotate(self, rot):
        """rotate(btSoftBody self, btQuaternion const & rot)"""
        return _bullet.btSoftBody_rotate(self, rot)


    def scale(self, scl):
        """scale(btSoftBody self, btVector3 const & scl)"""
        return _bullet.btSoftBody_scale(self, scl)


    def getRestLengthScale(self):
        """getRestLengthScale(btSoftBody self) -> btScalar"""
        return _bullet.btSoftBody_getRestLengthScale(self)


    def setRestLengthScale(self, restLength):
        """setRestLengthScale(btSoftBody self, btScalar restLength)"""
        return _bullet.btSoftBody_setRestLengthScale(self, restLength)


    def setPose(self, bvolume, bframe):
        """setPose(btSoftBody self, bool bvolume, bool bframe)"""
        return _bullet.btSoftBody_setPose(self, bvolume, bframe)


    def resetLinkRestLengths(self):
        """resetLinkRestLengths(btSoftBody self)"""
        return _bullet.btSoftBody_resetLinkRestLengths(self)


    def getVolume(self):
        """getVolume(btSoftBody self) -> btScalar"""
        return _bullet.btSoftBody_getVolume(self)


    def clusterCount(self):
        """clusterCount(btSoftBody self) -> int"""
        return _bullet.btSoftBody_clusterCount(self)


    def clusterCom(self, *args):
        """
        clusterCom(btSoftBody self, btSoftBody::Cluster const * cluster) -> btVector3
        clusterCom(btSoftBody self, int cluster) -> btVector3
        """
        return _bullet.btSoftBody_clusterCom(self, *args)


    def clusterVelocity(cluster, rpos):
        """clusterVelocity(btSoftBody::Cluster const * cluster, btVector3 const & rpos) -> btVector3"""
        return _bullet.btSoftBody_clusterVelocity(cluster, rpos)

    clusterVelocity = staticmethod(clusterVelocity)

    def clusterVImpulse(cluster, rpos, impulse):
        """clusterVImpulse(btSoftBody::Cluster * cluster, btVector3 const & rpos, btVector3 const & impulse)"""
        return _bullet.btSoftBody_clusterVImpulse(cluster, rpos, impulse)

    clusterVImpulse = staticmethod(clusterVImpulse)

    def clusterDImpulse(cluster, rpos, impulse):
        """clusterDImpulse(btSoftBody::Cluster * cluster, btVector3 const & rpos, btVector3 const & impulse)"""
        return _bullet.btSoftBody_clusterDImpulse(cluster, rpos, impulse)

    clusterDImpulse = staticmethod(clusterDImpulse)

    def clusterImpulse(cluster, rpos, impulse):
        """clusterImpulse(btSoftBody::Cluster * cluster, btVector3 const & rpos, btSoftBody::Impulse const & impulse)"""
        return _bullet.btSoftBody_clusterImpulse(cluster, rpos, impulse)

    clusterImpulse = staticmethod(clusterImpulse)

    def clusterVAImpulse(cluster, impulse):
        """clusterVAImpulse(btSoftBody::Cluster * cluster, btVector3 const & impulse)"""
        return _bullet.btSoftBody_clusterVAImpulse(cluster, impulse)

    clusterVAImpulse = staticmethod(clusterVAImpulse)

    def clusterDAImpulse(cluster, impulse):
        """clusterDAImpulse(btSoftBody::Cluster * cluster, btVector3 const & impulse)"""
        return _bullet.btSoftBody_clusterDAImpulse(cluster, impulse)

    clusterDAImpulse = staticmethod(clusterDAImpulse)

    def clusterAImpulse(cluster, impulse):
        """clusterAImpulse(btSoftBody::Cluster * cluster, btSoftBody::Impulse const & impulse)"""
        return _bullet.btSoftBody_clusterAImpulse(cluster, impulse)

    clusterAImpulse = staticmethod(clusterAImpulse)

    def clusterDCImpulse(cluster, impulse):
        """clusterDCImpulse(btSoftBody::Cluster * cluster, btVector3 const & impulse)"""
        return _bullet.btSoftBody_clusterDCImpulse(cluster, impulse)

    clusterDCImpulse = staticmethod(clusterDCImpulse)

    def generateBendingConstraints(self, distance, mat=None):
        """
        generateBendingConstraints(btSoftBody self, int distance, btSoftBody::Material * mat=None) -> int
        generateBendingConstraints(btSoftBody self, int distance) -> int
        """
        return _bullet.btSoftBody_generateBendingConstraints(self, distance, mat)


    def randomizeConstraints(self):
        """randomizeConstraints(btSoftBody self)"""
        return _bullet.btSoftBody_randomizeConstraints(self)


    def releaseCluster(self, index):
        """releaseCluster(btSoftBody self, int index)"""
        return _bullet.btSoftBody_releaseCluster(self, index)


    def releaseClusters(self):
        """releaseClusters(btSoftBody self)"""
        return _bullet.btSoftBody_releaseClusters(self)


    def generateClusters(self, k, maxiterations=8192):
        """
        generateClusters(btSoftBody self, int k, int maxiterations=8192) -> int
        generateClusters(btSoftBody self, int k) -> int
        """
        return _bullet.btSoftBody_generateClusters(self, k, maxiterations)


    def refine(self, ifn, accurary, cut):
        """refine(btSoftBody self, btSoftBody::ImplicitFn * ifn, btScalar accurary, bool cut)"""
        return _bullet.btSoftBody_refine(self, ifn, accurary, cut)


    def cutLink(self, *args):
        """
        cutLink(btSoftBody self, int node0, int node1, btScalar position) -> bool
        cutLink(btSoftBody self, btSoftBody::Node const * node0, btSoftBody::Node const * node1, btScalar position) -> bool
        """
        return _bullet.btSoftBody_cutLink(self, *args)


    def setSolver(self, preset):
        """setSolver(btSoftBody self, btSoftBody::eSolverPresets::_ preset)"""
        return _bullet.btSoftBody_setSolver(self, preset)


    def predictMotion(self, dt):
        """predictMotion(btSoftBody self, btScalar dt)"""
        return _bullet.btSoftBody_predictMotion(self, dt)


    def solveConstraints(self):
        """solveConstraints(btSoftBody self)"""
        return _bullet.btSoftBody_solveConstraints(self)


    def staticSolve(self, iterations):
        """staticSolve(btSoftBody self, int iterations)"""
        return _bullet.btSoftBody_staticSolve(self, iterations)


    def solveCommonConstraints(bodies, count, iterations):
        """solveCommonConstraints(btSoftBody ** bodies, int count, int iterations)"""
        return _bullet.btSoftBody_solveCommonConstraints(bodies, count, iterations)

    solveCommonConstraints = staticmethod(solveCommonConstraints)

    def integrateMotion(self):
        """integrateMotion(btSoftBody self)"""
        return _bullet.btSoftBody_integrateMotion(self)


    def defaultCollisionHandler(self, *args):
        """
        defaultCollisionHandler(btSoftBody self, btCollisionObjectWrapper const * pcoWrap)
        defaultCollisionHandler(btSoftBody self, btSoftBody psb)
        """
        return _bullet.btSoftBody_defaultCollisionHandler(self, *args)


    def setWindVelocity(self, velocity):
        """setWindVelocity(btSoftBody self, btVector3 const & velocity)"""
        return _bullet.btSoftBody_setWindVelocity(self, velocity)


    def getWindVelocity(self):
        """getWindVelocity(btSoftBody self) -> btVector3 const &"""
        return _bullet.btSoftBody_getWindVelocity(self)


    def setSoftBodySolver(self, softBodySolver):
        """setSoftBodySolver(btSoftBody self, btSoftBodySolver softBodySolver)"""
        return _bullet.btSoftBody_setSoftBodySolver(self, softBodySolver)


    def getSoftBodySolver(self, *args):
        """
        getSoftBodySolver(btSoftBody self) -> btSoftBodySolver
        getSoftBodySolver(btSoftBody self) -> btSoftBodySolver
        """
        return _bullet.btSoftBody_getSoftBodySolver(self, *args)


    def upcast_const(colObj):
        """upcast_const(btCollisionObject colObj) -> btSoftBody"""
        return _bullet.btSoftBody_upcast_const(colObj)

    upcast_const = staticmethod(upcast_const)

    def upcast(colObj):
        """upcast(btCollisionObject colObj) -> btSoftBody"""
        return _bullet.btSoftBody_upcast(colObj)

    upcast = staticmethod(upcast)

    def getAabb(self, aabbMin, aabbMax):
        """getAabb(btSoftBody self, btVector3 & aabbMin, btVector3 & aabbMax)"""
        return _bullet.btSoftBody_getAabb(self, aabbMin, aabbMax)


    def pointersToIndices(self):
        """pointersToIndices(btSoftBody self)"""
        return _bullet.btSoftBody_pointersToIndices(self)


    def indicesToPointers(self, map=None):
        """
        indicesToPointers(btSoftBody self, int const * map=None)
        indicesToPointers(btSoftBody self)
        """
        return _bullet.btSoftBody_indicesToPointers(self, map)


    def rayTest(self, *args):
        """
        rayTest(btSoftBody self, btVector3 const & rayFrom, btVector3 const & rayTo, btSoftBody::sRayCast & results) -> bool
        rayTest(btSoftBody self, btVector3 const & rayFrom, btVector3 const & rayTo, btScalar & mint, btSoftBody::eFeature::_ & feature, int & index, bool bcountonly) -> int
        """
        return _bullet.btSoftBody_rayTest(self, *args)


    def initializeFaceTree(self):
        """initializeFaceTree(btSoftBody self)"""
        return _bullet.btSoftBody_initializeFaceTree(self)


    def evaluateCom(self):
        """evaluateCom(btSoftBody self) -> btVector3"""
        return _bullet.btSoftBody_evaluateCom(self)


    def checkContact(self, colObjWrap, x, margin, cti):
        """checkContact(btSoftBody self, btCollisionObjectWrapper const * colObjWrap, btVector3 const & x, btScalar margin, btSoftBody::sCti & cti) -> bool"""
        return _bullet.btSoftBody_checkContact(self, colObjWrap, x, margin, cti)


    def updateNormals(self):
        """updateNormals(btSoftBody self)"""
        return _bullet.btSoftBody_updateNormals(self)


    def updateBounds(self):
        """updateBounds(btSoftBody self)"""
        return _bullet.btSoftBody_updateBounds(self)


    def updatePose(self):
        """updatePose(btSoftBody self)"""
        return _bullet.btSoftBody_updatePose(self)


    def updateConstants(self):
        """updateConstants(btSoftBody self)"""
        return _bullet.btSoftBody_updateConstants(self)


    def updateLinkConstants(self):
        """updateLinkConstants(btSoftBody self)"""
        return _bullet.btSoftBody_updateLinkConstants(self)


    def updateArea(self, averageArea=True):
        """
        updateArea(btSoftBody self, bool averageArea=True)
        updateArea(btSoftBody self)
        """
        return _bullet.btSoftBody_updateArea(self, averageArea)


    def initializeClusters(self):
        """initializeClusters(btSoftBody self)"""
        return _bullet.btSoftBody_initializeClusters(self)


    def updateClusters(self):
        """updateClusters(btSoftBody self)"""
        return _bullet.btSoftBody_updateClusters(self)


    def cleanupClusters(self):
        """cleanupClusters(btSoftBody self)"""
        return _bullet.btSoftBody_cleanupClusters(self)


    def prepareClusters(self, iterations):
        """prepareClusters(btSoftBody self, int iterations)"""
        return _bullet.btSoftBody_prepareClusters(self, iterations)


    def solveClusters(self, *args):
        """
        solveClusters(btSoftBody self, btAlignedObjectArray< btSoftBody * > const & bodies)
        solveClusters(btSoftBody self, btScalar sor)
        """
        return _bullet.btSoftBody_solveClusters(self, *args)


    def applyClusters(self, drift):
        """applyClusters(btSoftBody self, bool drift)"""
        return _bullet.btSoftBody_applyClusters(self, drift)


    def dampClusters(self):
        """dampClusters(btSoftBody self)"""
        return _bullet.btSoftBody_dampClusters(self)


    def applyForces(self):
        """applyForces(btSoftBody self)"""
        return _bullet.btSoftBody_applyForces(self)


    def PSolve_Anchors(psb, kst, ti):
        """PSolve_Anchors(btSoftBody psb, btScalar kst, btScalar ti)"""
        return _bullet.btSoftBody_PSolve_Anchors(psb, kst, ti)

    PSolve_Anchors = staticmethod(PSolve_Anchors)

    def PSolve_RContacts(psb, kst, ti):
        """PSolve_RContacts(btSoftBody psb, btScalar kst, btScalar ti)"""
        return _bullet.btSoftBody_PSolve_RContacts(psb, kst, ti)

    PSolve_RContacts = staticmethod(PSolve_RContacts)

    def PSolve_SContacts(psb, arg2, ti):
        """PSolve_SContacts(btSoftBody psb, btScalar arg2, btScalar ti)"""
        return _bullet.btSoftBody_PSolve_SContacts(psb, arg2, ti)

    PSolve_SContacts = staticmethod(PSolve_SContacts)

    def PSolve_Links(psb, kst, ti):
        """PSolve_Links(btSoftBody psb, btScalar kst, btScalar ti)"""
        return _bullet.btSoftBody_PSolve_Links(psb, kst, ti)

    PSolve_Links = staticmethod(PSolve_Links)

    def VSolve_Links(psb, kst):
        """VSolve_Links(btSoftBody psb, btScalar kst)"""
        return _bullet.btSoftBody_VSolve_Links(psb, kst)

    VSolve_Links = staticmethod(VSolve_Links)

    def getSolver(*args):
        """
        getSolver(btSoftBody::ePSolver::_ solver) -> btSoftBody::psolver_t
        getSolver(btSoftBody::eVSolver::_ solver) -> btSoftBody::vsolver_t
        """
        return _bullet.btSoftBody_getSolver(*args)

    getSolver = staticmethod(getSolver)
btSoftBody_swigregister = _bullet.btSoftBody_swigregister
btSoftBody_swigregister(btSoftBody)

def btSoftBody_clusterVelocity(cluster, rpos):
    """btSoftBody_clusterVelocity(btSoftBody::Cluster const * cluster, btVector3 const & rpos) -> btVector3"""
    return _bullet.btSoftBody_clusterVelocity(cluster, rpos)

def btSoftBody_clusterVImpulse(cluster, rpos, impulse):
    """btSoftBody_clusterVImpulse(btSoftBody::Cluster * cluster, btVector3 const & rpos, btVector3 const & impulse)"""
    return _bullet.btSoftBody_clusterVImpulse(cluster, rpos, impulse)

def btSoftBody_clusterDImpulse(cluster, rpos, impulse):
    """btSoftBody_clusterDImpulse(btSoftBody::Cluster * cluster, btVector3 const & rpos, btVector3 const & impulse)"""
    return _bullet.btSoftBody_clusterDImpulse(cluster, rpos, impulse)

def btSoftBody_clusterImpulse(cluster, rpos, impulse):
    """btSoftBody_clusterImpulse(btSoftBody::Cluster * cluster, btVector3 const & rpos, btSoftBody::Impulse const & impulse)"""
    return _bullet.btSoftBody_clusterImpulse(cluster, rpos, impulse)

def btSoftBody_clusterVAImpulse(cluster, impulse):
    """btSoftBody_clusterVAImpulse(btSoftBody::Cluster * cluster, btVector3 const & impulse)"""
    return _bullet.btSoftBody_clusterVAImpulse(cluster, impulse)

def btSoftBody_clusterDAImpulse(cluster, impulse):
    """btSoftBody_clusterDAImpulse(btSoftBody::Cluster * cluster, btVector3 const & impulse)"""
    return _bullet.btSoftBody_clusterDAImpulse(cluster, impulse)

def btSoftBody_clusterAImpulse(cluster, impulse):
    """btSoftBody_clusterAImpulse(btSoftBody::Cluster * cluster, btSoftBody::Impulse const & impulse)"""
    return _bullet.btSoftBody_clusterAImpulse(cluster, impulse)

def btSoftBody_clusterDCImpulse(cluster, impulse):
    """btSoftBody_clusterDCImpulse(btSoftBody::Cluster * cluster, btVector3 const & impulse)"""
    return _bullet.btSoftBody_clusterDCImpulse(cluster, impulse)

def btSoftBody_solveCommonConstraints(bodies, count, iterations):
    """btSoftBody_solveCommonConstraints(btSoftBody ** bodies, int count, int iterations)"""
    return _bullet.btSoftBody_solveCommonConstraints(bodies, count, iterations)

def btSoftBody_upcast_const(colObj):
    """btSoftBody_upcast_const(btCollisionObject colObj) -> btSoftBody"""
    return _bullet.btSoftBody_upcast_const(colObj)

def btSoftBody_upcast(colObj):
    """btSoftBody_upcast(btCollisionObject colObj) -> btSoftBody"""
    return _bullet.btSoftBody_upcast(colObj)

def btSoftBody_PSolve_Anchors(psb, kst, ti):
    """btSoftBody_PSolve_Anchors(btSoftBody psb, btScalar kst, btScalar ti)"""
    return _bullet.btSoftBody_PSolve_Anchors(psb, kst, ti)

def btSoftBody_PSolve_RContacts(psb, kst, ti):
    """btSoftBody_PSolve_RContacts(btSoftBody psb, btScalar kst, btScalar ti)"""
    return _bullet.btSoftBody_PSolve_RContacts(psb, kst, ti)

def btSoftBody_PSolve_SContacts(psb, arg3, ti):
    """btSoftBody_PSolve_SContacts(btSoftBody psb, btScalar arg3, btScalar ti)"""
    return _bullet.btSoftBody_PSolve_SContacts(psb, arg3, ti)

def btSoftBody_PSolve_Links(psb, kst, ti):
    """btSoftBody_PSolve_Links(btSoftBody psb, btScalar kst, btScalar ti)"""
    return _bullet.btSoftBody_PSolve_Links(psb, kst, ti)

def btSoftBody_VSolve_Links(psb, kst):
    """btSoftBody_VSolve_Links(btSoftBody psb, btScalar kst)"""
    return _bullet.btSoftBody_VSolve_Links(psb, kst)

def btSoftBody_getSolver(*args):
    """
    getSolver(btSoftBody::ePSolver::_ solver) -> btSoftBody::psolver_t
    btSoftBody_getSolver(btSoftBody::eVSolver::_ solver) -> btSoftBody::vsolver_t
    """
    return _bullet.btSoftBody_getSolver(*args)

class btTriIndex(_object):
    """Proxy of C++ btTriIndex class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btTriIndex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btTriIndex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_PartIdTriangleIndex"] = _bullet.btTriIndex_m_PartIdTriangleIndex_set
    __swig_getmethods__["m_PartIdTriangleIndex"] = _bullet.btTriIndex_m_PartIdTriangleIndex_get
    if _newclass:
        m_PartIdTriangleIndex = _swig_property(_bullet.btTriIndex_m_PartIdTriangleIndex_get, _bullet.btTriIndex_m_PartIdTriangleIndex_set)
    __swig_setmethods__["m_childShape"] = _bullet.btTriIndex_m_childShape_set
    __swig_getmethods__["m_childShape"] = _bullet.btTriIndex_m_childShape_get
    if _newclass:
        m_childShape = _swig_property(_bullet.btTriIndex_m_childShape_get, _bullet.btTriIndex_m_childShape_set)

    def __init__(self, partId, triangleIndex, shape):
        """__init__(btTriIndex self, int partId, int triangleIndex, btCollisionShape shape) -> btTriIndex"""
        this = _bullet.new_btTriIndex(partId, triangleIndex, shape)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getTriangleIndex(self):
        """getTriangleIndex(btTriIndex self) -> int"""
        return _bullet.btTriIndex_getTriangleIndex(self)


    def getPartId(self):
        """getPartId(btTriIndex self) -> int"""
        return _bullet.btTriIndex_getPartId(self)


    def getUid(self):
        """getUid(btTriIndex self) -> int"""
        return _bullet.btTriIndex_getUid(self)

    __swig_destroy__ = _bullet.delete_btTriIndex
    __del__ = lambda self: None
btTriIndex_swigregister = _bullet.btTriIndex_swigregister
btTriIndex_swigregister(btTriIndex)

class btSoftBodyTriangleCallback(btTriangleCallback):
    """Proxy of C++ btSoftBodyTriangleCallback class."""

    __swig_setmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyTriangleCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [btTriangleCallback]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyTriangleCallback, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_triangleCount"] = _bullet.btSoftBodyTriangleCallback_m_triangleCount_set
    __swig_getmethods__["m_triangleCount"] = _bullet.btSoftBodyTriangleCallback_m_triangleCount_get
    if _newclass:
        m_triangleCount = _swig_property(_bullet.btSoftBodyTriangleCallback_m_triangleCount_get, _bullet.btSoftBodyTriangleCallback_m_triangleCount_set)

    def __init__(self, dispatcher, body0Wrap, body1Wrap, isSwapped):
        """__init__(btSoftBodyTriangleCallback self, btDispatcher dispatcher, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btSoftBodyTriangleCallback"""
        this = _bullet.new_btSoftBodyTriangleCallback(dispatcher, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setTimeStepAndCounters(self, collisionMarginTriangle, triObjWrap, dispatchInfo, resultOut):
        """setTimeStepAndCounters(btSoftBodyTriangleCallback self, btScalar collisionMarginTriangle, btCollisionObjectWrapper const * triObjWrap, btDispatcherInfo dispatchInfo, btManifoldResult resultOut)"""
        return _bullet.btSoftBodyTriangleCallback_setTimeStepAndCounters(self, collisionMarginTriangle, triObjWrap, dispatchInfo, resultOut)

    __swig_destroy__ = _bullet.delete_btSoftBodyTriangleCallback
    __del__ = lambda self: None

    def clearCache(self):
        """clearCache(btSoftBodyTriangleCallback self)"""
        return _bullet.btSoftBodyTriangleCallback_clearCache(self)


    def getAabbMin(self):
        """getAabbMin(btSoftBodyTriangleCallback self) -> btVector3 const &"""
        return _bullet.btSoftBodyTriangleCallback_getAabbMin(self)


    def getAabbMax(self):
        """getAabbMax(btSoftBodyTriangleCallback self) -> btVector3 const &"""
        return _bullet.btSoftBodyTriangleCallback_getAabbMax(self)

btSoftBodyTriangleCallback_swigregister = _bullet.btSoftBodyTriangleCallback_swigregister
btSoftBodyTriangleCallback_swigregister(btSoftBodyTriangleCallback)

class btSoftBodyConcaveCollisionAlgorithm(btCollisionAlgorithm):
    """Proxy of C++ btSoftBodyConcaveCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyConcaveCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyConcaveCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, ci, body0Wrap, body1Wrap, isSwapped):
        """__init__(btSoftBodyConcaveCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap, bool isSwapped) -> btSoftBodyConcaveCollisionAlgorithm"""
        this = _bullet.new_btSoftBodyConcaveCollisionAlgorithm(ci, body0Wrap, body1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyConcaveCollisionAlgorithm
    __del__ = lambda self: None

    def clearCache(self):
        """clearCache(btSoftBodyConcaveCollisionAlgorithm self)"""
        return _bullet.btSoftBodyConcaveCollisionAlgorithm_clearCache(self)

btSoftBodyConcaveCollisionAlgorithm_swigregister = _bullet.btSoftBodyConcaveCollisionAlgorithm_swigregister
btSoftBodyConcaveCollisionAlgorithm_swigregister(btSoftBodyConcaveCollisionAlgorithm)

class SoftBodyMaterialData(_object):
    """Proxy of C++ SoftBodyMaterialData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyMaterialData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyMaterialData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_linearStiffness"] = _bullet.SoftBodyMaterialData_m_linearStiffness_set
    __swig_getmethods__["m_linearStiffness"] = _bullet.SoftBodyMaterialData_m_linearStiffness_get
    if _newclass:
        m_linearStiffness = _swig_property(_bullet.SoftBodyMaterialData_m_linearStiffness_get, _bullet.SoftBodyMaterialData_m_linearStiffness_set)
    __swig_setmethods__["m_angularStiffness"] = _bullet.SoftBodyMaterialData_m_angularStiffness_set
    __swig_getmethods__["m_angularStiffness"] = _bullet.SoftBodyMaterialData_m_angularStiffness_get
    if _newclass:
        m_angularStiffness = _swig_property(_bullet.SoftBodyMaterialData_m_angularStiffness_get, _bullet.SoftBodyMaterialData_m_angularStiffness_set)
    __swig_setmethods__["m_volumeStiffness"] = _bullet.SoftBodyMaterialData_m_volumeStiffness_set
    __swig_getmethods__["m_volumeStiffness"] = _bullet.SoftBodyMaterialData_m_volumeStiffness_get
    if _newclass:
        m_volumeStiffness = _swig_property(_bullet.SoftBodyMaterialData_m_volumeStiffness_get, _bullet.SoftBodyMaterialData_m_volumeStiffness_set)
    __swig_setmethods__["m_flags"] = _bullet.SoftBodyMaterialData_m_flags_set
    __swig_getmethods__["m_flags"] = _bullet.SoftBodyMaterialData_m_flags_get
    if _newclass:
        m_flags = _swig_property(_bullet.SoftBodyMaterialData_m_flags_get, _bullet.SoftBodyMaterialData_m_flags_set)

    def __init__(self):
        """__init__(SoftBodyMaterialData self) -> SoftBodyMaterialData"""
        this = _bullet.new_SoftBodyMaterialData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyMaterialData
    __del__ = lambda self: None
SoftBodyMaterialData_swigregister = _bullet.SoftBodyMaterialData_swigregister
SoftBodyMaterialData_swigregister(SoftBodyMaterialData)

class SoftBodyNodeData(_object):
    """Proxy of C++ SoftBodyNodeData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyNodeData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyNodeData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_material"] = _bullet.SoftBodyNodeData_m_material_set
    __swig_getmethods__["m_material"] = _bullet.SoftBodyNodeData_m_material_get
    if _newclass:
        m_material = _swig_property(_bullet.SoftBodyNodeData_m_material_get, _bullet.SoftBodyNodeData_m_material_set)
    __swig_setmethods__["m_position"] = _bullet.SoftBodyNodeData_m_position_set
    __swig_getmethods__["m_position"] = _bullet.SoftBodyNodeData_m_position_get
    if _newclass:
        m_position = _swig_property(_bullet.SoftBodyNodeData_m_position_get, _bullet.SoftBodyNodeData_m_position_set)
    __swig_setmethods__["m_previousPosition"] = _bullet.SoftBodyNodeData_m_previousPosition_set
    __swig_getmethods__["m_previousPosition"] = _bullet.SoftBodyNodeData_m_previousPosition_get
    if _newclass:
        m_previousPosition = _swig_property(_bullet.SoftBodyNodeData_m_previousPosition_get, _bullet.SoftBodyNodeData_m_previousPosition_set)
    __swig_setmethods__["m_velocity"] = _bullet.SoftBodyNodeData_m_velocity_set
    __swig_getmethods__["m_velocity"] = _bullet.SoftBodyNodeData_m_velocity_get
    if _newclass:
        m_velocity = _swig_property(_bullet.SoftBodyNodeData_m_velocity_get, _bullet.SoftBodyNodeData_m_velocity_set)
    __swig_setmethods__["m_accumulatedForce"] = _bullet.SoftBodyNodeData_m_accumulatedForce_set
    __swig_getmethods__["m_accumulatedForce"] = _bullet.SoftBodyNodeData_m_accumulatedForce_get
    if _newclass:
        m_accumulatedForce = _swig_property(_bullet.SoftBodyNodeData_m_accumulatedForce_get, _bullet.SoftBodyNodeData_m_accumulatedForce_set)
    __swig_setmethods__["m_normal"] = _bullet.SoftBodyNodeData_m_normal_set
    __swig_getmethods__["m_normal"] = _bullet.SoftBodyNodeData_m_normal_get
    if _newclass:
        m_normal = _swig_property(_bullet.SoftBodyNodeData_m_normal_get, _bullet.SoftBodyNodeData_m_normal_set)
    __swig_setmethods__["m_inverseMass"] = _bullet.SoftBodyNodeData_m_inverseMass_set
    __swig_getmethods__["m_inverseMass"] = _bullet.SoftBodyNodeData_m_inverseMass_get
    if _newclass:
        m_inverseMass = _swig_property(_bullet.SoftBodyNodeData_m_inverseMass_get, _bullet.SoftBodyNodeData_m_inverseMass_set)
    __swig_setmethods__["m_area"] = _bullet.SoftBodyNodeData_m_area_set
    __swig_getmethods__["m_area"] = _bullet.SoftBodyNodeData_m_area_get
    if _newclass:
        m_area = _swig_property(_bullet.SoftBodyNodeData_m_area_get, _bullet.SoftBodyNodeData_m_area_set)
    __swig_setmethods__["m_attach"] = _bullet.SoftBodyNodeData_m_attach_set
    __swig_getmethods__["m_attach"] = _bullet.SoftBodyNodeData_m_attach_get
    if _newclass:
        m_attach = _swig_property(_bullet.SoftBodyNodeData_m_attach_get, _bullet.SoftBodyNodeData_m_attach_set)
    __swig_setmethods__["m_pad"] = _bullet.SoftBodyNodeData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.SoftBodyNodeData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.SoftBodyNodeData_m_pad_get, _bullet.SoftBodyNodeData_m_pad_set)

    def __init__(self):
        """__init__(SoftBodyNodeData self) -> SoftBodyNodeData"""
        this = _bullet.new_SoftBodyNodeData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyNodeData
    __del__ = lambda self: None
SoftBodyNodeData_swigregister = _bullet.SoftBodyNodeData_swigregister
SoftBodyNodeData_swigregister(SoftBodyNodeData)

class SoftBodyLinkData(_object):
    """Proxy of C++ SoftBodyLinkData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyLinkData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyLinkData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_material"] = _bullet.SoftBodyLinkData_m_material_set
    __swig_getmethods__["m_material"] = _bullet.SoftBodyLinkData_m_material_get
    if _newclass:
        m_material = _swig_property(_bullet.SoftBodyLinkData_m_material_get, _bullet.SoftBodyLinkData_m_material_set)
    __swig_setmethods__["m_nodeIndices"] = _bullet.SoftBodyLinkData_m_nodeIndices_set
    __swig_getmethods__["m_nodeIndices"] = _bullet.SoftBodyLinkData_m_nodeIndices_get
    if _newclass:
        m_nodeIndices = _swig_property(_bullet.SoftBodyLinkData_m_nodeIndices_get, _bullet.SoftBodyLinkData_m_nodeIndices_set)
    __swig_setmethods__["m_restLength"] = _bullet.SoftBodyLinkData_m_restLength_set
    __swig_getmethods__["m_restLength"] = _bullet.SoftBodyLinkData_m_restLength_get
    if _newclass:
        m_restLength = _swig_property(_bullet.SoftBodyLinkData_m_restLength_get, _bullet.SoftBodyLinkData_m_restLength_set)
    __swig_setmethods__["m_bbending"] = _bullet.SoftBodyLinkData_m_bbending_set
    __swig_getmethods__["m_bbending"] = _bullet.SoftBodyLinkData_m_bbending_get
    if _newclass:
        m_bbending = _swig_property(_bullet.SoftBodyLinkData_m_bbending_get, _bullet.SoftBodyLinkData_m_bbending_set)

    def __init__(self):
        """__init__(SoftBodyLinkData self) -> SoftBodyLinkData"""
        this = _bullet.new_SoftBodyLinkData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyLinkData
    __del__ = lambda self: None
SoftBodyLinkData_swigregister = _bullet.SoftBodyLinkData_swigregister
SoftBodyLinkData_swigregister(SoftBodyLinkData)

class SoftBodyFaceData(_object):
    """Proxy of C++ SoftBodyFaceData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyFaceData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyFaceData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_normal"] = _bullet.SoftBodyFaceData_m_normal_set
    __swig_getmethods__["m_normal"] = _bullet.SoftBodyFaceData_m_normal_get
    if _newclass:
        m_normal = _swig_property(_bullet.SoftBodyFaceData_m_normal_get, _bullet.SoftBodyFaceData_m_normal_set)
    __swig_setmethods__["m_material"] = _bullet.SoftBodyFaceData_m_material_set
    __swig_getmethods__["m_material"] = _bullet.SoftBodyFaceData_m_material_get
    if _newclass:
        m_material = _swig_property(_bullet.SoftBodyFaceData_m_material_get, _bullet.SoftBodyFaceData_m_material_set)
    __swig_setmethods__["m_nodeIndices"] = _bullet.SoftBodyFaceData_m_nodeIndices_set
    __swig_getmethods__["m_nodeIndices"] = _bullet.SoftBodyFaceData_m_nodeIndices_get
    if _newclass:
        m_nodeIndices = _swig_property(_bullet.SoftBodyFaceData_m_nodeIndices_get, _bullet.SoftBodyFaceData_m_nodeIndices_set)
    __swig_setmethods__["m_restArea"] = _bullet.SoftBodyFaceData_m_restArea_set
    __swig_getmethods__["m_restArea"] = _bullet.SoftBodyFaceData_m_restArea_get
    if _newclass:
        m_restArea = _swig_property(_bullet.SoftBodyFaceData_m_restArea_get, _bullet.SoftBodyFaceData_m_restArea_set)

    def __init__(self):
        """__init__(SoftBodyFaceData self) -> SoftBodyFaceData"""
        this = _bullet.new_SoftBodyFaceData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyFaceData
    __del__ = lambda self: None
SoftBodyFaceData_swigregister = _bullet.SoftBodyFaceData_swigregister
SoftBodyFaceData_swigregister(SoftBodyFaceData)

class SoftBodyTetraData(_object):
    """Proxy of C++ SoftBodyTetraData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyTetraData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyTetraData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_c0"] = _bullet.SoftBodyTetraData_m_c0_set
    __swig_getmethods__["m_c0"] = _bullet.SoftBodyTetraData_m_c0_get
    if _newclass:
        m_c0 = _swig_property(_bullet.SoftBodyTetraData_m_c0_get, _bullet.SoftBodyTetraData_m_c0_set)
    __swig_setmethods__["m_material"] = _bullet.SoftBodyTetraData_m_material_set
    __swig_getmethods__["m_material"] = _bullet.SoftBodyTetraData_m_material_get
    if _newclass:
        m_material = _swig_property(_bullet.SoftBodyTetraData_m_material_get, _bullet.SoftBodyTetraData_m_material_set)
    __swig_setmethods__["m_nodeIndices"] = _bullet.SoftBodyTetraData_m_nodeIndices_set
    __swig_getmethods__["m_nodeIndices"] = _bullet.SoftBodyTetraData_m_nodeIndices_get
    if _newclass:
        m_nodeIndices = _swig_property(_bullet.SoftBodyTetraData_m_nodeIndices_get, _bullet.SoftBodyTetraData_m_nodeIndices_set)
    __swig_setmethods__["m_restVolume"] = _bullet.SoftBodyTetraData_m_restVolume_set
    __swig_getmethods__["m_restVolume"] = _bullet.SoftBodyTetraData_m_restVolume_get
    if _newclass:
        m_restVolume = _swig_property(_bullet.SoftBodyTetraData_m_restVolume_get, _bullet.SoftBodyTetraData_m_restVolume_set)
    __swig_setmethods__["m_c1"] = _bullet.SoftBodyTetraData_m_c1_set
    __swig_getmethods__["m_c1"] = _bullet.SoftBodyTetraData_m_c1_get
    if _newclass:
        m_c1 = _swig_property(_bullet.SoftBodyTetraData_m_c1_get, _bullet.SoftBodyTetraData_m_c1_set)
    __swig_setmethods__["m_c2"] = _bullet.SoftBodyTetraData_m_c2_set
    __swig_getmethods__["m_c2"] = _bullet.SoftBodyTetraData_m_c2_get
    if _newclass:
        m_c2 = _swig_property(_bullet.SoftBodyTetraData_m_c2_get, _bullet.SoftBodyTetraData_m_c2_set)
    __swig_setmethods__["m_pad"] = _bullet.SoftBodyTetraData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.SoftBodyTetraData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.SoftBodyTetraData_m_pad_get, _bullet.SoftBodyTetraData_m_pad_set)

    def __init__(self):
        """__init__(SoftBodyTetraData self) -> SoftBodyTetraData"""
        this = _bullet.new_SoftBodyTetraData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyTetraData
    __del__ = lambda self: None
SoftBodyTetraData_swigregister = _bullet.SoftBodyTetraData_swigregister
SoftBodyTetraData_swigregister(SoftBodyTetraData)

class SoftRigidAnchorData(_object):
    """Proxy of C++ SoftRigidAnchorData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftRigidAnchorData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftRigidAnchorData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_c0"] = _bullet.SoftRigidAnchorData_m_c0_set
    __swig_getmethods__["m_c0"] = _bullet.SoftRigidAnchorData_m_c0_get
    if _newclass:
        m_c0 = _swig_property(_bullet.SoftRigidAnchorData_m_c0_get, _bullet.SoftRigidAnchorData_m_c0_set)
    __swig_setmethods__["m_c1"] = _bullet.SoftRigidAnchorData_m_c1_set
    __swig_getmethods__["m_c1"] = _bullet.SoftRigidAnchorData_m_c1_get
    if _newclass:
        m_c1 = _swig_property(_bullet.SoftRigidAnchorData_m_c1_get, _bullet.SoftRigidAnchorData_m_c1_set)
    __swig_setmethods__["m_localFrame"] = _bullet.SoftRigidAnchorData_m_localFrame_set
    __swig_getmethods__["m_localFrame"] = _bullet.SoftRigidAnchorData_m_localFrame_get
    if _newclass:
        m_localFrame = _swig_property(_bullet.SoftRigidAnchorData_m_localFrame_get, _bullet.SoftRigidAnchorData_m_localFrame_set)
    __swig_setmethods__["m_rigidBody"] = _bullet.SoftRigidAnchorData_m_rigidBody_set
    __swig_getmethods__["m_rigidBody"] = _bullet.SoftRigidAnchorData_m_rigidBody_get
    if _newclass:
        m_rigidBody = _swig_property(_bullet.SoftRigidAnchorData_m_rigidBody_get, _bullet.SoftRigidAnchorData_m_rigidBody_set)
    __swig_setmethods__["m_nodeIndex"] = _bullet.SoftRigidAnchorData_m_nodeIndex_set
    __swig_getmethods__["m_nodeIndex"] = _bullet.SoftRigidAnchorData_m_nodeIndex_get
    if _newclass:
        m_nodeIndex = _swig_property(_bullet.SoftRigidAnchorData_m_nodeIndex_get, _bullet.SoftRigidAnchorData_m_nodeIndex_set)
    __swig_setmethods__["m_c2"] = _bullet.SoftRigidAnchorData_m_c2_set
    __swig_getmethods__["m_c2"] = _bullet.SoftRigidAnchorData_m_c2_get
    if _newclass:
        m_c2 = _swig_property(_bullet.SoftRigidAnchorData_m_c2_get, _bullet.SoftRigidAnchorData_m_c2_set)

    def __init__(self):
        """__init__(SoftRigidAnchorData self) -> SoftRigidAnchorData"""
        this = _bullet.new_SoftRigidAnchorData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftRigidAnchorData
    __del__ = lambda self: None
SoftRigidAnchorData_swigregister = _bullet.SoftRigidAnchorData_swigregister
SoftRigidAnchorData_swigregister(SoftRigidAnchorData)

class SoftBodyConfigData(_object):
    """Proxy of C++ SoftBodyConfigData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyConfigData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyConfigData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_aeroModel"] = _bullet.SoftBodyConfigData_m_aeroModel_set
    __swig_getmethods__["m_aeroModel"] = _bullet.SoftBodyConfigData_m_aeroModel_get
    if _newclass:
        m_aeroModel = _swig_property(_bullet.SoftBodyConfigData_m_aeroModel_get, _bullet.SoftBodyConfigData_m_aeroModel_set)
    __swig_setmethods__["m_baumgarte"] = _bullet.SoftBodyConfigData_m_baumgarte_set
    __swig_getmethods__["m_baumgarte"] = _bullet.SoftBodyConfigData_m_baumgarte_get
    if _newclass:
        m_baumgarte = _swig_property(_bullet.SoftBodyConfigData_m_baumgarte_get, _bullet.SoftBodyConfigData_m_baumgarte_set)
    __swig_setmethods__["m_damping"] = _bullet.SoftBodyConfigData_m_damping_set
    __swig_getmethods__["m_damping"] = _bullet.SoftBodyConfigData_m_damping_get
    if _newclass:
        m_damping = _swig_property(_bullet.SoftBodyConfigData_m_damping_get, _bullet.SoftBodyConfigData_m_damping_set)
    __swig_setmethods__["m_drag"] = _bullet.SoftBodyConfigData_m_drag_set
    __swig_getmethods__["m_drag"] = _bullet.SoftBodyConfigData_m_drag_get
    if _newclass:
        m_drag = _swig_property(_bullet.SoftBodyConfigData_m_drag_get, _bullet.SoftBodyConfigData_m_drag_set)
    __swig_setmethods__["m_lift"] = _bullet.SoftBodyConfigData_m_lift_set
    __swig_getmethods__["m_lift"] = _bullet.SoftBodyConfigData_m_lift_get
    if _newclass:
        m_lift = _swig_property(_bullet.SoftBodyConfigData_m_lift_get, _bullet.SoftBodyConfigData_m_lift_set)
    __swig_setmethods__["m_pressure"] = _bullet.SoftBodyConfigData_m_pressure_set
    __swig_getmethods__["m_pressure"] = _bullet.SoftBodyConfigData_m_pressure_get
    if _newclass:
        m_pressure = _swig_property(_bullet.SoftBodyConfigData_m_pressure_get, _bullet.SoftBodyConfigData_m_pressure_set)
    __swig_setmethods__["m_volume"] = _bullet.SoftBodyConfigData_m_volume_set
    __swig_getmethods__["m_volume"] = _bullet.SoftBodyConfigData_m_volume_get
    if _newclass:
        m_volume = _swig_property(_bullet.SoftBodyConfigData_m_volume_get, _bullet.SoftBodyConfigData_m_volume_set)
    __swig_setmethods__["m_dynamicFriction"] = _bullet.SoftBodyConfigData_m_dynamicFriction_set
    __swig_getmethods__["m_dynamicFriction"] = _bullet.SoftBodyConfigData_m_dynamicFriction_get
    if _newclass:
        m_dynamicFriction = _swig_property(_bullet.SoftBodyConfigData_m_dynamicFriction_get, _bullet.SoftBodyConfigData_m_dynamicFriction_set)
    __swig_setmethods__["m_poseMatch"] = _bullet.SoftBodyConfigData_m_poseMatch_set
    __swig_getmethods__["m_poseMatch"] = _bullet.SoftBodyConfigData_m_poseMatch_get
    if _newclass:
        m_poseMatch = _swig_property(_bullet.SoftBodyConfigData_m_poseMatch_get, _bullet.SoftBodyConfigData_m_poseMatch_set)
    __swig_setmethods__["m_rigidContactHardness"] = _bullet.SoftBodyConfigData_m_rigidContactHardness_set
    __swig_getmethods__["m_rigidContactHardness"] = _bullet.SoftBodyConfigData_m_rigidContactHardness_get
    if _newclass:
        m_rigidContactHardness = _swig_property(_bullet.SoftBodyConfigData_m_rigidContactHardness_get, _bullet.SoftBodyConfigData_m_rigidContactHardness_set)
    __swig_setmethods__["m_kineticContactHardness"] = _bullet.SoftBodyConfigData_m_kineticContactHardness_set
    __swig_getmethods__["m_kineticContactHardness"] = _bullet.SoftBodyConfigData_m_kineticContactHardness_get
    if _newclass:
        m_kineticContactHardness = _swig_property(_bullet.SoftBodyConfigData_m_kineticContactHardness_get, _bullet.SoftBodyConfigData_m_kineticContactHardness_set)
    __swig_setmethods__["m_softContactHardness"] = _bullet.SoftBodyConfigData_m_softContactHardness_set
    __swig_getmethods__["m_softContactHardness"] = _bullet.SoftBodyConfigData_m_softContactHardness_get
    if _newclass:
        m_softContactHardness = _swig_property(_bullet.SoftBodyConfigData_m_softContactHardness_get, _bullet.SoftBodyConfigData_m_softContactHardness_set)
    __swig_setmethods__["m_anchorHardness"] = _bullet.SoftBodyConfigData_m_anchorHardness_set
    __swig_getmethods__["m_anchorHardness"] = _bullet.SoftBodyConfigData_m_anchorHardness_get
    if _newclass:
        m_anchorHardness = _swig_property(_bullet.SoftBodyConfigData_m_anchorHardness_get, _bullet.SoftBodyConfigData_m_anchorHardness_set)
    __swig_setmethods__["m_softRigidClusterHardness"] = _bullet.SoftBodyConfigData_m_softRigidClusterHardness_set
    __swig_getmethods__["m_softRigidClusterHardness"] = _bullet.SoftBodyConfigData_m_softRigidClusterHardness_get
    if _newclass:
        m_softRigidClusterHardness = _swig_property(_bullet.SoftBodyConfigData_m_softRigidClusterHardness_get, _bullet.SoftBodyConfigData_m_softRigidClusterHardness_set)
    __swig_setmethods__["m_softKineticClusterHardness"] = _bullet.SoftBodyConfigData_m_softKineticClusterHardness_set
    __swig_getmethods__["m_softKineticClusterHardness"] = _bullet.SoftBodyConfigData_m_softKineticClusterHardness_get
    if _newclass:
        m_softKineticClusterHardness = _swig_property(_bullet.SoftBodyConfigData_m_softKineticClusterHardness_get, _bullet.SoftBodyConfigData_m_softKineticClusterHardness_set)
    __swig_setmethods__["m_softSoftClusterHardness"] = _bullet.SoftBodyConfigData_m_softSoftClusterHardness_set
    __swig_getmethods__["m_softSoftClusterHardness"] = _bullet.SoftBodyConfigData_m_softSoftClusterHardness_get
    if _newclass:
        m_softSoftClusterHardness = _swig_property(_bullet.SoftBodyConfigData_m_softSoftClusterHardness_get, _bullet.SoftBodyConfigData_m_softSoftClusterHardness_set)
    __swig_setmethods__["m_softRigidClusterImpulseSplit"] = _bullet.SoftBodyConfigData_m_softRigidClusterImpulseSplit_set
    __swig_getmethods__["m_softRigidClusterImpulseSplit"] = _bullet.SoftBodyConfigData_m_softRigidClusterImpulseSplit_get
    if _newclass:
        m_softRigidClusterImpulseSplit = _swig_property(_bullet.SoftBodyConfigData_m_softRigidClusterImpulseSplit_get, _bullet.SoftBodyConfigData_m_softRigidClusterImpulseSplit_set)
    __swig_setmethods__["m_softKineticClusterImpulseSplit"] = _bullet.SoftBodyConfigData_m_softKineticClusterImpulseSplit_set
    __swig_getmethods__["m_softKineticClusterImpulseSplit"] = _bullet.SoftBodyConfigData_m_softKineticClusterImpulseSplit_get
    if _newclass:
        m_softKineticClusterImpulseSplit = _swig_property(_bullet.SoftBodyConfigData_m_softKineticClusterImpulseSplit_get, _bullet.SoftBodyConfigData_m_softKineticClusterImpulseSplit_set)
    __swig_setmethods__["m_softSoftClusterImpulseSplit"] = _bullet.SoftBodyConfigData_m_softSoftClusterImpulseSplit_set
    __swig_getmethods__["m_softSoftClusterImpulseSplit"] = _bullet.SoftBodyConfigData_m_softSoftClusterImpulseSplit_get
    if _newclass:
        m_softSoftClusterImpulseSplit = _swig_property(_bullet.SoftBodyConfigData_m_softSoftClusterImpulseSplit_get, _bullet.SoftBodyConfigData_m_softSoftClusterImpulseSplit_set)
    __swig_setmethods__["m_maxVolume"] = _bullet.SoftBodyConfigData_m_maxVolume_set
    __swig_getmethods__["m_maxVolume"] = _bullet.SoftBodyConfigData_m_maxVolume_get
    if _newclass:
        m_maxVolume = _swig_property(_bullet.SoftBodyConfigData_m_maxVolume_get, _bullet.SoftBodyConfigData_m_maxVolume_set)
    __swig_setmethods__["m_timeScale"] = _bullet.SoftBodyConfigData_m_timeScale_set
    __swig_getmethods__["m_timeScale"] = _bullet.SoftBodyConfigData_m_timeScale_get
    if _newclass:
        m_timeScale = _swig_property(_bullet.SoftBodyConfigData_m_timeScale_get, _bullet.SoftBodyConfigData_m_timeScale_set)
    __swig_setmethods__["m_velocityIterations"] = _bullet.SoftBodyConfigData_m_velocityIterations_set
    __swig_getmethods__["m_velocityIterations"] = _bullet.SoftBodyConfigData_m_velocityIterations_get
    if _newclass:
        m_velocityIterations = _swig_property(_bullet.SoftBodyConfigData_m_velocityIterations_get, _bullet.SoftBodyConfigData_m_velocityIterations_set)
    __swig_setmethods__["m_positionIterations"] = _bullet.SoftBodyConfigData_m_positionIterations_set
    __swig_getmethods__["m_positionIterations"] = _bullet.SoftBodyConfigData_m_positionIterations_get
    if _newclass:
        m_positionIterations = _swig_property(_bullet.SoftBodyConfigData_m_positionIterations_get, _bullet.SoftBodyConfigData_m_positionIterations_set)
    __swig_setmethods__["m_driftIterations"] = _bullet.SoftBodyConfigData_m_driftIterations_set
    __swig_getmethods__["m_driftIterations"] = _bullet.SoftBodyConfigData_m_driftIterations_get
    if _newclass:
        m_driftIterations = _swig_property(_bullet.SoftBodyConfigData_m_driftIterations_get, _bullet.SoftBodyConfigData_m_driftIterations_set)
    __swig_setmethods__["m_clusterIterations"] = _bullet.SoftBodyConfigData_m_clusterIterations_set
    __swig_getmethods__["m_clusterIterations"] = _bullet.SoftBodyConfigData_m_clusterIterations_get
    if _newclass:
        m_clusterIterations = _swig_property(_bullet.SoftBodyConfigData_m_clusterIterations_get, _bullet.SoftBodyConfigData_m_clusterIterations_set)
    __swig_setmethods__["m_collisionFlags"] = _bullet.SoftBodyConfigData_m_collisionFlags_set
    __swig_getmethods__["m_collisionFlags"] = _bullet.SoftBodyConfigData_m_collisionFlags_get
    if _newclass:
        m_collisionFlags = _swig_property(_bullet.SoftBodyConfigData_m_collisionFlags_get, _bullet.SoftBodyConfigData_m_collisionFlags_set)

    def __init__(self):
        """__init__(SoftBodyConfigData self) -> SoftBodyConfigData"""
        this = _bullet.new_SoftBodyConfigData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyConfigData
    __del__ = lambda self: None
SoftBodyConfigData_swigregister = _bullet.SoftBodyConfigData_swigregister
SoftBodyConfigData_swigregister(SoftBodyConfigData)

class SoftBodyPoseData(_object):
    """Proxy of C++ SoftBodyPoseData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyPoseData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyPoseData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_rot"] = _bullet.SoftBodyPoseData_m_rot_set
    __swig_getmethods__["m_rot"] = _bullet.SoftBodyPoseData_m_rot_get
    if _newclass:
        m_rot = _swig_property(_bullet.SoftBodyPoseData_m_rot_get, _bullet.SoftBodyPoseData_m_rot_set)
    __swig_setmethods__["m_scale"] = _bullet.SoftBodyPoseData_m_scale_set
    __swig_getmethods__["m_scale"] = _bullet.SoftBodyPoseData_m_scale_get
    if _newclass:
        m_scale = _swig_property(_bullet.SoftBodyPoseData_m_scale_get, _bullet.SoftBodyPoseData_m_scale_set)
    __swig_setmethods__["m_aqq"] = _bullet.SoftBodyPoseData_m_aqq_set
    __swig_getmethods__["m_aqq"] = _bullet.SoftBodyPoseData_m_aqq_get
    if _newclass:
        m_aqq = _swig_property(_bullet.SoftBodyPoseData_m_aqq_get, _bullet.SoftBodyPoseData_m_aqq_set)
    __swig_setmethods__["m_com"] = _bullet.SoftBodyPoseData_m_com_set
    __swig_getmethods__["m_com"] = _bullet.SoftBodyPoseData_m_com_get
    if _newclass:
        m_com = _swig_property(_bullet.SoftBodyPoseData_m_com_get, _bullet.SoftBodyPoseData_m_com_set)
    __swig_setmethods__["m_positions"] = _bullet.SoftBodyPoseData_m_positions_set
    __swig_getmethods__["m_positions"] = _bullet.SoftBodyPoseData_m_positions_get
    if _newclass:
        m_positions = _swig_property(_bullet.SoftBodyPoseData_m_positions_get, _bullet.SoftBodyPoseData_m_positions_set)
    __swig_setmethods__["m_weights"] = _bullet.SoftBodyPoseData_m_weights_set
    __swig_getmethods__["m_weights"] = _bullet.SoftBodyPoseData_m_weights_get
    if _newclass:
        m_weights = _swig_property(_bullet.SoftBodyPoseData_m_weights_get, _bullet.SoftBodyPoseData_m_weights_set)
    __swig_setmethods__["m_numPositions"] = _bullet.SoftBodyPoseData_m_numPositions_set
    __swig_getmethods__["m_numPositions"] = _bullet.SoftBodyPoseData_m_numPositions_get
    if _newclass:
        m_numPositions = _swig_property(_bullet.SoftBodyPoseData_m_numPositions_get, _bullet.SoftBodyPoseData_m_numPositions_set)
    __swig_setmethods__["m_numWeigts"] = _bullet.SoftBodyPoseData_m_numWeigts_set
    __swig_getmethods__["m_numWeigts"] = _bullet.SoftBodyPoseData_m_numWeigts_get
    if _newclass:
        m_numWeigts = _swig_property(_bullet.SoftBodyPoseData_m_numWeigts_get, _bullet.SoftBodyPoseData_m_numWeigts_set)
    __swig_setmethods__["m_bvolume"] = _bullet.SoftBodyPoseData_m_bvolume_set
    __swig_getmethods__["m_bvolume"] = _bullet.SoftBodyPoseData_m_bvolume_get
    if _newclass:
        m_bvolume = _swig_property(_bullet.SoftBodyPoseData_m_bvolume_get, _bullet.SoftBodyPoseData_m_bvolume_set)
    __swig_setmethods__["m_bframe"] = _bullet.SoftBodyPoseData_m_bframe_set
    __swig_getmethods__["m_bframe"] = _bullet.SoftBodyPoseData_m_bframe_get
    if _newclass:
        m_bframe = _swig_property(_bullet.SoftBodyPoseData_m_bframe_get, _bullet.SoftBodyPoseData_m_bframe_set)
    __swig_setmethods__["m_restVolume"] = _bullet.SoftBodyPoseData_m_restVolume_set
    __swig_getmethods__["m_restVolume"] = _bullet.SoftBodyPoseData_m_restVolume_get
    if _newclass:
        m_restVolume = _swig_property(_bullet.SoftBodyPoseData_m_restVolume_get, _bullet.SoftBodyPoseData_m_restVolume_set)
    __swig_setmethods__["m_pad"] = _bullet.SoftBodyPoseData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.SoftBodyPoseData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.SoftBodyPoseData_m_pad_get, _bullet.SoftBodyPoseData_m_pad_set)

    def __init__(self):
        """__init__(SoftBodyPoseData self) -> SoftBodyPoseData"""
        this = _bullet.new_SoftBodyPoseData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyPoseData
    __del__ = lambda self: None
SoftBodyPoseData_swigregister = _bullet.SoftBodyPoseData_swigregister
SoftBodyPoseData_swigregister(SoftBodyPoseData)

class SoftBodyClusterData(_object):
    """Proxy of C++ SoftBodyClusterData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftBodyClusterData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftBodyClusterData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_framexform"] = _bullet.SoftBodyClusterData_m_framexform_set
    __swig_getmethods__["m_framexform"] = _bullet.SoftBodyClusterData_m_framexform_get
    if _newclass:
        m_framexform = _swig_property(_bullet.SoftBodyClusterData_m_framexform_get, _bullet.SoftBodyClusterData_m_framexform_set)
    __swig_setmethods__["m_locii"] = _bullet.SoftBodyClusterData_m_locii_set
    __swig_getmethods__["m_locii"] = _bullet.SoftBodyClusterData_m_locii_get
    if _newclass:
        m_locii = _swig_property(_bullet.SoftBodyClusterData_m_locii_get, _bullet.SoftBodyClusterData_m_locii_set)
    __swig_setmethods__["m_invwi"] = _bullet.SoftBodyClusterData_m_invwi_set
    __swig_getmethods__["m_invwi"] = _bullet.SoftBodyClusterData_m_invwi_get
    if _newclass:
        m_invwi = _swig_property(_bullet.SoftBodyClusterData_m_invwi_get, _bullet.SoftBodyClusterData_m_invwi_set)
    __swig_setmethods__["m_com"] = _bullet.SoftBodyClusterData_m_com_set
    __swig_getmethods__["m_com"] = _bullet.SoftBodyClusterData_m_com_get
    if _newclass:
        m_com = _swig_property(_bullet.SoftBodyClusterData_m_com_get, _bullet.SoftBodyClusterData_m_com_set)
    __swig_setmethods__["m_vimpulses"] = _bullet.SoftBodyClusterData_m_vimpulses_set
    __swig_getmethods__["m_vimpulses"] = _bullet.SoftBodyClusterData_m_vimpulses_get
    if _newclass:
        m_vimpulses = _swig_property(_bullet.SoftBodyClusterData_m_vimpulses_get, _bullet.SoftBodyClusterData_m_vimpulses_set)
    __swig_setmethods__["m_dimpulses"] = _bullet.SoftBodyClusterData_m_dimpulses_set
    __swig_getmethods__["m_dimpulses"] = _bullet.SoftBodyClusterData_m_dimpulses_get
    if _newclass:
        m_dimpulses = _swig_property(_bullet.SoftBodyClusterData_m_dimpulses_get, _bullet.SoftBodyClusterData_m_dimpulses_set)
    __swig_setmethods__["m_lv"] = _bullet.SoftBodyClusterData_m_lv_set
    __swig_getmethods__["m_lv"] = _bullet.SoftBodyClusterData_m_lv_get
    if _newclass:
        m_lv = _swig_property(_bullet.SoftBodyClusterData_m_lv_get, _bullet.SoftBodyClusterData_m_lv_set)
    __swig_setmethods__["m_av"] = _bullet.SoftBodyClusterData_m_av_set
    __swig_getmethods__["m_av"] = _bullet.SoftBodyClusterData_m_av_get
    if _newclass:
        m_av = _swig_property(_bullet.SoftBodyClusterData_m_av_get, _bullet.SoftBodyClusterData_m_av_set)
    __swig_setmethods__["m_framerefs"] = _bullet.SoftBodyClusterData_m_framerefs_set
    __swig_getmethods__["m_framerefs"] = _bullet.SoftBodyClusterData_m_framerefs_get
    if _newclass:
        m_framerefs = _swig_property(_bullet.SoftBodyClusterData_m_framerefs_get, _bullet.SoftBodyClusterData_m_framerefs_set)
    __swig_setmethods__["m_nodeIndices"] = _bullet.SoftBodyClusterData_m_nodeIndices_set
    __swig_getmethods__["m_nodeIndices"] = _bullet.SoftBodyClusterData_m_nodeIndices_get
    if _newclass:
        m_nodeIndices = _swig_property(_bullet.SoftBodyClusterData_m_nodeIndices_get, _bullet.SoftBodyClusterData_m_nodeIndices_set)
    __swig_setmethods__["m_masses"] = _bullet.SoftBodyClusterData_m_masses_set
    __swig_getmethods__["m_masses"] = _bullet.SoftBodyClusterData_m_masses_get
    if _newclass:
        m_masses = _swig_property(_bullet.SoftBodyClusterData_m_masses_get, _bullet.SoftBodyClusterData_m_masses_set)
    __swig_setmethods__["m_numFrameRefs"] = _bullet.SoftBodyClusterData_m_numFrameRefs_set
    __swig_getmethods__["m_numFrameRefs"] = _bullet.SoftBodyClusterData_m_numFrameRefs_get
    if _newclass:
        m_numFrameRefs = _swig_property(_bullet.SoftBodyClusterData_m_numFrameRefs_get, _bullet.SoftBodyClusterData_m_numFrameRefs_set)
    __swig_setmethods__["m_numNodes"] = _bullet.SoftBodyClusterData_m_numNodes_set
    __swig_getmethods__["m_numNodes"] = _bullet.SoftBodyClusterData_m_numNodes_get
    if _newclass:
        m_numNodes = _swig_property(_bullet.SoftBodyClusterData_m_numNodes_get, _bullet.SoftBodyClusterData_m_numNodes_set)
    __swig_setmethods__["m_numMasses"] = _bullet.SoftBodyClusterData_m_numMasses_set
    __swig_getmethods__["m_numMasses"] = _bullet.SoftBodyClusterData_m_numMasses_get
    if _newclass:
        m_numMasses = _swig_property(_bullet.SoftBodyClusterData_m_numMasses_get, _bullet.SoftBodyClusterData_m_numMasses_set)
    __swig_setmethods__["m_idmass"] = _bullet.SoftBodyClusterData_m_idmass_set
    __swig_getmethods__["m_idmass"] = _bullet.SoftBodyClusterData_m_idmass_get
    if _newclass:
        m_idmass = _swig_property(_bullet.SoftBodyClusterData_m_idmass_get, _bullet.SoftBodyClusterData_m_idmass_set)
    __swig_setmethods__["m_imass"] = _bullet.SoftBodyClusterData_m_imass_set
    __swig_getmethods__["m_imass"] = _bullet.SoftBodyClusterData_m_imass_get
    if _newclass:
        m_imass = _swig_property(_bullet.SoftBodyClusterData_m_imass_get, _bullet.SoftBodyClusterData_m_imass_set)
    __swig_setmethods__["m_nvimpulses"] = _bullet.SoftBodyClusterData_m_nvimpulses_set
    __swig_getmethods__["m_nvimpulses"] = _bullet.SoftBodyClusterData_m_nvimpulses_get
    if _newclass:
        m_nvimpulses = _swig_property(_bullet.SoftBodyClusterData_m_nvimpulses_get, _bullet.SoftBodyClusterData_m_nvimpulses_set)
    __swig_setmethods__["m_ndimpulses"] = _bullet.SoftBodyClusterData_m_ndimpulses_set
    __swig_getmethods__["m_ndimpulses"] = _bullet.SoftBodyClusterData_m_ndimpulses_get
    if _newclass:
        m_ndimpulses = _swig_property(_bullet.SoftBodyClusterData_m_ndimpulses_get, _bullet.SoftBodyClusterData_m_ndimpulses_set)
    __swig_setmethods__["m_ndamping"] = _bullet.SoftBodyClusterData_m_ndamping_set
    __swig_getmethods__["m_ndamping"] = _bullet.SoftBodyClusterData_m_ndamping_get
    if _newclass:
        m_ndamping = _swig_property(_bullet.SoftBodyClusterData_m_ndamping_get, _bullet.SoftBodyClusterData_m_ndamping_set)
    __swig_setmethods__["m_ldamping"] = _bullet.SoftBodyClusterData_m_ldamping_set
    __swig_getmethods__["m_ldamping"] = _bullet.SoftBodyClusterData_m_ldamping_get
    if _newclass:
        m_ldamping = _swig_property(_bullet.SoftBodyClusterData_m_ldamping_get, _bullet.SoftBodyClusterData_m_ldamping_set)
    __swig_setmethods__["m_adamping"] = _bullet.SoftBodyClusterData_m_adamping_set
    __swig_getmethods__["m_adamping"] = _bullet.SoftBodyClusterData_m_adamping_get
    if _newclass:
        m_adamping = _swig_property(_bullet.SoftBodyClusterData_m_adamping_get, _bullet.SoftBodyClusterData_m_adamping_set)
    __swig_setmethods__["m_matching"] = _bullet.SoftBodyClusterData_m_matching_set
    __swig_getmethods__["m_matching"] = _bullet.SoftBodyClusterData_m_matching_get
    if _newclass:
        m_matching = _swig_property(_bullet.SoftBodyClusterData_m_matching_get, _bullet.SoftBodyClusterData_m_matching_set)
    __swig_setmethods__["m_maxSelfCollisionImpulse"] = _bullet.SoftBodyClusterData_m_maxSelfCollisionImpulse_set
    __swig_getmethods__["m_maxSelfCollisionImpulse"] = _bullet.SoftBodyClusterData_m_maxSelfCollisionImpulse_get
    if _newclass:
        m_maxSelfCollisionImpulse = _swig_property(_bullet.SoftBodyClusterData_m_maxSelfCollisionImpulse_get, _bullet.SoftBodyClusterData_m_maxSelfCollisionImpulse_set)
    __swig_setmethods__["m_selfCollisionImpulseFactor"] = _bullet.SoftBodyClusterData_m_selfCollisionImpulseFactor_set
    __swig_getmethods__["m_selfCollisionImpulseFactor"] = _bullet.SoftBodyClusterData_m_selfCollisionImpulseFactor_get
    if _newclass:
        m_selfCollisionImpulseFactor = _swig_property(_bullet.SoftBodyClusterData_m_selfCollisionImpulseFactor_get, _bullet.SoftBodyClusterData_m_selfCollisionImpulseFactor_set)
    __swig_setmethods__["m_containsAnchor"] = _bullet.SoftBodyClusterData_m_containsAnchor_set
    __swig_getmethods__["m_containsAnchor"] = _bullet.SoftBodyClusterData_m_containsAnchor_get
    if _newclass:
        m_containsAnchor = _swig_property(_bullet.SoftBodyClusterData_m_containsAnchor_get, _bullet.SoftBodyClusterData_m_containsAnchor_set)
    __swig_setmethods__["m_collide"] = _bullet.SoftBodyClusterData_m_collide_set
    __swig_getmethods__["m_collide"] = _bullet.SoftBodyClusterData_m_collide_get
    if _newclass:
        m_collide = _swig_property(_bullet.SoftBodyClusterData_m_collide_get, _bullet.SoftBodyClusterData_m_collide_set)
    __swig_setmethods__["m_clusterIndex"] = _bullet.SoftBodyClusterData_m_clusterIndex_set
    __swig_getmethods__["m_clusterIndex"] = _bullet.SoftBodyClusterData_m_clusterIndex_get
    if _newclass:
        m_clusterIndex = _swig_property(_bullet.SoftBodyClusterData_m_clusterIndex_get, _bullet.SoftBodyClusterData_m_clusterIndex_set)

    def __init__(self):
        """__init__(SoftBodyClusterData self) -> SoftBodyClusterData"""
        this = _bullet.new_SoftBodyClusterData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_SoftBodyClusterData
    __del__ = lambda self: None
SoftBodyClusterData_swigregister = _bullet.SoftBodyClusterData_swigregister
SoftBodyClusterData_swigregister(SoftBodyClusterData)

BT_JOINT_SOFT_BODY_CLUSTER = _bullet.BT_JOINT_SOFT_BODY_CLUSTER
BT_JOINT_RIGID_BODY = _bullet.BT_JOINT_RIGID_BODY
BT_JOINT_COLLISION_OBJECT = _bullet.BT_JOINT_COLLISION_OBJECT
class btSoftBodyJointData(_object):
    """Proxy of C++ btSoftBodyJointData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyJointData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyJointData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_bodyA"] = _bullet.btSoftBodyJointData_m_bodyA_set
    __swig_getmethods__["m_bodyA"] = _bullet.btSoftBodyJointData_m_bodyA_get
    if _newclass:
        m_bodyA = _swig_property(_bullet.btSoftBodyJointData_m_bodyA_get, _bullet.btSoftBodyJointData_m_bodyA_set)
    __swig_setmethods__["m_bodyB"] = _bullet.btSoftBodyJointData_m_bodyB_set
    __swig_getmethods__["m_bodyB"] = _bullet.btSoftBodyJointData_m_bodyB_get
    if _newclass:
        m_bodyB = _swig_property(_bullet.btSoftBodyJointData_m_bodyB_get, _bullet.btSoftBodyJointData_m_bodyB_set)
    __swig_setmethods__["m_refs"] = _bullet.btSoftBodyJointData_m_refs_set
    __swig_getmethods__["m_refs"] = _bullet.btSoftBodyJointData_m_refs_get
    if _newclass:
        m_refs = _swig_property(_bullet.btSoftBodyJointData_m_refs_get, _bullet.btSoftBodyJointData_m_refs_set)
    __swig_setmethods__["m_cfm"] = _bullet.btSoftBodyJointData_m_cfm_set
    __swig_getmethods__["m_cfm"] = _bullet.btSoftBodyJointData_m_cfm_get
    if _newclass:
        m_cfm = _swig_property(_bullet.btSoftBodyJointData_m_cfm_get, _bullet.btSoftBodyJointData_m_cfm_set)
    __swig_setmethods__["m_erp"] = _bullet.btSoftBodyJointData_m_erp_set
    __swig_getmethods__["m_erp"] = _bullet.btSoftBodyJointData_m_erp_get
    if _newclass:
        m_erp = _swig_property(_bullet.btSoftBodyJointData_m_erp_get, _bullet.btSoftBodyJointData_m_erp_set)
    __swig_setmethods__["m_split"] = _bullet.btSoftBodyJointData_m_split_set
    __swig_getmethods__["m_split"] = _bullet.btSoftBodyJointData_m_split_get
    if _newclass:
        m_split = _swig_property(_bullet.btSoftBodyJointData_m_split_get, _bullet.btSoftBodyJointData_m_split_set)
    __swig_setmethods__["m_delete"] = _bullet.btSoftBodyJointData_m_delete_set
    __swig_getmethods__["m_delete"] = _bullet.btSoftBodyJointData_m_delete_get
    if _newclass:
        m_delete = _swig_property(_bullet.btSoftBodyJointData_m_delete_get, _bullet.btSoftBodyJointData_m_delete_set)
    __swig_setmethods__["m_relPosition"] = _bullet.btSoftBodyJointData_m_relPosition_set
    __swig_getmethods__["m_relPosition"] = _bullet.btSoftBodyJointData_m_relPosition_get
    if _newclass:
        m_relPosition = _swig_property(_bullet.btSoftBodyJointData_m_relPosition_get, _bullet.btSoftBodyJointData_m_relPosition_set)
    __swig_setmethods__["m_bodyAtype"] = _bullet.btSoftBodyJointData_m_bodyAtype_set
    __swig_getmethods__["m_bodyAtype"] = _bullet.btSoftBodyJointData_m_bodyAtype_get
    if _newclass:
        m_bodyAtype = _swig_property(_bullet.btSoftBodyJointData_m_bodyAtype_get, _bullet.btSoftBodyJointData_m_bodyAtype_set)
    __swig_setmethods__["m_bodyBtype"] = _bullet.btSoftBodyJointData_m_bodyBtype_set
    __swig_getmethods__["m_bodyBtype"] = _bullet.btSoftBodyJointData_m_bodyBtype_get
    if _newclass:
        m_bodyBtype = _swig_property(_bullet.btSoftBodyJointData_m_bodyBtype_get, _bullet.btSoftBodyJointData_m_bodyBtype_set)
    __swig_setmethods__["m_jointType"] = _bullet.btSoftBodyJointData_m_jointType_set
    __swig_getmethods__["m_jointType"] = _bullet.btSoftBodyJointData_m_jointType_get
    if _newclass:
        m_jointType = _swig_property(_bullet.btSoftBodyJointData_m_jointType_get, _bullet.btSoftBodyJointData_m_jointType_set)
    __swig_setmethods__["m_pad"] = _bullet.btSoftBodyJointData_m_pad_set
    __swig_getmethods__["m_pad"] = _bullet.btSoftBodyJointData_m_pad_get
    if _newclass:
        m_pad = _swig_property(_bullet.btSoftBodyJointData_m_pad_get, _bullet.btSoftBodyJointData_m_pad_set)

    def __init__(self):
        """__init__(btSoftBodyJointData self) -> btSoftBodyJointData"""
        this = _bullet.new_btSoftBodyJointData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyJointData
    __del__ = lambda self: None
btSoftBodyJointData_swigregister = _bullet.btSoftBodyJointData_swigregister
btSoftBodyJointData_swigregister(btSoftBodyJointData)

class btSoftBodyFloatData(_object):
    """Proxy of C++ btSoftBodyFloatData class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyFloatData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyFloatData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_collisionObjectData"] = _bullet.btSoftBodyFloatData_m_collisionObjectData_set
    __swig_getmethods__["m_collisionObjectData"] = _bullet.btSoftBodyFloatData_m_collisionObjectData_get
    if _newclass:
        m_collisionObjectData = _swig_property(_bullet.btSoftBodyFloatData_m_collisionObjectData_get, _bullet.btSoftBodyFloatData_m_collisionObjectData_set)
    __swig_setmethods__["m_pose"] = _bullet.btSoftBodyFloatData_m_pose_set
    __swig_getmethods__["m_pose"] = _bullet.btSoftBodyFloatData_m_pose_get
    if _newclass:
        m_pose = _swig_property(_bullet.btSoftBodyFloatData_m_pose_get, _bullet.btSoftBodyFloatData_m_pose_set)
    __swig_setmethods__["m_materials"] = _bullet.btSoftBodyFloatData_m_materials_set
    __swig_getmethods__["m_materials"] = _bullet.btSoftBodyFloatData_m_materials_get
    if _newclass:
        m_materials = _swig_property(_bullet.btSoftBodyFloatData_m_materials_get, _bullet.btSoftBodyFloatData_m_materials_set)
    __swig_setmethods__["m_nodes"] = _bullet.btSoftBodyFloatData_m_nodes_set
    __swig_getmethods__["m_nodes"] = _bullet.btSoftBodyFloatData_m_nodes_get
    if _newclass:
        m_nodes = _swig_property(_bullet.btSoftBodyFloatData_m_nodes_get, _bullet.btSoftBodyFloatData_m_nodes_set)
    __swig_setmethods__["m_links"] = _bullet.btSoftBodyFloatData_m_links_set
    __swig_getmethods__["m_links"] = _bullet.btSoftBodyFloatData_m_links_get
    if _newclass:
        m_links = _swig_property(_bullet.btSoftBodyFloatData_m_links_get, _bullet.btSoftBodyFloatData_m_links_set)
    __swig_setmethods__["m_faces"] = _bullet.btSoftBodyFloatData_m_faces_set
    __swig_getmethods__["m_faces"] = _bullet.btSoftBodyFloatData_m_faces_get
    if _newclass:
        m_faces = _swig_property(_bullet.btSoftBodyFloatData_m_faces_get, _bullet.btSoftBodyFloatData_m_faces_set)
    __swig_setmethods__["m_tetrahedra"] = _bullet.btSoftBodyFloatData_m_tetrahedra_set
    __swig_getmethods__["m_tetrahedra"] = _bullet.btSoftBodyFloatData_m_tetrahedra_get
    if _newclass:
        m_tetrahedra = _swig_property(_bullet.btSoftBodyFloatData_m_tetrahedra_get, _bullet.btSoftBodyFloatData_m_tetrahedra_set)
    __swig_setmethods__["m_anchors"] = _bullet.btSoftBodyFloatData_m_anchors_set
    __swig_getmethods__["m_anchors"] = _bullet.btSoftBodyFloatData_m_anchors_get
    if _newclass:
        m_anchors = _swig_property(_bullet.btSoftBodyFloatData_m_anchors_get, _bullet.btSoftBodyFloatData_m_anchors_set)
    __swig_setmethods__["m_clusters"] = _bullet.btSoftBodyFloatData_m_clusters_set
    __swig_getmethods__["m_clusters"] = _bullet.btSoftBodyFloatData_m_clusters_get
    if _newclass:
        m_clusters = _swig_property(_bullet.btSoftBodyFloatData_m_clusters_get, _bullet.btSoftBodyFloatData_m_clusters_set)
    __swig_setmethods__["m_joints"] = _bullet.btSoftBodyFloatData_m_joints_set
    __swig_getmethods__["m_joints"] = _bullet.btSoftBodyFloatData_m_joints_get
    if _newclass:
        m_joints = _swig_property(_bullet.btSoftBodyFloatData_m_joints_get, _bullet.btSoftBodyFloatData_m_joints_set)
    __swig_setmethods__["m_numMaterials"] = _bullet.btSoftBodyFloatData_m_numMaterials_set
    __swig_getmethods__["m_numMaterials"] = _bullet.btSoftBodyFloatData_m_numMaterials_get
    if _newclass:
        m_numMaterials = _swig_property(_bullet.btSoftBodyFloatData_m_numMaterials_get, _bullet.btSoftBodyFloatData_m_numMaterials_set)
    __swig_setmethods__["m_numNodes"] = _bullet.btSoftBodyFloatData_m_numNodes_set
    __swig_getmethods__["m_numNodes"] = _bullet.btSoftBodyFloatData_m_numNodes_get
    if _newclass:
        m_numNodes = _swig_property(_bullet.btSoftBodyFloatData_m_numNodes_get, _bullet.btSoftBodyFloatData_m_numNodes_set)
    __swig_setmethods__["m_numLinks"] = _bullet.btSoftBodyFloatData_m_numLinks_set
    __swig_getmethods__["m_numLinks"] = _bullet.btSoftBodyFloatData_m_numLinks_get
    if _newclass:
        m_numLinks = _swig_property(_bullet.btSoftBodyFloatData_m_numLinks_get, _bullet.btSoftBodyFloatData_m_numLinks_set)
    __swig_setmethods__["m_numFaces"] = _bullet.btSoftBodyFloatData_m_numFaces_set
    __swig_getmethods__["m_numFaces"] = _bullet.btSoftBodyFloatData_m_numFaces_get
    if _newclass:
        m_numFaces = _swig_property(_bullet.btSoftBodyFloatData_m_numFaces_get, _bullet.btSoftBodyFloatData_m_numFaces_set)
    __swig_setmethods__["m_numTetrahedra"] = _bullet.btSoftBodyFloatData_m_numTetrahedra_set
    __swig_getmethods__["m_numTetrahedra"] = _bullet.btSoftBodyFloatData_m_numTetrahedra_get
    if _newclass:
        m_numTetrahedra = _swig_property(_bullet.btSoftBodyFloatData_m_numTetrahedra_get, _bullet.btSoftBodyFloatData_m_numTetrahedra_set)
    __swig_setmethods__["m_numAnchors"] = _bullet.btSoftBodyFloatData_m_numAnchors_set
    __swig_getmethods__["m_numAnchors"] = _bullet.btSoftBodyFloatData_m_numAnchors_get
    if _newclass:
        m_numAnchors = _swig_property(_bullet.btSoftBodyFloatData_m_numAnchors_get, _bullet.btSoftBodyFloatData_m_numAnchors_set)
    __swig_setmethods__["m_numClusters"] = _bullet.btSoftBodyFloatData_m_numClusters_set
    __swig_getmethods__["m_numClusters"] = _bullet.btSoftBodyFloatData_m_numClusters_get
    if _newclass:
        m_numClusters = _swig_property(_bullet.btSoftBodyFloatData_m_numClusters_get, _bullet.btSoftBodyFloatData_m_numClusters_set)
    __swig_setmethods__["m_numJoints"] = _bullet.btSoftBodyFloatData_m_numJoints_set
    __swig_getmethods__["m_numJoints"] = _bullet.btSoftBodyFloatData_m_numJoints_get
    if _newclass:
        m_numJoints = _swig_property(_bullet.btSoftBodyFloatData_m_numJoints_get, _bullet.btSoftBodyFloatData_m_numJoints_set)
    __swig_setmethods__["m_config"] = _bullet.btSoftBodyFloatData_m_config_set
    __swig_getmethods__["m_config"] = _bullet.btSoftBodyFloatData_m_config_get
    if _newclass:
        m_config = _swig_property(_bullet.btSoftBodyFloatData_m_config_get, _bullet.btSoftBodyFloatData_m_config_set)

    def __init__(self):
        """__init__(btSoftBodyFloatData self) -> btSoftBodyFloatData"""
        this = _bullet.new_btSoftBodyFloatData()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyFloatData
    __del__ = lambda self: None
btSoftBodyFloatData_swigregister = _bullet.btSoftBodyFloatData_swigregister
btSoftBodyFloatData_swigregister(btSoftBodyFloatData)

class fDrawFlags(_object):
    """Proxy of C++ fDrawFlags class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fDrawFlags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fDrawFlags, name)
    __repr__ = _swig_repr
    Nodes = _bullet.fDrawFlags_Nodes
    Links = _bullet.fDrawFlags_Links
    Faces = _bullet.fDrawFlags_Faces
    Tetras = _bullet.fDrawFlags_Tetras
    Normals = _bullet.fDrawFlags_Normals
    Contacts = _bullet.fDrawFlags_Contacts
    Anchors = _bullet.fDrawFlags_Anchors
    Notes = _bullet.fDrawFlags_Notes
    Clusters = _bullet.fDrawFlags_Clusters
    NodeTree = _bullet.fDrawFlags_NodeTree
    FaceTree = _bullet.fDrawFlags_FaceTree
    ClusterTree = _bullet.fDrawFlags_ClusterTree
    Joints = _bullet.fDrawFlags_Joints
    Std = _bullet.fDrawFlags_Std
    StdTetra = _bullet.fDrawFlags_StdTetra

    def __init__(self):
        """__init__(fDrawFlags self) -> fDrawFlags"""
        this = _bullet.new_fDrawFlags()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_fDrawFlags
    __del__ = lambda self: None
fDrawFlags_swigregister = _bullet.fDrawFlags_swigregister
fDrawFlags_swigregister(fDrawFlags)

class btSoftBodyHelpers(_object):
    """Proxy of C++ btSoftBodyHelpers class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyHelpers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyHelpers, name)
    __repr__ = _swig_repr

    def Draw(*args):
        """
        Draw(btSoftBody psb, btIDebugDraw idraw, int drawflags)
        Draw(btSoftBody psb, btIDebugDraw idraw)
        """
        return _bullet.btSoftBodyHelpers_Draw(*args)

    Draw = staticmethod(Draw)

    def DrawInfos(psb, idraw, masses, areas, stress):
        """DrawInfos(btSoftBody psb, btIDebugDraw idraw, bool masses, bool areas, bool stress)"""
        return _bullet.btSoftBodyHelpers_DrawInfos(psb, idraw, masses, areas, stress)

    DrawInfos = staticmethod(DrawInfos)

    def DrawNodeTree(psb, idraw, mindepth=0, maxdepth=-1):
        """
        DrawNodeTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0, int maxdepth=-1)
        DrawNodeTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0)
        DrawNodeTree(btSoftBody psb, btIDebugDraw idraw)
        """
        return _bullet.btSoftBodyHelpers_DrawNodeTree(psb, idraw, mindepth, maxdepth)

    DrawNodeTree = staticmethod(DrawNodeTree)

    def DrawFaceTree(psb, idraw, mindepth=0, maxdepth=-1):
        """
        DrawFaceTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0, int maxdepth=-1)
        DrawFaceTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0)
        DrawFaceTree(btSoftBody psb, btIDebugDraw idraw)
        """
        return _bullet.btSoftBodyHelpers_DrawFaceTree(psb, idraw, mindepth, maxdepth)

    DrawFaceTree = staticmethod(DrawFaceTree)

    def DrawClusterTree(psb, idraw, mindepth=0, maxdepth=-1):
        """
        DrawClusterTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0, int maxdepth=-1)
        DrawClusterTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0)
        DrawClusterTree(btSoftBody psb, btIDebugDraw idraw)
        """
        return _bullet.btSoftBodyHelpers_DrawClusterTree(psb, idraw, mindepth, maxdepth)

    DrawClusterTree = staticmethod(DrawClusterTree)

    def DrawFrame(psb, idraw):
        """DrawFrame(btSoftBody psb, btIDebugDraw idraw)"""
        return _bullet.btSoftBodyHelpers_DrawFrame(psb, idraw)

    DrawFrame = staticmethod(DrawFrame)

    def CreateRope(worldInfo, arg2, to, res, fixeds):
        """CreateRope(btSoftBodyWorldInfo worldInfo, btVector3 const & arg2, btVector3 const & to, int res, int fixeds) -> btSoftBody"""
        return _bullet.btSoftBodyHelpers_CreateRope(worldInfo, arg2, to, res, fixeds)

    CreateRope = staticmethod(CreateRope)

    def CreatePatch(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags):
        """CreatePatch(btSoftBodyWorldInfo worldInfo, btVector3 const & corner00, btVector3 const & corner10, btVector3 const & corner01, btVector3 const & corner11, int resx, int resy, int fixeds, bool gendiags) -> btSoftBody"""
        return _bullet.btSoftBodyHelpers_CreatePatch(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags)

    CreatePatch = staticmethod(CreatePatch)

    def CreatePatchUV(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags, tex_coords=None):
        """
        CreatePatchUV(btSoftBodyWorldInfo worldInfo, btVector3 const & corner00, btVector3 const & corner10, btVector3 const & corner01, btVector3 const & corner11, int resx, int resy, int fixeds, bool gendiags, float * tex_coords=None) -> btSoftBody
        CreatePatchUV(btSoftBodyWorldInfo worldInfo, btVector3 const & corner00, btVector3 const & corner10, btVector3 const & corner01, btVector3 const & corner11, int resx, int resy, int fixeds, bool gendiags) -> btSoftBody
        """
        return _bullet.btSoftBodyHelpers_CreatePatchUV(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags, tex_coords)

    CreatePatchUV = staticmethod(CreatePatchUV)

    def CalculateUV(resx, resy, ix, iy, id):
        """CalculateUV(int resx, int resy, int ix, int iy, int id) -> float"""
        return _bullet.btSoftBodyHelpers_CalculateUV(resx, resy, ix, iy, id)

    CalculateUV = staticmethod(CalculateUV)

    def CreateEllipsoid(worldInfo, center, radius, res):
        """CreateEllipsoid(btSoftBodyWorldInfo worldInfo, btVector3 const & center, btVector3 const & radius, int res) -> btSoftBody"""
        return _bullet.btSoftBodyHelpers_CreateEllipsoid(worldInfo, center, radius, res)

    CreateEllipsoid = staticmethod(CreateEllipsoid)

    def CreateFromTriMesh(worldInfo, vertices, triangles, ntriangles, randomizeConstraints=True):
        """
        CreateFromTriMesh(btSoftBodyWorldInfo worldInfo, btScalar const * vertices, int const * triangles, int ntriangles, bool randomizeConstraints=True) -> btSoftBody
        CreateFromTriMesh(btSoftBodyWorldInfo worldInfo, btScalar const * vertices, int const * triangles, int ntriangles) -> btSoftBody
        """
        return _bullet.btSoftBodyHelpers_CreateFromTriMesh(worldInfo, vertices, triangles, ntriangles, randomizeConstraints)

    CreateFromTriMesh = staticmethod(CreateFromTriMesh)

    def CreateFromConvexHull(worldInfo, vertices, nvertices, randomizeConstraints=True):
        """
        CreateFromConvexHull(btSoftBodyWorldInfo worldInfo, btVector3 const * vertices, int nvertices, bool randomizeConstraints=True) -> btSoftBody
        CreateFromConvexHull(btSoftBodyWorldInfo worldInfo, btVector3 const * vertices, int nvertices) -> btSoftBody
        """
        return _bullet.btSoftBodyHelpers_CreateFromConvexHull(worldInfo, vertices, nvertices, randomizeConstraints)

    CreateFromConvexHull = staticmethod(CreateFromConvexHull)

    def CreateFromTetGenData(worldInfo, ele, face, node, bfacelinks, btetralinks, bfacesfromtetras):
        """CreateFromTetGenData(btSoftBodyWorldInfo worldInfo, char const * ele, char const * face, char const * node, bool bfacelinks, bool btetralinks, bool bfacesfromtetras) -> btSoftBody"""
        return _bullet.btSoftBodyHelpers_CreateFromTetGenData(worldInfo, ele, face, node, bfacelinks, btetralinks, bfacesfromtetras)

    CreateFromTetGenData = staticmethod(CreateFromTetGenData)

    def ReoptimizeLinkOrder(psb):
        """ReoptimizeLinkOrder(btSoftBody psb)"""
        return _bullet.btSoftBodyHelpers_ReoptimizeLinkOrder(psb)

    ReoptimizeLinkOrder = staticmethod(ReoptimizeLinkOrder)

    def __init__(self):
        """__init__(btSoftBodyHelpers self) -> btSoftBodyHelpers"""
        this = _bullet.new_btSoftBodyHelpers()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyHelpers
    __del__ = lambda self: None
btSoftBodyHelpers_swigregister = _bullet.btSoftBodyHelpers_swigregister
btSoftBodyHelpers_swigregister(btSoftBodyHelpers)

def btSoftBodyHelpers_Draw(*args):
    """
    Draw(btSoftBody psb, btIDebugDraw idraw, int drawflags)
    btSoftBodyHelpers_Draw(btSoftBody psb, btIDebugDraw idraw)
    """
    return _bullet.btSoftBodyHelpers_Draw(*args)

def btSoftBodyHelpers_DrawInfos(psb, idraw, masses, areas, stress):
    """btSoftBodyHelpers_DrawInfos(btSoftBody psb, btIDebugDraw idraw, bool masses, bool areas, bool stress)"""
    return _bullet.btSoftBodyHelpers_DrawInfos(psb, idraw, masses, areas, stress)

def btSoftBodyHelpers_DrawNodeTree(psb, idraw, mindepth=0, maxdepth=-1):
    """
    DrawNodeTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0, int maxdepth=-1)
    DrawNodeTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0)
    btSoftBodyHelpers_DrawNodeTree(btSoftBody psb, btIDebugDraw idraw)
    """
    return _bullet.btSoftBodyHelpers_DrawNodeTree(psb, idraw, mindepth, maxdepth)

def btSoftBodyHelpers_DrawFaceTree(psb, idraw, mindepth=0, maxdepth=-1):
    """
    DrawFaceTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0, int maxdepth=-1)
    DrawFaceTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0)
    btSoftBodyHelpers_DrawFaceTree(btSoftBody psb, btIDebugDraw idraw)
    """
    return _bullet.btSoftBodyHelpers_DrawFaceTree(psb, idraw, mindepth, maxdepth)

def btSoftBodyHelpers_DrawClusterTree(psb, idraw, mindepth=0, maxdepth=-1):
    """
    DrawClusterTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0, int maxdepth=-1)
    DrawClusterTree(btSoftBody psb, btIDebugDraw idraw, int mindepth=0)
    btSoftBodyHelpers_DrawClusterTree(btSoftBody psb, btIDebugDraw idraw)
    """
    return _bullet.btSoftBodyHelpers_DrawClusterTree(psb, idraw, mindepth, maxdepth)

def btSoftBodyHelpers_DrawFrame(psb, idraw):
    """btSoftBodyHelpers_DrawFrame(btSoftBody psb, btIDebugDraw idraw)"""
    return _bullet.btSoftBodyHelpers_DrawFrame(psb, idraw)

def btSoftBodyHelpers_CreateRope(worldInfo, arg3, to, res, fixeds):
    """btSoftBodyHelpers_CreateRope(btSoftBodyWorldInfo worldInfo, btVector3 const & arg3, btVector3 const & to, int res, int fixeds) -> btSoftBody"""
    return _bullet.btSoftBodyHelpers_CreateRope(worldInfo, arg3, to, res, fixeds)

def btSoftBodyHelpers_CreatePatch(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags):
    """btSoftBodyHelpers_CreatePatch(btSoftBodyWorldInfo worldInfo, btVector3 const & corner00, btVector3 const & corner10, btVector3 const & corner01, btVector3 const & corner11, int resx, int resy, int fixeds, bool gendiags) -> btSoftBody"""
    return _bullet.btSoftBodyHelpers_CreatePatch(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags)

def btSoftBodyHelpers_CreatePatchUV(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags, tex_coords=None):
    """
    CreatePatchUV(btSoftBodyWorldInfo worldInfo, btVector3 const & corner00, btVector3 const & corner10, btVector3 const & corner01, btVector3 const & corner11, int resx, int resy, int fixeds, bool gendiags, float * tex_coords=None) -> btSoftBody
    btSoftBodyHelpers_CreatePatchUV(btSoftBodyWorldInfo worldInfo, btVector3 const & corner00, btVector3 const & corner10, btVector3 const & corner01, btVector3 const & corner11, int resx, int resy, int fixeds, bool gendiags) -> btSoftBody
    """
    return _bullet.btSoftBodyHelpers_CreatePatchUV(worldInfo, corner00, corner10, corner01, corner11, resx, resy, fixeds, gendiags, tex_coords)

def btSoftBodyHelpers_CalculateUV(resx, resy, ix, iy, id):
    """btSoftBodyHelpers_CalculateUV(int resx, int resy, int ix, int iy, int id) -> float"""
    return _bullet.btSoftBodyHelpers_CalculateUV(resx, resy, ix, iy, id)

def btSoftBodyHelpers_CreateEllipsoid(worldInfo, center, radius, res):
    """btSoftBodyHelpers_CreateEllipsoid(btSoftBodyWorldInfo worldInfo, btVector3 const & center, btVector3 const & radius, int res) -> btSoftBody"""
    return _bullet.btSoftBodyHelpers_CreateEllipsoid(worldInfo, center, radius, res)

def btSoftBodyHelpers_CreateFromTriMesh(worldInfo, vertices, triangles, ntriangles, randomizeConstraints=True):
    """
    CreateFromTriMesh(btSoftBodyWorldInfo worldInfo, btScalar const * vertices, int const * triangles, int ntriangles, bool randomizeConstraints=True) -> btSoftBody
    btSoftBodyHelpers_CreateFromTriMesh(btSoftBodyWorldInfo worldInfo, btScalar const * vertices, int const * triangles, int ntriangles) -> btSoftBody
    """
    return _bullet.btSoftBodyHelpers_CreateFromTriMesh(worldInfo, vertices, triangles, ntriangles, randomizeConstraints)

def btSoftBodyHelpers_CreateFromConvexHull(worldInfo, vertices, nvertices, randomizeConstraints=True):
    """
    CreateFromConvexHull(btSoftBodyWorldInfo worldInfo, btVector3 const * vertices, int nvertices, bool randomizeConstraints=True) -> btSoftBody
    btSoftBodyHelpers_CreateFromConvexHull(btSoftBodyWorldInfo worldInfo, btVector3 const * vertices, int nvertices) -> btSoftBody
    """
    return _bullet.btSoftBodyHelpers_CreateFromConvexHull(worldInfo, vertices, nvertices, randomizeConstraints)

def btSoftBodyHelpers_CreateFromTetGenData(worldInfo, ele, face, node, bfacelinks, btetralinks, bfacesfromtetras):
    """btSoftBodyHelpers_CreateFromTetGenData(btSoftBodyWorldInfo worldInfo, char const * ele, char const * face, char const * node, bool bfacelinks, bool btetralinks, bool bfacesfromtetras) -> btSoftBody"""
    return _bullet.btSoftBodyHelpers_CreateFromTetGenData(worldInfo, ele, face, node, bfacelinks, btetralinks, bfacesfromtetras)

def btSoftBodyHelpers_ReoptimizeLinkOrder(psb):
    """btSoftBodyHelpers_ReoptimizeLinkOrder(btSoftBody psb)"""
    return _bullet.btSoftBodyHelpers_ReoptimizeLinkOrder(psb)

class btPolarDecomposition(_object):
    """Proxy of C++ btPolarDecomposition class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPolarDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPolarDecomposition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btPolarDecomposition self, btScalar tolerance, unsigned int maxIterations=16) -> btPolarDecomposition
        __init__(btPolarDecomposition self, btScalar tolerance) -> btPolarDecomposition
        __init__(btPolarDecomposition self) -> btPolarDecomposition
        """
        this = _bullet.new_btPolarDecomposition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def decompose(self, a, u, h):
        """decompose(btPolarDecomposition self, btMatrix3x3 const & a, btMatrix3x3 & u, btMatrix3x3 & h) -> unsigned int"""
        return _bullet.btPolarDecomposition_decompose(self, a, u, h)


    def maxIterations(self):
        """maxIterations(btPolarDecomposition self) -> unsigned int"""
        return _bullet.btPolarDecomposition_maxIterations(self)

    __swig_destroy__ = _bullet.delete_btPolarDecomposition
    __del__ = lambda self: None
btPolarDecomposition_swigregister = _bullet.btPolarDecomposition_swigregister
btPolarDecomposition_swigregister(btPolarDecomposition)


def polarDecompose(a, u, h):
    """polarDecompose(btMatrix3x3 const & a, btMatrix3x3 & u, btMatrix3x3 & h) -> unsigned int"""
    return _bullet.polarDecompose(a, u, h)
class btSoftBodyCollisionShape(btConcaveShape):
    """Proxy of C++ btSoftBodyCollisionShape class."""

    __swig_setmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyCollisionShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConcaveShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyCollisionShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_body"] = _bullet.btSoftBodyCollisionShape_m_body_set
    __swig_getmethods__["m_body"] = _bullet.btSoftBodyCollisionShape_m_body_get
    if _newclass:
        m_body = _swig_property(_bullet.btSoftBodyCollisionShape_m_body_get, _bullet.btSoftBodyCollisionShape_m_body_set)

    def __init__(self, backptr):
        """__init__(btSoftBodyCollisionShape self, btSoftBody backptr) -> btSoftBodyCollisionShape"""
        this = _bullet.new_btSoftBodyCollisionShape(backptr)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyCollisionShape
    __del__ = lambda self: None
btSoftBodyCollisionShape_swigregister = _bullet.btSoftBodyCollisionShape_swigregister
btSoftBodyCollisionShape_swigregister(btSoftBodyCollisionShape)

class btSoftClusterCollisionShape(btConvexInternalShape):
    """Proxy of C++ btSoftClusterCollisionShape class."""

    __swig_setmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftClusterCollisionShape, name, value)
    __swig_getmethods__ = {}
    for _s in [btConvexInternalShape]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftClusterCollisionShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_cluster"] = _bullet.btSoftClusterCollisionShape_m_cluster_set
    __swig_getmethods__["m_cluster"] = _bullet.btSoftClusterCollisionShape_m_cluster_get
    if _newclass:
        m_cluster = _swig_property(_bullet.btSoftClusterCollisionShape_m_cluster_get, _bullet.btSoftClusterCollisionShape_m_cluster_set)

    def __init__(self, cluster):
        """__init__(btSoftClusterCollisionShape self, btSoftBody::Cluster const * cluster) -> btSoftClusterCollisionShape"""
        this = _bullet.new_btSoftClusterCollisionShape(cluster)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getShapeType(self):
        """getShapeType(btSoftClusterCollisionShape self) -> int"""
        return _bullet.btSoftClusterCollisionShape_getShapeType(self)

    __swig_destroy__ = _bullet.delete_btSoftClusterCollisionShape
    __del__ = lambda self: None
btSoftClusterCollisionShape_swigregister = _bullet.btSoftClusterCollisionShape_swigregister
btSoftClusterCollisionShape_swigregister(btSoftClusterCollisionShape)


def Lerp(a, b, t):
    """Lerp(btMatrix3x3 const & a, btMatrix3x3 const & b, btScalar t) -> btMatrix3x3"""
    return _bullet.Lerp(a, b, t)

def Clamp(v, maxlength):
    """Clamp(btVector3 const & v, btScalar maxlength) -> btVector3"""
    return _bullet.Clamp(v, maxlength)

def ClusterMetric(x, y):
    """ClusterMetric(btVector3 const & x, btVector3 const & y) -> btScalar"""
    return _bullet.ClusterMetric(x, y)

def ScaleAlongAxis(a, s):
    """ScaleAlongAxis(btVector3 const & a, btScalar s) -> btMatrix3x3"""
    return _bullet.ScaleAlongAxis(a, s)

def Cross(v):
    """Cross(btVector3 const & v) -> btMatrix3x3"""
    return _bullet.Cross(v)

def Diagonal(x):
    """Diagonal(btScalar x) -> btMatrix3x3"""
    return _bullet.Diagonal(x)

def Add(a, b):
    """Add(btMatrix3x3 const & a, btMatrix3x3 const & b) -> btMatrix3x3"""
    return _bullet.Add(a, b)

def Sub(a, b):
    """Sub(btMatrix3x3 const & a, btMatrix3x3 const & b) -> btMatrix3x3"""
    return _bullet.Sub(a, b)

def Mul(a, b):
    """Mul(btMatrix3x3 const & a, btScalar b) -> btMatrix3x3"""
    return _bullet.Mul(a, b)

def Orthogonalize(m):
    """Orthogonalize(btMatrix3x3 & m)"""
    return _bullet.Orthogonalize(m)

def MassMatrix(im, iwi, r):
    """MassMatrix(btScalar im, btMatrix3x3 const & iwi, btVector3 const & r) -> btMatrix3x3"""
    return _bullet.MassMatrix(im, iwi, r)

def ImpulseMatrix(*args):
    """
    ImpulseMatrix(btScalar dt, btScalar ima, btScalar imb, btMatrix3x3 const & iwi, btVector3 const & r) -> btMatrix3x3
    ImpulseMatrix(btScalar ima, btMatrix3x3 const & iia, btVector3 const & ra, btScalar imb, btMatrix3x3 const & iib, btVector3 const & rb) -> btMatrix3x3
    """
    return _bullet.ImpulseMatrix(*args)

def AngularImpulseMatrix(iia, iib):
    """AngularImpulseMatrix(btMatrix3x3 const & iia, btMatrix3x3 const & iib) -> btMatrix3x3"""
    return _bullet.AngularImpulseMatrix(iia, iib)

def ProjectOnAxis(v, a):
    """ProjectOnAxis(btVector3 const & v, btVector3 const & a) -> btVector3"""
    return _bullet.ProjectOnAxis(v, a)

def ProjectOnPlane(v, a):
    """ProjectOnPlane(btVector3 const & v, btVector3 const & a) -> btVector3"""
    return _bullet.ProjectOnPlane(v, a)

def ProjectOrigin(*args):
    """
    ProjectOrigin(btVector3 const & a, btVector3 const & b, btVector3 & prj, btScalar & sqd)
    ProjectOrigin(btVector3 const & a, btVector3 const & b, btVector3 const & c, btVector3 & prj, btScalar & sqd)
    """
    return _bullet.ProjectOrigin(*args)

def BaryCoord(a, b, c, p):
    """BaryCoord(btVector3 const & a, btVector3 const & b, btVector3 const & c, btVector3 const & p) -> btVector3"""
    return _bullet.BaryCoord(a, b, c, p)

def ImplicitSolve(fn, a, b, accuracy, maxiterations=256):
    """
    ImplicitSolve(btSoftBody::ImplicitFn * fn, btVector3 const & a, btVector3 const & b, btScalar const accuracy, int const maxiterations=256) -> btScalar
    ImplicitSolve(btSoftBody::ImplicitFn * fn, btVector3 const & a, btVector3 const & b, btScalar const accuracy) -> btScalar
    """
    return _bullet.ImplicitSolve(fn, a, b, accuracy, maxiterations)

def EvaluateMedium(wfi, x, medium):
    """EvaluateMedium(btSoftBodyWorldInfo wfi, btVector3 const & x, btSoftBody::sMedium & medium)"""
    return _bullet.EvaluateMedium(wfi, x, medium)

def NormalizeAny(v):
    """NormalizeAny(btVector3 const & v) -> btVector3"""
    return _bullet.NormalizeAny(v)

def CenterOf(f):
    """CenterOf(btSoftBody::Face const & f) -> btVector3"""
    return _bullet.CenterOf(f)

def AreaOf(x0, x1, x2):
    """AreaOf(btVector3 const & x0, btVector3 const & x1, btVector3 const & x2) -> btScalar"""
    return _bullet.AreaOf(x0, x1, x2)

def VolumeOf(*args):
    """
    VolumeOf(btSoftBody::Face const & f, btScalar margin) -> btDbvtAabbMm
    VolumeOf(btVector3 const & x0, btVector3 const & x1, btVector3 const & x2, btVector3 const & x3) -> btScalar
    """
    return _bullet.VolumeOf(*args)

def ApplyClampedForce(n, f, dt):
    """ApplyClampedForce(btSoftBody::Node & n, btVector3 const & f, btScalar dt)"""
    return _bullet.ApplyClampedForce(n, f, dt)

def MatchEdge(a, b, ma, mb):
    """MatchEdge(btSoftBody::Node const * a, btSoftBody::Node const * b, btSoftBody::Node const * ma, btSoftBody::Node const * mb) -> int"""
    return _bullet.MatchEdge(a, b, ma, mb)
class btEigen(_object):
    """Proxy of C++ btEigen class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btEigen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btEigen, name)
    __repr__ = _swig_repr

    def system(a, vectors, values=None):
        """
        system(btMatrix3x3 & a, btMatrix3x3 * vectors, btVector3 * values=None) -> int
        system(btMatrix3x3 & a, btMatrix3x3 * vectors) -> int
        """
        return _bullet.btEigen_system(a, vectors, values)

    system = staticmethod(system)

    def __init__(self):
        """__init__(btEigen self) -> btEigen"""
        this = _bullet.new_btEigen()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btEigen
    __del__ = lambda self: None
btEigen_swigregister = _bullet.btEigen_swigregister
btEigen_swigregister(btEigen)

def btEigen_system(a, vectors, values=None):
    """
    system(btMatrix3x3 & a, btMatrix3x3 * vectors, btVector3 * values=None) -> int
    btEigen_system(btMatrix3x3 & a, btMatrix3x3 * vectors) -> int
    """
    return _bullet.btEigen_system(a, vectors, values)


def PolarDecompose(m, q, s):
    """PolarDecompose(btMatrix3x3 const & m, btMatrix3x3 & q, btMatrix3x3 & s) -> int"""
    return _bullet.PolarDecompose(m, q, s)
class btSoftColliders(_object):
    """Proxy of C++ btSoftColliders class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftColliders, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftColliders, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btSoftColliders self) -> btSoftColliders"""
        this = _bullet.new_btSoftColliders()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftColliders
    __del__ = lambda self: None
btSoftColliders_swigregister = _bullet.btSoftColliders_swigregister
btSoftColliders_swigregister(btSoftColliders)

class btSoftBodyRigidBodyCollisionConfiguration(btDefaultCollisionConfiguration):
    """Proxy of C++ btSoftBodyRigidBodyCollisionConfiguration class."""

    __swig_setmethods__ = {}
    for _s in [btDefaultCollisionConfiguration]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftBodyRigidBodyCollisionConfiguration, name, value)
    __swig_getmethods__ = {}
    for _s in [btDefaultCollisionConfiguration]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftBodyRigidBodyCollisionConfiguration, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btSoftBodyRigidBodyCollisionConfiguration self, btDefaultCollisionConstructionInfo constructionInfo) -> btSoftBodyRigidBodyCollisionConfiguration
        __init__(btSoftBodyRigidBodyCollisionConfiguration self) -> btSoftBodyRigidBodyCollisionConfiguration
        """
        this = _bullet.new_btSoftBodyRigidBodyCollisionConfiguration(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftBodyRigidBodyCollisionConfiguration
    __del__ = lambda self: None
btSoftBodyRigidBodyCollisionConfiguration_swigregister = _bullet.btSoftBodyRigidBodyCollisionConfiguration_swigregister
btSoftBodyRigidBodyCollisionConfiguration_swigregister(btSoftBodyRigidBodyCollisionConfiguration)

class btSoftRigidCollisionAlgorithm(btCollisionAlgorithm):
    """Proxy of C++ btSoftRigidCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftRigidCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftRigidCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, mf, ci, col0, col1Wrap, isSwapped):
        """__init__(btSoftRigidCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * col0, btCollisionObjectWrapper const * col1Wrap, bool isSwapped) -> btSoftRigidCollisionAlgorithm"""
        this = _bullet.new_btSoftRigidCollisionAlgorithm(mf, ci, col0, col1Wrap, isSwapped)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftRigidCollisionAlgorithm
    __del__ = lambda self: None
btSoftRigidCollisionAlgorithm_swigregister = _bullet.btSoftRigidCollisionAlgorithm_swigregister
btSoftRigidCollisionAlgorithm_swigregister(btSoftRigidCollisionAlgorithm)

class btSoftRigidDynamicsWorld(btDiscreteDynamicsWorld):
    """Proxy of C++ btSoftRigidDynamicsWorld class."""

    __swig_setmethods__ = {}
    for _s in [btDiscreteDynamicsWorld]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftRigidDynamicsWorld, name, value)
    __swig_getmethods__ = {}
    for _s in [btDiscreteDynamicsWorld]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftRigidDynamicsWorld, name)
    __repr__ = _swig_repr

    def __init__(self, dispatcher, pairCache, constraintSolver, collisionConfiguration, softBodySolver=None):
        """
        __init__(btSoftRigidDynamicsWorld self, btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration, btSoftBodySolver softBodySolver=None) -> btSoftRigidDynamicsWorld
        __init__(btSoftRigidDynamicsWorld self, btDispatcher dispatcher, btBroadphaseInterface pairCache, btConstraintSolver constraintSolver, btCollisionConfiguration collisionConfiguration) -> btSoftRigidDynamicsWorld
        """
        this = _bullet.new_btSoftRigidDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration, softBodySolver)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftRigidDynamicsWorld
    __del__ = lambda self: None

    def addSoftBody(self, *args):
        """
        addSoftBody(btSoftRigidDynamicsWorld self, btSoftBody body, int collisionFilterGroup, int collisionFilterMask)
        addSoftBody(btSoftRigidDynamicsWorld self, btSoftBody body, int collisionFilterGroup)
        addSoftBody(btSoftRigidDynamicsWorld self, btSoftBody body)
        """
        return _bullet.btSoftRigidDynamicsWorld_addSoftBody(self, *args)


    def removeSoftBody(self, body):
        """removeSoftBody(btSoftRigidDynamicsWorld self, btSoftBody body)"""
        return _bullet.btSoftRigidDynamicsWorld_removeSoftBody(self, body)


    def getDrawFlags(self):
        """getDrawFlags(btSoftRigidDynamicsWorld self) -> int"""
        return _bullet.btSoftRigidDynamicsWorld_getDrawFlags(self)


    def setDrawFlags(self, f):
        """setDrawFlags(btSoftRigidDynamicsWorld self, int f)"""
        return _bullet.btSoftRigidDynamicsWorld_setDrawFlags(self, f)


    def getWorldInfo(self, *args):
        """
        getWorldInfo(btSoftRigidDynamicsWorld self) -> btSoftBodyWorldInfo
        getWorldInfo(btSoftRigidDynamicsWorld self) -> btSoftBodyWorldInfo
        """
        return _bullet.btSoftRigidDynamicsWorld_getWorldInfo(self, *args)


    def getSoftBodyArray(self, *args):
        """
        getSoftBodyArray(btSoftRigidDynamicsWorld self) -> btSoftBodyArray
        getSoftBodyArray(btSoftRigidDynamicsWorld self) -> btSoftBodyArray const &
        """
        return _bullet.btSoftRigidDynamicsWorld_getSoftBodyArray(self, *args)


    def rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback):
        """rayTestSingle(btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform const & colObjWorldTransform, btCollisionWorld::RayResultCallback & resultCallback)"""
        return _bullet.btSoftRigidDynamicsWorld_rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback)

    rayTestSingle = staticmethod(rayTestSingle)
btSoftRigidDynamicsWorld_swigregister = _bullet.btSoftRigidDynamicsWorld_swigregister
btSoftRigidDynamicsWorld_swigregister(btSoftRigidDynamicsWorld)

def btSoftRigidDynamicsWorld_rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback):
    """btSoftRigidDynamicsWorld_rayTestSingle(btTransform const & rayFromTrans, btTransform const & rayToTrans, btCollisionObject collisionObject, btCollisionShape collisionShape, btTransform const & colObjWorldTransform, btCollisionWorld::RayResultCallback & resultCallback)"""
    return _bullet.btSoftRigidDynamicsWorld_rayTestSingle(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback)

class btSoftSoftCollisionAlgorithm(btCollisionAlgorithm):
    """Proxy of C++ btSoftSoftCollisionAlgorithm class."""

    __swig_setmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btSoftSoftCollisionAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [btCollisionAlgorithm]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btSoftSoftCollisionAlgorithm, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btSoftSoftCollisionAlgorithm self, btCollisionAlgorithmConstructionInfo ci) -> btSoftSoftCollisionAlgorithm
        __init__(btSoftSoftCollisionAlgorithm self, btPersistentManifold mf, btCollisionAlgorithmConstructionInfo ci, btCollisionObjectWrapper const * body0Wrap, btCollisionObjectWrapper const * body1Wrap) -> btSoftSoftCollisionAlgorithm
        """
        this = _bullet.new_btSoftSoftCollisionAlgorithm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btSoftSoftCollisionAlgorithm
    __del__ = lambda self: None
btSoftSoftCollisionAlgorithm_swigregister = _bullet.btSoftSoftCollisionAlgorithm_swigregister
btSoftSoftCollisionAlgorithm_swigregister(btSoftSoftCollisionAlgorithm)

class HullResult(_object):
    """Proxy of C++ HullResult class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HullResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HullResult, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(HullResult self) -> HullResult"""
        this = _bullet.new_HullResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mPolygons"] = _bullet.HullResult_mPolygons_set
    __swig_getmethods__["mPolygons"] = _bullet.HullResult_mPolygons_get
    if _newclass:
        mPolygons = _swig_property(_bullet.HullResult_mPolygons_get, _bullet.HullResult_mPolygons_set)
    __swig_setmethods__["mNumOutputVertices"] = _bullet.HullResult_mNumOutputVertices_set
    __swig_getmethods__["mNumOutputVertices"] = _bullet.HullResult_mNumOutputVertices_get
    if _newclass:
        mNumOutputVertices = _swig_property(_bullet.HullResult_mNumOutputVertices_get, _bullet.HullResult_mNumOutputVertices_set)
    __swig_setmethods__["m_OutputVertices"] = _bullet.HullResult_m_OutputVertices_set
    __swig_getmethods__["m_OutputVertices"] = _bullet.HullResult_m_OutputVertices_get
    if _newclass:
        m_OutputVertices = _swig_property(_bullet.HullResult_m_OutputVertices_get, _bullet.HullResult_m_OutputVertices_set)
    __swig_setmethods__["mNumFaces"] = _bullet.HullResult_mNumFaces_set
    __swig_getmethods__["mNumFaces"] = _bullet.HullResult_mNumFaces_get
    if _newclass:
        mNumFaces = _swig_property(_bullet.HullResult_mNumFaces_get, _bullet.HullResult_mNumFaces_set)
    __swig_setmethods__["mNumIndices"] = _bullet.HullResult_mNumIndices_set
    __swig_getmethods__["mNumIndices"] = _bullet.HullResult_mNumIndices_get
    if _newclass:
        mNumIndices = _swig_property(_bullet.HullResult_mNumIndices_get, _bullet.HullResult_mNumIndices_set)
    __swig_setmethods__["m_Indices"] = _bullet.HullResult_m_Indices_set
    __swig_getmethods__["m_Indices"] = _bullet.HullResult_m_Indices_get
    if _newclass:
        m_Indices = _swig_property(_bullet.HullResult_m_Indices_get, _bullet.HullResult_m_Indices_set)
    __swig_destroy__ = _bullet.delete_HullResult
    __del__ = lambda self: None
HullResult_swigregister = _bullet.HullResult_swigregister
HullResult_swigregister(HullResult)

QF_TRIANGLES = _bullet.QF_TRIANGLES
QF_REVERSE_ORDER = _bullet.QF_REVERSE_ORDER
QF_DEFAULT = _bullet.QF_DEFAULT
class HullDesc(_object):
    """Proxy of C++ HullDesc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HullDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HullDesc, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(HullDesc self) -> HullDesc
        __init__(HullDesc self, HullFlag flag, unsigned int vcount, btVector3 const * vertices, unsigned int stride) -> HullDesc
        __init__(HullDesc self, HullFlag flag, unsigned int vcount, btVector3 const * vertices) -> HullDesc
        """
        this = _bullet.new_HullDesc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def HasHullFlag(self, flag):
        """HasHullFlag(HullDesc self, HullFlag flag) -> bool"""
        return _bullet.HullDesc_HasHullFlag(self, flag)


    def SetHullFlag(self, flag):
        """SetHullFlag(HullDesc self, HullFlag flag)"""
        return _bullet.HullDesc_SetHullFlag(self, flag)


    def ClearHullFlag(self, flag):
        """ClearHullFlag(HullDesc self, HullFlag flag)"""
        return _bullet.HullDesc_ClearHullFlag(self, flag)

    __swig_setmethods__["mFlags"] = _bullet.HullDesc_mFlags_set
    __swig_getmethods__["mFlags"] = _bullet.HullDesc_mFlags_get
    if _newclass:
        mFlags = _swig_property(_bullet.HullDesc_mFlags_get, _bullet.HullDesc_mFlags_set)
    __swig_setmethods__["mVcount"] = _bullet.HullDesc_mVcount_set
    __swig_getmethods__["mVcount"] = _bullet.HullDesc_mVcount_get
    if _newclass:
        mVcount = _swig_property(_bullet.HullDesc_mVcount_get, _bullet.HullDesc_mVcount_set)
    __swig_setmethods__["mVertices"] = _bullet.HullDesc_mVertices_set
    __swig_getmethods__["mVertices"] = _bullet.HullDesc_mVertices_get
    if _newclass:
        mVertices = _swig_property(_bullet.HullDesc_mVertices_get, _bullet.HullDesc_mVertices_set)
    __swig_setmethods__["mVertexStride"] = _bullet.HullDesc_mVertexStride_set
    __swig_getmethods__["mVertexStride"] = _bullet.HullDesc_mVertexStride_get
    if _newclass:
        mVertexStride = _swig_property(_bullet.HullDesc_mVertexStride_get, _bullet.HullDesc_mVertexStride_set)
    __swig_setmethods__["mNormalEpsilon"] = _bullet.HullDesc_mNormalEpsilon_set
    __swig_getmethods__["mNormalEpsilon"] = _bullet.HullDesc_mNormalEpsilon_get
    if _newclass:
        mNormalEpsilon = _swig_property(_bullet.HullDesc_mNormalEpsilon_get, _bullet.HullDesc_mNormalEpsilon_set)
    __swig_setmethods__["mMaxVertices"] = _bullet.HullDesc_mMaxVertices_set
    __swig_getmethods__["mMaxVertices"] = _bullet.HullDesc_mMaxVertices_get
    if _newclass:
        mMaxVertices = _swig_property(_bullet.HullDesc_mMaxVertices_get, _bullet.HullDesc_mMaxVertices_set)
    __swig_setmethods__["mMaxFaces"] = _bullet.HullDesc_mMaxFaces_set
    __swig_getmethods__["mMaxFaces"] = _bullet.HullDesc_mMaxFaces_get
    if _newclass:
        mMaxFaces = _swig_property(_bullet.HullDesc_mMaxFaces_get, _bullet.HullDesc_mMaxFaces_set)
    __swig_destroy__ = _bullet.delete_HullDesc
    __del__ = lambda self: None
HullDesc_swigregister = _bullet.HullDesc_swigregister
HullDesc_swigregister(HullDesc)

QE_OK = _bullet.QE_OK
QE_FAIL = _bullet.QE_FAIL
class btPlane(_object):
    """Proxy of C++ btPlane class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPlane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPlane, name)
    __repr__ = _swig_repr
    __swig_setmethods__["normal"] = _bullet.btPlane_normal_set
    __swig_getmethods__["normal"] = _bullet.btPlane_normal_get
    if _newclass:
        normal = _swig_property(_bullet.btPlane_normal_get, _bullet.btPlane_normal_set)
    __swig_setmethods__["dist"] = _bullet.btPlane_dist_set
    __swig_getmethods__["dist"] = _bullet.btPlane_dist_get
    if _newclass:
        dist = _swig_property(_bullet.btPlane_dist_get, _bullet.btPlane_dist_set)

    def __init__(self, *args):
        """
        __init__(btPlane self, btVector3 const & n, btScalar d) -> btPlane
        __init__(btPlane self) -> btPlane
        """
        this = _bullet.new_btPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPlane
    __del__ = lambda self: None
btPlane_swigregister = _bullet.btPlane_swigregister
btPlane_swigregister(btPlane)

class ConvexH(_object):
    """Proxy of C++ ConvexH class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConvexH, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConvexH, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _bullet.delete_ConvexH
    __del__ = lambda self: None
    __swig_setmethods__["vertices"] = _bullet.ConvexH_vertices_set
    __swig_getmethods__["vertices"] = _bullet.ConvexH_vertices_get
    if _newclass:
        vertices = _swig_property(_bullet.ConvexH_vertices_get, _bullet.ConvexH_vertices_set)
    __swig_setmethods__["edges"] = _bullet.ConvexH_edges_set
    __swig_getmethods__["edges"] = _bullet.ConvexH_edges_get
    if _newclass:
        edges = _swig_property(_bullet.ConvexH_edges_get, _bullet.ConvexH_edges_set)
    __swig_setmethods__["facets"] = _bullet.ConvexH_facets_set
    __swig_getmethods__["facets"] = _bullet.ConvexH_facets_get
    if _newclass:
        facets = _swig_property(_bullet.ConvexH_facets_get, _bullet.ConvexH_facets_set)

    def __init__(self, *args):
        """
        __init__(ConvexH self) -> ConvexH
        __init__(ConvexH self, int vertices_size, int edges_size, int facets_size) -> ConvexH
        """
        this = _bullet.new_ConvexH(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
ConvexH_swigregister = _bullet.ConvexH_swigregister
ConvexH_swigregister(ConvexH)

class int4(_object):
    """Proxy of C++ int4 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _bullet.int4_x_set
    __swig_getmethods__["x"] = _bullet.int4_x_get
    if _newclass:
        x = _swig_property(_bullet.int4_x_get, _bullet.int4_x_set)
    __swig_setmethods__["y"] = _bullet.int4_y_set
    __swig_getmethods__["y"] = _bullet.int4_y_get
    if _newclass:
        y = _swig_property(_bullet.int4_y_get, _bullet.int4_y_set)
    __swig_setmethods__["z"] = _bullet.int4_z_set
    __swig_getmethods__["z"] = _bullet.int4_z_get
    if _newclass:
        z = _swig_property(_bullet.int4_z_get, _bullet.int4_z_set)
    __swig_setmethods__["w"] = _bullet.int4_w_set
    __swig_getmethods__["w"] = _bullet.int4_w_get
    if _newclass:
        w = _swig_property(_bullet.int4_w_get, _bullet.int4_w_set)

    def __init__(self, *args):
        """
        __init__(int4 self) -> int4
        __init__(int4 self, int _x, int _y, int _z, int _w) -> int4
        """
        this = _bullet.new_int4(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_int4
    __del__ = lambda self: None
int4_swigregister = _bullet.int4_swigregister
int4_swigregister(int4)

class PHullResult(_object):
    """Proxy of C++ PHullResult class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PHullResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PHullResult, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(PHullResult self) -> PHullResult"""
        this = _bullet.new_PHullResult()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["mVcount"] = _bullet.PHullResult_mVcount_set
    __swig_getmethods__["mVcount"] = _bullet.PHullResult_mVcount_get
    if _newclass:
        mVcount = _swig_property(_bullet.PHullResult_mVcount_get, _bullet.PHullResult_mVcount_set)
    __swig_setmethods__["mIndexCount"] = _bullet.PHullResult_mIndexCount_set
    __swig_getmethods__["mIndexCount"] = _bullet.PHullResult_mIndexCount_get
    if _newclass:
        mIndexCount = _swig_property(_bullet.PHullResult_mIndexCount_get, _bullet.PHullResult_mIndexCount_set)
    __swig_setmethods__["mFaceCount"] = _bullet.PHullResult_mFaceCount_set
    __swig_getmethods__["mFaceCount"] = _bullet.PHullResult_mFaceCount_get
    if _newclass:
        mFaceCount = _swig_property(_bullet.PHullResult_mFaceCount_get, _bullet.PHullResult_mFaceCount_set)
    __swig_setmethods__["mVertices"] = _bullet.PHullResult_mVertices_set
    __swig_getmethods__["mVertices"] = _bullet.PHullResult_mVertices_get
    if _newclass:
        mVertices = _swig_property(_bullet.PHullResult_mVertices_get, _bullet.PHullResult_mVertices_set)
    __swig_setmethods__["m_Indices"] = _bullet.PHullResult_m_Indices_set
    __swig_getmethods__["m_Indices"] = _bullet.PHullResult_m_Indices_get
    if _newclass:
        m_Indices = _swig_property(_bullet.PHullResult_m_Indices_get, _bullet.PHullResult_m_Indices_set)
    __swig_destroy__ = _bullet.delete_PHullResult
    __del__ = lambda self: None
PHullResult_swigregister = _bullet.PHullResult_swigregister
PHullResult_swigregister(PHullResult)

class HullLibrary(_object):
    """Proxy of C++ HullLibrary class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HullLibrary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HullLibrary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_vertexIndexMapping"] = _bullet.HullLibrary_m_vertexIndexMapping_set
    __swig_getmethods__["m_vertexIndexMapping"] = _bullet.HullLibrary_m_vertexIndexMapping_get
    if _newclass:
        m_vertexIndexMapping = _swig_property(_bullet.HullLibrary_m_vertexIndexMapping_get, _bullet.HullLibrary_m_vertexIndexMapping_set)

    def CreateConvexHull(self, desc, result):
        """CreateConvexHull(HullLibrary self, HullDesc desc, HullResult result) -> HullError"""
        return _bullet.HullLibrary_CreateConvexHull(self, desc, result)


    def ReleaseResult(self, result):
        """ReleaseResult(HullLibrary self, HullResult result) -> HullError"""
        return _bullet.HullLibrary_ReleaseResult(self, result)


    def __init__(self):
        """__init__(HullLibrary self) -> HullLibrary"""
        this = _bullet.new_HullLibrary()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_HullLibrary
    __del__ = lambda self: None
HullLibrary_swigregister = _bullet.HullLibrary_swigregister
HullLibrary_swigregister(HullLibrary)

class btConvexHullComputer(_object):
    """Proxy of C++ btConvexHullComputer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btConvexHullComputer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btConvexHullComputer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertices"] = _bullet.btConvexHullComputer_vertices_set
    __swig_getmethods__["vertices"] = _bullet.btConvexHullComputer_vertices_get
    if _newclass:
        vertices = _swig_property(_bullet.btConvexHullComputer_vertices_get, _bullet.btConvexHullComputer_vertices_set)
    __swig_setmethods__["edges"] = _bullet.btConvexHullComputer_edges_set
    __swig_getmethods__["edges"] = _bullet.btConvexHullComputer_edges_get
    if _newclass:
        edges = _swig_property(_bullet.btConvexHullComputer_edges_get, _bullet.btConvexHullComputer_edges_set)
    __swig_setmethods__["faces"] = _bullet.btConvexHullComputer_faces_set
    __swig_getmethods__["faces"] = _bullet.btConvexHullComputer_faces_get
    if _newclass:
        faces = _swig_property(_bullet.btConvexHullComputer_faces_get, _bullet.btConvexHullComputer_faces_set)

    def compute(self, *args):
        """
        compute(btConvexHullComputer self, float const * coords, int stride, int count, btScalar shrink, btScalar shrinkClamp) -> btScalar
        compute(btConvexHullComputer self, double const * coords, int stride, int count, btScalar shrink, btScalar shrinkClamp) -> btScalar
        """
        return _bullet.btConvexHullComputer_compute(self, *args)


    def __init__(self):
        """__init__(btConvexHullComputer self) -> btConvexHullComputer"""
        this = _bullet.new_btConvexHullComputer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btConvexHullComputer
    __del__ = lambda self: None
btConvexHullComputer_swigregister = _bullet.btConvexHullComputer_swigregister
btConvexHullComputer_swigregister(btConvexHullComputer)

class btDefaultMotionState(btMotionState):
    """Proxy of C++ btDefaultMotionState class."""

    __swig_setmethods__ = {}
    for _s in [btMotionState]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, btDefaultMotionState, name, value)
    __swig_getmethods__ = {}
    for _s in [btMotionState]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, btDefaultMotionState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_graphicsWorldTrans"] = _bullet.btDefaultMotionState_m_graphicsWorldTrans_set
    __swig_getmethods__["m_graphicsWorldTrans"] = _bullet.btDefaultMotionState_m_graphicsWorldTrans_get
    if _newclass:
        m_graphicsWorldTrans = _swig_property(_bullet.btDefaultMotionState_m_graphicsWorldTrans_get, _bullet.btDefaultMotionState_m_graphicsWorldTrans_set)
    __swig_setmethods__["m_centerOfMassOffset"] = _bullet.btDefaultMotionState_m_centerOfMassOffset_set
    __swig_getmethods__["m_centerOfMassOffset"] = _bullet.btDefaultMotionState_m_centerOfMassOffset_get
    if _newclass:
        m_centerOfMassOffset = _swig_property(_bullet.btDefaultMotionState_m_centerOfMassOffset_get, _bullet.btDefaultMotionState_m_centerOfMassOffset_set)
    __swig_setmethods__["m_startWorldTrans"] = _bullet.btDefaultMotionState_m_startWorldTrans_set
    __swig_getmethods__["m_startWorldTrans"] = _bullet.btDefaultMotionState_m_startWorldTrans_get
    if _newclass:
        m_startWorldTrans = _swig_property(_bullet.btDefaultMotionState_m_startWorldTrans_get, _bullet.btDefaultMotionState_m_startWorldTrans_set)
    __swig_setmethods__["m_userPointer"] = _bullet.btDefaultMotionState_m_userPointer_set
    __swig_getmethods__["m_userPointer"] = _bullet.btDefaultMotionState_m_userPointer_get
    if _newclass:
        m_userPointer = _swig_property(_bullet.btDefaultMotionState_m_userPointer_get, _bullet.btDefaultMotionState_m_userPointer_set)

    def __init__(self, *args):
        """
        __init__(btDefaultMotionState self, btTransform const & startTrans, btTransform const & centerOfMassOffset) -> btDefaultMotionState
        __init__(btDefaultMotionState self, btTransform const & startTrans) -> btDefaultMotionState
        __init__(btDefaultMotionState self) -> btDefaultMotionState
        """
        this = _bullet.new_btDefaultMotionState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btDefaultMotionState
    __del__ = lambda self: None
btDefaultMotionState_swigregister = _bullet.btDefaultMotionState_swigregister
btDefaultMotionState_swigregister(btDefaultMotionState)

class btGeometryUtil(_object):
    """Proxy of C++ btGeometryUtil class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGeometryUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGeometryUtil, name)
    __repr__ = _swig_repr

    def getPlaneEquationsFromVertices(vertices, planeEquationsOut):
        """getPlaneEquationsFromVertices(btAlignedObjectArray< btVector3 > & vertices, btAlignedObjectArray< btVector3 > & planeEquationsOut)"""
        return _bullet.btGeometryUtil_getPlaneEquationsFromVertices(vertices, planeEquationsOut)

    getPlaneEquationsFromVertices = staticmethod(getPlaneEquationsFromVertices)

    def getVerticesFromPlaneEquations(planeEquations, verticesOut):
        """getVerticesFromPlaneEquations(btAlignedObjectArray< btVector3 > const & planeEquations, btAlignedObjectArray< btVector3 > & verticesOut)"""
        return _bullet.btGeometryUtil_getVerticesFromPlaneEquations(planeEquations, verticesOut)

    getVerticesFromPlaneEquations = staticmethod(getVerticesFromPlaneEquations)

    def isPointInsidePlanes(planeEquations, point, margin):
        """isPointInsidePlanes(btAlignedObjectArray< btVector3 > const & planeEquations, btVector3 const & point, btScalar margin) -> bool"""
        return _bullet.btGeometryUtil_isPointInsidePlanes(planeEquations, point, margin)

    isPointInsidePlanes = staticmethod(isPointInsidePlanes)

    def areVerticesBehindPlane(planeNormal, vertices, margin):
        """areVerticesBehindPlane(btVector3 const & planeNormal, btAlignedObjectArray< btVector3 > const & vertices, btScalar margin) -> bool"""
        return _bullet.btGeometryUtil_areVerticesBehindPlane(planeNormal, vertices, margin)

    areVerticesBehindPlane = staticmethod(areVerticesBehindPlane)

    def __init__(self):
        """__init__(btGeometryUtil self) -> btGeometryUtil"""
        this = _bullet.new_btGeometryUtil()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btGeometryUtil
    __del__ = lambda self: None
btGeometryUtil_swigregister = _bullet.btGeometryUtil_swigregister
btGeometryUtil_swigregister(btGeometryUtil)

def btGeometryUtil_getPlaneEquationsFromVertices(vertices, planeEquationsOut):
    """btGeometryUtil_getPlaneEquationsFromVertices(btAlignedObjectArray< btVector3 > & vertices, btAlignedObjectArray< btVector3 > & planeEquationsOut)"""
    return _bullet.btGeometryUtil_getPlaneEquationsFromVertices(vertices, planeEquationsOut)

def btGeometryUtil_getVerticesFromPlaneEquations(planeEquations, verticesOut):
    """btGeometryUtil_getVerticesFromPlaneEquations(btAlignedObjectArray< btVector3 > const & planeEquations, btAlignedObjectArray< btVector3 > & verticesOut)"""
    return _bullet.btGeometryUtil_getVerticesFromPlaneEquations(planeEquations, verticesOut)

def btGeometryUtil_isPointInsidePlanes(planeEquations, point, margin):
    """btGeometryUtil_isPointInsidePlanes(btAlignedObjectArray< btVector3 > const & planeEquations, btVector3 const & point, btScalar margin) -> bool"""
    return _bullet.btGeometryUtil_isPointInsidePlanes(planeEquations, point, margin)

def btGeometryUtil_areVerticesBehindPlane(planeNormal, vertices, margin):
    """btGeometryUtil_areVerticesBehindPlane(btVector3 const & planeNormal, btAlignedObjectArray< btVector3 > const & vertices, btScalar margin) -> bool"""
    return _bullet.btGeometryUtil_areVerticesBehindPlane(planeNormal, vertices, margin)

class GrahamVector3(_object):
    """Proxy of C++ GrahamVector3 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrahamVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GrahamVector3, name)
    __repr__ = _swig_repr

    def __init__(self, org, orgIndex):
        """__init__(GrahamVector3 self, btVector3 const & org, int orgIndex) -> GrahamVector3"""
        this = _bullet.new_GrahamVector3(org, orgIndex)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_angle"] = _bullet.GrahamVector3_m_angle_set
    __swig_getmethods__["m_angle"] = _bullet.GrahamVector3_m_angle_get
    if _newclass:
        m_angle = _swig_property(_bullet.GrahamVector3_m_angle_get, _bullet.GrahamVector3_m_angle_set)
    __swig_setmethods__["m_orgIndex"] = _bullet.GrahamVector3_m_orgIndex_set
    __swig_getmethods__["m_orgIndex"] = _bullet.GrahamVector3_m_orgIndex_get
    if _newclass:
        m_orgIndex = _swig_property(_bullet.GrahamVector3_m_orgIndex_get, _bullet.GrahamVector3_m_orgIndex_set)
    __swig_destroy__ = _bullet.delete_GrahamVector3
    __del__ = lambda self: None
GrahamVector3_swigregister = _bullet.GrahamVector3_swigregister
GrahamVector3_swigregister(GrahamVector3)

class btAngleCompareFunc(_object):
    """Proxy of C++ btAngleCompareFunc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btAngleCompareFunc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btAngleCompareFunc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_anchor"] = _bullet.btAngleCompareFunc_m_anchor_set
    __swig_getmethods__["m_anchor"] = _bullet.btAngleCompareFunc_m_anchor_get
    if _newclass:
        m_anchor = _swig_property(_bullet.btAngleCompareFunc_m_anchor_get, _bullet.btAngleCompareFunc_m_anchor_set)

    def __init__(self, anchor):
        """__init__(btAngleCompareFunc self, btVector3 const & anchor) -> btAngleCompareFunc"""
        this = _bullet.new_btAngleCompareFunc(anchor)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __call__(self, a, b):
        """__call__(btAngleCompareFunc self, GrahamVector3 a, GrahamVector3 b) -> bool"""
        return _bullet.btAngleCompareFunc___call__(self, a, b)

    __swig_destroy__ = _bullet.delete_btAngleCompareFunc
    __del__ = lambda self: None
btAngleCompareFunc_swigregister = _bullet.btAngleCompareFunc_swigregister
btAngleCompareFunc_swigregister(btAngleCompareFunc)


def GrahamScanConvexHull2D(originalPoints, hull, normalAxis):
    """GrahamScanConvexHull2D(btAlignedObjectArray< GrahamVector3 > & originalPoints, btAlignedObjectArray< GrahamVector3 > & hull, btVector3 const & normalAxis)"""
    return _bullet.GrahamScanConvexHull2D(originalPoints, hull, normalAxis)
class btGEN_Link(_object):
    """Proxy of C++ btGEN_Link class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGEN_Link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGEN_Link, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(btGEN_Link self) -> btGEN_Link
        __init__(btGEN_Link self, btGEN_Link next, btGEN_Link prev) -> btGEN_Link
        """
        this = _bullet.new_btGEN_Link(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNext(self):
        """getNext(btGEN_Link self) -> btGEN_Link"""
        return _bullet.btGEN_Link_getNext(self)


    def getPrev(self):
        """getPrev(btGEN_Link self) -> btGEN_Link"""
        return _bullet.btGEN_Link_getPrev(self)


    def isHead(self):
        """isHead(btGEN_Link self) -> bool"""
        return _bullet.btGEN_Link_isHead(self)


    def isTail(self):
        """isTail(btGEN_Link self) -> bool"""
        return _bullet.btGEN_Link_isTail(self)


    def insertBefore(self, link):
        """insertBefore(btGEN_Link self, btGEN_Link link)"""
        return _bullet.btGEN_Link_insertBefore(self, link)


    def insertAfter(self, link):
        """insertAfter(btGEN_Link self, btGEN_Link link)"""
        return _bullet.btGEN_Link_insertAfter(self, link)


    def remove(self):
        """remove(btGEN_Link self)"""
        return _bullet.btGEN_Link_remove(self)

    __swig_destroy__ = _bullet.delete_btGEN_Link
    __del__ = lambda self: None
btGEN_Link_swigregister = _bullet.btGEN_Link_swigregister
btGEN_Link_swigregister(btGEN_Link)

class btGEN_List(_object):
    """Proxy of C++ btGEN_List class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btGEN_List, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btGEN_List, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(btGEN_List self) -> btGEN_List"""
        this = _bullet.new_btGEN_List()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHead(self):
        """getHead(btGEN_List self) -> btGEN_Link"""
        return _bullet.btGEN_List_getHead(self)


    def getTail(self):
        """getTail(btGEN_List self) -> btGEN_Link"""
        return _bullet.btGEN_List_getTail(self)


    def addHead(self, link):
        """addHead(btGEN_List self, btGEN_Link link)"""
        return _bullet.btGEN_List_addHead(self, link)


    def addTail(self, link):
        """addTail(btGEN_List self, btGEN_Link link)"""
        return _bullet.btGEN_List_addTail(self, link)

    __swig_destroy__ = _bullet.delete_btGEN_List
    __del__ = lambda self: None
btGEN_List_swigregister = _bullet.btGEN_List_swigregister
btGEN_List_swigregister(btGEN_List)

class btPoolAllocator(_object):
    """Proxy of C++ btPoolAllocator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btPoolAllocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btPoolAllocator, name)
    __repr__ = _swig_repr

    def __init__(self, elemSize, maxElements):
        """__init__(btPoolAllocator self, int elemSize, int maxElements) -> btPoolAllocator"""
        this = _bullet.new_btPoolAllocator(elemSize, maxElements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btPoolAllocator
    __del__ = lambda self: None

    def getFreeCount(self):
        """getFreeCount(btPoolAllocator self) -> int"""
        return _bullet.btPoolAllocator_getFreeCount(self)


    def getUsedCount(self):
        """getUsedCount(btPoolAllocator self) -> int"""
        return _bullet.btPoolAllocator_getUsedCount(self)


    def getMaxCount(self):
        """getMaxCount(btPoolAllocator self) -> int"""
        return _bullet.btPoolAllocator_getMaxCount(self)


    def allocate(self, size):
        """allocate(btPoolAllocator self, int size) -> void *"""
        return _bullet.btPoolAllocator_allocate(self, size)


    def validPtr(self, ptr):
        """validPtr(btPoolAllocator self, void * ptr) -> bool"""
        return _bullet.btPoolAllocator_validPtr(self, ptr)


    def freeMemory(self, ptr):
        """freeMemory(btPoolAllocator self, void * ptr)"""
        return _bullet.btPoolAllocator_freeMemory(self, ptr)


    def getElementSize(self):
        """getElementSize(btPoolAllocator self) -> int"""
        return _bullet.btPoolAllocator_getElementSize(self)


    def getPoolAddress(self, *args):
        """
        getPoolAddress(btPoolAllocator self) -> unsigned char
        getPoolAddress(btPoolAllocator self) -> unsigned char const *
        """
        return _bullet.btPoolAllocator_getPoolAddress(self, *args)

btPoolAllocator_swigregister = _bullet.btPoolAllocator_swigregister
btPoolAllocator_swigregister(btPoolAllocator)


def GEN_srand(seed):
    """GEN_srand(unsigned int seed)"""
    return _bullet.GEN_srand(seed)

def GEN_rand():
    """GEN_rand() -> unsigned int"""
    return _bullet.GEN_rand()
class btBlock(_object):
    """Proxy of C++ btBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btBlock, name)
    __repr__ = _swig_repr
    __swig_setmethods__["previous"] = _bullet.btBlock_previous_set
    __swig_getmethods__["previous"] = _bullet.btBlock_previous_get
    if _newclass:
        previous = _swig_property(_bullet.btBlock_previous_get, _bullet.btBlock_previous_set)
    __swig_setmethods__["address"] = _bullet.btBlock_address_set
    __swig_getmethods__["address"] = _bullet.btBlock_address_get
    if _newclass:
        address = _swig_property(_bullet.btBlock_address_get, _bullet.btBlock_address_set)

    def __init__(self):
        """__init__(btBlock self) -> btBlock"""
        this = _bullet.new_btBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btBlock
    __del__ = lambda self: None
btBlock_swigregister = _bullet.btBlock_swigregister
btBlock_swigregister(btBlock)

class btStackAlloc(_object):
    """Proxy of C++ btStackAlloc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, btStackAlloc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, btStackAlloc, name)
    __repr__ = _swig_repr

    def __init__(self, size):
        """__init__(btStackAlloc self, unsigned int size) -> btStackAlloc"""
        this = _bullet.new_btStackAlloc(size)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _bullet.delete_btStackAlloc
    __del__ = lambda self: None

    def create(self, size):
        """create(btStackAlloc self, unsigned int size)"""
        return _bullet.btStackAlloc_create(self, size)


    def destroy(self):
        """destroy(btStackAlloc self)"""
        return _bullet.btStackAlloc_destroy(self)


    def getAvailableMemory(self):
        """getAvailableMemory(btStackAlloc self) -> int"""
        return _bullet.btStackAlloc_getAvailableMemory(self)


    def allocate(self, size):
        """allocate(btStackAlloc self, unsigned int size) -> unsigned char *"""
        return _bullet.btStackAlloc_allocate(self, size)


    def beginBlock(self):
        """beginBlock(btStackAlloc self) -> btBlock"""
        return _bullet.btStackAlloc_beginBlock(self)


    def endBlock(self, block):
        """endBlock(btStackAlloc self, btBlock block)"""
        return _bullet.btStackAlloc_endBlock(self, block)

btStackAlloc_swigregister = _bullet.btStackAlloc_swigregister
btStackAlloc_swigregister(btStackAlloc)

# This file is compatible with both classic and new-style classes.


