/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGTCL
#define SWIGTCL
#endif


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
  Tcl_HashTable       hashtable;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#if TCL_MAJOR_VERSION >= 8 && TCL_MINOR_VERSION >= 5
#define SWIG_TCL_HASHTABLE_INIT {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#else
#define SWIG_TCL_HASHTABLE_INIT {0}
#endif

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int SWIGUNUSEDPARM(flags)) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,"NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, TCL_GLOBAL_ONLY);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliaries
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if (!si) return;
  if (si->destroy && SWIG_Disown(si->thisvalue)) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  while (1) {
    Tcl_HashEntry* hashentry;
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    hashentry = Tcl_FindHashEntry(&(cls->hashtable), method);
    if (hashentry) {
        ClientData cd = Tcl_GetHashValue(hashentry);
        swig_wrapper method_wrapper = (swig_wrapper)cd;
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (method_wrapper)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if (thisvalue && (type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_float swig_types[1]
#define SWIGTYPE_p_int16_t swig_types[2]
#define SWIGTYPE_p_int32_t swig_types[3]
#define SWIGTYPE_p_int64_t swig_types[4]
#define SWIGTYPE_p_int8_t swig_types[5]
#define SWIGTYPE_p_intptr_t swig_types[6]
#define SWIGTYPE_p_p_char swig_types[7]
#define SWIGTYPE_p_p_void swig_types[8]
#define SWIGTYPE_p_uint16_t swig_types[9]
#define SWIGTYPE_p_uint32_t swig_types[10]
#define SWIGTYPE_p_uint64_t swig_types[11]
#define SWIGTYPE_p_uint8_t swig_types[12]
#define SWIGTYPE_p_void swig_types[13]
static swig_type_info *swig_types[15];
static swig_module_info swig_module = {swig_types, 14, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Gl_Init
#define SWIG_name    "gl"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x030011 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



    #include "GraphicsPlatform.h"


GLfloat *newfv4(GLfloat a, GLfloat b, GLfloat c, GLfloat d)
{
  GLfloat *f = (GLfloat*) malloc(4 * sizeof(GLfloat));
  f[0] = a;
  f[1] = b;
  f[2] = c;
  f[3] = d;
  return f;
}


#include <float.h>


#include <math.h>


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined __cplusplus && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 */
namespace std { }
template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_double SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, double *val)
{
  double v;
  if (Tcl_GetDoubleFromObj(0, obj, &v) == TCL_OK) {
    if (val) *val = v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_float SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


void delfv(void *m)
{
    free(m);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}




#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int _wrap_newfv4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLfloat arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; GLfloat *result = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:newfv4 a b c d ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "newfv4" "', argument " "1"" of type '" "GLfloat""'"); }  
  arg1 = static_cast< GLfloat >(val1); ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "newfv4" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "newfv4" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "newfv4" "', argument " "4"" of type '" "GLfloat""'"); }  
  arg4 = static_cast< GLfloat >(val4); result = (GLfloat *)newfv4(arg1,arg2,arg3,arg4);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0)); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_delfv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  void *arg1 = (void *) 0 ; int res1 ; if (SWIG_GetArgs(interp, objc, objv,"o:delfv m ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1],SWIG_as_voidptrptr(&arg1), 0, 0); if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delfv" "', argument " "1"" of type '" "void *""'");  }  delfv(arg1);
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glActiveTexture(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glActiveTexture texture ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glActiveTexture" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glActiveTexture" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glActiveTexture(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glAttachShader(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glAttachShader program shader ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glAttachShader" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glAttachShader" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glAttachShader" "', argument " "2"" of type '" "GLuint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glAttachShader" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glAttachShader(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glBindAttribLocation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLuint arg2 ; GLchar *arg3 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; int res3 ;
  char *buf3 = 0 ; int alloc3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glBindAttribLocation program index name ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBindAttribLocation" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindAttribLocation" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBindAttribLocation" "', argument " "2"" of type '" "GLuint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindAttribLocation" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glBindAttribLocation" "', argument " "3"" of type '" "GLchar const *""'"); }
   arg3 = reinterpret_cast< GLchar * >(buf3); glBindAttribLocation(arg1,arg2,(char const *)arg3);
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3; return TCL_OK; fail: if (alloc3 == SWIG_NEWOBJ) delete[] buf3; return TCL_ERROR; }
SWIGINTERN int _wrap_glBindBuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glBindBuffer target buffer ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBindBuffer" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindBuffer" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBindBuffer" "', argument " "2"" of type '" "GLuint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindBuffer" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glBindBuffer(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glBindFramebuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glBindFramebuffer target framebuffer ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBindFramebuffer" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindFramebuffer" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBindFramebuffer" "', argument " "2"" of type '" "GLuint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindFramebuffer" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glBindFramebuffer(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glBindRenderbuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glBindRenderbuffer target renderbuffer ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBindRenderbuffer" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindRenderbuffer" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBindRenderbuffer" "', argument " "2"" of type '" "GLuint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindRenderbuffer" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glBindRenderbuffer(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glBindTexture(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glBindTexture target texture ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBindTexture" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindTexture" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBindTexture" "', argument " "2"" of type '" "GLuint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBindTexture" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glBindTexture(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glBlendColor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLfloat arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glBlendColor red green blue alpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glBlendColor" "', argument " "1"" of type '" "GLfloat""'"); }  
  arg1 = static_cast< GLfloat >(val1); ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glBlendColor" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glBlendColor" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "glBlendColor" "', argument " "4"" of type '" "GLfloat""'"); }  
  arg4 = static_cast< GLfloat >(val4); glBlendColor(arg1,arg2,arg3,arg4); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glBlendEquation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glBlendEquation mode ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBlendEquation" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendEquation" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glBlendEquation(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glBlendEquationSeparate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glBlendEquationSeparate modeRGB modeAlpha ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBlendEquationSeparate" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendEquationSeparate" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBlendEquationSeparate" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendEquationSeparate" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  glBlendEquationSeparate(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glBlendFunc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glBlendFunc sfactor dfactor ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBlendFunc" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendFunc" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBlendFunc" "', argument " "2"" of type '" "GLenum""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendFunc" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  glBlendFunc(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glBlendFuncSeparate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLenum arg1 ;
  GLenum arg2 ; GLenum arg3 ; GLenum arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glBlendFuncSeparate srcRGB dstRGB srcAlpha dstAlpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBlendFuncSeparate" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendFuncSeparate" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBlendFuncSeparate" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendFuncSeparate" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glBlendFuncSeparate" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendFuncSeparate" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glBlendFuncSeparate" "', argument " "4"" of type '" "GLenum""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBlendFuncSeparate" "', argument " "4"" of type '" "GLenum""'"); }
     else { arg4 = *(reinterpret_cast< GLenum * >(argp4)); }  }  glBlendFuncSeparate(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glBufferData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLsizeiptr arg2 ; GLvoid *arg3 = (GLvoid *) 0 ; GLenum arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; int res3 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glBufferData target size data usage ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBufferData" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBufferData" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_intptr_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBufferData" "', argument " "2"" of type '" "GLsizeiptr""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBufferData" "', argument " "2"" of type '" "GLsizeiptr""'"); }
     else { arg2 = *(reinterpret_cast< GLsizeiptr * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3],SWIG_as_voidptrptr(&arg3), 0, 0); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glBufferData" "', argument " "3"" of type '" "GLvoid const *""'");  }
   { res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glBufferData" "', argument " "4"" of type '" "GLenum""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBufferData" "', argument " "4"" of type '" "GLenum""'"); }
     else { arg4 = *(reinterpret_cast< GLenum * >(argp4)); }  }  glBufferData(arg1,arg2,(void const *)arg3,arg4); return TCL_OK;
  fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glBufferSubData(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLintptr arg2 ; GLsizeiptr arg3 ; GLvoid *arg4 = (GLvoid *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 ; int res3 = 0 ; int res4 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glBufferSubData target offset size data ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glBufferSubData" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBufferSubData" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_intptr_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glBufferSubData" "', argument " "2"" of type '" "GLintptr""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBufferSubData" "', argument " "2"" of type '" "GLintptr""'"); }
     else { arg2 = *(reinterpret_cast< GLintptr * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_intptr_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glBufferSubData" "', argument " "3"" of type '" "GLsizeiptr""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glBufferSubData" "', argument " "3"" of type '" "GLsizeiptr""'"); }
     else { arg3 = *(reinterpret_cast< GLsizeiptr * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4],SWIG_as_voidptrptr(&arg4), 0, 0); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glBufferSubData" "', argument " "4"" of type '" "GLvoid const *""'");  }
   glBufferSubData(arg1,arg2,arg3,(void const *)arg4); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glCheckFramebufferStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ; GLenum result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glCheckFramebufferStatus target ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCheckFramebufferStatus" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCheckFramebufferStatus" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  result = glCheckFramebufferStatus(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLenum(static_cast< const GLenum& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glClear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLbitfield arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glClear mask ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glClear" "', argument " "1"" of type '" "GLbitfield""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glClear" "', argument " "1"" of type '" "GLbitfield""'"); }
     else { arg1 = *(reinterpret_cast< GLbitfield * >(argp1)); }  }  glClear(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glClearColor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLfloat arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glClearColor red green blue alpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glClearColor" "', argument " "1"" of type '" "GLfloat""'"); }  
  arg1 = static_cast< GLfloat >(val1); ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glClearColor" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glClearColor" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "glClearColor" "', argument " "4"" of type '" "GLfloat""'"); }  
  arg4 = static_cast< GLfloat >(val4); glClearColor(arg1,arg2,arg3,arg4); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glClearDepthf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLclampf arg1 ; float val1 ; int ecode1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glClearDepthf depth ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glClearDepthf" "', argument " "1"" of type '" "GLclampf""'"); }  
  arg1 = static_cast< GLclampf >(val1); glClearDepthf(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glClearStencil(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glClearStencil s ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glClearStencil" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glClearStencil" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  glClearStencil(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glColorMask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLboolean arg1 ; GLboolean arg2 ; GLboolean arg3 ; GLboolean arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glColorMask red green blue alpha ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glColorMask" "', argument " "1"" of type '" "GLboolean""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glColorMask" "', argument " "1"" of type '" "GLboolean""'"); }
     else { arg1 = *(reinterpret_cast< GLboolean * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glColorMask" "', argument " "2"" of type '" "GLboolean""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glColorMask" "', argument " "2"" of type '" "GLboolean""'"); }
     else { arg2 = *(reinterpret_cast< GLboolean * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glColorMask" "', argument " "3"" of type '" "GLboolean""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glColorMask" "', argument " "3"" of type '" "GLboolean""'"); }
     else { arg3 = *(reinterpret_cast< GLboolean * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glColorMask" "', argument " "4"" of type '" "GLboolean""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glColorMask" "', argument " "4"" of type '" "GLboolean""'"); }
     else { arg4 = *(reinterpret_cast< GLboolean * >(argp4)); }  }  glColorMask(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glCompileShader(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glCompileShader shader ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCompileShader" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompileShader" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glCompileShader(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glCompressedTexImage2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLenum arg3 ; GLsizei arg4 ; GLsizei arg5 ; GLint arg6 ; GLsizei arg7 ;
  GLvoid *arg8 = (GLvoid *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ;
  void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ; void *argp6 ; int res6 = 0 ; void *argp7 ; int res7 = 0 ; int res8 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:glCompressedTexImage2D target level internalformat width height border imageSize data ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCompressedTexImage2D" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glCompressedTexImage2D" "', argument " "2"" of type '" "GLint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glCompressedTexImage2D" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glCompressedTexImage2D" "', argument " "4"" of type '" "GLsizei""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "4"" of type '" "GLsizei""'"); }
     else { arg4 = *(reinterpret_cast< GLsizei * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glCompressedTexImage2D" "', argument " "5"" of type '" "GLsizei""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "5"" of type '" "GLsizei""'"); }
     else { arg5 = *(reinterpret_cast< GLsizei * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glCompressedTexImage2D" "', argument " "6"" of type '" "GLint""'");  }
       if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "6"" of type '" "GLint""'"); }
     else { arg6 = *(reinterpret_cast< GLint * >(argp6)); }  }  {
    res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glCompressedTexImage2D" "', argument " "7"" of type '" "GLsizei""'");  }
       if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexImage2D" "', argument " "7"" of type '" "GLsizei""'"); }
     else { arg7 = *(reinterpret_cast< GLsizei * >(argp7)); }  } 
  res8 = SWIG_ConvertPtr(objv[8],SWIG_as_voidptrptr(&arg8), 0, 0); if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "glCompressedTexImage2D" "', argument " "8"" of type '" "GLvoid const *""'");  }
   glCompressedTexImage2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,(void const *)arg8); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glCompressedTexSubImage2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLint arg3 ; GLint arg4 ; GLsizei arg5 ; GLsizei arg6 ; GLenum arg7 ; GLsizei arg8 ;
  GLvoid *arg9 = (GLvoid *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ;
  void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ; void *argp6 ; int res6 = 0 ; void *argp7 ; int res7 = 0 ;
  void *argp8 ; int res8 = 0 ; int res9 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:glCompressedTexSubImage2D target level xoffset yoffset width height format imageSize data ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCompressedTexSubImage2D" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glCompressedTexSubImage2D" "', argument " "2"" of type '" "GLint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glCompressedTexSubImage2D" "', argument " "3"" of type '" "GLint""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glCompressedTexSubImage2D" "', argument " "4"" of type '" "GLint""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "4"" of type '" "GLint""'"); }
     else { arg4 = *(reinterpret_cast< GLint * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glCompressedTexSubImage2D" "', argument " "5"" of type '" "GLsizei""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "5"" of type '" "GLsizei""'"); }
     else { arg5 = *(reinterpret_cast< GLsizei * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glCompressedTexSubImage2D" "', argument " "6"" of type '" "GLsizei""'");  }
       if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "6"" of type '" "GLsizei""'"); }
     else { arg6 = *(reinterpret_cast< GLsizei * >(argp6)); }  }  {
    res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glCompressedTexSubImage2D" "', argument " "7"" of type '" "GLenum""'");  }
       if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "7"" of type '" "GLenum""'"); }
     else { arg7 = *(reinterpret_cast< GLenum * >(argp7)); }  }  {
    res8 = SWIG_ConvertPtr(objv[8], &argp8, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "glCompressedTexSubImage2D" "', argument " "8"" of type '" "GLsizei""'");  }
       if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCompressedTexSubImage2D" "', argument " "8"" of type '" "GLsizei""'"); }
     else { arg8 = *(reinterpret_cast< GLsizei * >(argp8)); }  } 
  res9 = SWIG_ConvertPtr(objv[9],SWIG_as_voidptrptr(&arg9), 0, 0); if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "glCompressedTexSubImage2D" "', argument " "9"" of type '" "GLvoid const *""'");  }
   glCompressedTexSubImage2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glCopyTexImage2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLenum arg3 ; GLint arg4 ; GLint arg5 ; GLsizei arg6 ; GLsizei arg7 ; GLint arg8 ; void *argp1 ;
  int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ; void *argp5 ;
  int res5 = 0 ; void *argp6 ; int res6 = 0 ; void *argp7 ; int res7 = 0 ; void *argp8 ; int res8 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:glCopyTexImage2D target level internalformat x y width height border ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCopyTexImage2D" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glCopyTexImage2D" "', argument " "2"" of type '" "GLint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glCopyTexImage2D" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glCopyTexImage2D" "', argument " "4"" of type '" "GLint""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "4"" of type '" "GLint""'"); }
     else { arg4 = *(reinterpret_cast< GLint * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glCopyTexImage2D" "', argument " "5"" of type '" "GLint""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "5"" of type '" "GLint""'"); }
     else { arg5 = *(reinterpret_cast< GLint * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glCopyTexImage2D" "', argument " "6"" of type '" "GLsizei""'");  }
       if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "6"" of type '" "GLsizei""'"); }
     else { arg6 = *(reinterpret_cast< GLsizei * >(argp6)); }  }  {
    res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glCopyTexImage2D" "', argument " "7"" of type '" "GLsizei""'");  }
       if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "7"" of type '" "GLsizei""'"); }
     else { arg7 = *(reinterpret_cast< GLsizei * >(argp7)); }  }  {
    res8 = SWIG_ConvertPtr(objv[8], &argp8, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "glCopyTexImage2D" "', argument " "8"" of type '" "GLint""'");  }
       if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexImage2D" "', argument " "8"" of type '" "GLint""'"); }
     else { arg8 = *(reinterpret_cast< GLint * >(argp8)); }  }  glCopyTexImage2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glCopyTexSubImage2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLenum arg1 ;
  GLint arg2 ; GLint arg3 ; GLint arg4 ; GLint arg5 ; GLint arg6 ; GLsizei arg7 ; GLsizei arg8 ; void *argp1 ; int res1 = 0 ;
  void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ;
  void *argp6 ; int res6 = 0 ; void *argp7 ; int res7 = 0 ; void *argp8 ; int res8 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooooooo:glCopyTexSubImage2D target level xoffset yoffset x y width height ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCopyTexSubImage2D" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glCopyTexSubImage2D" "', argument " "2"" of type '" "GLint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glCopyTexSubImage2D" "', argument " "3"" of type '" "GLint""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glCopyTexSubImage2D" "', argument " "4"" of type '" "GLint""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "4"" of type '" "GLint""'"); }
     else { arg4 = *(reinterpret_cast< GLint * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glCopyTexSubImage2D" "', argument " "5"" of type '" "GLint""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "5"" of type '" "GLint""'"); }
     else { arg5 = *(reinterpret_cast< GLint * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glCopyTexSubImage2D" "', argument " "6"" of type '" "GLint""'");  }
       if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "6"" of type '" "GLint""'"); }
     else { arg6 = *(reinterpret_cast< GLint * >(argp6)); }  }  {
    res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glCopyTexSubImage2D" "', argument " "7"" of type '" "GLsizei""'");  }
       if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "7"" of type '" "GLsizei""'"); }
     else { arg7 = *(reinterpret_cast< GLsizei * >(argp7)); }  }  {
    res8 = SWIG_ConvertPtr(objv[8], &argp8, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "glCopyTexSubImage2D" "', argument " "8"" of type '" "GLsizei""'");  }
       if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCopyTexSubImage2D" "', argument " "8"" of type '" "GLsizei""'"); }
     else { arg8 = *(reinterpret_cast< GLsizei * >(argp8)); }  }  glCopyTexSubImage2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glCreateProgram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint result; if (SWIG_GetArgs(interp, objc, objv,":glCreateProgram ") == TCL_ERROR) SWIG_fail; result = glCreateProgram();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLuint(static_cast< const GLuint& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glCreateShader(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ; GLuint result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glCreateShader type ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCreateShader" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCreateShader" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  result = glCreateShader(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLuint(static_cast< const GLuint& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glCullFace(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glCullFace mode ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glCullFace" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glCullFace" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glCullFace(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glDeleteBuffers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glDeleteBuffers n buffers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDeleteBuffers" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDeleteBuffers" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDeleteBuffers" "', argument " "2"" of type '" "GLuint const *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); glDeleteBuffers(arg1,(uint32_t const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glDeleteFramebuffers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glDeleteFramebuffers n framebuffers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDeleteFramebuffers" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDeleteFramebuffers" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDeleteFramebuffers" "', argument " "2"" of type '" "GLuint const *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); glDeleteFramebuffers(arg1,(uint32_t const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glDeleteProgram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glDeleteProgram program ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDeleteProgram" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDeleteProgram" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glDeleteProgram(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glDeleteRenderbuffers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glDeleteRenderbuffers n renderbuffers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDeleteRenderbuffers" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDeleteRenderbuffers" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDeleteRenderbuffers" "', argument " "2"" of type '" "GLuint const *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); glDeleteRenderbuffers(arg1,(uint32_t const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glDeleteShader(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glDeleteShader shader ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDeleteShader" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDeleteShader" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glDeleteShader(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glDeleteTextures(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glDeleteTextures n textures ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDeleteTextures" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDeleteTextures" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDeleteTextures" "', argument " "2"" of type '" "GLuint const *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); glDeleteTextures(arg1,(uint32_t const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glDepthFunc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glDepthFunc func ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDepthFunc" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDepthFunc" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glDepthFunc(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glDepthMask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLboolean arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glDepthMask flag ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDepthMask" "', argument " "1"" of type '" "GLboolean""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDepthMask" "', argument " "1"" of type '" "GLboolean""'"); }
     else { arg1 = *(reinterpret_cast< GLboolean * >(argp1)); }  }  glDepthMask(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glDepthRangef(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLclampf arg1 ; GLclampf arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glDepthRangef zNear zFar ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glDepthRangef" "', argument " "1"" of type '" "GLclampf""'"); }  
  arg1 = static_cast< GLclampf >(val1); ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glDepthRangef" "', argument " "2"" of type '" "GLclampf""'"); }  
  arg2 = static_cast< GLclampf >(val2); glDepthRangef(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glDetachShader(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glDetachShader program shader ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDetachShader" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDetachShader" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDetachShader" "', argument " "2"" of type '" "GLuint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDetachShader" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glDetachShader(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glDisable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glDisable cap ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDisable" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDisable" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glDisable(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glDisableVertexAttribArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glDisableVertexAttribArray index ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDisableVertexAttribArray" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDisableVertexAttribArray" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glDisableVertexAttribArray(arg1); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glDrawArrays(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLsizei arg3 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glDrawArrays mode first count ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDrawArrays" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDrawArrays" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDrawArrays" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDrawArrays" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glDrawArrays" "', argument " "3"" of type '" "GLsizei""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDrawArrays" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  }  glDrawArrays(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glDrawElements(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLsizei arg2 ; GLenum arg3 ; GLvoid *arg4 = (GLvoid *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 ; int res3 = 0 ; int res4 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glDrawElements mode count type indices ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glDrawElements" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDrawElements" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glDrawElements" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDrawElements" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glDrawElements" "', argument " "3"" of type '" "GLenum""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glDrawElements" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4],SWIG_as_voidptrptr(&arg4), 0, 0); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glDrawElements" "', argument " "4"" of type '" "GLvoid const *""'");  }
   glDrawElements(arg1,arg2,arg3,(void const *)arg4); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glEnable(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glEnable cap ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glEnable" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glEnable" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glEnable(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glEnableVertexAttribArray(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glEnableVertexAttribArray index ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glEnableVertexAttribArray" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glEnableVertexAttribArray" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glEnableVertexAttribArray(arg1); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glFinish(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":glFinish ") == TCL_ERROR) SWIG_fail; glFinish(); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glFlush(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":glFlush ") == TCL_ERROR) SWIG_fail; glFlush(); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glFramebufferRenderbuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLenum arg3 ; GLuint arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glFramebufferRenderbuffer target attachment renderbuffertarget renderbuffer ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glFramebufferRenderbuffer" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferRenderbuffer" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glFramebufferRenderbuffer" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferRenderbuffer" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glFramebufferRenderbuffer" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferRenderbuffer" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glFramebufferRenderbuffer" "', argument " "4"" of type '" "GLuint""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferRenderbuffer" "', argument " "4"" of type '" "GLuint""'"); }
     else { arg4 = *(reinterpret_cast< GLuint * >(argp4)); }  }  glFramebufferRenderbuffer(arg1,arg2,arg3,arg4); return TCL_OK;
  fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glFramebufferTexture2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLenum arg3 ; GLuint arg4 ; GLint arg5 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:glFramebufferTexture2D target attachment textarget texture level ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glFramebufferTexture2D" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferTexture2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glFramebufferTexture2D" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferTexture2D" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glFramebufferTexture2D" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferTexture2D" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glFramebufferTexture2D" "', argument " "4"" of type '" "GLuint""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferTexture2D" "', argument " "4"" of type '" "GLuint""'"); }
     else { arg4 = *(reinterpret_cast< GLuint * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glFramebufferTexture2D" "', argument " "5"" of type '" "GLint""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFramebufferTexture2D" "', argument " "5"" of type '" "GLint""'"); }
     else { arg5 = *(reinterpret_cast< GLint * >(argp5)); }  }  glFramebufferTexture2D(arg1,arg2,arg3,arg4,arg5); return TCL_OK;
  fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glFrontFace(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glFrontFace mode ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glFrontFace" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glFrontFace" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glFrontFace(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGenBuffers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGenBuffers n buffers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGenBuffers" "', argument " "1"" of type '" "GLsizei""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGenBuffers" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGenBuffers" "', argument " "2"" of type '" "GLuint *""'");  } 
  arg2 = reinterpret_cast< GLuint * >(argp2); glGenBuffers(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGenerateMipmap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glGenerateMipmap target ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGenerateMipmap" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGenerateMipmap" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  glGenerateMipmap(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGenFramebuffers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGenFramebuffers n framebuffers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGenFramebuffers" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGenFramebuffers" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGenFramebuffers" "', argument " "2"" of type '" "GLuint *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); glGenFramebuffers(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGenRenderbuffers(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGenRenderbuffers n renderbuffers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGenRenderbuffers" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGenRenderbuffers" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGenRenderbuffers" "', argument " "2"" of type '" "GLuint *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); glGenRenderbuffers(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGenTextures(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGenTextures n textures ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGenTextures" "', argument " "1"" of type '" "GLsizei""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGenTextures" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGenTextures" "', argument " "2"" of type '" "GLuint *""'");  } 
  arg2 = reinterpret_cast< GLuint * >(argp2); glGenTextures(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetActiveAttrib(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLuint arg2 ; GLsizei arg3 ; GLsizei *arg4 = (GLsizei *) 0 ; GLint *arg5 = (GLint *) 0 ;
  GLenum *arg6 = (GLenum *) 0 ; GLchar *arg7 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ; void *argp6 = 0 ;
  int res6 = 0 ; int res7 ; char *buf7 = 0 ; int alloc7 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:glGetActiveAttrib program index bufsize length size type name ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetActiveAttrib" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetActiveAttrib" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetActiveAttrib" "', argument " "2"" of type '" "GLuint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetActiveAttrib" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetActiveAttrib" "', argument " "3"" of type '" "GLsizei""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetActiveAttrib" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetActiveAttrib" "', argument " "4"" of type '" "GLsizei *""'");  }
   arg4 = reinterpret_cast< GLsizei * >(argp4); res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int32_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glGetActiveAttrib" "', argument " "5"" of type '" "GLint *""'");  } 
  arg5 = reinterpret_cast< GLint * >(argp5); res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glGetActiveAttrib" "', argument " "6"" of type '" "GLenum *""'");  }
   arg6 = reinterpret_cast< GLenum * >(argp6); res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glGetActiveAttrib" "', argument " "7"" of type '" "GLchar *""'"); } 
  arg7 = reinterpret_cast< GLchar * >(buf7); glGetActiveAttrib(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7; return TCL_OK; fail: if (alloc7 == SWIG_NEWOBJ) delete[] buf7; return TCL_ERROR; }
SWIGINTERN int _wrap_glGetActiveUniform(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLuint arg2 ; GLsizei arg3 ; GLsizei *arg4 = (GLsizei *) 0 ; GLint *arg5 = (GLint *) 0 ;
  GLenum *arg6 = (GLenum *) 0 ; GLchar *arg7 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ; void *argp5 = 0 ; int res5 = 0 ; void *argp6 = 0 ;
  int res6 = 0 ; int res7 ; char *buf7 = 0 ; int alloc7 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:glGetActiveUniform program index bufsize length size type name ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetActiveUniform" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetActiveUniform" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetActiveUniform" "', argument " "2"" of type '" "GLuint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetActiveUniform" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetActiveUniform" "', argument " "3"" of type '" "GLsizei""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetActiveUniform" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetActiveUniform" "', argument " "4"" of type '" "GLsizei *""'");  }
   arg4 = reinterpret_cast< GLsizei * >(argp4); res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int32_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glGetActiveUniform" "', argument " "5"" of type '" "GLint *""'");  }
   arg5 = reinterpret_cast< GLint * >(argp5); res6 = SWIG_ConvertPtr(objv[6], &argp6,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glGetActiveUniform" "', argument " "6"" of type '" "GLenum *""'");  }
   arg6 = reinterpret_cast< GLenum * >(argp6); res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glGetActiveUniform" "', argument " "7"" of type '" "GLchar *""'"); }
   arg7 = reinterpret_cast< GLchar * >(buf7); glGetActiveUniform(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7; return TCL_OK; fail: if (alloc7 == SWIG_NEWOBJ) delete[] buf7; return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetAttachedShaders(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLsizei arg2 ; GLsizei *arg3 = (GLsizei *) 0 ; GLuint *arg4 = (GLuint *) 0 ; void *argp1 ; int res1 = 0 ;
  void *argp2 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glGetAttachedShaders program maxcount count shaders ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetAttachedShaders" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetAttachedShaders" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetAttachedShaders" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetAttachedShaders" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetAttachedShaders" "', argument " "3"" of type '" "GLsizei *""'");  }
   arg3 = reinterpret_cast< GLsizei * >(argp3); res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_uint32_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetAttachedShaders" "', argument " "4"" of type '" "GLuint *""'");  }
   arg4 = reinterpret_cast< GLuint * >(argp4); glGetAttachedShaders(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetAttribLocation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLuint arg1 ;
  GLchar *arg2 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ; int result;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGetAttribLocation program name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetAttribLocation" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetAttribLocation" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetAttribLocation" "', argument " "2"" of type '" "GLchar const *""'"); }
   arg2 = reinterpret_cast< GLchar * >(buf2); result = (int)glGetAttribLocation(arg1,(char const *)arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result))); if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return TCL_OK;
  fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return TCL_ERROR; }
SWIGINTERN int _wrap_glGetBooleanv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLboolean *arg2 = (GLboolean *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGetBooleanv pname params ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetBooleanv" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetBooleanv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint8_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetBooleanv" "', argument " "2"" of type '" "GLboolean *""'");  } 
  arg2 = reinterpret_cast< GLboolean * >(argp2); glGetBooleanv(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetBufferParameteriv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetBufferParameteriv target pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetBufferParameteriv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetBufferParameteriv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetBufferParameteriv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetBufferParameteriv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetBufferParameteriv" "', argument " "3"" of type '" "GLint *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glGetBufferParameteriv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetError(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum result; if (SWIG_GetArgs(interp, objc, objv,":glGetError ") == TCL_ERROR) SWIG_fail; result = glGetError();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLenum(static_cast< const GLenum& >(result))), SWIGTYPE_p_uint32_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetFloatv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLfloat *arg2 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGetFloatv pname params ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetFloatv" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetFloatv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetFloatv" "', argument " "2"" of type '" "GLfloat *""'");  } 
  arg2 = reinterpret_cast< GLfloat * >(argp2); glGetFloatv(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetFramebufferAttachmentParameteriv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLenum arg3 ; GLint *arg4 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glGetFramebufferAttachmentParameteriv target attachment pname params ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetFramebufferAttachmentParameteriv" "', argument " "4"" of type '" "GLint *""'");  }
   arg4 = reinterpret_cast< GLint * >(argp4); glGetFramebufferAttachmentParameteriv(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glGetIntegerv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint *arg2 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGetIntegerv pname params ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetIntegerv" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetIntegerv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetIntegerv" "', argument " "2"" of type '" "GLint *""'");  } 
  arg2 = reinterpret_cast< GLint * >(argp2); glGetIntegerv(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetProgramiv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetProgramiv program pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetProgramiv" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetProgramiv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetProgramiv" "', argument " "2"" of type '" "GLenum""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetProgramiv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetProgramiv" "', argument " "3"" of type '" "GLint *""'");  } 
  arg3 = reinterpret_cast< GLint * >(argp3); glGetProgramiv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetProgramInfoLog(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLuint arg1 ;
  GLsizei arg2 ; GLsizei *arg3 = (GLsizei *) 0 ; GLchar *arg4 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int res4 ; char *buf4 = 0 ; int alloc4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glGetProgramInfoLog program bufsize length infolog ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetProgramInfoLog" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetProgramInfoLog" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetProgramInfoLog" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetProgramInfoLog" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetProgramInfoLog" "', argument " "3"" of type '" "GLsizei *""'");  }
   arg3 = reinterpret_cast< GLsizei * >(argp3); res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetProgramInfoLog" "', argument " "4"" of type '" "GLchar *""'"); }
   arg4 = reinterpret_cast< GLchar * >(buf4); glGetProgramInfoLog(arg1,arg2,arg3,arg4);
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4; return TCL_OK; fail: if (alloc4 == SWIG_NEWOBJ) delete[] buf4; return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetRenderbufferParameteriv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetRenderbufferParameteriv target pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetRenderbufferParameteriv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetRenderbufferParameteriv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetRenderbufferParameteriv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetRenderbufferParameteriv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetRenderbufferParameteriv" "', argument " "3"" of type '" "GLint *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glGetRenderbufferParameteriv(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glGetShaderiv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetShaderiv shader pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetShaderiv" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderiv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetShaderiv" "', argument " "2"" of type '" "GLenum""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderiv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetShaderiv" "', argument " "3"" of type '" "GLint *""'");  } 
  arg3 = reinterpret_cast< GLint * >(argp3); glGetShaderiv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetShaderInfoLog(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLsizei arg2 ; GLsizei *arg3 = (GLsizei *) 0 ; GLchar *arg4 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ;
  void *argp2 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int res4 ; char *buf4 = 0 ; int alloc4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glGetShaderInfoLog shader bufsize length infolog ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetShaderInfoLog" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderInfoLog" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetShaderInfoLog" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderInfoLog" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetShaderInfoLog" "', argument " "3"" of type '" "GLsizei *""'");  }
   arg3 = reinterpret_cast< GLsizei * >(argp3); res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetShaderInfoLog" "', argument " "4"" of type '" "GLchar *""'"); }
   arg4 = reinterpret_cast< GLchar * >(buf4); glGetShaderInfoLog(arg1,arg2,arg3,arg4); if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK; fail: if (alloc4 == SWIG_NEWOBJ) delete[] buf4; return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetShaderPrecisionFormat(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; GLint *arg4 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glGetShaderPrecisionFormat shadertype precisiontype range precision ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetShaderPrecisionFormat" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderPrecisionFormat" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetShaderPrecisionFormat" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderPrecisionFormat" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetShaderPrecisionFormat" "', argument " "3"" of type '" "GLint *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int32_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetShaderPrecisionFormat" "', argument " "4"" of type '" "GLint *""'");  }
   arg4 = reinterpret_cast< GLint * >(argp4); glGetShaderPrecisionFormat(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glGetShaderSource(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLsizei arg2 ; GLsizei *arg3 = (GLsizei *) 0 ; GLchar *arg4 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ;
  void *argp2 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; int res4 ; char *buf4 = 0 ; int alloc4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glGetShaderSource shader bufsize length source ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetShaderSource" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderSource" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetShaderSource" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetShaderSource" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetShaderSource" "', argument " "3"" of type '" "GLsizei *""'");  }
   arg3 = reinterpret_cast< GLsizei * >(argp3); res4 = SWIG_AsCharPtrAndSize(objv[4], &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glGetShaderSource" "', argument " "4"" of type '" "GLchar *""'"); } 
  arg4 = reinterpret_cast< GLchar * >(buf4); glGetShaderSource(arg1,arg2,arg3,arg4); if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return TCL_OK; fail: if (alloc4 == SWIG_NEWOBJ) delete[] buf4; return TCL_ERROR; }
SWIGINTERN int _wrap_glGetString(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ; GLubyte *result = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glGetString name ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetString" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetString" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  result = (GLubyte *)glGetString(arg1);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_uint8_t,0)); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetTexParameterfv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLenum arg1 ;
  GLenum arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetTexParameterfv target pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetTexParameterfv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetTexParameterfv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetTexParameterfv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetTexParameterfv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetTexParameterfv" "', argument " "3"" of type '" "GLfloat *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glGetTexParameterfv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetTexParameteriv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLenum arg1 ;
  GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetTexParameteriv target pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetTexParameteriv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetTexParameteriv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetTexParameteriv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetTexParameteriv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetTexParameteriv" "', argument " "3"" of type '" "GLint *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glGetTexParameteriv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetUniformfv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLint arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetUniformfv program location params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetUniformfv" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetUniformfv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetUniformfv" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetUniformfv" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetUniformfv" "', argument " "3"" of type '" "GLfloat *""'");  } 
  arg3 = reinterpret_cast< GLfloat * >(argp3); glGetUniformfv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glGetUniformiv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLint arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetUniformiv program location params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetUniformiv" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetUniformiv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetUniformiv" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetUniformiv" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetUniformiv" "', argument " "3"" of type '" "GLint *""'");  } 
  arg3 = reinterpret_cast< GLint * >(argp3); glGetUniformiv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetUniformLocation(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLchar *arg2 = (GLchar *) 0 ; void *argp1 ; int res1 = 0 ; int res2 ; char *buf2 = 0 ; int alloc2 = 0 ;
  int result;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glGetUniformLocation program name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetUniformLocation" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetUniformLocation" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetUniformLocation" "', argument " "2"" of type '" "GLchar const *""'"); }
   arg2 = reinterpret_cast< GLchar * >(buf2); result = (int)glGetUniformLocation(arg1,(char const *)arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result))); if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return TCL_OK;
  fail: if (alloc2 == SWIG_NEWOBJ) delete[] buf2; return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetVertexAttribfv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLuint arg1 ;
  GLenum arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetVertexAttribfv index pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetVertexAttribfv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetVertexAttribfv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetVertexAttribfv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetVertexAttribfv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetVertexAttribfv" "', argument " "3"" of type '" "GLfloat *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glGetVertexAttribfv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetVertexAttribiv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLuint arg1 ;
  GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 = 0 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetVertexAttribiv index pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetVertexAttribiv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetVertexAttribiv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetVertexAttribiv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetVertexAttribiv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetVertexAttribiv" "', argument " "3"" of type '" "GLint *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glGetVertexAttribiv(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glGetVertexAttribPointerv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLenum arg2 ; GLvoid **arg3 = (GLvoid **) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glGetVertexAttribPointerv index pname pointer ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glGetVertexAttribPointerv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetVertexAttribPointerv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glGetVertexAttribPointerv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glGetVertexAttribPointerv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_p_void, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glGetVertexAttribPointerv" "', argument " "3"" of type '" "GLvoid **""'");  }
   arg3 = reinterpret_cast< GLvoid ** >(argp3); glGetVertexAttribPointerv(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glHint(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glHint target mode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glHint" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glHint" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glHint" "', argument " "2"" of type '" "GLenum""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glHint" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  glHint(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsBuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsBuffer buffer ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsBuffer" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsBuffer" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  result = glIsBuffer(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsEnabled(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsEnabled cap ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsEnabled" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsEnabled" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  result = glIsEnabled(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsFramebuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsFramebuffer framebuffer ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsFramebuffer" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsFramebuffer" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  result = glIsFramebuffer(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsProgram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsProgram program ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsProgram" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsProgram" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  result = glIsProgram(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsRenderbuffer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsRenderbuffer renderbuffer ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsRenderbuffer" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsRenderbuffer" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  result = glIsRenderbuffer(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsShader(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsShader shader ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsShader" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsShader" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  result = glIsShader(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glIsTexture(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ; GLboolean result;
  if (SWIG_GetArgs(interp, objc, objv,"o:glIsTexture texture ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glIsTexture" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glIsTexture" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  result = glIsTexture(arg1);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new GLboolean(static_cast< const GLboolean& >(result))), SWIGTYPE_p_uint8_t, SWIG_POINTER_OWN | 0 ));
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glLineWidth(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLfloat arg1 ; float val1 ; int ecode1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glLineWidth width ",(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glLineWidth" "', argument " "1"" of type '" "GLfloat""'"); }  
  arg1 = static_cast< GLfloat >(val1); glLineWidth(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glLinkProgram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glLinkProgram program ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glLinkProgram" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glLinkProgram" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glLinkProgram(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glPixelStorei(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glPixelStorei pname param ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glPixelStorei" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glPixelStorei" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glPixelStorei" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glPixelStorei" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  glPixelStorei(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glPolygonOffset(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLfloat arg1 ; GLfloat arg2 ; float val1 ; int ecode1 = 0 ; float val2 ; int ecode2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glPolygonOffset factor units ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glPolygonOffset" "', argument " "1"" of type '" "GLfloat""'"); }  
  arg1 = static_cast< GLfloat >(val1); ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2); if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glPolygonOffset" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); glPolygonOffset(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glReadPixels(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; GLsizei arg3 ; GLsizei arg4 ; GLenum arg5 ; GLenum arg6 ; GLvoid *arg7 = (GLvoid *) 0 ;
  void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  void *argp5 ; int res5 = 0 ; void *argp6 ; int res6 = 0 ; int res7 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooooo:glReadPixels x y width height format type pixels ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glReadPixels" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glReadPixels" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glReadPixels" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glReadPixels" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glReadPixels" "', argument " "3"" of type '" "GLsizei""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glReadPixels" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glReadPixels" "', argument " "4"" of type '" "GLsizei""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glReadPixels" "', argument " "4"" of type '" "GLsizei""'"); }
     else { arg4 = *(reinterpret_cast< GLsizei * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glReadPixels" "', argument " "5"" of type '" "GLenum""'");  }   
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glReadPixels" "', argument " "5"" of type '" "GLenum""'"); }
     else { arg5 = *(reinterpret_cast< GLenum * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glReadPixels" "', argument " "6"" of type '" "GLenum""'");  }   
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glReadPixels" "', argument " "6"" of type '" "GLenum""'"); }
     else { arg6 = *(reinterpret_cast< GLenum * >(argp6)); }  } 
  res7 = SWIG_ConvertPtr(objv[7],SWIG_as_voidptrptr(&arg7), 0, 0); if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glReadPixels" "', argument " "7"" of type '" "GLvoid *""'");  } 
  glReadPixels(arg1,arg2,arg3,arg4,arg5,arg6,arg7); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glReleaseShaderCompiler(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  if (SWIG_GetArgs(interp, objc, objv,":glReleaseShaderCompiler ") == TCL_ERROR) SWIG_fail; glReleaseShaderCompiler();
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glRenderbufferStorage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLsizei arg3 ; GLsizei arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glRenderbufferStorage target internalformat width height ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glRenderbufferStorage" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glRenderbufferStorage" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glRenderbufferStorage" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glRenderbufferStorage" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glRenderbufferStorage" "', argument " "3"" of type '" "GLsizei""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glRenderbufferStorage" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glRenderbufferStorage" "', argument " "4"" of type '" "GLsizei""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glRenderbufferStorage" "', argument " "4"" of type '" "GLsizei""'"); }
     else { arg4 = *(reinterpret_cast< GLsizei * >(argp4)); }  }  glRenderbufferStorage(arg1,arg2,arg3,arg4); return TCL_OK;
  fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glSampleCoverage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLclampf arg1 ; GLboolean arg2 ; float val1 ; int ecode1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glSampleCoverage value invert ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  ecode1 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[1], &val1); if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "glSampleCoverage" "', argument " "1"" of type '" "GLclampf""'"); }
    arg1 = static_cast< GLclampf >(val1); { res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint8_t,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glSampleCoverage" "', argument " "2"" of type '" "GLboolean""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glSampleCoverage" "', argument " "2"" of type '" "GLboolean""'"); }
     else { arg2 = *(reinterpret_cast< GLboolean * >(argp2)); }  }  glSampleCoverage(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glScissor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; GLsizei arg3 ; GLsizei arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glScissor x y width height ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glScissor" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glScissor" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glScissor" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glScissor" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glScissor" "', argument " "3"" of type '" "GLsizei""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glScissor" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glScissor" "', argument " "4"" of type '" "GLsizei""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glScissor" "', argument " "4"" of type '" "GLsizei""'"); }
     else { arg4 = *(reinterpret_cast< GLsizei * >(argp4)); }  }  glScissor(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glShaderBinary(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLsizei arg1 ; GLuint *arg2 = (GLuint *) 0 ; GLenum arg3 ; GLvoid *arg4 = (GLvoid *) 0 ; GLsizei arg5 ; void *argp1 ;
  int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ; int res4 ; void *argp5 ; int res5 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:glShaderBinary n shaders binaryformat binary length ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glShaderBinary" "', argument " "1"" of type '" "GLsizei""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glShaderBinary" "', argument " "1"" of type '" "GLsizei""'"); }
     else { arg1 = *(reinterpret_cast< GLsizei * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_uint32_t, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glShaderBinary" "', argument " "2"" of type '" "GLuint const *""'");  }
   arg2 = reinterpret_cast< GLuint * >(argp2); { res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glShaderBinary" "', argument " "3"" of type '" "GLenum""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glShaderBinary" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4],SWIG_as_voidptrptr(&arg4), 0, 0); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glShaderBinary" "', argument " "4"" of type '" "GLvoid const *""'");  }
   { res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glShaderBinary" "', argument " "5"" of type '" "GLsizei""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glShaderBinary" "', argument " "5"" of type '" "GLsizei""'"); }
     else { arg5 = *(reinterpret_cast< GLsizei * >(argp5)); }  } 
  glShaderBinary(arg1,(uint32_t const *)arg2,arg3,(void const *)arg4,arg5); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glShaderSource(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLsizei arg2 ; GLchar **arg3 = (GLchar **) 0 ; GLint *arg4 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ;
  void *argp2 ; int res2 = 0 ; void *argp3 = 0 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glShaderSource shader count string length ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glShaderSource" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glShaderSource" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glShaderSource" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glShaderSource" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_p_char, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glShaderSource" "', argument " "3"" of type '" "GLchar const *const *""'");  }
   arg3 = reinterpret_cast< GLchar ** >(argp3); res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int32_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glShaderSource" "', argument " "4"" of type '" "GLint const *""'");  }
   arg4 = reinterpret_cast< GLint * >(argp4); glShaderSource(arg1,arg2,(char const *const *)arg3,(int32_t const *)arg4);
  return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glStencilFunc(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLuint arg3 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glStencilFunc func ref mask ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glStencilFunc" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFunc" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glStencilFunc" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFunc" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glStencilFunc" "', argument " "3"" of type '" "GLuint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFunc" "', argument " "3"" of type '" "GLuint""'"); }
     else { arg3 = *(reinterpret_cast< GLuint * >(argp3)); }  }  glStencilFunc(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glStencilFuncSeparate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLint arg3 ; GLuint arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glStencilFuncSeparate face func ref mask ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glStencilFuncSeparate" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFuncSeparate" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glStencilFuncSeparate" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFuncSeparate" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glStencilFuncSeparate" "', argument " "3"" of type '" "GLint""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFuncSeparate" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glStencilFuncSeparate" "', argument " "4"" of type '" "GLuint""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilFuncSeparate" "', argument " "4"" of type '" "GLuint""'"); }
     else { arg4 = *(reinterpret_cast< GLuint * >(argp4)); }  }  glStencilFuncSeparate(arg1,arg2,arg3,arg4); return TCL_OK;
  fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glStencilMask(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glStencilMask mask ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glStencilMask" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilMask" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glStencilMask(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int
_wrap_glStencilMaskSeparate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLuint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glStencilMaskSeparate face mask ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glStencilMaskSeparate" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilMaskSeparate" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glStencilMaskSeparate" "', argument " "2"" of type '" "GLuint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilMaskSeparate" "', argument " "2"" of type '" "GLuint""'"); }
     else { arg2 = *(reinterpret_cast< GLuint * >(argp2)); }  }  glStencilMaskSeparate(arg1,arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glStencilOp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLenum arg3 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glStencilOp fail zfail zpass ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glStencilOp" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOp" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glStencilOp" "', argument " "2"" of type '" "GLenum""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOp" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glStencilOp" "', argument " "3"" of type '" "GLenum""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOp" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  glStencilOp(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glStencilOpSeparate(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) { GLenum arg1 ;
  GLenum arg2 ; GLenum arg3 ; GLenum arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glStencilOpSeparate face fail zfail zpass ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glStencilOpSeparate" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOpSeparate" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glStencilOpSeparate" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOpSeparate" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glStencilOpSeparate" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOpSeparate" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glStencilOpSeparate" "', argument " "4"" of type '" "GLenum""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glStencilOpSeparate" "', argument " "4"" of type '" "GLenum""'"); }
     else { arg4 = *(reinterpret_cast< GLenum * >(argp4)); }  }  glStencilOpSeparate(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glTexImage2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLint arg3 ; GLsizei arg4 ; GLsizei arg5 ; GLint arg6 ; GLenum arg7 ; GLenum arg8 ;
  GLvoid *arg9 = (GLvoid *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ;
  void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ; void *argp6 ; int res6 = 0 ; void *argp7 ; int res7 = 0 ;
  void *argp8 ; int res8 = 0 ; int res9 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:glTexImage2D target level internalformat width height border format type pixels ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glTexImage2D" "', argument " "1"" of type '" "GLenum""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glTexImage2D" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glTexImage2D" "', argument " "3"" of type '" "GLint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glTexImage2D" "', argument " "4"" of type '" "GLsizei""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "4"" of type '" "GLsizei""'"); }
     else { arg4 = *(reinterpret_cast< GLsizei * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glTexImage2D" "', argument " "5"" of type '" "GLsizei""'");  }   
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "5"" of type '" "GLsizei""'"); }
     else { arg5 = *(reinterpret_cast< GLsizei * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glTexImage2D" "', argument " "6"" of type '" "GLint""'");  }   
    if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "6"" of type '" "GLint""'"); }
     else { arg6 = *(reinterpret_cast< GLint * >(argp6)); }  }  {
    res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glTexImage2D" "', argument " "7"" of type '" "GLenum""'");  }   
    if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "7"" of type '" "GLenum""'"); }
     else { arg7 = *(reinterpret_cast< GLenum * >(argp7)); }  }  {
    res8 = SWIG_ConvertPtr(objv[8], &argp8, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "glTexImage2D" "', argument " "8"" of type '" "GLenum""'");  }   
    if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexImage2D" "', argument " "8"" of type '" "GLenum""'"); }
     else { arg8 = *(reinterpret_cast< GLenum * >(argp8)); }  } 
  res9 = SWIG_ConvertPtr(objv[9],SWIG_as_voidptrptr(&arg9), 0, 0); if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "glTexImage2D" "', argument " "9"" of type '" "GLvoid const *""'");  }
   glTexImage2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glTexParameterf(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLfloat arg3 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; float val3 ;
  int ecode3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glTexParameterf target pname param ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glTexParameterf" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameterf" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glTexParameterf" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameterf" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glTexParameterf" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); glTexParameterf(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glTexParameterfv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glTexParameterfv target pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glTexParameterfv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameterfv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glTexParameterfv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameterfv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glTexParameterfv" "', argument " "3"" of type '" "GLfloat const *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glTexParameterfv(arg1,arg2,(float const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glTexParameteri(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLint arg3 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glTexParameteri target pname param ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glTexParameteri" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameteri" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glTexParameteri" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameteri" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glTexParameteri" "', argument " "3"" of type '" "GLint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameteri" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  glTexParameteri(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glTexParameteriv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLenum arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glTexParameteriv target pname params ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glTexParameteriv" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameteriv" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glTexParameteriv" "', argument " "2"" of type '" "GLenum""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexParameteriv" "', argument " "2"" of type '" "GLenum""'"); }
     else { arg2 = *(reinterpret_cast< GLenum * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glTexParameteriv" "', argument " "3"" of type '" "GLint const *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glTexParameteriv(arg1,arg2,(int32_t const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glTexSubImage2D(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLenum arg1 ; GLint arg2 ; GLint arg3 ; GLint arg4 ; GLsizei arg5 ; GLsizei arg6 ; GLenum arg7 ; GLenum arg8 ;
  GLvoid *arg9 = (GLvoid *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ;
  void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ; void *argp6 ; int res6 = 0 ; void *argp7 ; int res7 = 0 ;
  void *argp8 ; int res8 = 0 ; int res9 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:glTexSubImage2D target level xoffset yoffset width height format type pixels ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glTexSubImage2D" "', argument " "1"" of type '" "GLenum""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "1"" of type '" "GLenum""'"); }
     else { arg1 = *(reinterpret_cast< GLenum * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glTexSubImage2D" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glTexSubImage2D" "', argument " "3"" of type '" "GLint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glTexSubImage2D" "', argument " "4"" of type '" "GLint""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "4"" of type '" "GLint""'"); }
     else { arg4 = *(reinterpret_cast< GLint * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glTexSubImage2D" "', argument " "5"" of type '" "GLsizei""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "5"" of type '" "GLsizei""'"); }
     else { arg5 = *(reinterpret_cast< GLsizei * >(argp5)); }  }  {
    res6 = SWIG_ConvertPtr(objv[6], &argp6, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glTexSubImage2D" "', argument " "6"" of type '" "GLsizei""'");  }
       if (!argp6) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "6"" of type '" "GLsizei""'"); }
     else { arg6 = *(reinterpret_cast< GLsizei * >(argp6)); }  }  {
    res7 = SWIG_ConvertPtr(objv[7], &argp7, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res7)) {
      SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "glTexSubImage2D" "', argument " "7"" of type '" "GLenum""'");  }
       if (!argp7) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "7"" of type '" "GLenum""'"); }
     else { arg7 = *(reinterpret_cast< GLenum * >(argp7)); }  }  {
    res8 = SWIG_ConvertPtr(objv[8], &argp8, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res8)) {
      SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "glTexSubImage2D" "', argument " "8"" of type '" "GLenum""'");  }
       if (!argp8) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glTexSubImage2D" "', argument " "8"" of type '" "GLenum""'"); }
     else { arg8 = *(reinterpret_cast< GLenum * >(argp8)); }  } 
  res9 = SWIG_ConvertPtr(objv[9],SWIG_as_voidptrptr(&arg9), 0, 0); if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "glTexSubImage2D" "', argument " "9"" of type '" "GLvoid const *""'");  }
   glTexSubImage2D(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,(void const *)arg9); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform1f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLfloat arg2 ; void *argp1 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glUniform1f location x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform1f" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1f" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glUniform1f" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); glUniform1f(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform1fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform1fv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform1fv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform1fv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform1fv" "', argument " "3"" of type '" "GLfloat const *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glUniform1fv(arg1,arg2,(float const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform1i(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glUniform1i location x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform1i" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1i" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform1i" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1i" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  glUniform1i(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform1iv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform1iv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform1iv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1iv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform1iv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform1iv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform1iv" "', argument " "3"" of type '" "GLint const *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glUniform1iv(arg1,arg2,(int32_t const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform2f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLfloat arg2 ; GLfloat arg3 ; void *argp1 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ;
  int ecode3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform2f location x y ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform2f" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2f" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glUniform2f" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glUniform2f" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); glUniform2f(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform2fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform2fv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform2fv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform2fv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform2fv" "', argument " "3"" of type '" "GLfloat const *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glUniform2fv(arg1,arg2,(float const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform2i(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; GLint arg3 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform2i location x y ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform2i" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2i" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform2i" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2i" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform2i" "', argument " "3"" of type '" "GLint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2i" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  glUniform2i(arg1,arg2,arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform2iv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform2iv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform2iv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2iv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform2iv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform2iv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform2iv" "', argument " "3"" of type '" "GLint const *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glUniform2iv(arg1,arg2,(int32_t const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform3f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; void *argp1 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glUniform3f location x y z ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform3f" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3f" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glUniform3f" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glUniform3f" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "glUniform3f" "', argument " "4"" of type '" "GLfloat""'"); }  
  arg4 = static_cast< GLfloat >(val4); glUniform3f(arg1,arg2,arg3,arg4); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform3fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform3fv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform3fv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform3fv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform3fv" "', argument " "3"" of type '" "GLfloat const *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glUniform3fv(arg1,arg2,(float const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform3i(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; GLint arg3 ; GLint arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ;
  int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glUniform3i location x y z ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform3i" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3i" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform3i" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3i" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform3i" "', argument " "3"" of type '" "GLint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3i" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glUniform3i" "', argument " "4"" of type '" "GLint""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3i" "', argument " "4"" of type '" "GLint""'"); }
     else { arg4 = *(reinterpret_cast< GLint * >(argp4)); }  }  glUniform3i(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform3iv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform3iv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform3iv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3iv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform3iv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform3iv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform3iv" "', argument " "3"" of type '" "GLint const *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glUniform3iv(arg1,arg2,(int32_t const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform4f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; GLfloat arg5 ; void *argp1 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; float val5 ; int ecode5 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:glUniform4f location x y z w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform4f" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4f" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glUniform4f" "', argument " "2"" of type '" "GLfloat""'"); }  
  arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3); if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glUniform4f" "', argument " "3"" of type '" "GLfloat""'"); }  
  arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4); if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "glUniform4f" "', argument " "4"" of type '" "GLfloat""'"); }  
  arg4 = static_cast< GLfloat >(val4); ecode5 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[5], &val5); if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "glUniform4f" "', argument " "5"" of type '" "GLfloat""'"); }  
  arg5 = static_cast< GLfloat >(val5); glUniform4f(arg1,arg2,arg3,arg4,arg5); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform4fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLfloat *arg3 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform4fv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform4fv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform4fv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform4fv" "', argument " "3"" of type '" "GLfloat const *""'");  }
   arg3 = reinterpret_cast< GLfloat * >(argp3); glUniform4fv(arg1,arg2,(float const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform4i(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; GLint arg3 ; GLint arg4 ; GLint arg5 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ; void *argp5 ; int res5 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:glUniform4i location x y z w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform4i" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4i" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform4i" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4i" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform4i" "', argument " "3"" of type '" "GLint""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4i" "', argument " "3"" of type '" "GLint""'"); }
     else { arg3 = *(reinterpret_cast< GLint * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glUniform4i" "', argument " "4"" of type '" "GLint""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4i" "', argument " "4"" of type '" "GLint""'"); }
     else { arg4 = *(reinterpret_cast< GLint * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glUniform4i" "', argument " "5"" of type '" "GLint""'");  }   
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4i" "', argument " "5"" of type '" "GLint""'"); }
     else { arg5 = *(reinterpret_cast< GLint * >(argp5)); }  }  glUniform4i(arg1,arg2,arg3,arg4,arg5); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniform4iv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLint *arg3 = (GLint *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 = 0 ; int res3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glUniform4iv location count v ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniform4iv" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4iv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniform4iv" "', argument " "2"" of type '" "GLsizei""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniform4iv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  } 
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int32_t, 0 |  0 ); if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniform4iv" "', argument " "3"" of type '" "GLint const *""'");  }
   arg3 = reinterpret_cast< GLint * >(argp3); glUniform4iv(arg1,arg2,(int32_t const *)arg3); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniformMatrix2fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLboolean arg3 ; GLfloat *arg4 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glUniformMatrix2fv location count transpose value ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniformMatrix2fv" "', argument " "1"" of type '" "GLint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix2fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniformMatrix2fv" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix2fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniformMatrix2fv" "', argument " "3"" of type '" "GLboolean""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix2fv" "', argument " "3"" of type '" "GLboolean""'"); }
     else { arg3 = *(reinterpret_cast< GLboolean * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glUniformMatrix2fv" "', argument " "4"" of type '" "GLfloat const *""'");  }
   arg4 = reinterpret_cast< GLfloat * >(argp4); glUniformMatrix2fv(arg1,arg2,arg3,(float const *)arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniformMatrix3fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLboolean arg3 ; GLfloat *arg4 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glUniformMatrix3fv location count transpose value ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniformMatrix3fv" "', argument " "1"" of type '" "GLint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix3fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniformMatrix3fv" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix3fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniformMatrix3fv" "', argument " "3"" of type '" "GLboolean""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix3fv" "', argument " "3"" of type '" "GLboolean""'"); }
     else { arg3 = *(reinterpret_cast< GLboolean * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glUniformMatrix3fv" "', argument " "4"" of type '" "GLfloat const *""'");  }
   arg4 = reinterpret_cast< GLfloat * >(argp4); glUniformMatrix3fv(arg1,arg2,arg3,(float const *)arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUniformMatrix4fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLsizei arg2 ; GLboolean arg3 ; GLfloat *arg4 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 ;
  int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 = 0 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glUniformMatrix4fv location count transpose value ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUniformMatrix4fv" "', argument " "1"" of type '" "GLint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix4fv" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glUniformMatrix4fv" "', argument " "2"" of type '" "GLsizei""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix4fv" "', argument " "2"" of type '" "GLsizei""'"); }
     else { arg2 = *(reinterpret_cast< GLsizei * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glUniformMatrix4fv" "', argument " "3"" of type '" "GLboolean""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUniformMatrix4fv" "', argument " "3"" of type '" "GLboolean""'"); }
     else { arg3 = *(reinterpret_cast< GLboolean * >(argp3)); }  } 
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glUniformMatrix4fv" "', argument " "4"" of type '" "GLfloat const *""'");  }
   arg4 = reinterpret_cast< GLfloat * >(argp4); glUniformMatrix4fv(arg1,arg2,arg3,(float const *)arg4); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glUseProgram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glUseProgram program ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glUseProgram" "', argument " "1"" of type '" "GLuint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glUseProgram" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glUseProgram(arg1); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glValidateProgram(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; void *argp1 ; int res1 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"o:glValidateProgram program ",(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glValidateProgram" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glValidateProgram" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  glValidateProgram(arg1); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib1f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat arg2 ; void *argp1 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glVertexAttrib1f indx x ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib1f" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib1f" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glVertexAttrib1f" "', argument " "2"" of type '" "GLfloat""'"); }
    arg2 = static_cast< GLfloat >(val2); glVertexAttrib1f(arg1,arg2); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib1fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat *arg2 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glVertexAttrib1fv indx values ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib1fv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib1fv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glVertexAttrib1fv" "', argument " "2"" of type '" "GLfloat const *""'");  }
   arg2 = reinterpret_cast< GLfloat * >(argp2); glVertexAttrib1fv(arg1,(float const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib2f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat arg2 ; GLfloat arg3 ; void *argp1 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ; float val3 ;
  int ecode3 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooo:glVertexAttrib2f indx x y ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib2f" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib2f" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glVertexAttrib2f" "', argument " "2"" of type '" "GLfloat""'"); }
    arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glVertexAttrib2f" "', argument " "3"" of type '" "GLfloat""'"); }
    arg3 = static_cast< GLfloat >(val3); glVertexAttrib2f(arg1,arg2,arg3); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib2fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat *arg2 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glVertexAttrib2fv indx values ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib2fv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib2fv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glVertexAttrib2fv" "', argument " "2"" of type '" "GLfloat const *""'");  }
   arg2 = reinterpret_cast< GLfloat * >(argp2); glVertexAttrib2fv(arg1,(float const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib3f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; void *argp1 ; int res1 = 0 ; float val2 ; int ecode2 = 0 ;
  float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glVertexAttrib3f indx x y z ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib3f" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib3f" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glVertexAttrib3f" "', argument " "2"" of type '" "GLfloat""'"); }
    arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glVertexAttrib3f" "', argument " "3"" of type '" "GLfloat""'"); }
    arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "glVertexAttrib3f" "', argument " "4"" of type '" "GLfloat""'"); }
    arg4 = static_cast< GLfloat >(val4); glVertexAttrib3f(arg1,arg2,arg3,arg4); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib3fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat *arg2 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glVertexAttrib3fv indx values ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib3fv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib3fv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glVertexAttrib3fv" "', argument " "2"" of type '" "GLfloat const *""'");  }
   arg2 = reinterpret_cast< GLfloat * >(argp2); glVertexAttrib3fv(arg1,(float const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib4f(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat arg2 ; GLfloat arg3 ; GLfloat arg4 ; GLfloat arg5 ; void *argp1 ; int res1 = 0 ; float val2 ;
  int ecode2 = 0 ; float val3 ; int ecode3 = 0 ; float val4 ; int ecode4 = 0 ; float val5 ; int ecode5 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:glVertexAttrib4f indx x y z w ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib4f" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib4f" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  ecode2 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "glVertexAttrib4f" "', argument " "2"" of type '" "GLfloat""'"); }
    arg2 = static_cast< GLfloat >(val2); ecode3 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[3], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "glVertexAttrib4f" "', argument " "3"" of type '" "GLfloat""'"); }
    arg3 = static_cast< GLfloat >(val3); ecode4 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[4], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "glVertexAttrib4f" "', argument " "4"" of type '" "GLfloat""'"); }
    arg4 = static_cast< GLfloat >(val4); ecode5 = SWIG_AsVal_float SWIG_TCL_CALL_ARGS_2(objv[5], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "glVertexAttrib4f" "', argument " "5"" of type '" "GLfloat""'"); }
    arg5 = static_cast< GLfloat >(val5); glVertexAttrib4f(arg1,arg2,arg3,arg4,arg5); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glVertexAttrib4fv(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLfloat *arg2 = (GLfloat *) 0 ; void *argp1 ; int res1 = 0 ; void *argp2 = 0 ; int res2 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oo:glVertexAttrib4fv indx values ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail; {
    res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttrib4fv" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttrib4fv" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  } 
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 ); if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glVertexAttrib4fv" "', argument " "2"" of type '" "GLfloat const *""'");  }
   arg2 = reinterpret_cast< GLfloat * >(argp2); glVertexAttrib4fv(arg1,(float const *)arg2); return TCL_OK; fail:
  return TCL_ERROR; }
SWIGINTERN int
_wrap_glVertexAttribPointer(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLuint arg1 ; GLint arg2 ; GLenum arg3 ; GLboolean arg4 ; GLsizei arg5 ; GLvoid *arg6 = (GLvoid *) 0 ; void *argp1 ;
  int res1 = 0 ; void *argp2 ; int res2 = 0 ; void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ; void *argp5 ;
  int res5 = 0 ; int res6 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooooo:glVertexAttribPointer indx size type normalized stride ptr ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glVertexAttribPointer" "', argument " "1"" of type '" "GLuint""'");  }
       if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttribPointer" "', argument " "1"" of type '" "GLuint""'"); }
     else { arg1 = *(reinterpret_cast< GLuint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glVertexAttribPointer" "', argument " "2"" of type '" "GLint""'");  }
       if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttribPointer" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_uint32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glVertexAttribPointer" "', argument " "3"" of type '" "GLenum""'");  }
       if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttribPointer" "', argument " "3"" of type '" "GLenum""'"); }
     else { arg3 = *(reinterpret_cast< GLenum * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_uint8_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glVertexAttribPointer" "', argument " "4"" of type '" "GLboolean""'");  }
       if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttribPointer" "', argument " "4"" of type '" "GLboolean""'"); }
     else { arg4 = *(reinterpret_cast< GLboolean * >(argp4)); }  }  {
    res5 = SWIG_ConvertPtr(objv[5], &argp5, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "glVertexAttribPointer" "', argument " "5"" of type '" "GLsizei""'");  }
       if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glVertexAttribPointer" "', argument " "5"" of type '" "GLsizei""'"); }
     else { arg5 = *(reinterpret_cast< GLsizei * >(argp5)); }  } 
  res6 = SWIG_ConvertPtr(objv[6],SWIG_as_voidptrptr(&arg6), 0, 0); if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "glVertexAttribPointer" "', argument " "6"" of type '" "GLvoid const *""'");  }
   glVertexAttribPointer(arg1,arg2,arg3,arg4,arg5,(void const *)arg6); return TCL_OK; fail: return TCL_ERROR; }
SWIGINTERN int _wrap_glViewport(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  GLint arg1 ; GLint arg2 ; GLsizei arg3 ; GLsizei arg4 ; void *argp1 ; int res1 = 0 ; void *argp2 ; int res2 = 0 ;
  void *argp3 ; int res3 = 0 ; void *argp4 ; int res4 = 0 ;
  if (SWIG_GetArgs(interp, objc, objv,"oooo:glViewport x y width height ",(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  { res1 = SWIG_ConvertPtr(objv[1], &argp1, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "glViewport" "', argument " "1"" of type '" "GLint""'");  }   
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glViewport" "', argument " "1"" of type '" "GLint""'"); }
     else { arg1 = *(reinterpret_cast< GLint * >(argp1)); }  }  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "glViewport" "', argument " "2"" of type '" "GLint""'");  }   
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glViewport" "', argument " "2"" of type '" "GLint""'"); }
     else { arg2 = *(reinterpret_cast< GLint * >(argp2)); }  }  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "glViewport" "', argument " "3"" of type '" "GLsizei""'");  }   
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glViewport" "', argument " "3"" of type '" "GLsizei""'"); }
     else { arg3 = *(reinterpret_cast< GLsizei * >(argp3)); }  }  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_int32_t,  0 ); if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "glViewport" "', argument " "4"" of type '" "GLsizei""'");  }   
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "glViewport" "', argument " "4"" of type '" "GLsizei""'"); }
     else { arg4 = *(reinterpret_cast< GLsizei * >(argp4)); }  }  glViewport(arg1,arg2,arg3,arg4); return TCL_OK; fail:
  return TCL_ERROR; }

static swig_command_info swig_commands[] = {
    { SWIG_prefix "newfv4", (swig_wrapper_func) _wrap_newfv4, NULL},
    { SWIG_prefix "delfv", (swig_wrapper_func) _wrap_delfv, NULL},
    { SWIG_prefix "glActiveTexture", (swig_wrapper_func) _wrap_glActiveTexture, NULL},
    { SWIG_prefix "glAttachShader", (swig_wrapper_func) _wrap_glAttachShader, NULL},
    { SWIG_prefix "glBindAttribLocation", (swig_wrapper_func) _wrap_glBindAttribLocation, NULL},
    { SWIG_prefix "glBindBuffer", (swig_wrapper_func) _wrap_glBindBuffer, NULL},
    { SWIG_prefix "glBindFramebuffer", (swig_wrapper_func) _wrap_glBindFramebuffer, NULL},
    { SWIG_prefix "glBindRenderbuffer", (swig_wrapper_func) _wrap_glBindRenderbuffer, NULL},
    { SWIG_prefix "glBindTexture", (swig_wrapper_func) _wrap_glBindTexture, NULL},
    { SWIG_prefix "glBlendColor", (swig_wrapper_func) _wrap_glBlendColor, NULL},
    { SWIG_prefix "glBlendEquation", (swig_wrapper_func) _wrap_glBlendEquation, NULL},
    { SWIG_prefix "glBlendEquationSeparate", (swig_wrapper_func) _wrap_glBlendEquationSeparate, NULL},
    { SWIG_prefix "glBlendFunc", (swig_wrapper_func) _wrap_glBlendFunc, NULL},
    { SWIG_prefix "glBlendFuncSeparate", (swig_wrapper_func) _wrap_glBlendFuncSeparate, NULL},
    { SWIG_prefix "glBufferData", (swig_wrapper_func) _wrap_glBufferData, NULL},
    { SWIG_prefix "glBufferSubData", (swig_wrapper_func) _wrap_glBufferSubData, NULL},
    { SWIG_prefix "glCheckFramebufferStatus", (swig_wrapper_func) _wrap_glCheckFramebufferStatus, NULL},
    { SWIG_prefix "glClear", (swig_wrapper_func) _wrap_glClear, NULL},
    { SWIG_prefix "glClearColor", (swig_wrapper_func) _wrap_glClearColor, NULL},
    { SWIG_prefix "glClearDepthf", (swig_wrapper_func) _wrap_glClearDepthf, NULL},
    { SWIG_prefix "glClearStencil", (swig_wrapper_func) _wrap_glClearStencil, NULL},
    { SWIG_prefix "glColorMask", (swig_wrapper_func) _wrap_glColorMask, NULL},
    { SWIG_prefix "glCompileShader", (swig_wrapper_func) _wrap_glCompileShader, NULL},
    { SWIG_prefix "glCompressedTexImage2D", (swig_wrapper_func) _wrap_glCompressedTexImage2D, NULL},
    { SWIG_prefix "glCompressedTexSubImage2D", (swig_wrapper_func) _wrap_glCompressedTexSubImage2D, NULL},
    { SWIG_prefix "glCopyTexImage2D", (swig_wrapper_func) _wrap_glCopyTexImage2D, NULL},
    { SWIG_prefix "glCopyTexSubImage2D", (swig_wrapper_func) _wrap_glCopyTexSubImage2D, NULL},
    { SWIG_prefix "glCreateProgram", (swig_wrapper_func) _wrap_glCreateProgram, NULL},
    { SWIG_prefix "glCreateShader", (swig_wrapper_func) _wrap_glCreateShader, NULL},
    { SWIG_prefix "glCullFace", (swig_wrapper_func) _wrap_glCullFace, NULL},
    { SWIG_prefix "glDeleteBuffers", (swig_wrapper_func) _wrap_glDeleteBuffers, NULL},
    { SWIG_prefix "glDeleteFramebuffers", (swig_wrapper_func) _wrap_glDeleteFramebuffers, NULL},
    { SWIG_prefix "glDeleteProgram", (swig_wrapper_func) _wrap_glDeleteProgram, NULL},
    { SWIG_prefix "glDeleteRenderbuffers", (swig_wrapper_func) _wrap_glDeleteRenderbuffers, NULL},
    { SWIG_prefix "glDeleteShader", (swig_wrapper_func) _wrap_glDeleteShader, NULL},
    { SWIG_prefix "glDeleteTextures", (swig_wrapper_func) _wrap_glDeleteTextures, NULL},
    { SWIG_prefix "glDepthFunc", (swig_wrapper_func) _wrap_glDepthFunc, NULL},
    { SWIG_prefix "glDepthMask", (swig_wrapper_func) _wrap_glDepthMask, NULL},
    { SWIG_prefix "glDepthRangef", (swig_wrapper_func) _wrap_glDepthRangef, NULL},
    { SWIG_prefix "glDetachShader", (swig_wrapper_func) _wrap_glDetachShader, NULL},
    { SWIG_prefix "glDisable", (swig_wrapper_func) _wrap_glDisable, NULL},
    { SWIG_prefix "glDisableVertexAttribArray", (swig_wrapper_func) _wrap_glDisableVertexAttribArray, NULL},
    { SWIG_prefix "glDrawArrays", (swig_wrapper_func) _wrap_glDrawArrays, NULL},
    { SWIG_prefix "glDrawElements", (swig_wrapper_func) _wrap_glDrawElements, NULL},
    { SWIG_prefix "glEnable", (swig_wrapper_func) _wrap_glEnable, NULL},
    { SWIG_prefix "glEnableVertexAttribArray", (swig_wrapper_func) _wrap_glEnableVertexAttribArray, NULL},
    { SWIG_prefix "glFinish", (swig_wrapper_func) _wrap_glFinish, NULL},
    { SWIG_prefix "glFlush", (swig_wrapper_func) _wrap_glFlush, NULL},
    { SWIG_prefix "glFramebufferRenderbuffer", (swig_wrapper_func) _wrap_glFramebufferRenderbuffer, NULL},
    { SWIG_prefix "glFramebufferTexture2D", (swig_wrapper_func) _wrap_glFramebufferTexture2D, NULL},
    { SWIG_prefix "glFrontFace", (swig_wrapper_func) _wrap_glFrontFace, NULL},
    { SWIG_prefix "glGenBuffers", (swig_wrapper_func) _wrap_glGenBuffers, NULL},
    { SWIG_prefix "glGenerateMipmap", (swig_wrapper_func) _wrap_glGenerateMipmap, NULL},
    { SWIG_prefix "glGenFramebuffers", (swig_wrapper_func) _wrap_glGenFramebuffers, NULL},
    { SWIG_prefix "glGenRenderbuffers", (swig_wrapper_func) _wrap_glGenRenderbuffers, NULL},
    { SWIG_prefix "glGenTextures", (swig_wrapper_func) _wrap_glGenTextures, NULL},
    { SWIG_prefix "glGetActiveAttrib", (swig_wrapper_func) _wrap_glGetActiveAttrib, NULL},
    { SWIG_prefix "glGetActiveUniform", (swig_wrapper_func) _wrap_glGetActiveUniform, NULL},
    { SWIG_prefix "glGetAttachedShaders", (swig_wrapper_func) _wrap_glGetAttachedShaders, NULL},
    { SWIG_prefix "glGetAttribLocation", (swig_wrapper_func) _wrap_glGetAttribLocation, NULL},
    { SWIG_prefix "glGetBooleanv", (swig_wrapper_func) _wrap_glGetBooleanv, NULL},
    { SWIG_prefix "glGetBufferParameteriv", (swig_wrapper_func) _wrap_glGetBufferParameteriv, NULL},
    { SWIG_prefix "glGetError", (swig_wrapper_func) _wrap_glGetError, NULL},
    { SWIG_prefix "glGetFloatv", (swig_wrapper_func) _wrap_glGetFloatv, NULL},
    { SWIG_prefix "glGetFramebufferAttachmentParameteriv", (swig_wrapper_func) _wrap_glGetFramebufferAttachmentParameteriv, NULL},
    { SWIG_prefix "glGetIntegerv", (swig_wrapper_func) _wrap_glGetIntegerv, NULL},
    { SWIG_prefix "glGetProgramiv", (swig_wrapper_func) _wrap_glGetProgramiv, NULL},
    { SWIG_prefix "glGetProgramInfoLog", (swig_wrapper_func) _wrap_glGetProgramInfoLog, NULL},
    { SWIG_prefix "glGetRenderbufferParameteriv", (swig_wrapper_func) _wrap_glGetRenderbufferParameteriv, NULL},
    { SWIG_prefix "glGetShaderiv", (swig_wrapper_func) _wrap_glGetShaderiv, NULL},
    { SWIG_prefix "glGetShaderInfoLog", (swig_wrapper_func) _wrap_glGetShaderInfoLog, NULL},
    { SWIG_prefix "glGetShaderPrecisionFormat", (swig_wrapper_func) _wrap_glGetShaderPrecisionFormat, NULL},
    { SWIG_prefix "glGetShaderSource", (swig_wrapper_func) _wrap_glGetShaderSource, NULL},
    { SWIG_prefix "glGetString", (swig_wrapper_func) _wrap_glGetString, NULL},
    { SWIG_prefix "glGetTexParameterfv", (swig_wrapper_func) _wrap_glGetTexParameterfv, NULL},
    { SWIG_prefix "glGetTexParameteriv", (swig_wrapper_func) _wrap_glGetTexParameteriv, NULL},
    { SWIG_prefix "glGetUniformfv", (swig_wrapper_func) _wrap_glGetUniformfv, NULL},
    { SWIG_prefix "glGetUniformiv", (swig_wrapper_func) _wrap_glGetUniformiv, NULL},
    { SWIG_prefix "glGetUniformLocation", (swig_wrapper_func) _wrap_glGetUniformLocation, NULL},
    { SWIG_prefix "glGetVertexAttribfv", (swig_wrapper_func) _wrap_glGetVertexAttribfv, NULL},
    { SWIG_prefix "glGetVertexAttribiv", (swig_wrapper_func) _wrap_glGetVertexAttribiv, NULL},
    { SWIG_prefix "glGetVertexAttribPointerv", (swig_wrapper_func) _wrap_glGetVertexAttribPointerv, NULL},
    { SWIG_prefix "glHint", (swig_wrapper_func) _wrap_glHint, NULL},
    { SWIG_prefix "glIsBuffer", (swig_wrapper_func) _wrap_glIsBuffer, NULL},
    { SWIG_prefix "glIsEnabled", (swig_wrapper_func) _wrap_glIsEnabled, NULL},
    { SWIG_prefix "glIsFramebuffer", (swig_wrapper_func) _wrap_glIsFramebuffer, NULL},
    { SWIG_prefix "glIsProgram", (swig_wrapper_func) _wrap_glIsProgram, NULL},
    { SWIG_prefix "glIsRenderbuffer", (swig_wrapper_func) _wrap_glIsRenderbuffer, NULL},
    { SWIG_prefix "glIsShader", (swig_wrapper_func) _wrap_glIsShader, NULL},
    { SWIG_prefix "glIsTexture", (swig_wrapper_func) _wrap_glIsTexture, NULL},
    { SWIG_prefix "glLineWidth", (swig_wrapper_func) _wrap_glLineWidth, NULL},
    { SWIG_prefix "glLinkProgram", (swig_wrapper_func) _wrap_glLinkProgram, NULL},
    { SWIG_prefix "glPixelStorei", (swig_wrapper_func) _wrap_glPixelStorei, NULL},
    { SWIG_prefix "glPolygonOffset", (swig_wrapper_func) _wrap_glPolygonOffset, NULL},
    { SWIG_prefix "glReadPixels", (swig_wrapper_func) _wrap_glReadPixels, NULL},
    { SWIG_prefix "glReleaseShaderCompiler", (swig_wrapper_func) _wrap_glReleaseShaderCompiler, NULL},
    { SWIG_prefix "glRenderbufferStorage", (swig_wrapper_func) _wrap_glRenderbufferStorage, NULL},
    { SWIG_prefix "glSampleCoverage", (swig_wrapper_func) _wrap_glSampleCoverage, NULL},
    { SWIG_prefix "glScissor", (swig_wrapper_func) _wrap_glScissor, NULL},
    { SWIG_prefix "glShaderBinary", (swig_wrapper_func) _wrap_glShaderBinary, NULL},
    { SWIG_prefix "glShaderSource", (swig_wrapper_func) _wrap_glShaderSource, NULL},
    { SWIG_prefix "glStencilFunc", (swig_wrapper_func) _wrap_glStencilFunc, NULL},
    { SWIG_prefix "glStencilFuncSeparate", (swig_wrapper_func) _wrap_glStencilFuncSeparate, NULL},
    { SWIG_prefix "glStencilMask", (swig_wrapper_func) _wrap_glStencilMask, NULL},
    { SWIG_prefix "glStencilMaskSeparate", (swig_wrapper_func) _wrap_glStencilMaskSeparate, NULL},
    { SWIG_prefix "glStencilOp", (swig_wrapper_func) _wrap_glStencilOp, NULL},
    { SWIG_prefix "glStencilOpSeparate", (swig_wrapper_func) _wrap_glStencilOpSeparate, NULL},
    { SWIG_prefix "glTexImage2D", (swig_wrapper_func) _wrap_glTexImage2D, NULL},
    { SWIG_prefix "glTexParameterf", (swig_wrapper_func) _wrap_glTexParameterf, NULL},
    { SWIG_prefix "glTexParameterfv", (swig_wrapper_func) _wrap_glTexParameterfv, NULL},
    { SWIG_prefix "glTexParameteri", (swig_wrapper_func) _wrap_glTexParameteri, NULL},
    { SWIG_prefix "glTexParameteriv", (swig_wrapper_func) _wrap_glTexParameteriv, NULL},
    { SWIG_prefix "glTexSubImage2D", (swig_wrapper_func) _wrap_glTexSubImage2D, NULL},
    { SWIG_prefix "glUniform1f", (swig_wrapper_func) _wrap_glUniform1f, NULL},
    { SWIG_prefix "glUniform1fv", (swig_wrapper_func) _wrap_glUniform1fv, NULL},
    { SWIG_prefix "glUniform1i", (swig_wrapper_func) _wrap_glUniform1i, NULL},
    { SWIG_prefix "glUniform1iv", (swig_wrapper_func) _wrap_glUniform1iv, NULL},
    { SWIG_prefix "glUniform2f", (swig_wrapper_func) _wrap_glUniform2f, NULL},
    { SWIG_prefix "glUniform2fv", (swig_wrapper_func) _wrap_glUniform2fv, NULL},
    { SWIG_prefix "glUniform2i", (swig_wrapper_func) _wrap_glUniform2i, NULL},
    { SWIG_prefix "glUniform2iv", (swig_wrapper_func) _wrap_glUniform2iv, NULL},
    { SWIG_prefix "glUniform3f", (swig_wrapper_func) _wrap_glUniform3f, NULL},
    { SWIG_prefix "glUniform3fv", (swig_wrapper_func) _wrap_glUniform3fv, NULL},
    { SWIG_prefix "glUniform3i", (swig_wrapper_func) _wrap_glUniform3i, NULL},
    { SWIG_prefix "glUniform3iv", (swig_wrapper_func) _wrap_glUniform3iv, NULL},
    { SWIG_prefix "glUniform4f", (swig_wrapper_func) _wrap_glUniform4f, NULL},
    { SWIG_prefix "glUniform4fv", (swig_wrapper_func) _wrap_glUniform4fv, NULL},
    { SWIG_prefix "glUniform4i", (swig_wrapper_func) _wrap_glUniform4i, NULL},
    { SWIG_prefix "glUniform4iv", (swig_wrapper_func) _wrap_glUniform4iv, NULL},
    { SWIG_prefix "glUniformMatrix2fv", (swig_wrapper_func) _wrap_glUniformMatrix2fv, NULL},
    { SWIG_prefix "glUniformMatrix3fv", (swig_wrapper_func) _wrap_glUniformMatrix3fv, NULL},
    { SWIG_prefix "glUniformMatrix4fv", (swig_wrapper_func) _wrap_glUniformMatrix4fv, NULL},
    { SWIG_prefix "glUseProgram", (swig_wrapper_func) _wrap_glUseProgram, NULL},
    { SWIG_prefix "glValidateProgram", (swig_wrapper_func) _wrap_glValidateProgram, NULL},
    { SWIG_prefix "glVertexAttrib1f", (swig_wrapper_func) _wrap_glVertexAttrib1f, NULL},
    { SWIG_prefix "glVertexAttrib1fv", (swig_wrapper_func) _wrap_glVertexAttrib1fv, NULL},
    { SWIG_prefix "glVertexAttrib2f", (swig_wrapper_func) _wrap_glVertexAttrib2f, NULL},
    { SWIG_prefix "glVertexAttrib2fv", (swig_wrapper_func) _wrap_glVertexAttrib2fv, NULL},
    { SWIG_prefix "glVertexAttrib3f", (swig_wrapper_func) _wrap_glVertexAttrib3f, NULL},
    { SWIG_prefix "glVertexAttrib3fv", (swig_wrapper_func) _wrap_glVertexAttrib3fv, NULL},
    { SWIG_prefix "glVertexAttrib4f", (swig_wrapper_func) _wrap_glVertexAttrib4f, NULL},
    { SWIG_prefix "glVertexAttrib4fv", (swig_wrapper_func) _wrap_glVertexAttrib4fv, NULL},
    { SWIG_prefix "glVertexAttribPointer", (swig_wrapper_func) _wrap_glVertexAttribPointer, NULL},
    { SWIG_prefix "glViewport", (swig_wrapper_func) _wrap_glViewport, NULL},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *|GLchar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "GLclampf *|float *|GLfloat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16_t = {"_p_int16_t", "GLshort *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32_t = {"_p_int32_t", "GLsizei *|int32_t *|GLclampx *|GLfixed *|GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64_t = {"_p_int64_t", "int64_t *|GLint64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8_t = {"_p_int8_t", "GLbyte *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_intptr_t = {"_p_intptr_t", "intptr_t *|GLsizeiptr *|GLintptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **|GLchar **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "void **|GLvoid **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16_t = {"_p_uint16_t", "GLushort *|GLhalf *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *|GLuint *|GLenum *|GLbitfield *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64_t = {"_p_uint64_t", "uint64_t *|GLuint64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "GLubyte *|GLboolean *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *|GLvoid *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int16_t,
  &_swigt__p_int32_t,
  &_swigt__p_int64_t,
  &_swigt__p_int8_t,
  &_swigt__p_intptr_t,
  &_swigt__p_p_char,
  &_swigt__p_p_void,
  &_swigt__p_uint16_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint64_t,
  &_swigt__p_uint8_t,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16_t[] = {  {&_swigt__p_int16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32_t[] = {  {&_swigt__p_int32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64_t[] = {  {&_swigt__p_int64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8_t[] = {  {&_swigt__p_int8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_intptr_t[] = {  {&_swigt__p_intptr_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16_t[] = {  {&_swigt__p_uint16_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64_t[] = {  {&_swigt__p_uint64_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int16_t,
  _swigc__p_int32_t,
  _swigc__p_int64_t,
  _swigc__p_int8_t,
  _swigc__p_intptr_t,
  _swigc__p_p_char,
  _swigc__p_p_void,
  _swigc__p_uint16_t,
  _swigc__p_uint32_t,
  _swigc__p_uint64_t,
  _swigc__p_uint8_t,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    size_t i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
  /* Create fast method lookup tables */
  
  SWIGINTERN void
  SWIG_Tcl_InstallMethodLookupTables(void) {
    size_t i;
    
    for (i = 0; i < swig_module.size; ++i) {
      swig_type_info *type = swig_module.type_initial[i];
      if (type->clientdata) {
        swig_class* klass = (swig_class*) type->clientdata;
        swig_method* meth;
        Tcl_InitHashTable(&(klass->hashtable), TCL_STRING_KEYS);
        for (meth = klass->methods; meth && meth->name; ++meth) {
          int newEntry;
          Tcl_HashEntry* hashentry = Tcl_CreateHashEntry(&(klass->hashtable), meth->name, &newEntry);
          Tcl_SetHashValue(hashentry, (ClientData)meth->method);
        }
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  size_t i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  SWIG_Tcl_InstallMethodLookupTables();
  
  
  SWIG_Tcl_SetConstantObj(interp, "GL_ES_VERSION_2_0", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_BUFFER_BIT", SWIG_From_int(static_cast< int >(0x00000100)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BUFFER_BIT", SWIG_From_int(static_cast< int >(0x00000400)));
  SWIG_Tcl_SetConstantObj(interp, "GL_COLOR_BUFFER_BIT", SWIG_From_int(static_cast< int >(0x00004000)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FALSE", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TRUE", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_POINTS", SWIG_From_int(static_cast< int >(0x0000)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINES", SWIG_From_int(static_cast< int >(0x0001)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINE_LOOP", SWIG_From_int(static_cast< int >(0x0002)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINE_STRIP", SWIG_From_int(static_cast< int >(0x0003)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TRIANGLES", SWIG_From_int(static_cast< int >(0x0004)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TRIANGLE_STRIP", SWIG_From_int(static_cast< int >(0x0005)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TRIANGLE_FAN", SWIG_From_int(static_cast< int >(0x0006)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ZERO", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE", SWIG_From_int(static_cast< int >(1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SRC_COLOR", SWIG_From_int(static_cast< int >(0x0300)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE_MINUS_SRC_COLOR", SWIG_From_int(static_cast< int >(0x0301)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SRC_ALPHA", SWIG_From_int(static_cast< int >(0x0302)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE_MINUS_SRC_ALPHA", SWIG_From_int(static_cast< int >(0x0303)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DST_ALPHA", SWIG_From_int(static_cast< int >(0x0304)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE_MINUS_DST_ALPHA", SWIG_From_int(static_cast< int >(0x0305)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DST_COLOR", SWIG_From_int(static_cast< int >(0x0306)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE_MINUS_DST_COLOR", SWIG_From_int(static_cast< int >(0x0307)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SRC_ALPHA_SATURATE", SWIG_From_int(static_cast< int >(0x0308)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FUNC_ADD", SWIG_From_int(static_cast< int >(0x8006)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_EQUATION", SWIG_From_int(static_cast< int >(0x8009)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_EQUATION_RGB", SWIG_From_int(static_cast< int >(0x8009)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_EQUATION_ALPHA", SWIG_From_int(static_cast< int >(0x883D)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FUNC_SUBTRACT", SWIG_From_int(static_cast< int >(0x800A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FUNC_REVERSE_SUBTRACT", SWIG_From_int(static_cast< int >(0x800B)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_DST_RGB", SWIG_From_int(static_cast< int >(0x80C8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_SRC_RGB", SWIG_From_int(static_cast< int >(0x80C9)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_DST_ALPHA", SWIG_From_int(static_cast< int >(0x80CA)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_SRC_ALPHA", SWIG_From_int(static_cast< int >(0x80CB)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CONSTANT_COLOR", SWIG_From_int(static_cast< int >(0x8001)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE_MINUS_CONSTANT_COLOR", SWIG_From_int(static_cast< int >(0x8002)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CONSTANT_ALPHA", SWIG_From_int(static_cast< int >(0x8003)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ONE_MINUS_CONSTANT_ALPHA", SWIG_From_int(static_cast< int >(0x8004)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND_COLOR", SWIG_From_int(static_cast< int >(0x8005)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ARRAY_BUFFER", SWIG_From_int(static_cast< int >(0x8892)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ELEMENT_ARRAY_BUFFER", SWIG_From_int(static_cast< int >(0x8893)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ARRAY_BUFFER_BINDING", SWIG_From_int(static_cast< int >(0x8894)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ELEMENT_ARRAY_BUFFER_BINDING", SWIG_From_int(static_cast< int >(0x8895)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STREAM_DRAW", SWIG_From_int(static_cast< int >(0x88E0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STATIC_DRAW", SWIG_From_int(static_cast< int >(0x88E4)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DYNAMIC_DRAW", SWIG_From_int(static_cast< int >(0x88E8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BUFFER_SIZE", SWIG_From_int(static_cast< int >(0x8764)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BUFFER_USAGE", SWIG_From_int(static_cast< int >(0x8765)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CURRENT_VERTEX_ATTRIB", SWIG_From_int(static_cast< int >(0x8626)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRONT", SWIG_From_int(static_cast< int >(0x0404)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BACK", SWIG_From_int(static_cast< int >(0x0405)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRONT_AND_BACK", SWIG_From_int(static_cast< int >(0x0408)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_2D", SWIG_From_int(static_cast< int >(0x0DE1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CULL_FACE", SWIG_From_int(static_cast< int >(0x0B44)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLEND", SWIG_From_int(static_cast< int >(0x0BE2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DITHER", SWIG_From_int(static_cast< int >(0x0BD0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_TEST", SWIG_From_int(static_cast< int >(0x0B90)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_TEST", SWIG_From_int(static_cast< int >(0x0B71)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SCISSOR_TEST", SWIG_From_int(static_cast< int >(0x0C11)));
  SWIG_Tcl_SetConstantObj(interp, "GL_POLYGON_OFFSET_FILL", SWIG_From_int(static_cast< int >(0x8037)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLE_ALPHA_TO_COVERAGE", SWIG_From_int(static_cast< int >(0x809E)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLE_COVERAGE", SWIG_From_int(static_cast< int >(0x80A0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NO_ERROR", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INVALID_ENUM", SWIG_From_int(static_cast< int >(0x0500)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INVALID_VALUE", SWIG_From_int(static_cast< int >(0x0501)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INVALID_OPERATION", SWIG_From_int(static_cast< int >(0x0502)));
  SWIG_Tcl_SetConstantObj(interp, "GL_OUT_OF_MEMORY", SWIG_From_int(static_cast< int >(0x0505)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CW", SWIG_From_int(static_cast< int >(0x0900)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CCW", SWIG_From_int(static_cast< int >(0x0901)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINE_WIDTH", SWIG_From_int(static_cast< int >(0x0B21)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ALIASED_POINT_SIZE_RANGE", SWIG_From_int(static_cast< int >(0x846D)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ALIASED_LINE_WIDTH_RANGE", SWIG_From_int(static_cast< int >(0x846E)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CULL_FACE_MODE", SWIG_From_int(static_cast< int >(0x0B45)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRONT_FACE", SWIG_From_int(static_cast< int >(0x0B46)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_RANGE", SWIG_From_int(static_cast< int >(0x0B70)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_WRITEMASK", SWIG_From_int(static_cast< int >(0x0B72)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_CLEAR_VALUE", SWIG_From_int(static_cast< int >(0x0B73)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_FUNC", SWIG_From_int(static_cast< int >(0x0B74)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_CLEAR_VALUE", SWIG_From_int(static_cast< int >(0x0B91)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_FUNC", SWIG_From_int(static_cast< int >(0x0B92)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_FAIL", SWIG_From_int(static_cast< int >(0x0B94)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_PASS_DEPTH_FAIL", SWIG_From_int(static_cast< int >(0x0B95)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_PASS_DEPTH_PASS", SWIG_From_int(static_cast< int >(0x0B96)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_REF", SWIG_From_int(static_cast< int >(0x0B97)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_VALUE_MASK", SWIG_From_int(static_cast< int >(0x0B93)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_WRITEMASK", SWIG_From_int(static_cast< int >(0x0B98)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_FUNC", SWIG_From_int(static_cast< int >(0x8800)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_FAIL", SWIG_From_int(static_cast< int >(0x8801)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_PASS_DEPTH_FAIL", SWIG_From_int(static_cast< int >(0x8802)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_PASS_DEPTH_PASS", SWIG_From_int(static_cast< int >(0x8803)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_REF", SWIG_From_int(static_cast< int >(0x8CA3)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_VALUE_MASK", SWIG_From_int(static_cast< int >(0x8CA4)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BACK_WRITEMASK", SWIG_From_int(static_cast< int >(0x8CA5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VIEWPORT", SWIG_From_int(static_cast< int >(0x0BA2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SCISSOR_BOX", SWIG_From_int(static_cast< int >(0x0C10)));
  SWIG_Tcl_SetConstantObj(interp, "GL_COLOR_CLEAR_VALUE", SWIG_From_int(static_cast< int >(0x0C22)));
  SWIG_Tcl_SetConstantObj(interp, "GL_COLOR_WRITEMASK", SWIG_From_int(static_cast< int >(0x0C23)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNPACK_ALIGNMENT", SWIG_From_int(static_cast< int >(0x0CF5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_PACK_ALIGNMENT", SWIG_From_int(static_cast< int >(0x0D05)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_TEXTURE_SIZE", SWIG_From_int(static_cast< int >(0x0D33)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_VIEWPORT_DIMS", SWIG_From_int(static_cast< int >(0x0D3A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SUBPIXEL_BITS", SWIG_From_int(static_cast< int >(0x0D50)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RED_BITS", SWIG_From_int(static_cast< int >(0x0D52)));
  SWIG_Tcl_SetConstantObj(interp, "GL_GREEN_BITS", SWIG_From_int(static_cast< int >(0x0D53)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BLUE_BITS", SWIG_From_int(static_cast< int >(0x0D54)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ALPHA_BITS", SWIG_From_int(static_cast< int >(0x0D55)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_BITS", SWIG_From_int(static_cast< int >(0x0D56)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_BITS", SWIG_From_int(static_cast< int >(0x0D57)));
  SWIG_Tcl_SetConstantObj(interp, "GL_POLYGON_OFFSET_UNITS", SWIG_From_int(static_cast< int >(0x2A00)));
  SWIG_Tcl_SetConstantObj(interp, "GL_POLYGON_OFFSET_FACTOR", SWIG_From_int(static_cast< int >(0x8038)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_BINDING_2D", SWIG_From_int(static_cast< int >(0x8069)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLE_BUFFERS", SWIG_From_int(static_cast< int >(0x80A8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLES", SWIG_From_int(static_cast< int >(0x80A9)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLE_COVERAGE_VALUE", SWIG_From_int(static_cast< int >(0x80AA)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLE_COVERAGE_INVERT", SWIG_From_int(static_cast< int >(0x80AB)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NUM_COMPRESSED_TEXTURE_FORMATS", SWIG_From_int(static_cast< int >(0x86A2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_COMPRESSED_TEXTURE_FORMATS", SWIG_From_int(static_cast< int >(0x86A3)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DONT_CARE", SWIG_From_int(static_cast< int >(0x1100)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FASTEST", SWIG_From_int(static_cast< int >(0x1101)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NICEST", SWIG_From_int(static_cast< int >(0x1102)));
  SWIG_Tcl_SetConstantObj(interp, "GL_GENERATE_MIPMAP_HINT", SWIG_From_int(static_cast< int >(0x8192)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BYTE", SWIG_From_int(static_cast< int >(0x1400)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNSIGNED_BYTE", SWIG_From_int(static_cast< int >(0x1401)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SHORT", SWIG_From_int(static_cast< int >(0x1402)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNSIGNED_SHORT", SWIG_From_int(static_cast< int >(0x1403)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INT", SWIG_From_int(static_cast< int >(0x1404)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNSIGNED_INT", SWIG_From_int(static_cast< int >(0x1405)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT", SWIG_From_int(static_cast< int >(0x1406)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FIXED", SWIG_From_int(static_cast< int >(0x140C)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_COMPONENT", SWIG_From_int(static_cast< int >(0x1902)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ALPHA", SWIG_From_int(static_cast< int >(0x1906)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RGB", SWIG_From_int(static_cast< int >(0x1907)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RGBA", SWIG_From_int(static_cast< int >(0x1908)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LUMINANCE", SWIG_From_int(static_cast< int >(0x1909)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LUMINANCE_ALPHA", SWIG_From_int(static_cast< int >(0x190A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNSIGNED_SHORT_4_4_4_4", SWIG_From_int(static_cast< int >(0x8033)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNSIGNED_SHORT_5_5_5_1", SWIG_From_int(static_cast< int >(0x8034)));
  SWIG_Tcl_SetConstantObj(interp, "GL_UNSIGNED_SHORT_5_6_5", SWIG_From_int(static_cast< int >(0x8363)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAGMENT_SHADER", SWIG_From_int(static_cast< int >(0x8B30)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_SHADER", SWIG_From_int(static_cast< int >(0x8B31)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_VERTEX_ATTRIBS", SWIG_From_int(static_cast< int >(0x8869)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_VERTEX_UNIFORM_VECTORS", SWIG_From_int(static_cast< int >(0x8DFB)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_VARYING_VECTORS", SWIG_From_int(static_cast< int >(0x8DFC)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS", SWIG_From_int(static_cast< int >(0x8B4D)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS", SWIG_From_int(static_cast< int >(0x8B4C)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_TEXTURE_IMAGE_UNITS", SWIG_From_int(static_cast< int >(0x8872)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_FRAGMENT_UNIFORM_VECTORS", SWIG_From_int(static_cast< int >(0x8DFD)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SHADER_TYPE", SWIG_From_int(static_cast< int >(0x8B4F)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DELETE_STATUS", SWIG_From_int(static_cast< int >(0x8B80)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINK_STATUS", SWIG_From_int(static_cast< int >(0x8B82)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VALIDATE_STATUS", SWIG_From_int(static_cast< int >(0x8B83)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ATTACHED_SHADERS", SWIG_From_int(static_cast< int >(0x8B85)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ACTIVE_UNIFORMS", SWIG_From_int(static_cast< int >(0x8B86)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ACTIVE_UNIFORM_MAX_LENGTH", SWIG_From_int(static_cast< int >(0x8B87)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ACTIVE_ATTRIBUTES", SWIG_From_int(static_cast< int >(0x8B89)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ACTIVE_ATTRIBUTE_MAX_LENGTH", SWIG_From_int(static_cast< int >(0x8B8A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SHADING_LANGUAGE_VERSION", SWIG_From_int(static_cast< int >(0x8B8C)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CURRENT_PROGRAM", SWIG_From_int(static_cast< int >(0x8B8D)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NEVER", SWIG_From_int(static_cast< int >(0x0200)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LESS", SWIG_From_int(static_cast< int >(0x0201)));
  SWIG_Tcl_SetConstantObj(interp, "GL_EQUAL", SWIG_From_int(static_cast< int >(0x0202)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LEQUAL", SWIG_From_int(static_cast< int >(0x0203)));
  SWIG_Tcl_SetConstantObj(interp, "GL_GREATER", SWIG_From_int(static_cast< int >(0x0204)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NOTEQUAL", SWIG_From_int(static_cast< int >(0x0205)));
  SWIG_Tcl_SetConstantObj(interp, "GL_GEQUAL", SWIG_From_int(static_cast< int >(0x0206)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ALWAYS", SWIG_From_int(static_cast< int >(0x0207)));
  SWIG_Tcl_SetConstantObj(interp, "GL_KEEP", SWIG_From_int(static_cast< int >(0x1E00)));
  SWIG_Tcl_SetConstantObj(interp, "GL_REPLACE", SWIG_From_int(static_cast< int >(0x1E01)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INCR", SWIG_From_int(static_cast< int >(0x1E02)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DECR", SWIG_From_int(static_cast< int >(0x1E03)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INVERT", SWIG_From_int(static_cast< int >(0x150A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INCR_WRAP", SWIG_From_int(static_cast< int >(0x8507)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DECR_WRAP", SWIG_From_int(static_cast< int >(0x8508)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VENDOR", SWIG_From_int(static_cast< int >(0x1F00)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERER", SWIG_From_int(static_cast< int >(0x1F01)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERSION", SWIG_From_int(static_cast< int >(0x1F02)));
  SWIG_Tcl_SetConstantObj(interp, "GL_EXTENSIONS", SWIG_From_int(static_cast< int >(0x1F03)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NEAREST", SWIG_From_int(static_cast< int >(0x2600)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINEAR", SWIG_From_int(static_cast< int >(0x2601)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NEAREST_MIPMAP_NEAREST", SWIG_From_int(static_cast< int >(0x2700)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINEAR_MIPMAP_NEAREST", SWIG_From_int(static_cast< int >(0x2701)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NEAREST_MIPMAP_LINEAR", SWIG_From_int(static_cast< int >(0x2702)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LINEAR_MIPMAP_LINEAR", SWIG_From_int(static_cast< int >(0x2703)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_MAG_FILTER", SWIG_From_int(static_cast< int >(0x2800)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_MIN_FILTER", SWIG_From_int(static_cast< int >(0x2801)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_WRAP_S", SWIG_From_int(static_cast< int >(0x2802)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_WRAP_T", SWIG_From_int(static_cast< int >(0x2803)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE", SWIG_From_int(static_cast< int >(0x1702)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP", SWIG_From_int(static_cast< int >(0x8513)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_BINDING_CUBE_MAP", SWIG_From_int(static_cast< int >(0x8514)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP_POSITIVE_X", SWIG_From_int(static_cast< int >(0x8515)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP_NEGATIVE_X", SWIG_From_int(static_cast< int >(0x8516)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP_POSITIVE_Y", SWIG_From_int(static_cast< int >(0x8517)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Y", SWIG_From_int(static_cast< int >(0x8518)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP_POSITIVE_Z", SWIG_From_int(static_cast< int >(0x8519)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE_CUBE_MAP_NEGATIVE_Z", SWIG_From_int(static_cast< int >(0x851A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_CUBE_MAP_TEXTURE_SIZE", SWIG_From_int(static_cast< int >(0x851C)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE0", SWIG_From_int(static_cast< int >(0x84C0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE1", SWIG_From_int(static_cast< int >(0x84C1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE2", SWIG_From_int(static_cast< int >(0x84C2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE3", SWIG_From_int(static_cast< int >(0x84C3)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE4", SWIG_From_int(static_cast< int >(0x84C4)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE5", SWIG_From_int(static_cast< int >(0x84C5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE6", SWIG_From_int(static_cast< int >(0x84C6)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE7", SWIG_From_int(static_cast< int >(0x84C7)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE8", SWIG_From_int(static_cast< int >(0x84C8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE9", SWIG_From_int(static_cast< int >(0x84C9)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE10", SWIG_From_int(static_cast< int >(0x84CA)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE11", SWIG_From_int(static_cast< int >(0x84CB)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE12", SWIG_From_int(static_cast< int >(0x84CC)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE13", SWIG_From_int(static_cast< int >(0x84CD)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE14", SWIG_From_int(static_cast< int >(0x84CE)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE15", SWIG_From_int(static_cast< int >(0x84CF)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE16", SWIG_From_int(static_cast< int >(0x84D0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE17", SWIG_From_int(static_cast< int >(0x84D1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE18", SWIG_From_int(static_cast< int >(0x84D2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE19", SWIG_From_int(static_cast< int >(0x84D3)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE20", SWIG_From_int(static_cast< int >(0x84D4)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE21", SWIG_From_int(static_cast< int >(0x84D5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE22", SWIG_From_int(static_cast< int >(0x84D6)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE23", SWIG_From_int(static_cast< int >(0x84D7)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE24", SWIG_From_int(static_cast< int >(0x84D8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE25", SWIG_From_int(static_cast< int >(0x84D9)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE26", SWIG_From_int(static_cast< int >(0x84DA)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE27", SWIG_From_int(static_cast< int >(0x84DB)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE28", SWIG_From_int(static_cast< int >(0x84DC)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE29", SWIG_From_int(static_cast< int >(0x84DD)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE30", SWIG_From_int(static_cast< int >(0x84DE)));
  SWIG_Tcl_SetConstantObj(interp, "GL_TEXTURE31", SWIG_From_int(static_cast< int >(0x84DF)));
  SWIG_Tcl_SetConstantObj(interp, "GL_ACTIVE_TEXTURE", SWIG_From_int(static_cast< int >(0x84E0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_REPEAT", SWIG_From_int(static_cast< int >(0x2901)));
  SWIG_Tcl_SetConstantObj(interp, "GL_CLAMP_TO_EDGE", SWIG_From_int(static_cast< int >(0x812F)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MIRRORED_REPEAT", SWIG_From_int(static_cast< int >(0x8370)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT_VEC2", SWIG_From_int(static_cast< int >(0x8B50)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT_VEC3", SWIG_From_int(static_cast< int >(0x8B51)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT_VEC4", SWIG_From_int(static_cast< int >(0x8B52)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INT_VEC2", SWIG_From_int(static_cast< int >(0x8B53)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INT_VEC3", SWIG_From_int(static_cast< int >(0x8B54)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INT_VEC4", SWIG_From_int(static_cast< int >(0x8B55)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BOOL", SWIG_From_int(static_cast< int >(0x8B56)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BOOL_VEC2", SWIG_From_int(static_cast< int >(0x8B57)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BOOL_VEC3", SWIG_From_int(static_cast< int >(0x8B58)));
  SWIG_Tcl_SetConstantObj(interp, "GL_BOOL_VEC4", SWIG_From_int(static_cast< int >(0x8B59)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT_MAT2", SWIG_From_int(static_cast< int >(0x8B5A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT_MAT3", SWIG_From_int(static_cast< int >(0x8B5B)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FLOAT_MAT4", SWIG_From_int(static_cast< int >(0x8B5C)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLER_2D", SWIG_From_int(static_cast< int >(0x8B5E)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SAMPLER_CUBE", SWIG_From_int(static_cast< int >(0x8B60)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_ENABLED", SWIG_From_int(static_cast< int >(0x8622)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_SIZE", SWIG_From_int(static_cast< int >(0x8623)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_STRIDE", SWIG_From_int(static_cast< int >(0x8624)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_TYPE", SWIG_From_int(static_cast< int >(0x8625)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_NORMALIZED", SWIG_From_int(static_cast< int >(0x886A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_POINTER", SWIG_From_int(static_cast< int >(0x8645)));
  SWIG_Tcl_SetConstantObj(interp, "GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING", SWIG_From_int(static_cast< int >(0x889F)));
  SWIG_Tcl_SetConstantObj(interp, "GL_IMPLEMENTATION_COLOR_READ_TYPE", SWIG_From_int(static_cast< int >(0x8B9A)));
  SWIG_Tcl_SetConstantObj(interp, "GL_IMPLEMENTATION_COLOR_READ_FORMAT", SWIG_From_int(static_cast< int >(0x8B9B)));
  SWIG_Tcl_SetConstantObj(interp, "GL_COMPILE_STATUS", SWIG_From_int(static_cast< int >(0x8B81)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INFO_LOG_LENGTH", SWIG_From_int(static_cast< int >(0x8B84)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SHADER_SOURCE_LENGTH", SWIG_From_int(static_cast< int >(0x8B88)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SHADER_COMPILER", SWIG_From_int(static_cast< int >(0x8DFA)));
  SWIG_Tcl_SetConstantObj(interp, "GL_SHADER_BINARY_FORMATS", SWIG_From_int(static_cast< int >(0x8DF8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NUM_SHADER_BINARY_FORMATS", SWIG_From_int(static_cast< int >(0x8DF9)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LOW_FLOAT", SWIG_From_int(static_cast< int >(0x8DF0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MEDIUM_FLOAT", SWIG_From_int(static_cast< int >(0x8DF1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_HIGH_FLOAT", SWIG_From_int(static_cast< int >(0x8DF2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_LOW_INT", SWIG_From_int(static_cast< int >(0x8DF3)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MEDIUM_INT", SWIG_From_int(static_cast< int >(0x8DF4)));
  SWIG_Tcl_SetConstantObj(interp, "GL_HIGH_INT", SWIG_From_int(static_cast< int >(0x8DF5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER", SWIG_From_int(static_cast< int >(0x8D40)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER", SWIG_From_int(static_cast< int >(0x8D41)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RGBA4", SWIG_From_int(static_cast< int >(0x8056)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RGB5_A1", SWIG_From_int(static_cast< int >(0x8057)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RGB565", SWIG_From_int(static_cast< int >(0x8D62)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_COMPONENT16", SWIG_From_int(static_cast< int >(0x81A5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_INDEX8", SWIG_From_int(static_cast< int >(0x8D48)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_WIDTH", SWIG_From_int(static_cast< int >(0x8D42)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_HEIGHT", SWIG_From_int(static_cast< int >(0x8D43)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_INTERNAL_FORMAT", SWIG_From_int(static_cast< int >(0x8D44)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_RED_SIZE", SWIG_From_int(static_cast< int >(0x8D50)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_GREEN_SIZE", SWIG_From_int(static_cast< int >(0x8D51)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_BLUE_SIZE", SWIG_From_int(static_cast< int >(0x8D52)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_ALPHA_SIZE", SWIG_From_int(static_cast< int >(0x8D53)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_DEPTH_SIZE", SWIG_From_int(static_cast< int >(0x8D54)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_STENCIL_SIZE", SWIG_From_int(static_cast< int >(0x8D55)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE", SWIG_From_int(static_cast< int >(0x8CD0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME", SWIG_From_int(static_cast< int >(0x8CD1)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL", SWIG_From_int(static_cast< int >(0x8CD2)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE", SWIG_From_int(static_cast< int >(0x8CD3)));
  SWIG_Tcl_SetConstantObj(interp, "GL_COLOR_ATTACHMENT0", SWIG_From_int(static_cast< int >(0x8CE0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_DEPTH_ATTACHMENT", SWIG_From_int(static_cast< int >(0x8D00)));
  SWIG_Tcl_SetConstantObj(interp, "GL_STENCIL_ATTACHMENT", SWIG_From_int(static_cast< int >(0x8D20)));
  SWIG_Tcl_SetConstantObj(interp, "GL_NONE", SWIG_From_int(static_cast< int >(0)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_COMPLETE", SWIG_From_int(static_cast< int >(0x8CD5)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT", SWIG_From_int(static_cast< int >(0x8CD6)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT", SWIG_From_int(static_cast< int >(0x8CD7)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS", SWIG_From_int(static_cast< int >(0x8CD9)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_UNSUPPORTED", SWIG_From_int(static_cast< int >(0x8CDD)));
  SWIG_Tcl_SetConstantObj(interp, "GL_FRAMEBUFFER_BINDING", SWIG_From_int(static_cast< int >(0x8CA6)));
  SWIG_Tcl_SetConstantObj(interp, "GL_RENDERBUFFER_BINDING", SWIG_From_int(static_cast< int >(0x8CA7)));
  SWIG_Tcl_SetConstantObj(interp, "GL_MAX_RENDERBUFFER_SIZE", SWIG_From_int(static_cast< int >(0x84E8)));
  SWIG_Tcl_SetConstantObj(interp, "GL_INVALID_FRAMEBUFFER_OPERATION", SWIG_From_int(static_cast< int >(0x0506)));
  return TCL_OK;
}
SWIGEXPORT int Gl_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

